###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:23 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\util\loggingcent #
#                       ral.cpp                                               #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\util\loggingcent #
#                       ral.cpp -lCN F:\stuff\rusefi_sourceforge\firmware\iar #
#                       \Debug\List\ -lA F:\stuff\rusefi_sourceforge\firmware #
#                       \iar\Debug\List\ -o F:\stuff\rusefi_sourceforge\firmw #
#                       are\iar\Debug\Obj\ --no_cse --no_unroll --no_inline   #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\l #
#                       oggingcentral.lst                                     #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\lo #
#                       ggingcentral.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\util\loggingcentral.cpp
      1          /**
      2           * @file	loggingcentral.cpp
      3           *
      4           * @date Mar 8, 2015
      5           * @author Andrey Belomutskiy, (c) 2012-2015
      6           */
      7          
      8          #include "main.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x0032             MOVS     R2,R6
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memcpy
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
      9          #include "efilib.h"
     10          
     11          #if ! EFI_UNIT_TEST || defined(__DOXYGEN__)
     12          
     13          typedef char log_buf_t[DL_OUTPUT_BUFFER];
     14          
     15          /**
     16           * we need to leave a byte for zero terminator, also two bytes for the \r\n in
     17           * printWithLength, also couple of bytes just in case
     18           */
     19          #define MAX_DL_CAPACITY (DL_OUTPUT_BUFFER - 5)
     20          
     21          /**
     22           * This is the buffer into which all the data providers write
     23           */

   \                                 In section .bss, align 4
     24          static char *accumulationBuffer;
   \                     accumulationBuffer:
   \   00000000                      DS8 4
     25          

   \                                 In section .ccm, align 4
     26          static log_buf_t pendingBuffers0 CCM_OPTIONAL;
   \                     pendingBuffers0:
   \   00000000                      DS8 8000

   \                                 In section .bss, align 4
     27          static log_buf_t pendingBuffers1;
   \                     pendingBuffers1:
   \   00000000                      DS8 8000
     28          
     29          /**
     30           * amount of data accumulated so far
     31           */

   \                                 In section .bss, align 4
     32          static uint32_t accumulatedSize;
   \                     accumulatedSize:
   \   00000000                      DS8 4
     33          
     34          /**
     35           * We copy all the pending data into this buffer once we are ready to push it out
     36           */

   \                                 In section .bss, align 4
     37          static char * outputBuffer;
   \                     outputBuffer:
   \   00000000                      DS8 4
     38          
     39          /**
     40           * This method appends the content of this thread-local logger into the global buffer
     41           * of logging content
     42           */

   \                                 In section .text, align 2, keep-with-next
     43          void scheduleLogging(Logging *logging) {
   \                     scheduleLogging:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     44          	// this could be done without locking
     45          	int newLength = efiStrlen(logging->buffer);
   \   00000004   0x6AE0             LDR      R0,[R4, #+44]
   \   00000006   0x.... 0x....      BL       efiStrlen
   \   0000000A   0x0005             MOVS     R5,R0
     46          
     47          	bool alreadyLocked = lockOutputBuffer();
   \   0000000C   0x.... 0x....      BL       lockOutputBuffer
   \   00000010   0x0006             MOVS     R6,R0
     48          	if (accumulatedSize + newLength >= MAX_DL_CAPACITY) {
   \   00000012   0x....             LDR.N    R0,??DataTable3
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x1828             ADDS     R0,R5,R0
   \   00000018   0xF641 0x713B      MOVW     R1,#+7995
   \   0000001C   0x4288             CMP      R0,R1
   \   0000001E   0xD308             BCC.N    ??scheduleLogging_0
     49          		/**
     50          		 * if no one is consuming the data we have to drop it
     51          		 * this happens in case of serial-over-USB, todo: find a better solution?
     52          		 */
     53          		if (!alreadyLocked) {
   \   00000020   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000022   0x2E00             CMP      R6,#+0
   \   00000024   0xD101             BNE.N    ??scheduleLogging_1
     54          			unlockOutputBuffer();
   \   00000026   0x.... 0x....      BL       unlockOutputBuffer
     55          		}
     56          		resetLogging(logging);
   \                     ??scheduleLogging_1:
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x.... 0x....      BL       resetLogging
     57          		return;
   \   00000030   0xE015             B.N      ??scheduleLogging_2
     58          	}
     59          	// memcpy is faster then strcpy because it is not looking for line terminator
     60          	memcpy(accumulationBuffer + accumulatedSize, logging->buffer, newLength + 1);
   \                     ??scheduleLogging_0:
   \   00000032   0x1C6A             ADDS     R2,R5,#+1
   \   00000034   0x6AE1             LDR      R1,[R4, #+44]
   \   00000036   0x....             LDR.N    R0,??DataTable3
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x....             LDR.N    R3,??DataTable3_1
   \   0000003C   0x681B             LDR      R3,[R3, #+0]
   \   0000003E   0x18C0             ADDS     R0,R0,R3
   \   00000040   0x.... 0x....      BL       memcpy
     61          	accumulatedSize += newLength;
   \   00000044   0x....             LDR.N    R0,??DataTable3
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0x1828             ADDS     R0,R5,R0
   \   0000004A   0x....             LDR.N    R1,??DataTable3
   \   0000004C   0x6008             STR      R0,[R1, #+0]
     62          	if (!alreadyLocked) {
   \   0000004E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000050   0x2E00             CMP      R6,#+0
   \   00000052   0xD101             BNE.N    ??scheduleLogging_3
     63          		unlockOutputBuffer();
   \   00000054   0x.... 0x....      BL       unlockOutputBuffer
     64          	}
     65          	resetLogging(logging);
   \                     ??scheduleLogging_3:
   \   00000058   0x0020             MOVS     R0,R4
   \   0000005A   0x.... 0x....      BL       resetLogging
     66          }
   \                     ??scheduleLogging_2:
   \   0000005E   0xBD70             POP      {R4-R6,PC}       ;; return
     67          
     68          /**
     69           * this method should always be invoked from the same thread!
     70           */

   \                                 In section .text, align 2, keep-with-next
     71          char * swapOutputBuffers(int *actualOutputBufferSize) {
   \                     _Z17swapOutputBuffersPi:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     72          	int expectedOutputSize;
     73          	{ // start of critical section
     74          		lockOutputBuffer();
   \   00000004   0x.... 0x....      BL       lockOutputBuffer
     75          		/**
     76          		 * we cannot output under syslock, we simply rotate which buffer is which
     77          		 */
     78          		char *temp = outputBuffer;
   \   00000008   0x....             LDR.N    R0,??DataTable3_2
   \   0000000A   0x6806             LDR      R6,[R0, #+0]
     79          
     80          #if EFI_ENABLE_ASSERTS
     81          		expectedOutputSize = accumulatedSize;
   \   0000000C   0x....             LDR.N    R0,??DataTable3
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x0005             MOVS     R5,R0
     82          #endif /* EFI_ENABLE_ASSERTS */
     83          		outputBuffer = accumulationBuffer;
   \   00000012   0x....             LDR.N    R0,??DataTable3_2
   \   00000014   0x....             LDR.N    R1,??DataTable3_1
   \   00000016   0x6809             LDR      R1,[R1, #+0]
   \   00000018   0x6001             STR      R1,[R0, #+0]
     84          
     85          		accumulationBuffer = temp;
   \   0000001A   0x....             LDR.N    R0,??DataTable3_1
   \   0000001C   0x6006             STR      R6,[R0, #+0]
     86          		accumulatedSize = 0;
   \   0000001E   0x....             LDR.N    R0,??DataTable3
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x6001             STR      R1,[R0, #+0]
     87          		accumulationBuffer[0] = 0;
   \   00000024   0x....             LDR.N    R0,??DataTable3_1
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x7001             STRB     R1,[R0, #+0]
     88          
     89          		unlockOutputBuffer();
   \   0000002C   0x.... 0x....      BL       unlockOutputBuffer
     90          	} // end of critical section
     91          
     92          	*actualOutputBufferSize = efiStrlen(outputBuffer);
   \   00000030   0x....             LDR.N    R0,??DataTable3_2
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x.... 0x....      BL       efiStrlen
   \   00000038   0x6020             STR      R0,[R4, #+0]
     93          	efiAssert(*actualOutputBufferSize == expectedOutputSize, "out constr", NULL);
   \   0000003A   0x6820             LDR      R0,[R4, #+0]
   \   0000003C   0x42A8             CMP      R0,R5
   \   0000003E   0xD004             BEQ.N    ??swapOutputBuffers_0
   \   00000040   0x....             LDR.N    R0,??DataTable3_3
   \   00000042   0x.... 0x....      BL       firmwareError
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0xE001             B.N      ??swapOutputBuffers_1
     94          	return outputBuffer;
   \                     ??swapOutputBuffers_0:
   \   0000004A   0x....             LDR.N    R0,??DataTable3_2
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \                     ??swapOutputBuffers_1:
   \   0000004E   0xBD70             POP      {R4-R6,PC}       ;; return
     95          }
     96          
     97          extern bool_t consoleInBinaryMode;
     98          
     99          /**
    100           * This method actually sends all the pending data to the communication layer.
    101           * This method is invoked by the main thread - that's the only thread which should be sending
    102           * actual data to console in order to avoid concurrent access to serial hardware.
    103           */

   \                                 In section .text, align 2, keep-with-next
    104          void printPending(void) {
   \                     printPending:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    105          	if (consoleInBinaryMode)
   \   00000004   0x....             LDR.N    R0,??DataTable3_4
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD109             BNE.N    ??printPending_0
    106          		return;
    107          	int actualOutputBufferSize;
    108          	char *output = swapOutputBuffers(&actualOutputBufferSize);
   \                     ??printPending_1:
   \   0000000C   0xA800             ADD      R0,SP,#+0
   \   0000000E   0x.... 0x....      BL       _Z17swapOutputBuffersPi
   \   00000012   0x0004             MOVS     R4,R0
    109          
    110          	if (actualOutputBufferSize > 0) {
   \   00000014   0x9800             LDR      R0,[SP, #+0]
   \   00000016   0x2801             CMP      R0,#+1
   \   00000018   0xDB02             BLT.N    ??printPending_2
    111          		printWithLength(output);
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       printWithLength
    112          	}
    113          }
   \                     ??printPending_2:
   \                     ??printPending_0:
   \   00000020   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    114          

   \                                 In section .text, align 2, keep-with-next
    115          void initLoggingCentral(void) {
    116          	pendingBuffers0[0] = 0;
   \                     _Z18initLoggingCentralv:
   \   00000000   0x....             LDR.N    R0,??DataTable3_5
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x7001             STRB     R1,[R0, #+0]
    117          	pendingBuffers1[0] = 0;
   \   00000006   0x....             LDR.N    R0,??DataTable3_6
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x7001             STRB     R1,[R0, #+0]
    118          	accumulationBuffer = pendingBuffers0;
   \   0000000C   0x....             LDR.N    R0,??DataTable3_1
   \   0000000E   0x....             LDR.N    R1,??DataTable3_5
   \   00000010   0x6001             STR      R1,[R0, #+0]
    119          	outputBuffer = pendingBuffers1;
   \   00000012   0x....             LDR.N    R0,??DataTable3_2
   \   00000014   0x....             LDR.N    R1,??DataTable3_6
   \   00000016   0x6001             STR      R1,[R0, #+0]
    120          	accumulatedSize = 0;
   \   00000018   0x....             LDR.N    R0,??DataTable3
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x6001             STR      R1,[R0, #+0]
    121          }
   \   0000001E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     accumulatedSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     accumulationBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     outputBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     `?<Constant "out constr">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     consoleInBinaryMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     pendingBuffers0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     pendingBuffers1

   \                                 In section .rodata, align 4
   \                     `?<Constant "out constr">`:
   \   00000000   0x6F 0x75          DC8 "out constr"
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x6E 0x73    
   \              0x74 0x72    
   \              0x00         
   \   0000000B   0x00               DC8 0
    122          
    123          #endif /* EFI_UNIT_TEST */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   initLoggingCentral()
      16   memcpy
        16   -> __aeabi_memcpy
      16   printPending
        16   -> printWithLength
        16   -> swapOutputBuffers(int *)
      16   scheduleLogging
        16   -> efiStrlen
        16   -> lockOutputBuffer
        16   -> memcpy
        16   -> resetLogging
        16   -> unlockOutputBuffer
      16   swapOutputBuffers(int *)
        16   -> efiStrlen
        16   -> firmwareError
        16   -> lockOutputBuffer
        16   -> unlockOutputBuffer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "out constr">
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  accumulatedSize
       4  accumulationBuffer
      32  initLoggingCentral()
      22  memcpy
       4  outputBuffer
    8000  pendingBuffers0
    8000  pendingBuffers1
      34  printPending
      96  scheduleLogging
      80  swapOutputBuffers(int *)

 
 8 012 bytes in section .bss
 8 000 bytes in section .ccm
    12 bytes in section .rodata
   292 bytes in section .text
 
    270 bytes of CODE  memory (+ 22 bytes shared)
     12 bytes of CONST memory
 16 012 bytes of DATA  memory

Errors: none
Warnings: none
