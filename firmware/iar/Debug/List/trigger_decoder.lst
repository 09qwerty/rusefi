###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:00 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\trig #
#                       ger\trigger_decoder.cpp                               #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\trig #
#                       ger\trigger_decoder.cpp -lCN                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\  #
#                       -lA F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Li #
#                       st\ -o F:\stuff\rusefi_sourceforge\firmware\iar\Debug #
#                       \Obj\ --no_cse --no_unroll --no_inline                #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\t #
#                       rigger_decoder.lst                                    #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\tr #
#                       igger_decoder.o                                       #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\trigger\trigger_decoder.cpp
      1          /**
      2           * @file	trigger_decoder.cpp
      3           *
      4           * @date Dec 24, 2013
      5           * @author Andrey Belomutskiy, (c) 2012-2015
      6           *
      7           * This file is part of rusEfi - see http://rusefi.com
      8           *
      9           * rusEfi is free software; you can redistribute it and/or modify it under the terms of
     10           * the GNU General Public License as published by the Free Software Foundation; either
     11           * version 3 of the License, or (at your option) any later version.
     12           *
     13           * rusEfi is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
     14           * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     15           * GNU General Public License for more details.
     16           *
     17           * You should have received a copy of the GNU General Public License along with this program.
     18           * If not, see <http://www.gnu.org/licenses/>.
     19           */
     20          
     21          #include "main.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x0032             MOVS     R2,R6
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memcpy
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x002A             MOVS     R2,R5
   \   0000000A   0x0031             MOVS     R1,R6
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memset
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
     22          
     23          #if EFI_SHAFT_POSITION_INPUT || defined(__DOXYGEN__)
     24          
     25          #include "obd_error_codes.h"
     26          #include "trigger_decoder.h"
     27          #include "cyclic_buffer.h"

   \                                 In section .text, align 2
   \   __code __interwork __softfp cyclic_buffer<int>::cyclic_buffer()
   \                     _ZN13cyclic_bufferIiEC1Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x2140             MOVS     R1,#+64
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       _ZN13cyclic_bufferIiE5baseCEi
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void cyclic_buffer<int>::baseC(int)
   \                     _ZN13cyclic_bufferIiE5baseCEi:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF8C4 0x0100      STR      R0,[R4, #+256]
   \   0000000C   0x0029             MOVS     R1,R5
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       _ZN13cyclic_bufferIiE7setSizeEi
   \   00000014   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2
   \   __code __interwork __softfp cyclic_buffer<int>::~cyclic_buffer()
   \                     _ZN13cyclic_bufferIiED1Ev:
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void cyclic_buffer<int>::add(int)
   \                     _ZN13cyclic_bufferIiE3addEi:
   \   00000000   0xF8D0 0x2100      LDR      R2,[R0, #+256]
   \   00000004   0x1C52             ADDS     R2,R2,#+1
   \   00000006   0xF8C0 0x2100      STR      R2,[R0, #+256]
   \   0000000A   0xF8D0 0x2100      LDR      R2,[R0, #+256]
   \   0000000E   0xF8D0 0x3108      LDR      R3,[R0, #+264]
   \   00000012   0x429A             CMP      R2,R3
   \   00000014   0xD102             BNE.N    ??add_0
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0xF8C0 0x2100      STR      R2,[R0, #+256]
   \                     ??add_0:
   \   0000001C   0xF8D0 0x2100      LDR      R2,[R0, #+256]
   \   00000020   0xF840 0x1022      STR      R1,[R0, R2, LSL #+2]
   \   00000024   0xF8D0 0x2104      LDR      R2,[R0, #+260]
   \   00000028   0x1C52             ADDS     R2,R2,#+1
   \   0000002A   0xF8C0 0x2104      STR      R2,[R0, #+260]
   \   0000002E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void cyclic_buffer<int>::setSize(int)
   \                     _ZN13cyclic_bufferIiE7setSizeEi:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       _ZN13cyclic_bufferIiE5clearEv
   \   0000000C   0x2D40             CMP      R5,#+64
   \   0000000E   0xDA01             BGE.N    ??setSize_0
   \   00000010   0x0028             MOVS     R0,R5
   \   00000012   0xE000             B.N      ??setSize_1
   \                     ??setSize_0:
   \   00000014   0x2040             MOVS     R0,#+64
   \                     ??setSize_1:
   \   00000016   0xF8C4 0x0108      STR      R0,[R4, #+264]
   \   0000001A   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp int cyclic_buffer<int>::sum(int)
   \                     _ZN13cyclic_bufferIiE3sumEi:
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x0002             MOVS     R2,R0
   \   00000004   0xF8D2 0x0104      LDR      R0,[R2, #+260]
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xDA02             BGE.N    ??sum_0
   \   0000000C   0xF8D2 0x0104      LDR      R0,[R2, #+260]
   \   00000010   0x0001             MOVS     R1,R0
   \                     ??sum_0:
   \   00000012   0xF8D2 0x3100      LDR      R3,[R2, #+256]
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x2400             MOVS     R4,#+0
   \                     ??sum_1:
   \   0000001A   0x428C             CMP      R4,R1
   \   0000001C   0xDA0B             BGE.N    ??sum_2
   \   0000001E   0x1B1D             SUBS     R5,R3,R4
   \                     ??sum_3:
   \   00000020   0x2D00             CMP      R5,#+0
   \   00000022   0xD503             BPL.N    ??sum_4
   \   00000024   0xF8D2 0x6108      LDR      R6,[R2, #+264]
   \   00000028   0x1975             ADDS     R5,R6,R5
   \   0000002A   0xE7F9             B.N      ??sum_3
   \                     ??sum_4:
   \   0000002C   0xF852 0x5025      LDR      R5,[R2, R5, LSL #+2]
   \   00000030   0x1828             ADDS     R0,R5,R0
   \   00000032   0x1C64             ADDS     R4,R4,#+1
   \   00000034   0xE7F1             B.N      ??sum_1
   \                     ??sum_2:
   \   00000036   0xBC70             POP      {R4-R6}
   \   00000038   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void cyclic_buffer<int>::clear()
   \                     _ZN13cyclic_bufferIiE5clearEv:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0xF44F 0x7280      MOV      R2,#+256
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       memset
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF8C4 0x0104      STR      R0,[R4, #+260]
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF8C4 0x0104      STR      R0,[R4, #+260]
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
     28          #include "trigger_mazda.h"
     29          #include "trigger_chrysler.h"
     30          #include "trigger_gm.h"
     31          #include "trigger_bmw.h"
     32          #include "trigger_mitsubishi.h"
     33          #include "auto_generated_enums.h"
     34          #include "trigger_structure.h"
     35          #include "efiGpio.h"
     36          #include "engine.h"
     37          

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine:
   \   00000000   0xB580             PUSH     {R7,LR}
     38          static OutputPin triggerDecoderErrorPin;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   00000006   0x.... 0x....      BL       _ZN9OutputPinC1Ev
     39          
     40          EXTERN_ENGINE
     41          ;
     42          
     43          // todo: better name for this constant
     44          #define HELPER_PERIOD 100000
     45          
     46          static cyclic_buffer<int> errorDetection;
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable14_2
   \   0000000E   0x.... 0x....      BL       _ZN13cyclic_bufferIiEC1Ev
   \   00000012   0x.... 0x....      LDR.W    R2,??DataTable14_3
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable14_4
   \   0000001A   0x.... 0x....      BL       __aeabi_atexit
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     triggerDecoderErrorPin:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
   \                     errorDetection:
   \   00000000                      DS8 268
     47          
     48          #if ! EFI_PROD_CODE
     49          bool printTriggerDebug = false;
     50          float actualSynchGap;
     51          #endif /* ! EFI_PROD_CODE */
     52          

   \                                 In section .bss, align 4
     53          static Logging * logger;
   \                     logger:
   \   00000000                      DS8 4
     54          

   \                                 In section .data, align 8
     55          efitick_t lastDecodingErrorTime = US2NT(-10000000LL);
   \                     lastDecodingErrorTime:
   \   00000000   0x9BDD3C00         DC32 2614967296, 4294967295
   \              0xFFFFFFFF   
     56          
     57          /**
     58           * @return TRUE is something is wrong with trigger decoding
     59           */

   \                                 In section .text, align 2, keep-with-next
     60          bool_t isTriggerDecoderError(void) {
   \                     _Z21isTriggerDecoderErrorv:
   \   00000000   0xB580             PUSH     {R7,LR}
     61          	return errorDetection.sum(6) > 4;
   \   00000002   0x2106             MOVS     R1,#+6
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable14_2
   \   00000008   0x.... 0x....      BL       _ZN13cyclic_bufferIiE3sumEi
   \   0000000C   0x2805             CMP      R0,#+5
   \   0000000E   0xDB01             BLT.N    ??isTriggerDecoderError_0
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xE000             B.N      ??isTriggerDecoderError_1
   \                     ??isTriggerDecoderError_0:
   \   00000014   0x2000             MOVS     R0,#+0
   \                     ??isTriggerDecoderError_1:
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0xBD02             POP      {R1,PC}          ;; return
     62          }
     63          

   \                                 In section .text, align 4, keep-with-next
     64          float TriggerState::getTriggerDutyCycle(int index) {
   \                     _ZN12TriggerState19getTriggerDutyCycleEi:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0x000C             MOVS     R4,R1
     65          	float time = prevTotalTime[index];
   \   00000008   0xEB10 0x0184      ADDS     R1,R0,R4, LSL #+2
   \   0000000C   0xED91 0x0A09      VLDR     S0,[R1, #+36]
   \   00000010   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
     66          
     67          	return 100 * time / prevCycleDuration;
   \   00000014   0xEDDF 0x....      VLDR.W   S1,??DataTable2  ;; 0x42c80000
   \   00000018   0xEE20 0x8A20      VMUL.F32 S16,S0,S1
   \   0000001C   0xE9D0 0x232A      LDRD     R2,R3,[R0, #+168]
   \   00000020   0x0010             MOVS     R0,R2
   \   00000022   0x0019             MOVS     R1,R3
   \   00000024   0x.... 0x....      BL       __aeabi_l2f
   \   00000028   0xEE00 0x0A10      VMOV     S0,R0
   \   0000002C   0xEE88 0x0A00      VDIV.F32 S0,S16,S0
   \   00000030   0xECBD 0x8B02      VPOP     {D8}
   \   00000034   0xBD10             POP      {R4,PC}          ;; return
     68          }
     69          

   \                                 In section .data, align 4
     70          static trigger_wheel_e eventIndex[6] = { T_PRIMARY, T_PRIMARY, T_SECONDARY, T_SECONDARY, T_CHANNEL_3, T_CHANNEL_3 };
   \                     eventIndex:
   \   00000000   0x00 0x00          DC8 0, 0, 1, 1, 2, 2, 0, 0
   \              0x01 0x01    
   \              0x02 0x02    
   \              0x00 0x00    
     71          static trigger_value_e eventType[6] = { TV_LOW, TV_HIGH, TV_LOW, TV_HIGH, TV_LOW, TV_HIGH };
     72          
     73          #define getCurrentGapDuration(nowNt) \
     74          	(isFirstEvent ? 0 : (nowNt) - toothed_previous_time)
     75          
     76          #define nextTriggerEvent() \
     77           { \
     78          	efitime_t prevTime = timeOfPreviousEventNt[triggerWheel]; \
     79          	if (prevTime != 0) { \
     80          		/* even event - apply the value*/ \
     81          		totalTimeNt[triggerWheel] += (nowNt - prevTime); \
     82          		timeOfPreviousEventNt[triggerWheel] = 0; \
     83          	} else { \
     84          		/* odd event - start accumulation */ \
     85          		timeOfPreviousEventNt[triggerWheel] = nowNt; \
     86          	} \
     87          	if (engineConfiguration->useOnlyFrontForTrigger) {current_index++;} \
     88          	current_index++; \
     89          }
     90          
     91          #define nextRevolution() { \
     92          	if (cycleCallback != NULL) { \
     93          		cycleCallback(this); \
     94          	} \
     95          	memcpy(prevTotalTime, totalTimeNt, sizeof(prevTotalTime)); \
     96          	prevCycleDuration = nowNt - startOfCycleNt; \
     97          	startOfCycleNt = nowNt; \
     98          	clear(); \
     99          	totalRevolutionCounter++; \
    100          	runningRevolutionCounter++; \
    101          	totalEventCountBase += TRIGGER_SHAPE(size); \
    102          }
    103          
    104          /**
    105           * @brief Trigger decoding happens here
    106           * This method changes the state of trigger_state_s data structure according to the trigger event
    107           */

   \                                 In section .text, align 2, keep-with-next
    108          void TriggerState::decodeTriggerEvent(trigger_event_e const signal, efitime_t nowNt DECLARE_ENGINE_PARAMETER_S) {
   \                     _ZN12TriggerState18decodeTriggerEventE15trigger_event_ex:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0xED2D 0x8B02      VPUSH    {D8}
   \   00000008   0xB086             SUB      SP,SP,#+24
   \   0000000A   0x0006             MOVS     R6,R0
   \   0000000C   0x4688             MOV      R8,R1
   \   0000000E   0x0014             MOVS     R4,R2
   \   00000010   0x001D             MOVS     R5,R3
    109          	efiAssertVoid(signal <= SHAFT_3RD_UP, "unexpected signal");
   \   00000012   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000016   0xF1B8 0x0F06      CMP      R8,#+6
   \   0000001A   0xDB04             BLT.N    ??decodeTriggerEvent_0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable14_5
   \   00000020   0x.... 0x....      BL       firmwareError
   \   00000024   0xE240             B.N      ??decodeTriggerEvent_1
    110          
    111          	trigger_wheel_e triggerWheel = eventIndex[signal];
   \                     ??decodeTriggerEvent_0:
   \   00000026   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable14_6
   \   0000002E   0xF818 0x7000      LDRB     R7,[R8, R0]
    112          
    113          	if (!engineConfiguration->useOnlyFrontForTrigger && curSignal == prevSignal) {
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable14_7
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0xF890 0x05E5      LDRB     R0,[R0, #+1509]
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0x0980             LSRS     R0,R0,#+6
   \   00000040   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD108             BNE.N    ??decodeTriggerEvent_2
   \   00000048   0xF896 0x0060      LDRB     R0,[R6, #+96]
   \   0000004C   0xF896 0x1061      LDRB     R1,[R6, #+97]
   \   00000050   0x4288             CMP      R0,R1
   \   00000052   0xD102             BNE.N    ??decodeTriggerEvent_2
    114          		orderingErrorCounter++;
   \   00000054   0x6C70             LDR      R0,[R6, #+68]
   \   00000056   0x1C40             ADDS     R0,R0,#+1
   \   00000058   0x6470             STR      R0,[R6, #+68]
    115          	}
    116          
    117          	prevSignal = curSignal;
   \                     ??decodeTriggerEvent_2:
   \   0000005A   0xF896 0x0060      LDRB     R0,[R6, #+96]
   \   0000005E   0xF886 0x0061      STRB     R0,[R6, #+97]
    118          	curSignal = signal;
   \   00000062   0xF886 0x8060      STRB     R8,[R6, #+96]
    119          
    120          	eventCount[triggerWheel]++;
   \   00000066   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000068   0xEB16 0x0087      ADDS     R0,R6,R7, LSL #+2
   \   0000006C   0x6D40             LDR      R0,[R0, #+84]
   \   0000006E   0x1C40             ADDS     R0,R0,#+1
   \   00000070   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000072   0xEB16 0x0187      ADDS     R1,R6,R7, LSL #+2
   \   00000076   0x6548             STR      R0,[R1, #+84]
    121          	eventCountExt[signal]++;
   \   00000078   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000007C   0xEB16 0x0088      ADDS     R0,R6,R8, LSL #+2
   \   00000080   0x6E40             LDR      R0,[R0, #+100]
   \   00000082   0x1C40             ADDS     R0,R0,#+1
   \   00000084   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000088   0xEB16 0x0188      ADDS     R1,R6,R8, LSL #+2
   \   0000008C   0x6648             STR      R0,[R1, #+100]
    122          
    123          	efitime_t currentDurationLong = getCurrentGapDuration(nowNt);
   \   0000008E   0xF896 0x00A4      LDRB     R0,[R6, #+164]
   \   00000092   0x2800             CMP      R0,#+0
   \   00000094   0xD004             BEQ.N    ??decodeTriggerEvent_3
   \   00000096   0xF05F 0x0A00      MOVS     R10,#+0
   \   0000009A   0xF05F 0x0B00      MOVS     R11,#+0
   \   0000009E   0xE005             B.N      ??decodeTriggerEvent_4
   \                     ??decodeTriggerEvent_3:
   \   000000A0   0xE9D6 0x0104      LDRD     R0,R1,[R6, #+16]
   \   000000A4   0xEBB4 0x0A00      SUBS     R10,R4,R0
   \   000000A8   0xEB75 0x0B01      SBCS     R11,R5,R1
    124          
    125          	/**
    126          	 * For performance reasons, we want to work with 32 bit values. If there has been more then
    127          	 * 10 seconds since previous trigger event we do not really care.
    128          	 */
    129          	currentDuration =
    130          			currentDurationLong > 10 * US2NT(US_PER_SECOND_LL) ? 10 * US2NT(US_PER_SECOND_LL) : currentDurationLong;
   \                     ??decodeTriggerEvent_4:
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable14_8  ;; 0x6422c401
   \   000000B0   0x2100             MOVS     R1,#+0
   \   000000B2   0x458B             CMP      R11,R1
   \   000000B4   0xDB05             BLT.N    ??decodeTriggerEvent_5
   \   000000B6   0xDC01             BGT.N    ??decodeTriggerEvent_6
   \   000000B8   0x4582             CMP      R10,R0
   \   000000BA   0xD302             BCC.N    ??decodeTriggerEvent_5
   \                     ??decodeTriggerEvent_6:
   \   000000BC   0x.... 0x....      LDR.W    R0,??DataTable14_9  ;; 0x6422c400
   \   000000C0   0xE000             B.N      ??decodeTriggerEvent_7
   \                     ??decodeTriggerEvent_5:
   \   000000C2   0x4650             MOV      R0,R10
   \                     ??decodeTriggerEvent_7:
   \   000000C4   0x60F0             STR      R0,[R6, #+12]
    131          
    132          	if (isLessImportant(signal)) {
   \   000000C6   0x.... 0x....      LDR.W    R0,??DataTable14_10
   \   000000CA   0xF890 0x0DE8      LDRB     R0,[R0, #+3560]
   \   000000CE   0x2800             CMP      R0,#+0
   \   000000D0   0xD004             BEQ.N    ??decodeTriggerEvent_8
   \   000000D2   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000D6   0xF1B8 0x0F01      CMP      R8,#+1
   \   000000DA   0xD10A             BNE.N    ??decodeTriggerEvent_9
   \                     ??decodeTriggerEvent_8:
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable14_10
   \   000000E0   0xF890 0x0DE8      LDRB     R0,[R0, #+3560]
   \   000000E4   0x2800             CMP      R0,#+0
   \   000000E6   0xD145             BNE.N    ??decodeTriggerEvent_10
   \   000000E8   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000EC   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000F0   0xD040             BEQ.N    ??decodeTriggerEvent_10
    133          #if EFI_UNIT_TEST
    134          		if (printTriggerDebug) {
    135          			printf("%s isLessImportant %s\r\n",
    136          					getTrigger_type_e(engineConfiguration->trigger.type),
    137          					getTrigger_event_e(signal));
    138          		}
    139          #endif
    140          
    141          		/**
    142          		 * For less important events we simply increment the index.
    143          		 */
    144          		nextTriggerEvent()
   \                     ??decodeTriggerEvent_9:
   \   000000F2   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000F4   0xEB16 0x0CC7      ADDS     R12,R6,R7, LSL #+3
   \   000000F8   0xE9DC 0x2320      LDRD     R2,R3,[R12, #+128]
   \   000000FC   0x0010             MOVS     R0,R2
   \   000000FE   0x0019             MOVS     R1,R3
   \   00000100   0x2900             CMP      R1,#+0
   \   00000102   0xD101             BNE.N    ??decodeTriggerEvent_11
   \   00000104   0x2800             CMP      R0,#+0
   \   00000106   0xD011             BEQ.N    ??decodeTriggerEvent_12
   \                     ??decodeTriggerEvent_11:
   \   00000108   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000010A   0xEB16 0x0287      ADDS     R2,R6,R7, LSL #+2
   \   0000010E   0x6992             LDR      R2,[R2, #+24]
   \   00000110   0x18A2             ADDS     R2,R4,R2
   \   00000112   0x1A12             SUBS     R2,R2,R0
   \   00000114   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000116   0xEB16 0x0387      ADDS     R3,R6,R7, LSL #+2
   \   0000011A   0x619A             STR      R2,[R3, #+24]
   \   0000011C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000011E   0xEB16 0x0CC7      ADDS     R12,R6,R7, LSL #+3
   \   00000122   0x2200             MOVS     R2,#+0
   \   00000124   0x2300             MOVS     R3,#+0
   \   00000126   0xE9CC 0x2320      STRD     R2,R3,[R12, #+128]
   \   0000012A   0xE004             B.N      ??decodeTriggerEvent_13
   \                     ??decodeTriggerEvent_12:
   \   0000012C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000012E   0xEB16 0x02C7      ADDS     R2,R6,R7, LSL #+3
   \   00000132   0xE9C2 0x4520      STRD     R4,R5,[R2, #+128]
   \                     ??decodeTriggerEvent_13:
   \   00000136   0x.... 0x....      LDR.W    R2,??DataTable14_7
   \   0000013A   0x6812             LDR      R2,[R2, #+0]
   \   0000013C   0xF892 0x25E5      LDRB     R2,[R2, #+1509]
   \   00000140   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000142   0x0992             LSRS     R2,R2,#+6
   \   00000144   0xF012 0x0201      ANDS     R2,R2,#0x1
   \   00000148   0x2A00             CMP      R2,#+0
   \   0000014A   0xD002             BEQ.N    ??decodeTriggerEvent_14
   \   0000014C   0x6CF2             LDR      R2,[R6, #+76]
   \   0000014E   0x1C52             ADDS     R2,R2,#+1
   \   00000150   0x64F2             STR      R2,[R6, #+76]
   \                     ??decodeTriggerEvent_14:
   \   00000152   0x6CF2             LDR      R2,[R6, #+76]
   \   00000154   0x1C52             ADDS     R2,R2,#+1
   \   00000156   0x64F2             STR      R2,[R6, #+76]
    145          		;
    146          		if (TRIGGER_SHAPE(gapBothDirections)) {
   \   00000158   0x.... 0x....      LDR.W    R2,??DataTable14_10
   \   0000015C   0xF892 0x2DE9      LDRB     R2,[R2, #+3561]
   \   00000160   0x2A00             CMP      R2,#+0
   \   00000162   0xD006             BEQ.N    ??decodeTriggerEvent_15
    147          			toothed_previous_duration = currentDuration;
   \   00000164   0x68F0             LDR      R0,[R6, #+12]
   \   00000166   0x60B0             STR      R0,[R6, #+8]
    148          			isFirstEvent = false;
   \   00000168   0x2000             MOVS     R0,#+0
   \   0000016A   0xF886 0x00A4      STRB     R0,[R6, #+164]
    149          			toothed_previous_time = nowNt;
   \   0000016E   0xE9C6 0x4504      STRD     R4,R5,[R6, #+16]
    150          		}
    151          		return;
   \                     ??decodeTriggerEvent_15:
   \   00000172   0xE199             B.N      ??decodeTriggerEvent_1
    152          	}
    153          
    154          	isFirstEvent = false;
   \                     ??decodeTriggerEvent_10:
   \   00000174   0x2000             MOVS     R0,#+0
   \   00000176   0xF886 0x00A4      STRB     R0,[R6, #+164]
    155          // todo: skip a number of signal from the beginning
    156          
    157          #if EFI_PROD_CODE
    158          //	scheduleMsg(&logger, "from %f to %f %d %d", triggerConfig->syncRatioFrom, triggerConfig->syncRatioTo, currentDuration, shaftPositionState->toothed_previous_duration);
    159          //	scheduleMsg(&logger, "ratio %f", 1.0 * currentDuration/ shaftPositionState->toothed_previous_duration);
    160          #else
    161          	if (toothed_previous_duration != 0) {
    162          //		printf("ratio %f: cur=%d pref=%d\r\n", 1.0 * currentDuration / shaftPositionState->toothed_previous_duration,
    163          //				currentDuration, shaftPositionState->toothed_previous_duration);
    164          	}
    165          #endif
    166          
    167          	bool_t isSynchronizationPoint;
    168          
    169          	if (TRIGGER_SHAPE(isSynchronizationNeeded)) {
   \   0000017A   0x.... 0x....      LDR.W    R0,??DataTable14_10
   \   0000017E   0xF890 0x0284      LDRB     R0,[R0, #+644]
   \   00000182   0x2800             CMP      R0,#+0
   \   00000184   0xD05C             BEQ.N    ??decodeTriggerEvent_16
    170          		isSynchronizationPoint = currentDuration > toothed_previous_duration * TRIGGER_SHAPE(syncRatioFrom)
    171          				&& currentDuration < toothed_previous_duration * TRIGGER_SHAPE(syncRatioTo);
   \   00000186   0xED96 0x0A03      VLDR     S0,[R6, #+12]
   \   0000018A   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   0000018E   0xEDD6 0x0A02      VLDR     S1,[R6, #+8]
   \   00000192   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   00000196   0x.... 0x....      LDR.W    R0,??DataTable14_11
   \   0000019A   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   0000019E   0xEE60 0x0A81      VMUL.F32 S1,S1,S2
   \   000001A2   0xEEF4 0x0A40      VCMP.F32 S1,S0
   \   000001A6   0xEEF1 0xFA10      FMSTAT   
   \   000001AA   0xD514             BPL.N    ??decodeTriggerEvent_17
   \   000001AC   0xED96 0x0A02      VLDR     S0,[R6, #+8]
   \   000001B0   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   000001B4   0x.... 0x....      LDR.W    R0,??DataTable14_12
   \   000001B8   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000001BC   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000001C0   0xEDD6 0x0A03      VLDR     S1,[R6, #+12]
   \   000001C4   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   000001C8   0xEEF4 0x0A40      VCMP.F32 S1,S0
   \   000001CC   0xEEF1 0xFA10      FMSTAT   
   \   000001D0   0xD501             BPL.N    ??decodeTriggerEvent_17
   \   000001D2   0x2001             MOVS     R0,#+1
   \   000001D4   0xE000             B.N      ??decodeTriggerEvent_18
   \                     ??decodeTriggerEvent_17:
   \   000001D6   0x2000             MOVS     R0,#+0
   \                     ??decodeTriggerEvent_18:
   \   000001D8   0xF88D 0x0014      STRB     R0,[SP, #+20]
    172          
    173          #if EFI_PROD_CODE
    174          		if (engineConfiguration->isPrintTriggerSynchDetails) {
   \   000001DC   0x.... 0x....      LDR.W    R0,??DataTable14_7
   \   000001E0   0x6800             LDR      R0,[R0, #+0]
   \   000001E2   0xF890 0x05E5      LDRB     R0,[R0, #+1509]
   \   000001E6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001E8   0x08C0             LSRS     R0,R0,#+3
   \   000001EA   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000001EE   0x2800             CMP      R0,#+0
   \   000001F0   0xD043             BEQ.N    ??decodeTriggerEvent_19
    175          #else
    176          		if (printTriggerDebug) {
    177          #endif /* EFI_PROD_CODE */
    178          			float gap = 1.0 * currentDuration / toothed_previous_duration;
   \   000001F2   0x68F0             LDR      R0,[R6, #+12]
   \   000001F4   0x.... 0x....      BL       __aeabi_ui2d
   \   000001F8   0x2200             MOVS     R2,#+0
   \   000001FA   0x.... 0x....      LDR.W    R3,??DataTable14_13  ;; 0x3ff00000
   \   000001FE   0x.... 0x....      BL       __aeabi_dmul
   \   00000202   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000206   0x68B0             LDR      R0,[R6, #+8]
   \   00000208   0x.... 0x....      BL       __aeabi_ui2d
   \   0000020C   0x0002             MOVS     R2,R0
   \   0000020E   0x000B             MOVS     R3,R1
   \   00000210   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   00000214   0x.... 0x....      BL       __aeabi_ddiv
   \   00000218   0x.... 0x....      BL       __aeabi_d2f
   \   0000021C   0xEE08 0x0A10      VMOV     S16,R0
    179          #if EFI_PROD_CODE
    180          			scheduleMsg(logger, "gap=%f @ %d", gap, current_index);
   \   00000220   0x6CF0             LDR      R0,[R6, #+76]
   \   00000222   0x9000             STR      R0,[SP, #+0]
   \   00000224   0xEE18 0x0A10      VMOV     R0,S16
   \   00000228   0x.... 0x....      BL       __aeabi_f2d
   \   0000022C   0x0002             MOVS     R2,R0
   \   0000022E   0x000B             MOVS     R3,R1
   \   00000230   0x.... 0x....      LDR.W    R1,??DataTable14_14
   \   00000234   0x.... 0x....      LDR.W    R0,??DataTable14_15
   \   00000238   0x6800             LDR      R0,[R0, #+0]
   \   0000023A   0x.... 0x....      BL       scheduleMsg
   \   0000023E   0xE01C             B.N      ??decodeTriggerEvent_19
    181          #else
    182          			actualSynchGap = gap;
    183          			print("current gap %f\r\n", gap);
    184          #endif /* EFI_PROD_CODE */
    185          		}
    186          
    187          	} else {
    188          		/**
    189          		 * in case of noise the counter could be above the expected number of events
    190          		 */
    191          		int d = engineConfiguration->useOnlyFrontForTrigger ? 2 : 1;
   \                     ??decodeTriggerEvent_16:
   \   00000240   0x.... 0x....      LDR.W    R0,??DataTable14_7
   \   00000244   0x6800             LDR      R0,[R0, #+0]
   \   00000246   0xF890 0x05E5      LDRB     R0,[R0, #+1509]
   \   0000024A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000024C   0x0980             LSRS     R0,R0,#+6
   \   0000024E   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000252   0x2800             CMP      R0,#+0
   \   00000254   0xD001             BEQ.N    ??decodeTriggerEvent_20
   \   00000256   0x2002             MOVS     R0,#+2
   \   00000258   0xE000             B.N      ??decodeTriggerEvent_21
   \                     ??decodeTriggerEvent_20:
   \   0000025A   0x2001             MOVS     R0,#+1
    192          		isSynchronizationPoint = !shaft_is_synchronized || (current_index >= TRIGGER_SHAPE(size) - d);
   \                     ??decodeTriggerEvent_21:
   \   0000025C   0x7931             LDRB     R1,[R6, #+4]
   \   0000025E   0x2900             CMP      R1,#+0
   \   00000260   0xD006             BEQ.N    ??decodeTriggerEvent_22
   \   00000262   0x6CF1             LDR      R1,[R6, #+76]
   \   00000264   0x.... 0x....      LDR.W    R2,??DataTable14_16
   \   00000268   0x6812             LDR      R2,[R2, #+0]
   \   0000026A   0x1A10             SUBS     R0,R2,R0
   \   0000026C   0x4281             CMP      R1,R0
   \   0000026E   0xD301             BCC.N    ??decodeTriggerEvent_23
   \                     ??decodeTriggerEvent_22:
   \   00000270   0x2001             MOVS     R0,#+1
   \   00000272   0xE000             B.N      ??decodeTriggerEvent_24
   \                     ??decodeTriggerEvent_23:
   \   00000274   0x2000             MOVS     R0,#+0
   \                     ??decodeTriggerEvent_24:
   \   00000276   0xF88D 0x0014      STRB     R0,[SP, #+20]
    193          
    194          	}
    195          
    196          #if EFI_UNIT_TEST
    197          		if (printTriggerDebug) {
    198          			printf("%s isSynchronizationPoint=%d index=%d %s\r\n",
    199          					getTrigger_type_e(engineConfiguration->trigger.type),
    200          					isSynchronizationPoint, current_index,
    201          					getTrigger_event_e(signal));
    202          		}
    203          #endif
    204          
    205          	if (isSynchronizationPoint) {
   \                     ??decodeTriggerEvent_19:
   \   0000027A   0xF89D 0x0014      LDRB     R0,[SP, #+20]
   \   0000027E   0x2800             CMP      R0,#+0
   \   00000280   0xF000 0x80DB      BEQ.W    ??decodeTriggerEvent_25
    206          
    207          		/**
    208          		 * We can check if things are fine by comparing the number of events in a cycle with the expected number of event.
    209          		 */
    210          		bool isDecodingError = eventCount[0] != TRIGGER_SHAPE(expectedEventCount[0])
    211          				|| eventCount[1] != TRIGGER_SHAPE(expectedEventCount[1])
    212          				|| eventCount[2] != TRIGGER_SHAPE(expectedEventCount[2]);
   \   00000284   0x6D70             LDR      R0,[R6, #+84]
   \   00000286   0x.... 0x....      LDR.W    R1,??DataTable14_10
   \   0000028A   0xF8D1 0x1DEC      LDR      R1,[R1, #+3564]
   \   0000028E   0x4288             CMP      R0,R1
   \   00000290   0xD10D             BNE.N    ??decodeTriggerEvent_26
   \   00000292   0x6DB0             LDR      R0,[R6, #+88]
   \   00000294   0x.... 0x....      LDR.W    R1,??DataTable14_10
   \   00000298   0xF8D1 0x1DF0      LDR      R1,[R1, #+3568]
   \   0000029C   0x4288             CMP      R0,R1
   \   0000029E   0xD106             BNE.N    ??decodeTriggerEvent_26
   \   000002A0   0x6DF0             LDR      R0,[R6, #+92]
   \   000002A2   0x.... 0x....      LDR.W    R1,??DataTable14_10
   \   000002A6   0xF8D1 0x1DF4      LDR      R1,[R1, #+3572]
   \   000002AA   0x4288             CMP      R0,R1
   \   000002AC   0xD002             BEQ.N    ??decodeTriggerEvent_27
   \                     ??decodeTriggerEvent_26:
   \   000002AE   0xF05F 0x0901      MOVS     R9,#+1
   \   000002B2   0xE001             B.N      ??decodeTriggerEvent_28
   \                     ??decodeTriggerEvent_27:
   \   000002B4   0xF05F 0x0900      MOVS     R9,#+0
    213          
    214          		triggerDecoderErrorPin.setValue(isDecodingError);
   \                     ??decodeTriggerEvent_28:
   \   000002B8   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000002BC   0x4649             MOV      R1,R9
   \   000002BE   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   000002C2   0x.... 0x....      BL       _ZN9OutputPin8setValueEi
    215          		if (isDecodingError) {
   \   000002C6   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000002CA   0xF1B9 0x0F00      CMP      R9,#+0
   \   000002CE   0xD02F             BEQ.N    ??decodeTriggerEvent_29
    216          			lastDecodingErrorTime = getTimeNowNt();
   \   000002D0   0x.... 0x....      BL       getTimeNowNt
   \   000002D4   0x.... 0x....      LDR.W    R2,??DataTable14_17
   \   000002D8   0xE9C2 0x0100      STRD     R0,R1,[R2, #+0]
    217          			totalTriggerErrorCounter++;
   \   000002DC   0x6BF0             LDR      R0,[R6, #+60]
   \   000002DE   0x1C40             ADDS     R0,R0,#+1
   \   000002E0   0x63F0             STR      R0,[R6, #+60]
    218          			if (engineConfiguration->isPrintTriggerSynchDetails) {
   \   000002E2   0x.... 0x....      LDR.W    R0,??DataTable14_7
   \   000002E6   0x6800             LDR      R0,[R0, #+0]
   \   000002E8   0xF890 0x05E5      LDRB     R0,[R0, #+1509]
   \   000002EC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002EE   0x08C0             LSRS     R0,R0,#+3
   \   000002F0   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000002F4   0x2800             CMP      R0,#+0
   \   000002F6   0xD01B             BEQ.N    ??decodeTriggerEvent_29
    219          #if EFI_PROD_CODE
    220          				scheduleMsg(logger, "error: synchronizationPoint @ index %d expected %d/%d/%d got %d/%d/%d", current_index,
    221          						TRIGGER_SHAPE(expectedEventCount[0]), TRIGGER_SHAPE(expectedEventCount[1]),
    222          						TRIGGER_SHAPE(expectedEventCount[2]), eventCount[0], eventCount[1], eventCount[2]);
   \   000002F8   0x6DF0             LDR      R0,[R6, #+92]
   \   000002FA   0x9004             STR      R0,[SP, #+16]
   \   000002FC   0x6DB0             LDR      R0,[R6, #+88]
   \   000002FE   0x9003             STR      R0,[SP, #+12]
   \   00000300   0x6D70             LDR      R0,[R6, #+84]
   \   00000302   0x9002             STR      R0,[SP, #+8]
   \   00000304   0x.... 0x....      LDR.W    R0,??DataTable14_10
   \   00000308   0xF8D0 0x0DF4      LDR      R0,[R0, #+3572]
   \   0000030C   0x9001             STR      R0,[SP, #+4]
   \   0000030E   0x.... 0x....      LDR.W    R0,??DataTable14_10
   \   00000312   0xF8D0 0x0DF0      LDR      R0,[R0, #+3568]
   \   00000316   0x9000             STR      R0,[SP, #+0]
   \   00000318   0x.... 0x....      LDR.W    R0,??DataTable14_10
   \   0000031C   0xF8D0 0x3DEC      LDR      R3,[R0, #+3564]
   \   00000320   0x6CF2             LDR      R2,[R6, #+76]
   \   00000322   0x.... 0x....      LDR.W    R1,??DataTable14_18
   \   00000326   0x.... 0x....      LDR.W    R0,??DataTable14_15
   \   0000032A   0x6800             LDR      R0,[R0, #+0]
   \   0000032C   0x.... 0x....      BL       scheduleMsg
    223          #endif /* EFI_PROD_CODE */
    224          			}
    225          		}
    226          
    227          		errorDetection.add(isDecodingError);
   \                     ??decodeTriggerEvent_29:
   \   00000330   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000334   0x4649             MOV      R1,R9
   \   00000336   0x.... 0x....      LDR.W    R0,??DataTable14_2
   \   0000033A   0x.... 0x....      BL       _ZN13cyclic_bufferIiE3addEi
    228          
    229          		if (isTriggerDecoderError()) {
   \   0000033E   0x.... 0x....      BL       _Z21isTriggerDecoderErrorv
   \   00000342   0x2800             CMP      R0,#+0
   \   00000344   0xD018             BEQ.N    ??decodeTriggerEvent_30
    230          			warning(OBD_PCM_Processor_Fault, "trigger decoding issue. expected %d/%d/%d got %d/%d/%d",
    231          					TRIGGER_SHAPE(expectedEventCount[0]), TRIGGER_SHAPE(expectedEventCount[1]),
    232          					TRIGGER_SHAPE(expectedEventCount[2]), eventCount[0], eventCount[1], eventCount[2]);
   \   00000346   0x6DF0             LDR      R0,[R6, #+92]
   \   00000348   0x9003             STR      R0,[SP, #+12]
   \   0000034A   0x6DB0             LDR      R0,[R6, #+88]
   \   0000034C   0x9002             STR      R0,[SP, #+8]
   \   0000034E   0x6D70             LDR      R0,[R6, #+84]
   \   00000350   0x9001             STR      R0,[SP, #+4]
   \   00000352   0x.... 0x....      LDR.W    R0,??DataTable14_10
   \   00000356   0xF8D0 0x0DF4      LDR      R0,[R0, #+3572]
   \   0000035A   0x9000             STR      R0,[SP, #+0]
   \   0000035C   0x.... 0x....      LDR.W    R0,??DataTable14_10
   \   00000360   0xF8D0 0x3DF0      LDR      R3,[R0, #+3568]
   \   00000364   0x.... 0x....      LDR.W    R0,??DataTable14_10
   \   00000368   0xF8D0 0x2DEC      LDR      R2,[R0, #+3564]
   \   0000036C   0x.... 0x....      LDR.W    R1,??DataTable14_19
   \   00000370   0xF240 0x205E      MOVW     R0,#+606
   \   00000374   0x.... 0x....      BL       warning
    233          		}
    234          
    235          		shaft_is_synchronized = true;
   \                     ??decodeTriggerEvent_30:
   \   00000378   0x2001             MOVS     R0,#+1
   \   0000037A   0x7130             STRB     R0,[R6, #+4]
    236          		// this call would update duty cycle values
    237          		nextTriggerEvent()
   \   0000037C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000037E   0xEB16 0x0CC7      ADDS     R12,R6,R7, LSL #+3
   \   00000382   0xE9DC 0x2320      LDRD     R2,R3,[R12, #+128]
   \   00000386   0x0010             MOVS     R0,R2
   \   00000388   0x0019             MOVS     R1,R3
   \   0000038A   0x2900             CMP      R1,#+0
   \   0000038C   0xD101             BNE.N    ??decodeTriggerEvent_31
   \   0000038E   0x2800             CMP      R0,#+0
   \   00000390   0xD011             BEQ.N    ??decodeTriggerEvent_32
   \                     ??decodeTriggerEvent_31:
   \   00000392   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000394   0xEB16 0x0287      ADDS     R2,R6,R7, LSL #+2
   \   00000398   0x6992             LDR      R2,[R2, #+24]
   \   0000039A   0x18A2             ADDS     R2,R4,R2
   \   0000039C   0x1A12             SUBS     R2,R2,R0
   \   0000039E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000003A0   0xEB16 0x0387      ADDS     R3,R6,R7, LSL #+2
   \   000003A4   0x619A             STR      R2,[R3, #+24]
   \   000003A6   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000003A8   0xEB16 0x0CC7      ADDS     R12,R6,R7, LSL #+3
   \   000003AC   0x2200             MOVS     R2,#+0
   \   000003AE   0x2300             MOVS     R3,#+0
   \   000003B0   0xE9CC 0x2320      STRD     R2,R3,[R12, #+128]
   \   000003B4   0xE004             B.N      ??decodeTriggerEvent_33
   \                     ??decodeTriggerEvent_32:
   \   000003B6   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000003B8   0xEB16 0x02C7      ADDS     R2,R6,R7, LSL #+3
   \   000003BC   0xE9C2 0x4520      STRD     R4,R5,[R2, #+128]
   \                     ??decodeTriggerEvent_33:
   \   000003C0   0x.... 0x....      LDR.W    R2,??DataTable14_7
   \   000003C4   0x6812             LDR      R2,[R2, #+0]
   \   000003C6   0xF892 0x25E5      LDRB     R2,[R2, #+1509]
   \   000003CA   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000003CC   0x0992             LSRS     R2,R2,#+6
   \   000003CE   0xF012 0x0201      ANDS     R2,R2,#0x1
   \   000003D2   0x2A00             CMP      R2,#+0
   \   000003D4   0xD002             BEQ.N    ??decodeTriggerEvent_34
   \   000003D6   0x6CF2             LDR      R2,[R6, #+76]
   \   000003D8   0x1C52             ADDS     R2,R2,#+1
   \   000003DA   0x64F2             STR      R2,[R6, #+76]
   \                     ??decodeTriggerEvent_34:
   \   000003DC   0x6CF2             LDR      R2,[R6, #+76]
   \   000003DE   0x1C52             ADDS     R2,R2,#+1
   \   000003E0   0x64F2             STR      R2,[R6, #+76]
    238          		;
    239          
    240          		nextRevolution();
   \   000003E2   0x6832             LDR      R2,[R6, #+0]
   \   000003E4   0x2A00             CMP      R2,#+0
   \   000003E6   0xD002             BEQ.N    ??decodeTriggerEvent_35
   \   000003E8   0x0030             MOVS     R0,R6
   \   000003EA   0x6831             LDR      R1,[R6, #+0]
   \   000003EC   0x4788             BLX      R1
   \                     ??decodeTriggerEvent_35:
   \   000003EE   0x220C             MOVS     R2,#+12
   \   000003F0   0xF116 0x0118      ADDS     R1,R6,#+24
   \   000003F4   0xF116 0x0024      ADDS     R0,R6,#+36
   \   000003F8   0x.... 0x....      BL       memcpy
   \   000003FC   0xE9D6 0x012C      LDRD     R0,R1,[R6, #+176]
   \   00000400   0x1A20             SUBS     R0,R4,R0
   \   00000402   0xEB75 0x0101      SBCS     R1,R5,R1
   \   00000406   0xE9C6 0x012A      STRD     R0,R1,[R6, #+168]
   \   0000040A   0xE9C6 0x452C      STRD     R4,R5,[R6, #+176]
   \   0000040E   0x0030             MOVS     R0,R6
   \   00000410   0x.... 0x....      BL       _ZN12TriggerState5clearEv
   \   00000414   0xF8D6 0x00A0      LDR      R0,[R6, #+160]
   \   00000418   0x1C40             ADDS     R0,R0,#+1
   \   0000041A   0xF8C6 0x00A0      STR      R0,[R6, #+160]
   \   0000041E   0x6D30             LDR      R0,[R6, #+80]
   \   00000420   0x1C40             ADDS     R0,R0,#+1
   \   00000422   0x6530             STR      R0,[R6, #+80]
   \   00000424   0xE9D6 0x2326      LDRD     R2,R3,[R6, #+152]
   \   00000428   0x.... 0x....      LDR.W    R0,??DataTable14_16
   \   0000042C   0x6800             LDR      R0,[R0, #+0]
   \   0000042E   0x17C1             ASRS     R1,R0,#+31
   \   00000430   0x1810             ADDS     R0,R2,R0
   \   00000432   0x4159             ADCS     R1,R3,R1
   \   00000434   0xE9C6 0x0126      STRD     R0,R1,[R6, #+152]
   \   00000438   0xE032             B.N      ??decodeTriggerEvent_36
    241          	} else {
    242          		nextTriggerEvent()
   \                     ??decodeTriggerEvent_25:
   \   0000043A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000043C   0xEB16 0x0CC7      ADDS     R12,R6,R7, LSL #+3
   \   00000440   0xE9DC 0x2320      LDRD     R2,R3,[R12, #+128]
   \   00000444   0x0010             MOVS     R0,R2
   \   00000446   0x0019             MOVS     R1,R3
   \   00000448   0x2900             CMP      R1,#+0
   \   0000044A   0xD101             BNE.N    ??decodeTriggerEvent_37
   \   0000044C   0x2800             CMP      R0,#+0
   \   0000044E   0xD011             BEQ.N    ??decodeTriggerEvent_38
   \                     ??decodeTriggerEvent_37:
   \   00000450   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000452   0xEB16 0x0287      ADDS     R2,R6,R7, LSL #+2
   \   00000456   0x6992             LDR      R2,[R2, #+24]
   \   00000458   0x18A2             ADDS     R2,R4,R2
   \   0000045A   0x1A12             SUBS     R2,R2,R0
   \   0000045C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000045E   0xEB16 0x0387      ADDS     R3,R6,R7, LSL #+2
   \   00000462   0x619A             STR      R2,[R3, #+24]
   \   00000464   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000466   0xEB16 0x0CC7      ADDS     R12,R6,R7, LSL #+3
   \   0000046A   0x2200             MOVS     R2,#+0
   \   0000046C   0x2300             MOVS     R3,#+0
   \   0000046E   0xE9CC 0x2320      STRD     R2,R3,[R12, #+128]
   \   00000472   0xE004             B.N      ??decodeTriggerEvent_39
   \                     ??decodeTriggerEvent_38:
   \   00000474   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000476   0xEB16 0x02C7      ADDS     R2,R6,R7, LSL #+3
   \   0000047A   0xE9C2 0x4520      STRD     R4,R5,[R2, #+128]
   \                     ??decodeTriggerEvent_39:
   \   0000047E   0x.... 0x....      LDR.W    R2,??DataTable14_7
   \   00000482   0x6812             LDR      R2,[R2, #+0]
   \   00000484   0xF892 0x25E5      LDRB     R2,[R2, #+1509]
   \   00000488   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000048A   0x0992             LSRS     R2,R2,#+6
   \   0000048C   0xF012 0x0201      ANDS     R2,R2,#0x1
   \   00000490   0x2A00             CMP      R2,#+0
   \   00000492   0xD002             BEQ.N    ??decodeTriggerEvent_40
   \   00000494   0x6CF2             LDR      R2,[R6, #+76]
   \   00000496   0x1C52             ADDS     R2,R2,#+1
   \   00000498   0x64F2             STR      R2,[R6, #+76]
   \                     ??decodeTriggerEvent_40:
   \   0000049A   0x6CF2             LDR      R2,[R6, #+76]
   \   0000049C   0x1C52             ADDS     R2,R2,#+1
   \   0000049E   0x64F2             STR      R2,[R6, #+76]
    243          		;
    244          	}
    245          
    246          	toothed_previous_duration = currentDuration;
   \                     ??decodeTriggerEvent_36:
   \   000004A0   0x68F0             LDR      R0,[R6, #+12]
   \   000004A2   0x60B0             STR      R0,[R6, #+8]
    247          	toothed_previous_time = nowNt;
   \   000004A4   0xE9C6 0x4504      STRD     R4,R5,[R6, #+16]
    248          }
   \                     ??decodeTriggerEvent_1:
   \   000004A8   0xB006             ADD      SP,SP,#+24
   \   000004AA   0xECBD 0x8B02      VPOP     {D8}
   \   000004AE   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    249          

   \                                 In section .text, align 4, keep-with-next
    250          float getEngineCycle(operation_mode_e operationMode) {
    251          	return operationMode == TWO_STROKE ? 360 : 720;
   \                     _Z14getEngineCycle16operation_mode_e:
   \   00000000   0x2803             CMP      R0,#+3
   \   00000002   0xD102             BNE.N    ??getEngineCycle_0
   \   00000004   0xED9F 0x....      VLDR.W   S0,??DataTable8  ;; 0x168
   \   00000008   0xE001             B.N      ??getEngineCycle_1
   \                     ??getEngineCycle_0:
   \   0000000A   0xED9F 0x....      VLDR.W   S0,??DataTable8_1  ;; 0x2d0
   \                     ??getEngineCycle_1:
   \   0000000E   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000012   0x4770             BX       LR               ;; return
    252          }
    253          

   \                                 In section .text, align 2, keep-with-next
    254          void addSkippedToothTriggerEvents(trigger_wheel_e wheel, TriggerShape *s,
    255          		int totalTeethCount, int skippedCount,
    256          		float toothWidth,
    257          		float offset, float engineCycle, float filterLeft, float filterRight) {
   \                     _Z28addSkippedToothTriggerEvents15trigger_wheel_eP12TriggerShapeiifffff:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xED2D 0x8B08      VPUSH    {D8-D11}
   \   00000008   0x0004             MOVS     R4,R0
   \   0000000A   0x000D             MOVS     R5,R1
   \   0000000C   0x0016             MOVS     R6,R2
   \   0000000E   0x001F             MOVS     R7,R3
   \   00000010   0xEEB0 0x9A40      VMOV.F32 S18,S0
   \   00000014   0xEEF0 0x9A60      VMOV.F32 S19,S1
   \   00000018   0xEEB0 0xAA41      VMOV.F32 S20,S2
   \   0000001C   0xEEB0 0x8A61      VMOV.F32 S16,S3
   \   00000020   0xEEF0 0x8A42      VMOV.F32 S17,S4
    258          	efiAssertVoid(totalTeethCount > 0, "total count");
   \   00000024   0x2E01             CMP      R6,#+1
   \   00000026   0xDA04             BGE.N    ??addSkippedToothTriggerEvents_0
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable14_20
   \   0000002C   0x.... 0x....      BL       firmwareError
   \   00000030   0xE073             B.N      ??addSkippedToothTriggerEvents_1
    259          	efiAssertVoid(skippedCount >= 0, "skipped count");
   \                     ??addSkippedToothTriggerEvents_0:
   \   00000032   0x2F00             CMP      R7,#+0
   \   00000034   0xD504             BPL.N    ??addSkippedToothTriggerEvents_2
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable14_21
   \   0000003A   0x.... 0x....      BL       firmwareError
   \   0000003E   0xE06C             B.N      ??addSkippedToothTriggerEvents_1
    260          
    261          	for (int i = 0; i < totalTeethCount - skippedCount - 1; i++) {
   \                     ??addSkippedToothTriggerEvents_2:
   \   00000040   0xF05F 0x0800      MOVS     R8,#+0
   \                     ??addSkippedToothTriggerEvents_3:
   \   00000044   0x1BF0             SUBS     R0,R6,R7
   \   00000046   0x1E40             SUBS     R0,R0,#+1
   \   00000048   0x4580             CMP      R8,R0
   \   0000004A   0xDA3A             BGE.N    ??addSkippedToothTriggerEvents_4
    262          		float angleDown = engineCycle / totalTeethCount * (i + (1 - toothWidth));
   \   0000004C   0xEE00 0x6A10      VMOV     S0,R6
   \   00000050   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000054   0xEE8A 0x0A00      VDIV.F32 S0,S20,S0
   \   00000058   0xEE00 0x8A90      VMOV     S1,R8
   \   0000005C   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   00000060   0xEEB7 0x1A00      VMOV.F32 S2,#1.0
   \   00000064   0xEE31 0x1A49      VSUB.F32 S2,S2,S18
   \   00000068   0xEE70 0x0A81      VADD.F32 S1,S1,S2
   \   0000006C   0xEE60 0xAA20      VMUL.F32 S21,S0,S1
    263          		float angleUp = engineCycle / totalTeethCount * (i + 1);
   \   00000070   0xEE00 0x6A10      VMOV     S0,R6
   \   00000074   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000078   0xEE8A 0x0A00      VDIV.F32 S0,S20,S0
   \   0000007C   0xF118 0x0001      ADDS     R0,R8,#+1
   \   00000080   0xEE00 0x0A90      VMOV     S1,R0
   \   00000084   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   00000088   0xEE20 0xBA20      VMUL.F32 S22,S0,S1
    264          		s->addEvent(offset + angleDown, wheel, TV_HIGH, filterLeft, filterRight);
   \   0000008C   0xEEB0 0x1A68      VMOV.F32 S2,S17
   \   00000090   0xEEF0 0x0A48      VMOV.F32 S1,S16
   \   00000094   0x2201             MOVS     R2,#+1
   \   00000096   0x0021             MOVS     R1,R4
   \   00000098   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000009A   0xEE39 0x0AAA      VADD.F32 S0,S19,S21
   \   0000009E   0x0028             MOVS     R0,R5
   \   000000A0   0x.... 0x....      BL       _ZN12TriggerShape8addEventEf15trigger_wheel_e15trigger_value_eff
    265          		s->addEvent(offset + angleUp, wheel, TV_LOW, filterLeft, filterRight);
   \   000000A4   0xEEB0 0x1A68      VMOV.F32 S2,S17
   \   000000A8   0xEEF0 0x0A48      VMOV.F32 S1,S16
   \   000000AC   0x2200             MOVS     R2,#+0
   \   000000AE   0x0021             MOVS     R1,R4
   \   000000B0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000B2   0xEE39 0x0A8B      VADD.F32 S0,S19,S22
   \   000000B6   0x0028             MOVS     R0,R5
   \   000000B8   0x.... 0x....      BL       _ZN12TriggerShape8addEventEf15trigger_wheel_e15trigger_value_eff
    266          	}
   \   000000BC   0xF118 0x0801      ADDS     R8,R8,#+1
   \   000000C0   0xE7C0             B.N      ??addSkippedToothTriggerEvents_3
    267          
    268          	float angleDown = engineCycle / totalTeethCount * (totalTeethCount - skippedCount - 1 + (1 - toothWidth) );
   \                     ??addSkippedToothTriggerEvents_4:
   \   000000C2   0xEE00 0x6A10      VMOV     S0,R6
   \   000000C6   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000000CA   0xEE8A 0x0A00      VDIV.F32 S0,S20,S0
   \   000000CE   0x1BF0             SUBS     R0,R6,R7
   \   000000D0   0x1E40             SUBS     R0,R0,#+1
   \   000000D2   0xEE00 0x0A90      VMOV     S1,R0
   \   000000D6   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   000000DA   0xEEB7 0x1A00      VMOV.F32 S2,#1.0
   \   000000DE   0xEE31 0x1A49      VSUB.F32 S2,S2,S18
   \   000000E2   0xEE70 0x0A81      VADD.F32 S1,S1,S2
   \   000000E6   0xEE60 0xAA20      VMUL.F32 S21,S0,S1
    269          	s->addEvent(offset + angleDown, wheel, TV_HIGH, filterLeft, filterRight);
   \   000000EA   0xEEB0 0x1A68      VMOV.F32 S2,S17
   \   000000EE   0xEEF0 0x0A48      VMOV.F32 S1,S16
   \   000000F2   0x2201             MOVS     R2,#+1
   \   000000F4   0x0021             MOVS     R1,R4
   \   000000F6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000F8   0xEE39 0x0AAA      VADD.F32 S0,S19,S21
   \   000000FC   0x0028             MOVS     R0,R5
   \   000000FE   0x.... 0x....      BL       _ZN12TriggerShape8addEventEf15trigger_wheel_e15trigger_value_eff
    270          	s->addEvent(offset + engineCycle, wheel, TV_LOW, filterLeft, filterRight);
   \   00000102   0xEEB0 0x1A68      VMOV.F32 S2,S17
   \   00000106   0xEEF0 0x0A48      VMOV.F32 S1,S16
   \   0000010A   0x2200             MOVS     R2,#+0
   \   0000010C   0x0021             MOVS     R1,R4
   \   0000010E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000110   0xEE39 0x0A8A      VADD.F32 S0,S19,S20
   \   00000114   0x0028             MOVS     R0,R5
   \   00000116   0x.... 0x....      BL       _ZN12TriggerShape8addEventEf15trigger_wheel_e15trigger_value_eff
    271          }
   \                     ??addSkippedToothTriggerEvents_1:
   \   0000011A   0xECBD 0x8B08      VPOP     {D8-D11}
   \   0000011E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    272          

   \                                 In section .text, align 4, keep-with-next
    273          void initializeSkippedToothTriggerShapeExt(TriggerShape *s, int totalTeethCount, int skippedCount,
    274          		operation_mode_e operationMode) {
   \                     _Z37initializeSkippedToothTriggerShapeExtP12TriggerShapeii16operation_mode_e:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    275          	efiAssertVoid(totalTeethCount > 0, "totalTeethCount is zero");
   \   0000000A   0x2D01             CMP      R5,#+1
   \   0000000C   0xDA04             BGE.N    ??initializeSkippedToothTriggerShapeExt_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable14_22
   \   00000012   0x.... 0x....      BL       firmwareError
   \   00000016   0xE02E             B.N      ??initializeSkippedToothTriggerShapeExt_1
    276          
    277          	s->totalToothCount = totalTeethCount;
   \                     ??initializeSkippedToothTriggerShapeExt_0:
   \   00000018   0x6065             STR      R5,[R4, #+4]
    278          	s->skippedToothCount = skippedCount;
   \   0000001A   0x60A6             STR      R6,[R4, #+8]
    279          
    280          	s->setTriggerSynchronizationGap(skippedCount + 1);
   \   0000001C   0x1C70             ADDS     R0,R6,#+1
   \   0000001E   0xEE00 0x0A10      VMOV     S0,R0
   \   00000022   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x.... 0x....      BL       _ZN12TriggerShape28setTriggerSynchronizationGapEf
    281          	s->isSynchronizationNeeded = (skippedCount != 0);
   \   0000002C   0x2E00             CMP      R6,#+0
   \   0000002E   0xD001             BEQ.N    ??initializeSkippedToothTriggerShapeExt_2
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0xE000             B.N      ??initializeSkippedToothTriggerShapeExt_3
   \                     ??initializeSkippedToothTriggerShapeExt_2:
   \   00000034   0x2000             MOVS     R0,#+0
   \                     ??initializeSkippedToothTriggerShapeExt_3:
   \   00000036   0x7020             STRB     R0,[R4, #+0]
    282          
    283          	efiAssertVoid(s != NULL, "TriggerShape is NULL");
   \   00000038   0x2C00             CMP      R4,#+0
   \   0000003A   0xD104             BNE.N    ??initializeSkippedToothTriggerShapeExt_4
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable14_23
   \   00000040   0x.... 0x....      BL       firmwareError
   \   00000044   0xE017             B.N      ??initializeSkippedToothTriggerShapeExt_1
    284          	s->reset(operationMode, false);
   \                     ??initializeSkippedToothTriggerShapeExt_4:
   \   00000046   0x2200             MOVS     R2,#+0
   \   00000048   0x0039             MOVS     R1,R7
   \   0000004A   0x0020             MOVS     R0,R4
   \   0000004C   0x.... 0x....      BL       _ZN12TriggerShape5resetE16operation_mode_eb
    285          
    286          	addSkippedToothTriggerEvents(T_PRIMARY, s, totalTeethCount, skippedCount, 0.5, 0, getEngineCycle(operationMode),
    287          			NO_LEFT_FILTER, NO_RIGHT_FILTER);
   \   00000050   0x0038             MOVS     R0,R7
   \   00000052   0x.... 0x....      BL       _Z14getEngineCycle16operation_mode_e
   \   00000056   0xEEB0 0x1A40      VMOV.F32 S2,S0
   \   0000005A   0xED9F 0x....      VLDR.W   S4,??DataTable9  ;; 0x447a0000
   \   0000005E   0xEEFF 0x1A00      VMOV.F32 S3,#-1.0
   \   00000062   0xEDDF 0x....      VLDR.W   S1,??DataTable9_1  ;; 0x0
   \   00000066   0xEEB6 0x0A00      VMOV.F32 S0,#0.5
   \   0000006A   0x0033             MOVS     R3,R6
   \   0000006C   0x002A             MOVS     R2,R5
   \   0000006E   0x0021             MOVS     R1,R4
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x.... 0x....      BL       _Z28addSkippedToothTriggerEvents15trigger_wheel_eP12TriggerShapeiifffff
    288          }
   \                     ??initializeSkippedToothTriggerShapeExt_1:
   \   00000076   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    289          

   \                                 In section .text, align 4, keep-with-next
    290          static void configureOnePlusOne(TriggerShape *s, operation_mode_e operationMode) {
   \                     _Z19configureOnePlusOneP12TriggerShape16operation_mode_e:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
    291          	float engineCycle = getEngineCycle(operationMode);
   \   0000000A   0x0028             MOVS     R0,R5
   \   0000000C   0x.... 0x....      BL       _Z14getEngineCycle16operation_mode_e
   \   00000010   0xEEB0 0x8A40      VMOV.F32 S16,S0
    292          
    293          	s->reset(FOUR_STROKE_CAM_SENSOR, true);
   \   00000014   0x2201             MOVS     R2,#+1
   \   00000016   0x2102             MOVS     R1,#+2
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x.... 0x....      BL       _ZN12TriggerShape5resetE16operation_mode_eb
    294          
    295          	s->addEvent(180, T_PRIMARY, TV_HIGH);
   \   0000001E   0x2201             MOVS     R2,#+1
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0xED9F 0x....      VLDR.W   S0,??DataTable9_2  ;; 0x43340000
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x.... 0x....      BL       _ZN12TriggerShape8addEventEf15trigger_wheel_e15trigger_value_e
    296          	s->addEvent(360, T_PRIMARY, TV_LOW);
   \   0000002C   0x2200             MOVS     R2,#+0
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0xED9F 0x....      VLDR.W   S0,??DataTable9_3  ;; 0x43b40000
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x.... 0x....      BL       _ZN12TriggerShape8addEventEf15trigger_wheel_e15trigger_value_e
    297          
    298          	s->addEvent(540, T_SECONDARY, TV_HIGH);
   \   0000003A   0x2201             MOVS     R2,#+1
   \   0000003C   0x2101             MOVS     R1,#+1
   \   0000003E   0xED9F 0x....      VLDR.W   S0,??DataTable9_4  ;; 0x44070000
   \   00000042   0x0020             MOVS     R0,R4
   \   00000044   0x.... 0x....      BL       _ZN12TriggerShape8addEventEf15trigger_wheel_e15trigger_value_e
    299          	s->addEvent(720, T_SECONDARY, TV_LOW);
   \   00000048   0x2200             MOVS     R2,#+0
   \   0000004A   0x2101             MOVS     R1,#+1
   \   0000004C   0xED9F 0x....      VLDR.W   S0,??DataTable9_5  ;; 0x44340000
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0x.... 0x....      BL       _ZN12TriggerShape8addEventEf15trigger_wheel_e15trigger_value_e
    300          
    301          	s->isSynchronizationNeeded = false;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x7020             STRB     R0,[R4, #+0]
    302          }
   \   0000005A   0xECBD 0x8B02      VPOP     {D8}
   \   0000005E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    303          

   \                                 In section .text, align 4, keep-with-next
    304          static void configureOnePlus60_2(TriggerShape *s, operation_mode_e operationMode) {
   \                     _Z20configureOnePlus60_2P12TriggerShape16operation_mode_e:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    305          	s->reset(FOUR_STROKE_CAM_SENSOR, true);
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0x2102             MOVS     R1,#+2
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN12TriggerShape5resetE16operation_mode_eb
    306          
    307          	int totalTeethCount = 60;
   \   00000010   0x263C             MOVS     R6,#+60
    308          	int skippedCount = 2;
   \   00000012   0x2702             MOVS     R7,#+2
    309          
    310          	s->addEvent(2, T_PRIMARY, TV_HIGH);
   \   00000014   0x2201             MOVS     R2,#+1
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0xEEB0 0x0A00      VMOV.F32 S0,#2.0
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      BL       _ZN12TriggerShape8addEventEf15trigger_wheel_e15trigger_value_e
    311          	addSkippedToothTriggerEvents(T_SECONDARY, s, totalTeethCount, skippedCount, 0.5, 0, 360, 2, 20);
   \   00000022   0xEEB3 0x2A04      VMOV.F32 S4,#20.0
   \   00000026   0xEEF0 0x1A00      VMOV.F32 S3,#2.0
   \   0000002A   0xED9F 0x....      VLDR.W   S2,??DataTable9_3  ;; 0x43b40000
   \   0000002E   0xEDDF 0x....      VLDR.W   S1,??DataTable9_1  ;; 0x0
   \   00000032   0xEEB6 0x0A00      VMOV.F32 S0,#0.5
   \   00000036   0x003B             MOVS     R3,R7
   \   00000038   0x0032             MOVS     R2,R6
   \   0000003A   0x0021             MOVS     R1,R4
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x.... 0x....      BL       _Z28addSkippedToothTriggerEvents15trigger_wheel_eP12TriggerShapeiifffff
    312          	s->addEvent(20, T_PRIMARY, TV_LOW);
   \   00000042   0x2200             MOVS     R2,#+0
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0xEEB3 0x0A04      VMOV.F32 S0,#20.0
   \   0000004A   0x0020             MOVS     R0,R4
   \   0000004C   0x.... 0x....      BL       _ZN12TriggerShape8addEventEf15trigger_wheel_e15trigger_value_e
    313          	addSkippedToothTriggerEvents(T_SECONDARY, s, totalTeethCount, skippedCount, 0.5, 0, 360, 20, NO_RIGHT_FILTER);
   \   00000050   0xED9F 0x....      VLDR.W   S4,??DataTable9  ;; 0x447a0000
   \   00000054   0xEEF3 0x1A04      VMOV.F32 S3,#20.0
   \   00000058   0xED9F 0x....      VLDR.W   S2,??DataTable9_3  ;; 0x43b40000
   \   0000005C   0xEDDF 0x....      VLDR.W   S1,??DataTable9_1  ;; 0x0
   \   00000060   0xEEB6 0x0A00      VMOV.F32 S0,#0.5
   \   00000064   0x003B             MOVS     R3,R7
   \   00000066   0x0032             MOVS     R2,R6
   \   00000068   0x0021             MOVS     R1,R4
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0x.... 0x....      BL       _Z28addSkippedToothTriggerEvents15trigger_wheel_eP12TriggerShapeiifffff
    314          
    315          	addSkippedToothTriggerEvents(T_SECONDARY, s, totalTeethCount, skippedCount, 0.5, 360, 360, NO_LEFT_FILTER,
    316          			NO_RIGHT_FILTER);
   \   00000070   0xED9F 0x....      VLDR.W   S4,??DataTable9  ;; 0x447a0000
   \   00000074   0xEEFF 0x1A00      VMOV.F32 S3,#-1.0
   \   00000078   0xED9F 0x....      VLDR.W   S2,??DataTable9_3  ;; 0x43b40000
   \   0000007C   0xEDDF 0x....      VLDR.W   S1,??DataTable9_3  ;; 0x43b40000
   \   00000080   0xEEB6 0x0A00      VMOV.F32 S0,#0.5
   \   00000084   0x003B             MOVS     R3,R7
   \   00000086   0x0032             MOVS     R2,R6
   \   00000088   0x0021             MOVS     R1,R4
   \   0000008A   0x2001             MOVS     R0,#+1
   \   0000008C   0x.... 0x....      BL       _Z28addSkippedToothTriggerEvents15trigger_wheel_eP12TriggerShapeiifffff
    317          
    318          	s->isSynchronizationNeeded = false;
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x7020             STRB     R0,[R4, #+0]
    319          }
   \   00000094   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    320          
    321          /**
    322           * External logger is needed because at this point our logger is not yet initialized
    323           */

   \                                 In section .text, align 4, keep-with-next
    324          void TriggerShape::initializeTriggerShape(Logging *logger DECLARE_ENGINE_PARAMETER_S) {
   \                     _ZN12TriggerShape22initializeTriggerShapeEP7Logging:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    325          	TriggerShape *triggerShape = this;
   \   00000006   0x0026             MOVS     R6,R4
    326          
    327          #if EFI_PROD_CODE
    328          	scheduleMsg(logger, "initializeTriggerShape()");
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable14_24
   \   0000000C   0x0028             MOVS     R0,R5
   \   0000000E   0x.... 0x....      BL       scheduleMsg
    329          #endif
    330          	const trigger_config_s *triggerConfig = &engineConfiguration->trigger;
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable14_7
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF510 0x7706      ADDS     R7,R0,#+536
    331          
    332          	clear();
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      BL       _ZN12TriggerShape5clearEv
    333          
    334          	switch (triggerConfig->type) {
   \   00000022   0x6838             LDR      R0,[R7, #+0]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD024             BEQ.N    ??initializeTriggerShape_0
   \   00000028   0x2802             CMP      R0,#+2
   \   0000002A   0xD035             BEQ.N    ??initializeTriggerShape_1
   \   0000002C   0xD33C             BCC.N    ??initializeTriggerShape_2
   \   0000002E   0x2804             CMP      R0,#+4
   \   00000030   0xD02E             BEQ.N    ??initializeTriggerShape_3
   \   00000032   0xD329             BCC.N    ??initializeTriggerShape_4
   \   00000034   0x2806             CMP      R0,#+6
   \   00000036   0xD064             BEQ.N    ??initializeTriggerShape_5
   \   00000038   0xD33A             BCC.N    ??initializeTriggerShape_6
   \   0000003A   0x2808             CMP      R0,#+8
   \   0000003C   0xD065             BEQ.N    ??initializeTriggerShape_7
   \   0000003E   0xD35C             BCC.N    ??initializeTriggerShape_8
   \   00000040   0x280A             CMP      R0,#+10
   \   00000042   0xF000 0x8087      BEQ.W    ??initializeTriggerShape_9
   \   00000046   0xD36F             BCC.N    ??initializeTriggerShape_10
   \   00000048   0x280C             CMP      R0,#+12
   \   0000004A   0xD078             BEQ.N    ??initializeTriggerShape_11
   \   0000004C   0xF0C0 0x809C      BCC.W    ??initializeTriggerShape_12
   \   00000050   0x280E             CMP      R0,#+14
   \   00000052   0xD025             BEQ.N    ??initializeTriggerShape_13
   \   00000054   0xF0C0 0x8094      BCC.W    ??initializeTriggerShape_14
   \   00000058   0x2810             CMP      R0,#+16
   \   0000005A   0xD031             BEQ.N    ??initializeTriggerShape_15
   \   0000005C   0xD32C             BCC.N    ??initializeTriggerShape_16
   \   0000005E   0x2812             CMP      R0,#+18
   \   00000060   0xD040             BEQ.N    ??initializeTriggerShape_17
   \   00000062   0xD336             BCC.N    ??initializeTriggerShape_18
   \   00000064   0x2814             CMP      R0,#+20
   \   00000066   0xD05B             BEQ.N    ??initializeTriggerShape_19
   \   00000068   0xF0C0 0x8092      BCC.W    ??initializeTriggerShape_20
   \   0000006C   0x2815             CMP      R0,#+21
   \   0000006E   0xD07C             BEQ.N    ??initializeTriggerShape_21
   \   00000070   0xE092             B.N      ??initializeTriggerShape_22
    335          
    336          	case TT_TOOTHED_WHEEL:
    337          		initializeSkippedToothTriggerShapeExt(triggerShape, triggerConfig->customTotalToothCount,
    338          				triggerConfig->customSkippedToothCount, engineConfiguration->operationMode);
   \                     ??initializeTriggerShape_0:
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable14_7
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0xF8D0 0x31F4      LDR      R3,[R0, #+500]
   \   0000007C   0x68FA             LDR      R2,[R7, #+12]
   \   0000007E   0x68B9             LDR      R1,[R7, #+8]
   \   00000080   0x0030             MOVS     R0,R6
   \   00000082   0x.... 0x....      BL       _Z37initializeSkippedToothTriggerShapeExtP12TriggerShapeii16operation_mode_e
    339          		break;
   \   00000086   0xE08D             B.N      ??initializeTriggerShape_23
    340          
    341          	case TT_MAZDA_MIATA_NA:
    342          		initializeMazdaMiataNaShape(triggerShape);
   \                     ??initializeTriggerShape_4:
   \   00000088   0x0030             MOVS     R0,R6
   \   0000008A   0x.... 0x....      BL       _Z27initializeMazdaMiataNaShapeP12TriggerShape
    343          		break;
   \   0000008E   0xE089             B.N      ??initializeTriggerShape_23
    344          
    345          	case TT_MAZDA_MIATA_NB:
    346          		initializeMazdaMiataNbShape(triggerShape);
   \                     ??initializeTriggerShape_3:
   \   00000090   0x0030             MOVS     R0,R6
   \   00000092   0x.... 0x....      BL       _Z27initializeMazdaMiataNbShapeP12TriggerShape
    347          		break;
   \   00000096   0xE085             B.N      ??initializeTriggerShape_23
    348          
    349          	case TT_DODGE_NEON_1995:
    350          		configureNeon1995TriggerShape(triggerShape);
   \                     ??initializeTriggerShape_1:
   \   00000098   0x0030             MOVS     R0,R6
   \   0000009A   0x.... 0x....      BL       _Z29configureNeon1995TriggerShapeP12TriggerShape
    351          		break;
   \   0000009E   0xE081             B.N      ??initializeTriggerShape_23
    352          
    353          	case TT_DODGE_NEON_2003:
    354          		configureNeon2003TriggerShape(triggerShape);
   \                     ??initializeTriggerShape_13:
   \   000000A0   0x0030             MOVS     R0,R6
   \   000000A2   0x.... 0x....      BL       _Z29configureNeon2003TriggerShapeP12TriggerShape
    355          		break;
   \   000000A6   0xE07D             B.N      ??initializeTriggerShape_23
    356          
    357          	case TT_FORD_ASPIRE:
    358          		configureFordAspireTriggerShape(triggerShape);
   \                     ??initializeTriggerShape_2:
   \   000000A8   0x0030             MOVS     R0,R6
   \   000000AA   0x.... 0x....      BL       _Z31configureFordAspireTriggerShapeP12TriggerShape
    359          		break;
   \   000000AE   0xE079             B.N      ??initializeTriggerShape_23
    360          
    361          	case TT_GM_7X:
    362          		// todo: fix this configureGmTriggerShape(triggerShape);
    363          		configureFordAspireTriggerShape(triggerShape);
   \                     ??initializeTriggerShape_6:
   \   000000B0   0x0030             MOVS     R0,R6
   \   000000B2   0x.... 0x....      BL       _Z31configureFordAspireTriggerShapeP12TriggerShape
    364          		break;
   \   000000B6   0xE075             B.N      ??initializeTriggerShape_23
    365          
    366          	case TT_MAZDA_DOHC_1_4:
    367          		configureMazdaProtegeLx(triggerShape);
   \                     ??initializeTriggerShape_16:
   \   000000B8   0x0030             MOVS     R0,R6
   \   000000BA   0x.... 0x....      BL       _Z23configureMazdaProtegeLxP12TriggerShape
    368          		break;
   \   000000BE   0xE071             B.N      ??initializeTriggerShape_23
    369          
    370          	case TT_ONE_PLUS_ONE:
    371          		configureOnePlusOne(triggerShape, engineConfiguration->operationMode);
   \                     ??initializeTriggerShape_15:
   \   000000C0   0x.... 0x....      LDR.W    R0,??DataTable14_7
   \   000000C4   0x6800             LDR      R0,[R0, #+0]
   \   000000C6   0xF8D0 0x11F4      LDR      R1,[R0, #+500]
   \   000000CA   0x0030             MOVS     R0,R6
   \   000000CC   0x.... 0x....      BL       _Z19configureOnePlusOneP12TriggerShape16operation_mode_e
    372          		break;
   \   000000D0   0xE068             B.N      ??initializeTriggerShape_23
    373          
    374          	case TT_ONE_PLUS_TOOTHED_WHEEL_60_2:
    375          		configureOnePlus60_2(triggerShape, engineConfiguration->operationMode);
   \                     ??initializeTriggerShape_18:
   \   000000D2   0x.... 0x....      LDR.W    R0,??DataTable14_7
   \   000000D6   0x6800             LDR      R0,[R0, #+0]
   \   000000D8   0xF8D0 0x11F4      LDR      R1,[R0, #+500]
   \   000000DC   0x0030             MOVS     R0,R6
   \   000000DE   0x.... 0x....      BL       _Z20configureOnePlus60_2P12TriggerShape16operation_mode_e
    376          		break;
   \   000000E2   0xE05F             B.N      ??initializeTriggerShape_23
    377          
    378          	case TT_ONE:
    379          		setToothedWheelConfiguration(triggerShape, 1, 0, engineConfiguration->operationMode);
   \                     ??initializeTriggerShape_17:
   \   000000E4   0x.... 0x....      LDR.W    R0,??DataTable14_7
   \   000000E8   0x6800             LDR      R0,[R0, #+0]
   \   000000EA   0xF8D0 0x31F4      LDR      R3,[R0, #+500]
   \   000000EE   0x2200             MOVS     R2,#+0
   \   000000F0   0x2101             MOVS     R1,#+1
   \   000000F2   0x0030             MOVS     R0,R6
   \   000000F4   0x.... 0x....      BL       _Z28setToothedWheelConfigurationP12TriggerShapeii16operation_mode_e
    380          		break;
   \   000000F8   0xE054             B.N      ??initializeTriggerShape_23
    381          
    382          	case TT_MAZDA_SOHC_4:
    383          		configureMazdaProtegeSOHC(triggerShape);
   \                     ??initializeTriggerShape_8:
   \   000000FA   0x0030             MOVS     R0,R6
   \   000000FC   0x.... 0x....      BL       _Z25configureMazdaProtegeSOHCP12TriggerShape
    384          		break;
   \   00000100   0xE050             B.N      ??initializeTriggerShape_23
    385          
    386          	case TT_MINI_COOPER_R50:
    387          		configureMiniCooperTriggerShape(triggerShape);
   \                     ??initializeTriggerShape_5:
   \   00000102   0x0030             MOVS     R0,R6
   \   00000104   0x.... 0x....      BL       _Z31configureMiniCooperTriggerShapeP12TriggerShape
    388          		break;
   \   00000108   0xE04C             B.N      ??initializeTriggerShape_23
    389          
    390          	case TT_TOOTHED_WHEEL_60_2:
    391          		setToothedWheelConfiguration(triggerShape, 60, 2, engineConfiguration->operationMode);
   \                     ??initializeTriggerShape_7:
   \   0000010A   0x.... 0x....      LDR.W    R0,??DataTable14_7
   \   0000010E   0x6800             LDR      R0,[R0, #+0]
   \   00000110   0xF8D0 0x31F4      LDR      R3,[R0, #+500]
   \   00000114   0x2202             MOVS     R2,#+2
   \   00000116   0x213C             MOVS     R1,#+60
   \   00000118   0x0030             MOVS     R0,R6
   \   0000011A   0x.... 0x....      BL       _Z28setToothedWheelConfigurationP12TriggerShapeii16operation_mode_e
    392          		break;
   \   0000011E   0xE041             B.N      ??initializeTriggerShape_23
    393          
    394          	case TT_60_2_VW:
    395          		setVwConfiguration(triggerShape);
   \                     ??initializeTriggerShape_19:
   \   00000120   0x0030             MOVS     R0,R6
   \   00000122   0x.... 0x....      BL       _Z18setVwConfigurationP12TriggerShape
    396          		break;
   \   00000126   0xE03D             B.N      ??initializeTriggerShape_23
    397          
    398          	case TT_TOOTHED_WHEEL_36_1:
    399          		setToothedWheelConfiguration(triggerShape, 36, 1, engineConfiguration->operationMode);
   \                     ??initializeTriggerShape_10:
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable14_7
   \   0000012C   0x6800             LDR      R0,[R0, #+0]
   \   0000012E   0xF8D0 0x31F4      LDR      R3,[R0, #+500]
   \   00000132   0x2201             MOVS     R2,#+1
   \   00000134   0x2124             MOVS     R1,#+36
   \   00000136   0x0030             MOVS     R0,R6
   \   00000138   0x.... 0x....      BL       _Z28setToothedWheelConfigurationP12TriggerShapeii16operation_mode_e
    400          		break;
   \   0000013C   0xE032             B.N      ??initializeTriggerShape_23
    401          
    402          	case TT_HONDA_ACCORD_CD_TWO_WIRES:
    403          		configureHondaAccordCD(triggerShape, false, true, T_CHANNEL_3, T_PRIMARY, 0);
   \                     ??initializeTriggerShape_11:
   \   0000013E   0x2000             MOVS     R0,#+0
   \   00000140   0x9000             STR      R0,[SP, #+0]
   \   00000142   0xED9F 0x....      VLDR.W   S0,??DataTable9_1  ;; 0x0
   \   00000146   0x2302             MOVS     R3,#+2
   \   00000148   0x2201             MOVS     R2,#+1
   \   0000014A   0x2100             MOVS     R1,#+0
   \   0000014C   0x0030             MOVS     R0,R6
   \   0000014E   0x.... 0x....      BL       _Z22configureHondaAccordCDP12TriggerShapebb15trigger_wheel_eS1_f
    404          		break;
   \   00000152   0xE027             B.N      ??initializeTriggerShape_23
    405          
    406          	case TT_HONDA_ACCORD_CD:
    407          		configureHondaAccordCD(triggerShape, true, true, T_CHANNEL_3, T_PRIMARY, 0);
   \                     ??initializeTriggerShape_9:
   \   00000154   0x2000             MOVS     R0,#+0
   \   00000156   0x9000             STR      R0,[SP, #+0]
   \   00000158   0xED9F 0x....      VLDR.W   S0,??DataTable9_1  ;; 0x0
   \   0000015C   0x2302             MOVS     R3,#+2
   \   0000015E   0x2201             MOVS     R2,#+1
   \   00000160   0x2101             MOVS     R1,#+1
   \   00000162   0x0030             MOVS     R0,R6
   \   00000164   0x.... 0x....      BL       _Z22configureHondaAccordCDP12TriggerShapebb15trigger_wheel_eS1_f
    408          		break;
   \   00000168   0xE01C             B.N      ??initializeTriggerShape_23
    409          
    410          	case TT_HONDA_ACCORD_1_24:
    411          		configureHondaAccordCD(triggerShape, true, false, T_PRIMARY, T_PRIMARY, 10);
   \                     ??initializeTriggerShape_21:
   \   0000016A   0x2000             MOVS     R0,#+0
   \   0000016C   0x9000             STR      R0,[SP, #+0]
   \   0000016E   0xEEB2 0x0A04      VMOV.F32 S0,#10.0
   \   00000172   0x2300             MOVS     R3,#+0
   \   00000174   0x2200             MOVS     R2,#+0
   \   00000176   0x2101             MOVS     R1,#+1
   \   00000178   0x0030             MOVS     R0,R6
   \   0000017A   0x.... 0x....      BL       _Z22configureHondaAccordCDP12TriggerShapebb15trigger_wheel_eS1_f
    412          		break;
   \   0000017E   0xE011             B.N      ??initializeTriggerShape_23
    413          
    414          	case TT_HONDA_ACCORD_CD_DIP:
    415          		configureHondaAccordCDDip(triggerShape);
   \                     ??initializeTriggerShape_14:
   \   00000180   0x0030             MOVS     R0,R6
   \   00000182   0x.... 0x....      BL       _Z25configureHondaAccordCDDipP12TriggerShape
    416          		break;
   \   00000186   0xE00D             B.N      ??initializeTriggerShape_23
    417          
    418          	case TT_MITSU:
    419          		initializeMitsubishi4g18(triggerShape);
   \                     ??initializeTriggerShape_12:
   \   00000188   0x0030             MOVS     R0,R6
   \   0000018A   0x.... 0x....      BL       _Z24initializeMitsubishi4g18P12TriggerShape
    420          		break;
   \   0000018E   0xE009             B.N      ??initializeTriggerShape_23
    421          
    422          	case TT_DODGE_RAM:
    423          		initDodgeRam(triggerShape);
   \                     ??initializeTriggerShape_20:
   \   00000190   0x0030             MOVS     R0,R6
   \   00000192   0x.... 0x....      BL       _Z12initDodgeRamP12TriggerShape
    424          		break;
   \   00000196   0xE005             B.N      ??initializeTriggerShape_23
    425          
    426          	default:
    427          		firmwareError("initializeTriggerShape() not implemented: %d", triggerConfig->type);
   \                     ??initializeTriggerShape_22:
   \   00000198   0x6839             LDR      R1,[R7, #+0]
   \   0000019A   0x.... 0x....      LDR.W    R0,??DataTable14_25
   \   0000019E   0x.... 0x....      BL       firmwareError
    428          		;
    429          		return;
   \   000001A2   0xE00A             B.N      ??initializeTriggerShape_24
    430          	}
    431          	wave.checkSwitchTimes(getSize());
   \                     ??initializeTriggerShape_23:
   \   000001A4   0x0020             MOVS     R0,R4
   \   000001A6   0x.... 0x....      BL       _ZNK12TriggerShape7getSizeEv
   \   000001AA   0x0001             MOVS     R1,R0
   \   000001AC   0xF604 0x3074      ADDW     R0,R4,#+2932
   \   000001B0   0x.... 0x....      BL       _ZN12multi_wave_s16checkSwitchTimesEi
    432          	calculateTriggerSynchPoint(PASS_ENGINE_PARAMETER_F);
   \   000001B4   0x0020             MOVS     R0,R4
   \   000001B6   0x.... 0x....      BL       _ZN12TriggerShape26calculateTriggerSynchPointEv
    433          }
   \                     ??initializeTriggerShape_24:
   \   000001BA   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    434          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp TriggerStimulatorHelper::subobject TriggerStimulatorHelper()
   \                     _ZN23TriggerStimulatorHelperC2Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN23TriggerStimulatorHelperC1Ev
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    435          TriggerStimulatorHelper::TriggerStimulatorHelper() {
    436          }
   \                     _ZN23TriggerStimulatorHelperC1Ev:
   \   00000000   0x4770             BX       LR               ;; return
    437          

   \                                 In section .text, align 4, keep-with-next
    438          void TriggerStimulatorHelper::nextStep(TriggerState *state, TriggerShape * shape, int i,
    439          		trigger_config_s const*triggerConfig DECLARE_ENGINE_PARAMETER_S) {
   \                     _ZN23TriggerStimulatorHelper8nextStepEP12TriggerStateP12TriggerShapeiPK16trigger_config_s:
   \   00000000   0xE92D 0x4FF9      PUSH     {R0,R3-R11,LR}
   \   00000004   0xB081             SUB      SP,SP,#+4
   \   00000006   0xED2D 0x8B02      VPUSH    {D8}
   \   0000000A   0xB082             SUB      SP,SP,#+8
   \   0000000C   0x468B             MOV      R11,R1
   \   0000000E   0x0014             MOVS     R4,R2
    440          	int stateIndex = i % shape->getSize();
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       _ZNK12TriggerShape7getSizeEv
   \   00000016   0x9906             LDR      R1,[SP, #+24]
   \   00000018   0xFB91 0xF2F0      SDIV     R2,R1,R0
   \   0000001C   0xFB00 0x1512      MLS      R5,R0,R2,R1
    441          	int prevIndex = (stateIndex + shape->getSize() - 1 ) % shape->getSize();
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       _ZNK12TriggerShape7getSizeEv
   \   00000026   0x0006             MOVS     R6,R0
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x.... 0x....      BL       _ZNK12TriggerShape7getSizeEv
   \   0000002E   0x1971             ADDS     R1,R6,R5
   \   00000030   0x1E49             SUBS     R1,R1,#+1
   \   00000032   0xFB91 0xF2F0      SDIV     R2,R1,R0
   \   00000036   0xFB00 0x1612      MLS      R6,R0,R2,R1
    442          
    443          
    444          	int loopIndex = i / shape->getSize();
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x.... 0x....      BL       _ZNK12TriggerShape7getSizeEv
   \   00000040   0x9906             LDR      R1,[SP, #+24]
   \   00000042   0xFB91 0xF0F0      SDIV     R0,R1,R0
   \   00000046   0xEE08 0x0A10      VMOV     S16,R0
    445          
    446          	int time = (int) (HELPER_PERIOD * (loopIndex + shape->wave.getSwitchTime(stateIndex)));
   \   0000004A   0xEEF8 0x8AC8      VCVT.F32.S32 S17,S16
   \   0000004E   0x0029             MOVS     R1,R5
   \   00000050   0xF604 0x3074      ADDW     R0,R4,#+2932
   \   00000054   0x.... 0x....      BL       _ZNK12multi_wave_s13getSwitchTimeEi
   \   00000058   0xEE38 0x0A80      VADD.F32 S0,S17,S0
   \   0000005C   0xEDDF 0x....      VLDR.W   S1,??DataTable14  ;; 0x47c35000
   \   00000060   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000064   0xEEFD 0x8AC0      VCVT.S32.F32 S17,S0
    447          
    448          	bool_t primaryWheelState = shape->wave.getChannelState(0, prevIndex);
   \   00000068   0x0032             MOVS     R2,R6
   \   0000006A   0x2100             MOVS     R1,#+0
   \   0000006C   0xF604 0x3074      ADDW     R0,R4,#+2932
   \   00000070   0x.... 0x....      BL       _ZNK12multi_wave_s15getChannelStateEii
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD002             BEQ.N    ??nextStep_0
   \   00000078   0xF05F 0x0A01      MOVS     R10,#+1
   \   0000007C   0xE001             B.N      ??nextStep_1
   \                     ??nextStep_0:
   \   0000007E   0xF05F 0x0A00      MOVS     R10,#+0
    449          	bool_t newPrimaryWheelState = shape->wave.getChannelState(0, stateIndex);
   \                     ??nextStep_1:
   \   00000082   0x002A             MOVS     R2,R5
   \   00000084   0x2100             MOVS     R1,#+0
   \   00000086   0xF604 0x3074      ADDW     R0,R4,#+2932
   \   0000008A   0x.... 0x....      BL       _ZNK12multi_wave_s15getChannelStateEii
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD001             BEQ.N    ??nextStep_2
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0xE000             B.N      ??nextStep_3
   \                     ??nextStep_2:
   \   00000096   0x2000             MOVS     R0,#+0
   \                     ??nextStep_3:
   \   00000098   0xF88D 0x0002      STRB     R0,[SP, #+2]
    450          
    451          	bool_t secondaryWheelState = shape->wave.getChannelState(1, prevIndex);
   \   0000009C   0x0032             MOVS     R2,R6
   \   0000009E   0x2101             MOVS     R1,#+1
   \   000000A0   0xF604 0x3074      ADDW     R0,R4,#+2932
   \   000000A4   0x.... 0x....      BL       _ZNK12multi_wave_s15getChannelStateEii
   \   000000A8   0x2800             CMP      R0,#+0
   \   000000AA   0xD001             BEQ.N    ??nextStep_4
   \   000000AC   0x2701             MOVS     R7,#+1
   \   000000AE   0xE000             B.N      ??nextStep_5
   \                     ??nextStep_4:
   \   000000B0   0x2700             MOVS     R7,#+0
    452          	bool_t newSecondaryWheelState = shape->wave.getChannelState(1, stateIndex);
   \                     ??nextStep_5:
   \   000000B2   0x002A             MOVS     R2,R5
   \   000000B4   0x2101             MOVS     R1,#+1
   \   000000B6   0xF604 0x3074      ADDW     R0,R4,#+2932
   \   000000BA   0x.... 0x....      BL       _ZNK12multi_wave_s15getChannelStateEii
   \   000000BE   0x2800             CMP      R0,#+0
   \   000000C0   0xD001             BEQ.N    ??nextStep_6
   \   000000C2   0x2001             MOVS     R0,#+1
   \   000000C4   0xE000             B.N      ??nextStep_7
   \                     ??nextStep_6:
   \   000000C6   0x2000             MOVS     R0,#+0
   \                     ??nextStep_7:
   \   000000C8   0xF88D 0x0001      STRB     R0,[SP, #+1]
    453          
    454          	bool_t thirdWheelState = shape->wave.getChannelState(2, prevIndex);
   \   000000CC   0x0032             MOVS     R2,R6
   \   000000CE   0x2102             MOVS     R1,#+2
   \   000000D0   0xF604 0x3074      ADDW     R0,R4,#+2932
   \   000000D4   0x.... 0x....      BL       _ZNK12multi_wave_s15getChannelStateEii
   \   000000D8   0x2800             CMP      R0,#+0
   \   000000DA   0xD002             BEQ.N    ??nextStep_8
   \   000000DC   0xF05F 0x0801      MOVS     R8,#+1
   \   000000E0   0xE001             B.N      ??nextStep_9
   \                     ??nextStep_8:
   \   000000E2   0xF05F 0x0800      MOVS     R8,#+0
    455          	bool_t new3rdWheelState = shape->wave.getChannelState(2, stateIndex);
   \                     ??nextStep_9:
   \   000000E6   0x002A             MOVS     R2,R5
   \   000000E8   0x2102             MOVS     R1,#+2
   \   000000EA   0xF604 0x3074      ADDW     R0,R4,#+2932
   \   000000EE   0x.... 0x....      BL       _ZNK12multi_wave_s15getChannelStateEii
   \   000000F2   0x2800             CMP      R0,#+0
   \   000000F4   0xD001             BEQ.N    ??nextStep_10
   \   000000F6   0x2001             MOVS     R0,#+1
   \   000000F8   0xE000             B.N      ??nextStep_11
   \                     ??nextStep_10:
   \   000000FA   0x2000             MOVS     R0,#+0
   \                     ??nextStep_11:
   \   000000FC   0xF88D 0x0000      STRB     R0,[SP, #+0]
    456          
    457          	if (primaryWheelState != newPrimaryWheelState) {
   \   00000100   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000104   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000108   0x4582             CMP      R10,R0
   \   0000010A   0xD00A             BEQ.N    ??nextStep_12
    458          		primaryWheelState = newPrimaryWheelState;
   \   0000010C   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000110   0x4682             MOV      R10,R0
    459          		trigger_event_e s = primaryWheelState ? SHAFT_PRIMARY_UP : SHAFT_PRIMARY_DOWN;
    460          		state->decodeTriggerEvent(s, time PASS_ENGINE_PARAMETER);
   \   00000112   0xEE18 0x2A90      VMOV     R2,S17
   \   00000116   0x17D3             ASRS     R3,R2,#+31
   \   00000118   0x4651             MOV      R1,R10
   \   0000011A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000011C   0x4658             MOV      R0,R11
   \   0000011E   0x.... 0x....      BL       _ZN12TriggerState18decodeTriggerEventE15trigger_event_ex
    461          	}
    462          
    463          	if (secondaryWheelState != newSecondaryWheelState) {
   \                     ??nextStep_12:
   \   00000122   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000126   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000128   0x4287             CMP      R7,R0
   \   0000012A   0xD012             BEQ.N    ??nextStep_13
    464          		secondaryWheelState = newSecondaryWheelState;
   \   0000012C   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000130   0x0007             MOVS     R7,R0
    465          		trigger_event_e s = secondaryWheelState ? SHAFT_SECONDARY_UP : SHAFT_SECONDARY_DOWN;
   \   00000132   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000134   0x2F00             CMP      R7,#+0
   \   00000136   0xD002             BEQ.N    ??nextStep_14
   \   00000138   0xF05F 0x0903      MOVS     R9,#+3
   \   0000013C   0xE001             B.N      ??nextStep_15
   \                     ??nextStep_14:
   \   0000013E   0xF05F 0x0902      MOVS     R9,#+2
    466          		state->decodeTriggerEvent(s, time PASS_ENGINE_PARAMETER);
   \                     ??nextStep_15:
   \   00000142   0xEE18 0x2A90      VMOV     R2,S17
   \   00000146   0x17D3             ASRS     R3,R2,#+31
   \   00000148   0x4649             MOV      R1,R9
   \   0000014A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000014C   0x4658             MOV      R0,R11
   \   0000014E   0x.... 0x....      BL       _ZN12TriggerState18decodeTriggerEventE15trigger_event_ex
    467          	}
    468          
    469          	if (thirdWheelState != new3rdWheelState) {
   \                     ??nextStep_13:
   \   00000152   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000156   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000015A   0x4580             CMP      R8,R0
   \   0000015C   0xD014             BEQ.N    ??nextStep_16
    470          		thirdWheelState = new3rdWheelState;
   \   0000015E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000162   0x4680             MOV      R8,R0
    471          		trigger_event_e s = thirdWheelState ? SHAFT_3RD_UP : SHAFT_3RD_DOWN;
   \   00000164   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000168   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000016C   0xD002             BEQ.N    ??nextStep_17
   \   0000016E   0xF05F 0x0905      MOVS     R9,#+5
   \   00000172   0xE001             B.N      ??nextStep_18
   \                     ??nextStep_17:
   \   00000174   0xF05F 0x0904      MOVS     R9,#+4
    472          		state->decodeTriggerEvent(s, time PASS_ENGINE_PARAMETER);
   \                     ??nextStep_18:
   \   00000178   0xEE18 0x2A90      VMOV     R2,S17
   \   0000017C   0x17D3             ASRS     R3,R2,#+31
   \   0000017E   0x4649             MOV      R1,R9
   \   00000180   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000182   0x4658             MOV      R0,R11
   \   00000184   0x.... 0x....      BL       _ZN12TriggerState18decodeTriggerEventE15trigger_event_ex
    473          	}
    474          }
   \                     ??nextStep_16:
   \   00000188   0xB002             ADD      SP,SP,#+8
   \   0000018A   0xECBD 0x8B02      VPOP     {D8}
   \   0000018E   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return
    475          

   \                                 In section .text, align 2, keep-with-next
    476          static void onFindIndex(TriggerState *state) {
    477          	for (int i = 0; i < PWM_PHASE_MAX_WAVE_PER_PWM; i++) {
   \                     _Z11onFindIndexP12TriggerState:
   \   00000000   0x2100             MOVS     R1,#+0
   \                     ??onFindIndex_0:
   \   00000002   0x2903             CMP      R1,#+3
   \   00000004   0xDA07             BGE.N    ??onFindIndex_1
    478          		// todo: that's not the best place for this intermediate data storage, fix it!
    479          		state->expectedTotalTime[i] = state->totalTimeNt[i];
   \   00000006   0xEB10 0x0281      ADDS     R2,R0,R1, LSL #+2
   \   0000000A   0xEB10 0x0381      ADDS     R3,R0,R1, LSL #+2
   \   0000000E   0x699B             LDR      R3,[R3, #+24]
   \   00000010   0x6313             STR      R3,[R2, #+48]
    480          	}
   \   00000012   0x1C49             ADDS     R1,R1,#+1
   \   00000014   0xE7F5             B.N      ??onFindIndex_0
    481          }
   \                     ??onFindIndex_1:
   \   00000016   0x4770             BX       LR               ;; return
    482          

   \                                 In section .text, align 2, keep-with-next
    483          static uint32_t doFindTrigger(TriggerStimulatorHelper *helper, TriggerShape * shape,
    484          		trigger_config_s const*triggerConfig, TriggerState *state DECLARE_ENGINE_PARAMETER_S) {
   \                     _Z13doFindTriggerP23TriggerStimulatorHelperP12TriggerShapePK16trigger_config_sP12TriggerState:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
    485          	for (int i = 0; i < 4 * PWM_PHASE_MAX_COUNT; i++) {
   \   0000000E   0xF05F 0x0800      MOVS     R8,#+0
   \                     ??doFindTrigger_0:
   \   00000012   0xF5B8 0x7F7C      CMP      R8,#+1008
   \   00000016   0xDA0E             BGE.N    ??doFindTrigger_1
    486          		helper->nextStep(state, shape, i, triggerConfig PASS_ENGINE_PARAMETER);
   \   00000018   0x9600             STR      R6,[SP, #+0]
   \   0000001A   0x4643             MOV      R3,R8
   \   0000001C   0x002A             MOVS     R2,R5
   \   0000001E   0x0039             MOVS     R1,R7
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       _ZN23TriggerStimulatorHelper8nextStepEP12TriggerStateP12TriggerShapeiPK16trigger_config_s
    487          
    488          		if (state->shaft_is_synchronized)
   \   00000026   0x7938             LDRB     R0,[R7, #+4]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD001             BEQ.N    ??doFindTrigger_2
    489          			return i;
   \   0000002C   0x4640             MOV      R0,R8
   \   0000002E   0xE007             B.N      ??doFindTrigger_3
    490          	}
   \                     ??doFindTrigger_2:
   \   00000030   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000034   0xE7ED             B.N      ??doFindTrigger_0
    491          	firmwareError("findTriggerZeroEventIndex() failed");
   \                     ??doFindTrigger_1:
   \   00000036   0x....             LDR.N    R0,??DataTable14_26
   \   00000038   0x.... 0x....      BL       firmwareError
    492          	return EFI_ERROR_CODE;
   \   0000003C   0xF05F 0x30FF      MOVS     R0,#-1
   \                     ??doFindTrigger_3:
   \   00000040   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    493          }
    494          
    495          /**
    496           * Trigger shape is defined in a way which is convenient for trigger shape definition
    497           * On the other hand, trigger decoder indexing begins from synchronization event.
    498           *
    499           * This function finds the index of synchronization event within TriggerShape
    500           */

   \                                 In section .text, align 2, keep-with-next
    501          uint32_t findTriggerZeroEventIndex(TriggerShape * shape, trigger_config_s const*triggerConfig
    502          DECLARE_ENGINE_PARAMETER_S) {
   \                     _Z25findTriggerZeroEventIndexP12TriggerShapePK16trigger_config_s:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB0B0             SUB      SP,SP,#+192
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
    503          
    504          	// todo: should this variable be declared 'static' to reduce stack usage?
    505          	TriggerState state;
   \   0000000A   0xA802             ADD      R0,SP,#+8
   \   0000000C   0x.... 0x....      BL       _ZN12TriggerStateC1Ev
    506          	errorDetection.clear();
   \   00000010   0x....             LDR.N    R0,??DataTable14_2
   \   00000012   0x.... 0x....      BL       _ZN13cyclic_bufferIiE5clearEv
    507          
    508          	// todo: should this variable be declared 'static' to reduce stack usage?
    509          	TriggerStimulatorHelper helper;
   \   00000016   0xA801             ADD      R0,SP,#+4
   \   00000018   0x.... 0x....      BL       _ZN23TriggerStimulatorHelperC1Ev
    510          
    511          	uint32_t index = doFindTrigger(&helper, shape, triggerConfig, &state PASS_ENGINE_PARAMETER);
   \   0000001C   0xAB02             ADD      R3,SP,#+8
   \   0000001E   0x002A             MOVS     R2,R5
   \   00000020   0x0021             MOVS     R1,R4
   \   00000022   0x.... 0x....      BL       _Z13doFindTriggerP23TriggerStimulatorHelperP12TriggerShapePK16trigger_config_sP12TriggerState
   \   00000026   0x0006             MOVS     R6,R0
    512          	if (index == EFI_ERROR_CODE) {
   \   00000028   0xF116 0x0F01      CMN      R6,#+1
   \   0000002C   0xD101             BNE.N    ??findTriggerZeroEventIndex_0
    513          		return index;
   \   0000002E   0x0030             MOVS     R0,R6
   \   00000030   0xE061             B.N      ??findTriggerZeroEventIndex_1
    514          	}
    515          	efiAssert(state.getTotalRevolutionCounter() == 1, "totalRevolutionCounter", EFI_ERROR_CODE);
   \                     ??findTriggerZeroEventIndex_0:
   \   00000032   0xA802             ADD      R0,SP,#+8
   \   00000034   0x.... 0x....      BL       _ZN12TriggerState25getTotalRevolutionCounterEv
   \   00000038   0x2801             CMP      R0,#+1
   \   0000003A   0xD005             BEQ.N    ??findTriggerZeroEventIndex_2
   \   0000003C   0x....             LDR.N    R0,??DataTable14_27
   \   0000003E   0x.... 0x....      BL       firmwareError
   \   00000042   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000046   0xE056             B.N      ??findTriggerZeroEventIndex_1
    516          
    517          	/**
    518          	 * Now that we have just located the synch point, we can simulate the whole cycle
    519          	 * in order to calculate expected duty cycle
    520          	 *
    521          	 * todo: add a comment why are we doing '2 * shape->getSize()' here?
    522          	 */
    523          	state.cycleCallback = onFindIndex;
   \                     ??findTriggerZeroEventIndex_2:
   \   00000048   0x....             LDR.N    R0,??DataTable14_28
   \   0000004A   0x9002             STR      R0,[SP, #+8]
    524          
    525          	int startIndex = engineConfiguration->useOnlyFrontForTrigger ? index + 2 : index + 1;
   \   0000004C   0x....             LDR.N    R0,??DataTable14_7
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0xF890 0x05E5      LDRB     R0,[R0, #+1509]
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x0980             LSRS     R0,R0,#+6
   \   00000058   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD002             BEQ.N    ??findTriggerZeroEventIndex_3
   \   00000060   0xF116 0x0802      ADDS     R8,R6,#+2
   \   00000064   0xE001             B.N      ??findTriggerZeroEventIndex_4
   \                     ??findTriggerZeroEventIndex_3:
   \   00000066   0xF116 0x0801      ADDS     R8,R6,#+1
    526          
    527          	for (uint32_t i = startIndex; i <= index + 2 * shape->getSize(); i++) {
   \                     ??findTriggerZeroEventIndex_4:
   \   0000006A   0x4647             MOV      R7,R8
   \                     ??findTriggerZeroEventIndex_5:
   \   0000006C   0x0020             MOVS     R0,R4
   \   0000006E   0x.... 0x....      BL       _ZNK12TriggerShape7getSizeEv
   \   00000072   0xEB16 0x0040      ADDS     R0,R6,R0, LSL #+1
   \   00000076   0x42B8             CMP      R0,R7
   \   00000078   0xD313             BCC.N    ??findTriggerZeroEventIndex_6
    528          		helper.nextStep(&state, shape, i, triggerConfig PASS_ENGINE_PARAMETER);
   \   0000007A   0x9500             STR      R5,[SP, #+0]
   \   0000007C   0x003B             MOVS     R3,R7
   \   0000007E   0x0022             MOVS     R2,R4
   \   00000080   0xA902             ADD      R1,SP,#+8
   \   00000082   0xA801             ADD      R0,SP,#+4
   \   00000084   0x.... 0x....      BL       _ZN23TriggerStimulatorHelper8nextStepEP12TriggerStateP12TriggerShapeiPK16trigger_config_s
    529          		if (engineConfiguration->useOnlyFrontForTrigger)
   \   00000088   0x....             LDR.N    R0,??DataTable14_7
   \   0000008A   0x6800             LDR      R0,[R0, #+0]
   \   0000008C   0xF890 0x05E5      LDRB     R0,[R0, #+1509]
   \   00000090   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000092   0x0980             LSRS     R0,R0,#+6
   \   00000094   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xD000             BEQ.N    ??findTriggerZeroEventIndex_7
    530          			i++;
   \   0000009C   0x1C7F             ADDS     R7,R7,#+1
    531          	}
   \                     ??findTriggerZeroEventIndex_7:
   \   0000009E   0x1C7F             ADDS     R7,R7,#+1
   \   000000A0   0xE7E4             B.N      ??findTriggerZeroEventIndex_5
    532          	efiAssert(state.getTotalRevolutionCounter() == 3, "totalRevolutionCounter2 expected 3", EFI_ERROR_CODE);
   \                     ??findTriggerZeroEventIndex_6:
   \   000000A2   0xA802             ADD      R0,SP,#+8
   \   000000A4   0x.... 0x....      BL       _ZN12TriggerState25getTotalRevolutionCounterEv
   \   000000A8   0x2803             CMP      R0,#+3
   \   000000AA   0xD005             BEQ.N    ??findTriggerZeroEventIndex_8
   \   000000AC   0x....             LDR.N    R0,??DataTable14_29
   \   000000AE   0x.... 0x....      BL       firmwareError
   \   000000B2   0xF05F 0x30FF      MOVS     R0,#-1
   \   000000B6   0xE01E             B.N      ??findTriggerZeroEventIndex_1
    533          
    534          	for (int i = 0; i < PWM_PHASE_MAX_WAVE_PER_PWM; i++) {
   \                     ??findTriggerZeroEventIndex_8:
   \   000000B8   0x2700             MOVS     R7,#+0
   \                     ??findTriggerZeroEventIndex_9:
   \   000000BA   0x2F03             CMP      R7,#+3
   \   000000BC   0xDA14             BGE.N    ??findTriggerZeroEventIndex_10
    535          		shape->dutyCycle[i] = 1.0 * state.expectedTotalTime[i] / HELPER_PERIOD;
   \   000000BE   0xA802             ADD      R0,SP,#+8
   \   000000C0   0xEB10 0x0087      ADDS     R0,R0,R7, LSL #+2
   \   000000C4   0x6B00             LDR      R0,[R0, #+48]
   \   000000C6   0x.... 0x....      BL       __aeabi_i2d
   \   000000CA   0x2200             MOVS     R2,#+0
   \   000000CC   0x....             LDR.N    R3,??DataTable14_13  ;; 0x3ff00000
   \   000000CE   0x.... 0x....      BL       __aeabi_dmul
   \   000000D2   0x2200             MOVS     R2,#+0
   \   000000D4   0x....             LDR.N    R3,??DataTable14_30  ;; 0x40f86a00
   \   000000D6   0x.... 0x....      BL       __aeabi_ddiv
   \   000000DA   0x.... 0x....      BL       __aeabi_d2f
   \   000000DE   0xEB14 0x0187      ADDS     R1,R4,R7, LSL #+2
   \   000000E2   0x60C8             STR      R0,[R1, #+12]
    536          	}
   \   000000E4   0x1C7F             ADDS     R7,R7,#+1
   \   000000E6   0xE7E8             B.N      ??findTriggerZeroEventIndex_9
    537          
    538          	return index % shape->getSize();
   \                     ??findTriggerZeroEventIndex_10:
   \   000000E8   0x0020             MOVS     R0,R4
   \   000000EA   0x.... 0x....      BL       _ZNK12TriggerShape7getSizeEv
   \   000000EE   0xFBB6 0xF1F0      UDIV     R1,R6,R0
   \   000000F2   0xFB00 0x6011      MLS      R0,R0,R1,R6
   \                     ??findTriggerZeroEventIndex_1:
   \   000000F6   0xB030             ADD      SP,SP,#+192
   \   000000F8   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    539          }
    540          

   \                                 In section .text, align 2, keep-with-next
    541          void initTriggerDecoderLogger(Logging *sharedLogger) {
    542          	logger = sharedLogger;
   \                     _Z24initTriggerDecoderLoggerP7Logging:
   \   00000000   0x....             LDR.N    R1,??DataTable14_15
   \   00000002   0x6008             STR      R0,[R1, #+0]
    543          }
   \   00000004   0x4770             BX       LR               ;; return
    544          

   \                                 In section .text, align 2, keep-with-next
    545          void initTriggerDecoder(void) {
   \                     _Z18initTriggerDecoderv:
   \   00000000   0xB580             PUSH     {R7,LR}
    546          #if (EFI_PROD_CODE || EFI_SIMULATOR)
    547          	outputPinRegisterExt2("trg_err", &triggerDecoderErrorPin, boardConfiguration->triggerErrorPin, &boardConfiguration->triggerErrorPinMode);
   \   00000002   0x....             LDR.N    R0,??DataTable14_31
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF510 0x7317      ADDS     R3,R0,#+604
   \   0000000A   0x....             LDR.N    R0,??DataTable14_31
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0xF8D0 0x2258      LDR      R2,[R0, #+600]
   \   00000012   0x....             LDR.N    R1,??DataTable14_1
   \   00000014   0x....             LDR.N    R0,??DataTable14_32
   \   00000016   0x.... 0x....      BL       _Z21outputPinRegisterExt2PKcP9OutputPin11brain_pin_eP17pin_output_mode_e
    548          #endif
    549          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x00000168         DC32     0x168

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x000002D0         DC32     0x2d0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x447A0000         DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x43340000         DC32     0x43340000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x43B40000         DC32     0x43b40000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x44070000         DC32     0x44070000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x44340000         DC32     0x44340000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x47C35000         DC32     0x47c35000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x........         DC32     triggerDecoderErrorPin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x........         DC32     errorDetection

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   0x........         DC32     __dso_handle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \   00000000   0x........         DC32     _ZN13cyclic_bufferIiED1Ev

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \   00000000   0x........         DC32     `?<Constant "unexpected signal">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \   00000000   0x........         DC32     eventIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_7:
   \   00000000   0x........         DC32     engineConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_8:
   \   00000000   0x6422C401         DC32     0x6422c401

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_9:
   \   00000000   0x6422C400         DC32     0x6422c400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_10:
   \   00000000   0x........         DC32     _engine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_11:
   \   00000000   0x........         DC32     _engine+0xDDC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_12:
   \   00000000   0x........         DC32     _engine+0xDE0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_13:
   \   00000000   0x3FF00000         DC32     0x3ff00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_14:
   \   00000000   0x........         DC32     `?<Constant "gap=%f @ %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_15:
   \   00000000   0x........         DC32     logger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_16:
   \   00000000   0x........         DC32     _engine+0x16F0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_17:
   \   00000000   0x........         DC32     lastDecodingErrorTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_18:
   \   00000000   0x........         DC32     `?<Constant "error: synchronizatio...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_19:
   \   00000000   0x........         DC32     `?<Constant "trigger decoding issu...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_20:
   \   00000000   0x........         DC32     `?<Constant "total count">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_21:
   \   00000000   0x........         DC32     `?<Constant "skipped count">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_22:
   \   00000000   0x........         DC32     `?<Constant "totalTeethCount is zero">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_23:
   \   00000000   0x........         DC32     `?<Constant "TriggerShape is NULL">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_24:
   \   00000000   0x........         DC32     `?<Constant "initializeTriggerShape()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_25:
   \   00000000   0x........         DC32     `?<Constant "initializeTriggerShap...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_26:
   \   00000000   0x........         DC32     `?<Constant "findTriggerZeroEventI...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_27:
   \   00000000   0x........         DC32     `?<Constant "totalRevolutionCounter">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_28:
   \   00000000   0x........         DC32     _Z11onFindIndexP12TriggerState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_29:
   \   00000000   0x........         DC32     `?<Constant "totalRevolutionCounte...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_30:
   \   00000000   0x40F86A00         DC32     0x40f86a00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_31:
   \   00000000   0x........         DC32     boardConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_32:
   \   00000000   0x........         DC32     `?<Constant "trg_err">`

   \                                 In section .init_array, align 4, keep-with-next, root
   \   00000000   0x........         DC32    RELOC_ARM_TARGET1 __sti__routine

   \                                 In section .rodata, align 4
   \                     `?<Constant "total count">`:
   \   00000000   0x74 0x6F          DC8 "total count"
   \              0x74 0x61    
   \              0x6C 0x20    
   \              0x63 0x6F    
   \              0x75 0x6E    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "skipped count">`:
   \   00000000   0x73 0x6B          DC8 "skipped count"
   \              0x69 0x70    
   \              0x70 0x65    
   \              0x64 0x20    
   \              0x63 0x6F    
   \              0x75 0x6E    
   \              0x74 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "totalTeethCount is zero">`:
   \   00000000   0x74 0x6F          DC8 "totalTeethCount is zero"
   \              0x74 0x61    
   \              0x6C 0x54    
   \              0x65 0x65    
   \              0x74 0x68    
   \              0x43 0x6F    
   \              0x75 0x6E    
   \              0x74 0x20    
   \              0x69 0x73    
   \              0x20 0x7A    
   \              0x65 0x72    
   \              0x6F 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "TriggerShape is NULL">`:
   \   00000000   0x54 0x72          DC8 "TriggerShape is NULL"
   \              0x69 0x67    
   \              0x67 0x65    
   \              0x72 0x53    
   \              0x68 0x61    
   \              0x70 0x65    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x4E 0x55    
   \              0x4C 0x4C    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "findTriggerZeroEventI...">`:
   \   00000000   0x66 0x69          DC8 "findTriggerZeroEventIndex() failed"
   \              0x6E 0x64    
   \              0x54 0x72    
   \              0x69 0x67    
   \              0x67 0x65    
   \              0x72 0x5A    
   \              0x65 0x72    
   \              0x6F 0x45    
   \              0x76 0x65    
   \              0x6E 0x74    
   \              0x49 0x6E    
   \              0x64 0x65    
   \              0x78 0x28    
   \              0x29 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "totalRevolutionCounter">`:
   \   00000000   0x74 0x6F          DC8 "totalRevolutionCounter"
   \              0x74 0x61    
   \              0x6C 0x52    
   \              0x65 0x76    
   \              0x6F 0x6C    
   \              0x75 0x74    
   \              0x69 0x6F    
   \              0x6E 0x43    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "totalRevolutionCounte...">`:
   \   00000000   0x74 0x6F          DC8 "totalRevolutionCounter2 expected 3"
   \              0x74 0x61    
   \              0x6C 0x52    
   \              0x65 0x76    
   \              0x6F 0x6C    
   \              0x75 0x74    
   \              0x69 0x6F    
   \              0x6E 0x43    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x32 0x20    
   \              0x65 0x78    
   \              0x70 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x33    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "trg_err">`:
   \   00000000   0x74 0x72          DC8 "trg_err"
   \              0x67 0x5F    
   \              0x65 0x72    
   \              0x72 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "initializeTriggerShape()">`:
   \   00000000   0x69 0x6E          DC8 "initializeTriggerShape()"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x54 0x72    
   \              0x69 0x67    
   \              0x67 0x65    
   \              0x72 0x53    
   \              0x68 0x61    
   \              0x70 0x65    
   \              0x28 0x29    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "initializeTriggerShap...">`:
   \   00000000   0x69 0x6E          DC8 "initializeTriggerShape() not implemented: %d"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x54 0x72    
   \              0x69 0x67    
   \              0x67 0x65    
   \              0x72 0x53    
   \              0x68 0x61    
   \              0x70 0x65    
   \              0x28 0x29    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x69    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x65 0x64    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "unexpected signal">`:
   \   00000000   0x75 0x6E          DC8 "unexpected signal"
   \              0x65 0x78    
   \              0x70 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x73    
   \              0x69 0x67    
   \              0x6E 0x61    
   \              0x6C 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "gap=%f @ %d">`:
   \   00000000   0x67 0x61          DC8 "gap=%f @ %d"
   \              0x70 0x3D    
   \              0x25 0x66    
   \              0x20 0x40    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "error: synchronizatio...">`:
   \   00000000   0x65 0x72          DC8 65H, 72H, 72H, 6FH, 72H, 3AH, 20H, 73H
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x73    
   \   00000008   0x79 0x6E          DC8 79H, 6EH, 63H, 68H, 72H, 6FH, 6EH, 69H
   \              0x63 0x68    
   \              0x72 0x6F    
   \              0x6E 0x69    
   \   00000010   0x7A 0x61          DC8 7AH, 61H, 74H, 69H, 6FH, 6EH, 50H, 6FH
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x50 0x6F    
   \   00000018   0x69 0x6E          DC8 69H, 6EH, 74H, 20H, 40H, 20H, 69H, 6EH
   \              0x74 0x20    
   \              0x40 0x20    
   \              0x69 0x6E    
   \   00000020   0x64 0x65          DC8 64H, 65H, 78H, 20H, 25H, 64H, 20H, 65H
   \              0x78 0x20    
   \              0x25 0x64    
   \              0x20 0x65    
   \   00000028   0x78 0x70          DC8 78H, 70H, 65H, 63H, 74H, 65H, 64H, 20H
   \              0x65 0x63    
   \              0x74 0x65    
   \              0x64 0x20    
   \   00000030   0x25 0x64          DC8 25H, 64H, 2FH, 25H, 64H, 2FH, 25H, 64H
   \              0x2F 0x25    
   \              0x64 0x2F    
   \              0x25 0x64    
   \   00000038   0x20 0x67          DC8 20H, 67H, 6FH, 74H, 20H, 25H, 64H, 2FH
   \              0x6F 0x74    
   \              0x20 0x25    
   \              0x64 0x2F    
   \   00000040   0x25 0x64          DC8 25H, 64H, 2FH, 25H, 64H, 0
   \              0x2F 0x25    
   \              0x64 0x00    
   \   00000046   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "trigger decoding issu...">`:
   \   00000000   0x74 0x72          DC8 74H, 72H, 69H, 67H, 67H, 65H, 72H, 20H
   \              0x69 0x67    
   \              0x67 0x65    
   \              0x72 0x20    
   \   00000008   0x64 0x65          DC8 64H, 65H, 63H, 6FH, 64H, 69H, 6EH, 67H
   \              0x63 0x6F    
   \              0x64 0x69    
   \              0x6E 0x67    
   \   00000010   0x20 0x69          DC8 20H, 69H, 73H, 73H, 75H, 65H, 2EH, 20H
   \              0x73 0x73    
   \              0x75 0x65    
   \              0x2E 0x20    
   \   00000018   0x65 0x78          DC8 65H, 78H, 70H, 65H, 63H, 74H, 65H, 64H
   \              0x70 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \   00000020   0x20 0x25          DC8 20H, 25H, 64H, 2FH, 25H, 64H, 2FH, 25H
   \              0x64 0x2F    
   \              0x25 0x64    
   \              0x2F 0x25    
   \   00000028   0x64 0x20          DC8 64H, 20H, 67H, 6FH, 74H, 20H, 25H, 64H
   \              0x67 0x6F    
   \              0x74 0x20    
   \              0x25 0x64    
   \   00000030   0x2F 0x25          DC8 2FH, 25H, 64H, 2FH, 25H, 64H, 0
   \              0x64 0x2F    
   \              0x25 0x64    
   \              0x00         
   \   00000037   0x00               DC8 0

   \                                 In section .text, align 2
   \   __code __interwork __softfp cyclic_buffer<int>::subobject cyclic_buffer()
   \                     _ZN13cyclic_bufferIiEC2Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN13cyclic_bufferIiEC1Ev
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __code __interwork __softfp cyclic_buffer<int>::subobject ~cyclic_buffer()
   \                     _ZN13cyclic_bufferIiED2Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN13cyclic_bufferIiED1Ev
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
    550          
    551          #endif /* EFI_SHAFT_POSITION_INPUT */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   TriggerShape::initializeTriggerShape(Logging *)
        24   -> TriggerShape::calculateTriggerSynchPoint()
        24   -> TriggerShape::clear()
        24   -> TriggerShape::getSize() const
        24   -> configureFordAspireTriggerShape(TriggerShape *)
        24   -> configureHondaAccordCD(TriggerShape *, bool, bool, trigger_wheel_e, trigger_wheel_e, float)
        24   -> configureHondaAccordCDDip(TriggerShape *)
        24   -> configureMazdaProtegeLx(TriggerShape *)
        24   -> configureMazdaProtegeSOHC(TriggerShape *)
        24   -> configureMiniCooperTriggerShape(TriggerShape *)
        24   -> configureNeon1995TriggerShape(TriggerShape *)
        24   -> configureNeon2003TriggerShape(TriggerShape *)
        24   -> configureOnePlus60_2(TriggerShape *, operation_mode_e)
        24   -> configureOnePlusOne(TriggerShape *, operation_mode_e)
        24   -> firmwareError
        24   -> initDodgeRam(TriggerShape *)
        24   -> initializeMazdaMiataNaShape(TriggerShape *)
        24   -> initializeMazdaMiataNbShape(TriggerShape *)
        24   -> initializeMitsubishi4g18(TriggerShape *)
        24   -> initializeSkippedToothTriggerShapeExt(TriggerShape *, int, int, operation_mode_e)
        24   -> multi_wave_s::checkSwitchTimes(int)
        24   -> scheduleMsg
        24   -> setToothedWheelConfiguration(TriggerShape *, int, int, operation_mode_e)
        24   -> setVwConfiguration(TriggerShape *)
      72   TriggerState::decodeTriggerEvent(trigger_event_e, int64_t)
        72   -- Indirect call
        72   -> OutputPin::setValue(int)
        72   -> TriggerState::clear()
        72   -> __aeabi_d2f
        72   -> __aeabi_ddiv
        72   -> __aeabi_dmul
        72   -> __aeabi_f2d
        72   -> __aeabi_ui2d
        72   -> cyclic_buffer<int>::add(int)
        72   -> firmwareError
        72   -> getTimeNowNt
        72   -> isTriggerDecoderError()
        72   -> memcpy
        72   -> scheduleMsg
        72   -> warning
      16   TriggerState::getTriggerDutyCycle(int)
        16   -> __aeabi_l2f
       0   TriggerStimulatorHelper::TriggerStimulatorHelper()
      64   TriggerStimulatorHelper::nextStep(TriggerState *, TriggerShape *, int, trigger_config_s const *)
        64   -> TriggerShape::getSize() const
        64   -> TriggerState::decodeTriggerEvent(trigger_event_e, int64_t)
        64   -> multi_wave_s::getChannelState(int, int) const
        64   -> multi_wave_s::getSwitchTime(int) const
       8   TriggerStimulatorHelper::subobject TriggerStimulatorHelper()
         8   -> TriggerStimulatorHelper::TriggerStimulatorHelper()
       8   __sti__routine()
         8   -> OutputPin::OutputPin()
         8   -> __aeabi_atexit
         8   -> cyclic_buffer<int>::cyclic_buffer()
      56   addSkippedToothTriggerEvents(trigger_wheel_e, TriggerShape *, int, int, float, float, float, float, float)
        56   -> TriggerShape::addEvent(float, trigger_wheel_e, trigger_value_e, float, float)
        56   -> firmwareError
      24   configureOnePlus60_2(TriggerShape *, operation_mode_e)
        24   -> TriggerShape::addEvent(float, trigger_wheel_e, trigger_value_e)
        24   -> TriggerShape::reset(operation_mode_e, bool)
        24   -> addSkippedToothTriggerEvents(trigger_wheel_e, TriggerShape *, int, int, float, float, float, float, float)
      24   configureOnePlusOne(TriggerShape *, operation_mode_e)
        24   -> TriggerShape::addEvent(float, trigger_wheel_e, trigger_value_e)
        24   -> TriggerShape::reset(operation_mode_e, bool)
        24   -> getEngineCycle(operation_mode_e)
       0   cyclic_buffer<int>::add(int)
      16   cyclic_buffer<int>::baseC(int)
        16   -> cyclic_buffer<int>::setSize(int)
       8   cyclic_buffer<int>::clear()
         8   -> memset
       8   cyclic_buffer<int>::cyclic_buffer()
         8   -> cyclic_buffer<int>::baseC(int)
      16   cyclic_buffer<int>::setSize(int)
        16   -> cyclic_buffer<int>::clear()
       8   cyclic_buffer<int>::subobject cyclic_buffer()
         8   -> cyclic_buffer<int>::cyclic_buffer()
       8   cyclic_buffer<int>::subobject ~cyclic_buffer()
         8   -> cyclic_buffer<int>::~cyclic_buffer()
      12   cyclic_buffer<int>::sum(int)
       0   cyclic_buffer<int>::~cyclic_buffer()
      32   doFindTrigger(TriggerStimulatorHelper *, TriggerShape *, trigger_config_s const *, TriggerState *)
        32   -> TriggerStimulatorHelper::nextStep(TriggerState *, TriggerShape *, int, trigger_config_s const *)
        32   -> firmwareError
     216   findTriggerZeroEventIndex(TriggerShape *, trigger_config_s const *)
       216   -> TriggerShape::getSize() const
       216   -> TriggerState::TriggerState()
       216   -> TriggerState::getTotalRevolutionCounter()
       216   -> TriggerStimulatorHelper::TriggerStimulatorHelper()
       216   -> TriggerStimulatorHelper::nextStep(TriggerState *, TriggerShape *, int, trigger_config_s const *)
       216   -> __aeabi_d2f
       216   -> __aeabi_ddiv
       216   -> __aeabi_dmul
       216   -> __aeabi_i2d
       216   -> cyclic_buffer<int>::clear()
       216   -> doFindTrigger(TriggerStimulatorHelper *, TriggerShape *, trigger_config_s const *, TriggerState *)
       216   -> firmwareError
       0   getEngineCycle(operation_mode_e)
       8   initTriggerDecoder()
         8   -> outputPinRegisterExt2(char const *, OutputPin *, brain_pin_e, pin_output_mode_e *)
       0   initTriggerDecoderLogger(Logging *)
      24   initializeSkippedToothTriggerShapeExt(TriggerShape *, int, int, operation_mode_e)
        24   -> TriggerShape::reset(operation_mode_e, bool)
        24   -> TriggerShape::setTriggerSynchronizationGap(float)
        24   -> addSkippedToothTriggerEvents(trigger_wheel_e, TriggerShape *, int, int, float, float, float, float, float)
        24   -> firmwareError
        24   -> getEngineCycle(operation_mode_e)
       8   isTriggerDecoderError()
         8   -> cyclic_buffer<int>::sum(int)
      16   memcpy
        16   -> __aeabi_memcpy
      16   memset
        16   -> __aeabi_memset
       0   onFindIndex(TriggerState *)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant "TriggerShape is NULL">
      72  ?<Constant "error: synchronizatio...">
      36  ?<Constant "findTriggerZeroEventI...">
      12  ?<Constant "gap=%f @ %d">
      48  ?<Constant "initializeTriggerShap...">
      28  ?<Constant "initializeTriggerShape()">
      16  ?<Constant "skipped count">
      12  ?<Constant "total count">
      36  ?<Constant "totalRevolutionCounte...">
      24  ?<Constant "totalRevolutionCounter">
      24  ?<Constant "totalTeethCount is zero">
       8  ?<Constant "trg_err">
      56  ?<Constant "trigger decoding issu...">
      20  ?<Constant "unexpected signal">
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_10
       4  ??DataTable14_11
       4  ??DataTable14_12
       4  ??DataTable14_13
       4  ??DataTable14_14
       4  ??DataTable14_15
       4  ??DataTable14_16
       4  ??DataTable14_17
       4  ??DataTable14_18
       4  ??DataTable14_19
       4  ??DataTable14_2
       4  ??DataTable14_20
       4  ??DataTable14_21
       4  ??DataTable14_22
       4  ??DataTable14_23
       4  ??DataTable14_24
       4  ??DataTable14_25
       4  ??DataTable14_26
       4  ??DataTable14_27
       4  ??DataTable14_28
       4  ??DataTable14_29
       4  ??DataTable14_3
       4  ??DataTable14_30
       4  ??DataTable14_31
       4  ??DataTable14_32
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable14_8
       4  ??DataTable14_9
       4  ??DataTable2
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
     444  TriggerShape::initializeTriggerShape(Logging *)
    1202  TriggerState::decodeTriggerEvent(trigger_event_e, int64_t)
      54  TriggerState::getTriggerDutyCycle(int)
       2  TriggerStimulatorHelper::TriggerStimulatorHelper()
     402  TriggerStimulatorHelper::nextStep(TriggerState *, TriggerShape *, int, trigger_config_s const *)
      12  TriggerStimulatorHelper::subobject TriggerStimulatorHelper()
      32  __sti__routine()
     290  addSkippedToothTriggerEvents(trigger_wheel_e, TriggerShape *, int, int, float, float, float, float, float)
     150  configureOnePlus60_2(TriggerShape *, operation_mode_e)
      96  configureOnePlusOne(TriggerShape *, operation_mode_e)
      48  cyclic_buffer<int>::add(int)
      22  cyclic_buffer<int>::baseC(int)
      30  cyclic_buffer<int>::clear()
      16  cyclic_buffer<int>::cyclic_buffer()
      28  cyclic_buffer<int>::setSize(int)
      12  cyclic_buffer<int>::subobject cyclic_buffer()
      12  cyclic_buffer<int>::subobject ~cyclic_buffer()
      58  cyclic_buffer<int>::sum(int)
       2  cyclic_buffer<int>::~cyclic_buffer()
      68  doFindTrigger(TriggerStimulatorHelper *, TriggerShape *, trigger_config_s const *, TriggerState *)
     268  errorDetection
       8  eventIndex
     252  findTriggerZeroEventIndex(TriggerShape *, trigger_config_s const *)
      20  getEngineCycle(operation_mode_e)
      28  initTriggerDecoder()
       6  initTriggerDecoderLogger(Logging *)
     120  initializeSkippedToothTriggerShapeExt(TriggerShape *, int, int, operation_mode_e)
      26  isTriggerDecoderError()
       8  lastDecodingErrorTime
       4  logger
      22  memcpy
      22  memset
      24  onFindIndex(TriggerState *)
      16  triggerDecoderErrorPin
       4  -- Other

 
   288 bytes in section .bss
    16 bytes in section .data
     4 bytes in section .init_array
   416 bytes in section .rodata
 3 668 bytes in section .text
 
 3 400 bytes of CODE  memory (+ 272 bytes shared)
   416 bytes of CONST memory
   304 bytes of DATA  memory

Errors: none
Warnings: 2
