###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:08:54 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\trig #
#                       ger\trigger_emulator_algo.cpp                         #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\trig #
#                       ger\trigger_emulator_algo.cpp -lCN                    #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\  #
#                       -lA F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Li #
#                       st\ -o F:\stuff\rusefi_sourceforge\firmware\iar\Debug #
#                       \Obj\ --no_cse --no_unroll --no_inline                #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\t #
#                       rigger_emulator_algo.lst                              #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\tr #
#                       igger_emulator_algo.o                                 #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\trigger\trigger_emulator_algo.cpp
      1          /**
      2           * @file trigger_emulator_algo.cpp
      3           *
      4           * @date Mar 3, 2014
      5           * @author Andrey Belomutskiy, (c) 2012-2015
      6           */
      7          #include "main.h"
      8          
      9          #if EFI_EMULATE_POSITION_SENSORS || defined(__DOXYGEN__)
     10          
     11          #include "trigger_emulator_algo.h"
     12          #include "engine_configuration.h"
     13          #include "LocalVersionHolder.h"
     14          #include "trigger_central.h"
     15          
     16          #if EFI_PROD_CODE
     17          #include "pwm_generator.h"
     18          #endif
     19          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp TriggerEmulatorHelper::subobject TriggerEmulatorHelper()
   \                     _ZN21TriggerEmulatorHelperC2Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN21TriggerEmulatorHelperC1Ev
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     20          TriggerEmulatorHelper::TriggerEmulatorHelper() {
     21          	primaryWheelState = false;
   \                     _ZN21TriggerEmulatorHelperC1Ev:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x7001             STRB     R1,[R0, #+0]
     22          	secondaryWheelState = false;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x7041             STRB     R1,[R0, #+1]
     23          	thirdWheelState = false;
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x7081             STRB     R1,[R0, #+2]
     24          }
   \   0000000C   0x4770             BX       LR               ;; return
     25          
     26          // this is not the only place where we have 'isUpEvent'. todo: reuse

   \                                 In section .data, align 4
     27          static bool_t isUpEvent[6] = { false, true, false, true, false, true };
   \                     isUpEvent:
   \   00000000   0x00 0x01          DC8 0, 1, 0, 1, 0, 1, 0, 0
   \              0x00 0x01    
   \              0x00 0x01    
   \              0x00 0x00    
     28          
     29          EXTERN_ENGINE
     30          ;
     31          

   \                                 In section .text, align 2, keep-with-next
     32          static void fireShaftSignal(trigger_event_e signal) {
   \                     _Z15fireShaftSignal15trigger_event_e:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     33          	if (!engineConfiguration->useOnlyFrontForTrigger || isUpEvent[(int) signal])
   \   00000004   0x....             LDR.N    R0,??DataTable7_13
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF890 0x05E5      LDRB     R0,[R0, #+1509]
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x0980             LSRS     R0,R0,#+6
   \   00000010   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD004             BEQ.N    ??fireShaftSignal_0
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0x....             LDR.N    R0,??DataTable7_14
   \   0000001C   0x5C20             LDRB     R0,[R4, R0]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD003             BEQ.N    ??fireShaftSignal_1
     34          		hwHandleShaftSignal(signal);
   \                     ??fireShaftSignal_0:
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x.... 0x....      BL       _Z19hwHandleShaftSignal15trigger_event_e
     35          }
   \                     ??fireShaftSignal_1:
   \   0000002A   0xBD10             POP      {R4,PC}          ;; return
     36          

   \                                 In section .text, align 2, keep-with-next
     37          void TriggerEmulatorHelper::handleEmulatorCallback(PwmConfig *state, int stateIndex) {
   \                     _ZN21TriggerEmulatorHelper22handleEmulatorCallbackEP9PwmConfigi:
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0015             MOVS     R5,R2
     38          	int prevIndex = (stateIndex + state->phaseCount - 1) % state->phaseCount;
   \   0000000A   0x6D20             LDR      R0,[R4, #+80]
   \   0000000C   0x1940             ADDS     R0,R0,R5
   \   0000000E   0x1E40             SUBS     R0,R0,#+1
   \   00000010   0x6D21             LDR      R1,[R4, #+80]
   \   00000012   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000016   0xFB01 0x0612      MLS      R6,R1,R2,R0
     39          
     40          	bool_t primaryWheelState = state->multiWave.waves[0].pinStates[prevIndex];
   \   0000001A   0x6920             LDR      R0,[R4, #+16]
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x5630             LDRSB    R0,[R6, R0]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD002             BEQ.N    ??handleEmulatorCallback_0
   \   00000024   0xF05F 0x0901      MOVS     R9,#+1
   \   00000028   0xE001             B.N      ??handleEmulatorCallback_1
   \                     ??handleEmulatorCallback_0:
   \   0000002A   0xF05F 0x0900      MOVS     R9,#+0
     41          	int newPrimaryWheelState = state->multiWave.waves[0].pinStates[stateIndex];
   \                     ??handleEmulatorCallback_1:
   \   0000002E   0x6920             LDR      R0,[R4, #+16]
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x5628             LDRSB    R0,[R5, R0]
   \   00000034   0x9000             STR      R0,[SP, #+0]
     42          
     43          	bool_t secondaryWheelState = state->multiWave.waves[1].pinStates[prevIndex];
   \   00000036   0x6920             LDR      R0,[R4, #+16]
   \   00000038   0x6840             LDR      R0,[R0, #+4]
   \   0000003A   0x5630             LDRSB    R0,[R6, R0]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD002             BEQ.N    ??handleEmulatorCallback_2
   \   00000040   0xF05F 0x0A01      MOVS     R10,#+1
   \   00000044   0xE001             B.N      ??handleEmulatorCallback_3
   \                     ??handleEmulatorCallback_2:
   \   00000046   0xF05F 0x0A00      MOVS     R10,#+0
     44          	int newSecondaryWheelState = state->multiWave.waves[1].pinStates[stateIndex];
   \                     ??handleEmulatorCallback_3:
   \   0000004A   0x6920             LDR      R0,[R4, #+16]
   \   0000004C   0x6840             LDR      R0,[R0, #+4]
   \   0000004E   0x562F             LDRSB    R7,[R5, R0]
     45          
     46          	bool_t thirdWheelState = state->multiWave.waves[2].pinStates[prevIndex];
   \   00000050   0x6920             LDR      R0,[R4, #+16]
   \   00000052   0x6880             LDR      R0,[R0, #+8]
   \   00000054   0x5630             LDRSB    R0,[R6, R0]
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD002             BEQ.N    ??handleEmulatorCallback_4
   \   0000005A   0xF05F 0x0B01      MOVS     R11,#+1
   \   0000005E   0xE001             B.N      ??handleEmulatorCallback_5
   \                     ??handleEmulatorCallback_4:
   \   00000060   0xF05F 0x0B00      MOVS     R11,#+0
     47          	int new3rdWheelState = state->multiWave.waves[2].pinStates[stateIndex];
   \                     ??handleEmulatorCallback_5:
   \   00000064   0x6920             LDR      R0,[R4, #+16]
   \   00000066   0x6880             LDR      R0,[R0, #+8]
   \   00000068   0xF915 0x8000      LDRSB    R8,[R5, R0]
     48          
     49          	if (primaryWheelState != newPrimaryWheelState) {
   \   0000006C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000070   0x9800             LDR      R0,[SP, #+0]
   \   00000072   0x4581             CMP      R9,R0
   \   00000074   0xD00B             BEQ.N    ??handleEmulatorCallback_6
     50          		primaryWheelState = newPrimaryWheelState;
   \   00000076   0x9800             LDR      R0,[SP, #+0]
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD002             BEQ.N    ??handleEmulatorCallback_7
   \   0000007C   0xF05F 0x0901      MOVS     R9,#+1
   \   00000080   0xE001             B.N      ??handleEmulatorCallback_8
   \                     ??handleEmulatorCallback_7:
   \   00000082   0xF05F 0x0900      MOVS     R9,#+0
     51          		fireShaftSignal(primaryWheelState ? SHAFT_PRIMARY_UP : SHAFT_PRIMARY_DOWN);
   \                     ??handleEmulatorCallback_8:
   \   00000086   0x4648             MOV      R0,R9
   \   00000088   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008A   0x.... 0x....      BL       _Z15fireShaftSignal15trigger_event_e
     52          	}
     53          
     54          	if (secondaryWheelState != newSecondaryWheelState) {
   \                     ??handleEmulatorCallback_6:
   \   0000008E   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000092   0x45BA             CMP      R10,R7
   \   00000094   0xD011             BEQ.N    ??handleEmulatorCallback_9
     55          		secondaryWheelState = newSecondaryWheelState;
   \   00000096   0x2F00             CMP      R7,#+0
   \   00000098   0xD002             BEQ.N    ??handleEmulatorCallback_10
   \   0000009A   0xF05F 0x0A01      MOVS     R10,#+1
   \   0000009E   0xE001             B.N      ??handleEmulatorCallback_11
   \                     ??handleEmulatorCallback_10:
   \   000000A0   0xF05F 0x0A00      MOVS     R10,#+0
     56          		fireShaftSignal(secondaryWheelState ? SHAFT_SECONDARY_UP : SHAFT_SECONDARY_DOWN);
   \                     ??handleEmulatorCallback_11:
   \   000000A4   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000A8   0xF1BA 0x0F00      CMP      R10,#+0
   \   000000AC   0xD001             BEQ.N    ??handleEmulatorCallback_12
   \   000000AE   0x2003             MOVS     R0,#+3
   \   000000B0   0xE000             B.N      ??handleEmulatorCallback_13
   \                     ??handleEmulatorCallback_12:
   \   000000B2   0x2002             MOVS     R0,#+2
   \                     ??handleEmulatorCallback_13:
   \   000000B4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B6   0x.... 0x....      BL       _Z15fireShaftSignal15trigger_event_e
     57          	}
     58          
     59          	if (thirdWheelState != new3rdWheelState) {
   \                     ??handleEmulatorCallback_9:
   \   000000BA   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000000BE   0x45C3             CMP      R11,R8
   \   000000C0   0xD012             BEQ.N    ??handleEmulatorCallback_14
     60          		thirdWheelState = new3rdWheelState;
   \   000000C2   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000C6   0xD002             BEQ.N    ??handleEmulatorCallback_15
   \   000000C8   0xF05F 0x0B01      MOVS     R11,#+1
   \   000000CC   0xE001             B.N      ??handleEmulatorCallback_16
   \                     ??handleEmulatorCallback_15:
   \   000000CE   0xF05F 0x0B00      MOVS     R11,#+0
     61          		fireShaftSignal(thirdWheelState ? SHAFT_3RD_UP : SHAFT_3RD_DOWN);
   \                     ??handleEmulatorCallback_16:
   \   000000D2   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000000D6   0xF1BB 0x0F00      CMP      R11,#+0
   \   000000DA   0xD001             BEQ.N    ??handleEmulatorCallback_17
   \   000000DC   0x2005             MOVS     R0,#+5
   \   000000DE   0xE000             B.N      ??handleEmulatorCallback_18
   \                     ??handleEmulatorCallback_17:
   \   000000E0   0x2004             MOVS     R0,#+4
   \                     ??handleEmulatorCallback_18:
   \   000000E2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E4   0x.... 0x....      BL       _Z15fireShaftSignal15trigger_event_e
     62          	}
     63          
     64          	//	print("hello %d\r\n", chTimeNow());
     65          }
   \                     ??handleEmulatorCallback_14:
   \   000000E8   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return
     66          
     67          /*
     68           * todo: should we simply re-use instances used by trigger_decoder?
     69           * todo: since we are emulating same shape we are decoding
     70           */

   \                                 In section .bss, align 4
     71          static pin_state_t pinStates1[PWM_PHASE_MAX_COUNT];
   \                     pinStates1:
   \   00000000                      DS8 252

   \                                 In section .bss, align 4
     72          static pin_state_t pinStates2[PWM_PHASE_MAX_COUNT];
   \                     pinStates2:
   \   00000000                      DS8 252

   \                                 In section .bss, align 4
     73          static pin_state_t pinStates3[PWM_PHASE_MAX_COUNT];
   \                     pinStates3:
   \   00000000                      DS8 252

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine:
   \   00000000   0xB580             PUSH     {R7,LR}
     74          static single_wave_s waves[PWM_PHASE_MAX_WAVE_PER_PWM] = { single_wave_s(pinStates1), single_wave_s(pinStates2),
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   0000000A   0x.... 0x....      BL       _ZN13single_wave_sC1EPa
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable7_4
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000016   0x.... 0x....      BL       _ZN13single_wave_sC1EPa
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable7_7
   \   00000022   0x.... 0x....      BL       _ZN13single_wave_sC1EPa
     75          		single_wave_s(pinStates3) };
     76          static single_wave_s sr[PWM_PHASE_MAX_WAVE_PER_PWM] = { waves[0], waves[1], waves[2] };
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable7_8
   \   0000002A   0x....             LDR.N    R1,??DataTable7_3
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0x6001             STR      R1,[R0, #+0]
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable7_8
   \   00000034   0x....             LDR.N    R1,??DataTable7_3
   \   00000036   0x6849             LDR      R1,[R1, #+4]
   \   00000038   0x6041             STR      R1,[R0, #+4]
   \   0000003A   0x....             LDR.N    R0,??DataTable7_8
   \   0000003C   0x....             LDR.N    R1,??DataTable7_3
   \   0000003E   0x6889             LDR      R1,[R1, #+8]
   \   00000040   0x6081             STR      R1,[R0, #+8]
     77          
     78          static float swtchTms[PWM_PHASE_MAX_COUNT];
     79          
     80          PwmConfig triggerSignal(swtchTms, sr);
   \   00000042   0x....             LDR.N    R2,??DataTable7_8
   \   00000044   0x....             LDR.N    R1,??DataTable7_9
   \   00000046   0x....             LDR.N    R0,??DataTable7_10
   \   00000048   0x.... 0x....      BL       _ZN9PwmConfigC1EPfP13single_wave_s
     81          
     82          #define DO_NOT_STOP 999999999
     83          
     84          static int stopEmulationAtIndex = DO_NOT_STOP;
     85          static bool isEmulating = true;
     86          
     87          static Logging *logger;
     88          static LocalVersionHolder emulatorConfigVersion;
   \   0000004C   0x....             LDR.N    R0,??DataTable7_11
   \   0000004E   0x.... 0x....      BL       _ZN18LocalVersionHolderC1Ev
   \   00000052   0x....             LDR.N    R0,??DataTable7_12
   \   00000054   0x.... 0x....      BL       _ZN21TriggerEmulatorHelperC1Ev
   \   00000058   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     waves:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
   \                     sr:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
   \                     swtchTms:
   \   00000000                      DS8 1008

   \                                 In section .bss, align 8
   \                     triggerSignal:
   \   00000000                      DS8 96

   \                                 In section .data, align 4
   \                     stopEmulationAtIndex:
   \   00000000   0x3B9AC9FF         DC32 999999999

   \                                 In section .data, align 1
   \                     isEmulating:
   \   00000000   0x01               DC8 1

   \                                 In section .bss, align 4
   \                     logger:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     emulatorConfigVersion:
   \   00000000                      DS8 4
     89          
     90          #if EFI_WAVE_CHART
     91          #include "wave_chart.h"
     92          extern WaveChart waveChart;
     93          #endif /* EFI_WAVE_CHART */
     94          

   \                                 In section .text, align 4, keep-with-next
     95          void setTriggerEmulatorRPM(int rpm, Engine *engine) {
   \                     _Z21setTriggerEmulatorRPMiP6Engine:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
     96          	engineConfiguration->bc.triggerSimulatorFrequency = rpm;
   \   0000000A   0x....             LDR.N    R0,??DataTable7_13
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0xF8C0 0x4340      STR      R4,[R0, #+832]
     97          	/**
     98          	 * All we need to do here is to change the periodMs
     99          	 * togglePwmState() would see that the periodMs has changed and act accordingly
    100          	 */
    101          	if (rpm == 0) {
   \   00000012   0x2C00             CMP      R4,#+0
   \   00000014   0xD104             BNE.N    ??setTriggerEmulatorRPM_0
    102          		triggerSignal.periodNt = NAN;
   \   00000016   0x....             LDR.N    R0,??DataTable7_10
   \   00000018   0xF07F 0x4100      MVNS     R1,#-2147483648
   \   0000001C   0x6181             STR      R1,[R0, #+24]
   \   0000001E   0xE02F             B.N      ??setTriggerEmulatorRPM_1
    103          	} else {
    104          		float rpmM = getRpmMultiplier(engineConfiguration->operationMode);
   \                     ??setTriggerEmulatorRPM_0:
   \   00000020   0x....             LDR.N    R0,??DataTable7_13
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF8D0 0x01F4      LDR      R0,[R0, #+500]
   \   00000028   0x.... 0x....      BL       _Z16getRpmMultiplier16operation_mode_e
   \   0000002C   0xEEB0 0x8A40      VMOV.F32 S16,S0
    105          		float gRpm = rpm * rpmM / 60.0; // per minute converted to per second
   \   00000030   0xEE00 0x4A10      VMOV     S0,R4
   \   00000034   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000038   0xEE20 0x0A08      VMUL.F32 S0,S0,S16
   \   0000003C   0xEE10 0x0A10      VMOV     R0,S0
   \   00000040   0x.... 0x....      BL       __aeabi_f2d
   \   00000044   0x2200             MOVS     R2,#+0
   \   00000046   0x....             LDR.N    R3,??DataTable7_15  ;; 0x404e0000
   \   00000048   0x.... 0x....      BL       __aeabi_ddiv
   \   0000004C   0x.... 0x....      BL       __aeabi_d2f
   \   00000050   0xEE00 0x0A10      VMOV     S0,R0
    106          		triggerSignal.periodNt = US2NT(frequency2periodUs(gRpm));
   \   00000054   0xEDDF 0x....      VLDR.W   S1,??DataTable7  ;; 0x49742400
   \   00000058   0xEE80 0x0A80      VDIV.F32 S0,S1,S0
   \   0000005C   0xEE10 0x0A10      VMOV     R0,S0
   \   00000060   0x.... 0x....      BL       __aeabi_f2lz
   \   00000064   0x26A8             MOVS     R6,#+168
   \   00000066   0x2700             MOVS     R7,#+0
   \   00000068   0xFBA6 0x2300      UMULL    R2,R3,R6,R0
   \   0000006C   0xFB06 0x3301      MLA      R3,R6,R1,R3
   \   00000070   0xFB07 0x3300      MLA      R3,R7,R0,R3
   \   00000074   0x0010             MOVS     R0,R2
   \   00000076   0x0019             MOVS     R1,R3
   \   00000078   0x.... 0x....      BL       __aeabi_l2f
   \   0000007C   0x....             LDR.N    R1,??DataTable7_10
   \   0000007E   0x6188             STR      R0,[R1, #+24]
    107          	}
    108          #if EFI_WAVE_CHART
    109          	if (engine->isTestMode)
   \                     ??setTriggerEmulatorRPM_1:
   \   00000080   0xF895 0x0280      LDRB     R0,[R5, #+640]
   \   00000084   0x2800             CMP      R0,#+0
   \   00000086   0xD002             BEQ.N    ??setTriggerEmulatorRPM_2
    110          		waveChart.resetWaveChart();
   \   00000088   0x....             LDR.N    R0,??DataTable7_16
   \   0000008A   0x.... 0x....      BL       _ZN9WaveChart14resetWaveChartEv
    111          #endif /* EFI_WAVE_CHART */
    112          
    113          	scheduleMsg(logger, "Emulating position sensor(s). RPM=%d", rpm);
   \                     ??setTriggerEmulatorRPM_2:
   \   0000008E   0x0022             MOVS     R2,R4
   \   00000090   0x....             LDR.N    R1,??DataTable7_17
   \   00000092   0x....             LDR.N    R0,??DataTable7_18
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0x.... 0x....      BL       scheduleMsg
    114          }
   \   0000009A   0xECBD 0x8B02      VPOP     {D8}
   \   0000009E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    115          

   \                                 In section .text, align 2, keep-with-next
    116          static void updateTriggerShapeIfNeeded(PwmConfig *state) {
   \                     _Z26updateTriggerShapeIfNeededP9PwmConfig:
   \   00000000   0xB57F             PUSH     {R0-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    117          	if (emulatorConfigVersion.isOld()) {
   \   00000004   0x....             LDR.N    R0,??DataTable7_11
   \   00000006   0x.... 0x....      BL       _ZN18LocalVersionHolder5isOldEv
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD032             BEQ.N    ??updateTriggerShapeIfNeeded_0
    118          		scheduleMsg(logger, "Stimulator: updating trigger shape: %d/%d %d", emulatorConfigVersion.getVersion(),
    119          				getGlobalConfigurationVersion(), currentTimeMillis());
   \   0000000E   0x.... 0x....      BL       currentTimeMillis
   \   00000012   0x0005             MOVS     R5,R0
   \   00000014   0x.... 0x....      BL       _Z29getGlobalConfigurationVersionv
   \   00000018   0x0006             MOVS     R6,R0
   \   0000001A   0x....             LDR.N    R0,??DataTable7_11
   \   0000001C   0x.... 0x....      BL       _ZN18LocalVersionHolder10getVersionEv
   \   00000020   0x9500             STR      R5,[SP, #+0]
   \   00000022   0x0033             MOVS     R3,R6
   \   00000024   0x0002             MOVS     R2,R0
   \   00000026   0x....             LDR.N    R1,??DataTable7_19
   \   00000028   0x....             LDR.N    R0,??DataTable7_18
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x.... 0x....      BL       scheduleMsg
    120          
    121          		applyNonPersistentConfiguration(logger PASS_ENGINE_PARAMETER);
   \   00000030   0x....             LDR.N    R0,??DataTable7_18
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x.... 0x....      BL       _Z31applyNonPersistentConfigurationP7Logging
    122          
    123          		TriggerShape *s = &engine->triggerShape;
   \   00000038   0x....             LDR.N    R0,??DataTable7_20
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0xF510 0x7521      ADDS     R5,R0,#+644
    124          		pin_state_t *pinStates[PWM_PHASE_MAX_WAVE_PER_PWM] = { s->wave.waves[0].pinStates, s->wave.waves[1].pinStates,
   \   00000040   0xF8D5 0x0B78      LDR      R0,[R5, #+2936]
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x9001             STR      R0,[SP, #+4]
   \   00000048   0xF8D5 0x0B78      LDR      R0,[R5, #+2936]
   \   0000004C   0x6840             LDR      R0,[R0, #+4]
   \   0000004E   0x9002             STR      R0,[SP, #+8]
   \   00000050   0xF8D5 0x0B78      LDR      R0,[R5, #+2936]
   \   00000054   0x6880             LDR      R0,[R0, #+8]
   \   00000056   0x9003             STR      R0,[SP, #+12]
    125          				s->wave.waves[2].pinStates };
    126          		copyPwmParameters(state, s->getSize(), s->wave.switchTimes, PWM_PHASE_MAX_WAVE_PER_PWM, pinStates);
   \   00000058   0x0028             MOVS     R0,R5
   \   0000005A   0x.... 0x....      BL       _ZNK12TriggerShape7getSizeEv
   \   0000005E   0x0001             MOVS     R1,R0
   \   00000060   0xA801             ADD      R0,SP,#+4
   \   00000062   0x9000             STR      R0,[SP, #+0]
   \   00000064   0x2303             MOVS     R3,#+3
   \   00000066   0xF8D5 0x2B7C      LDR      R2,[R5, #+2940]
   \   0000006A   0x0020             MOVS     R0,R4
   \   0000006C   0x.... 0x....      BL       _Z17copyPwmParametersP9PwmConfigiPfiPPa
    127          		state->safe.periodNt = -1; // this would cause loop re-initialization
   \   00000070   0x....             LDR.N    R0,??DataTable7_21  ;; 0xbf800000
   \   00000072   0x63A0             STR      R0,[R4, #+56]
    128          	}
    129          }
   \                     ??updateTriggerShapeIfNeeded_0:
   \   00000074   0xBD7F             POP      {R0-R6,PC}       ;; return
    130          

   \                                 In section .bss, align 4
    131          static TriggerEmulatorHelper helper;
   \                     helper:
   \   00000000                      DS8 4
    132          

   \                                 In section .text, align 2, keep-with-next
    133          static void emulatorApplyPinState(PwmConfig *state, int stateIndex) {
   \                     _Z21emulatorApplyPinStateP9PwmConfigi:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    134          	if (stopEmulationAtIndex == stateIndex) {
   \   00000006   0x....             LDR.N    R0,??DataTable7_22
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x42A8             CMP      R0,R5
   \   0000000C   0xD102             BNE.N    ??emulatorApplyPinState_0
    135          		isEmulating = false;
   \   0000000E   0x....             LDR.N    R0,??DataTable7_23
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x7001             STRB     R1,[R0, #+0]
    136          	}
    137          	if (!isEmulating) {
   \                     ??emulatorApplyPinState_0:
   \   00000014   0x....             LDR.N    R0,??DataTable7_23
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD010             BEQ.N    ??emulatorApplyPinState_1
    138          		return;
    139          	}
    140          #if EFI_PROD_CODE || defined(__DOXYGEN__)
    141          	applyPinState(state, stateIndex);
   \                     ??emulatorApplyPinState_2:
   \   0000001C   0x0029             MOVS     R1,R5
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x.... 0x....      BL       _Z13applyPinStateP9PwmConfigi
    142          #endif /* EFI_PROD_CODE */
    143          	if (engineConfiguration->directSelfStimulation) {
   \   00000024   0x....             LDR.N    R0,??DataTable7_13
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xF890 0x0050      LDRB     R0,[R0, #+80]
   \   0000002C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD004             BEQ.N    ??emulatorApplyPinState_3
    144          		/**
    145          		 * this callback would invoke the input signal handlers directly
    146          		 */
    147          		helper.handleEmulatorCallback(state, stateIndex);
   \   00000034   0x002A             MOVS     R2,R5
   \   00000036   0x0021             MOVS     R1,R4
   \   00000038   0x....             LDR.N    R0,??DataTable7_12
   \   0000003A   0x.... 0x....      BL       _ZN21TriggerEmulatorHelper22handleEmulatorCallbackEP9PwmConfigi
    148          	}
    149          }
   \                     ??emulatorApplyPinState_3:
   \                     ??emulatorApplyPinState_1:
   \   0000003E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    150          

   \                                 In section .text, align 2, keep-with-next
    151          static void setEmulatorAtIndex(int index, Engine *engine) {
    152          	stopEmulationAtIndex = index;
   \                     _Z18setEmulatorAtIndexiP6Engine:
   \   00000000   0x....             LDR.N    R2,??DataTable7_22
   \   00000002   0x6010             STR      R0,[R2, #+0]
    153          }
   \   00000004   0x4770             BX       LR               ;; return
    154          

   \                                 In section .text, align 2, keep-with-next
    155          static void resumeStimulator(Engine *engine) {
    156          	isEmulating = true;
   \                     _Z16resumeStimulatorP6Engine:
   \   00000000   0x....             LDR.N    R1,??DataTable7_23
   \   00000002   0x2201             MOVS     R2,#+1
   \   00000004   0x700A             STRB     R2,[R1, #+0]
    157          	stopEmulationAtIndex = DO_NOT_STOP;
   \   00000006   0x....             LDR.N    R1,??DataTable7_22
   \   00000008   0x....             LDR.N    R2,??DataTable7_24  ;; 0x3b9ac9ff
   \   0000000A   0x600A             STR      R2,[R1, #+0]
    158          }
   \   0000000C   0x4770             BX       LR               ;; return
    159          

   \                                 In section .text, align 2, keep-with-next
    160          void initTriggerEmulatorLogic(Logging *sharedLogger, Engine *engine) {
   \                     _Z24initTriggerEmulatorLogicP7LoggingP6Engine:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    161          	logger = sharedLogger;
   \   00000008   0x....             LDR.N    R0,??DataTable7_18
   \   0000000A   0x6004             STR      R4,[R0, #+0]
    162          
    163          	TriggerShape *s = &engine->triggerShape;
   \   0000000C   0xF515 0x7621      ADDS     R6,R5,#+644
    164          	setTriggerEmulatorRPM(engineConfiguration->bc.triggerSimulatorFrequency, engine);
   \   00000010   0x0029             MOVS     R1,R5
   \   00000012   0x....             LDR.N    R0,??DataTable7_13
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF8D0 0x0340      LDR      R0,[R0, #+832]
   \   0000001A   0x.... 0x....      BL       _Z21setTriggerEmulatorRPMiP6Engine
    165          	pin_state_t *pinStates[PWM_PHASE_MAX_WAVE_PER_PWM] = { s->wave.waves[0].pinStates, s->wave.waves[1].pinStates,
   \   0000001E   0xF8D6 0x0B78      LDR      R0,[R6, #+2936]
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x9004             STR      R0,[SP, #+16]
   \   00000026   0xF8D6 0x0B78      LDR      R0,[R6, #+2936]
   \   0000002A   0x6840             LDR      R0,[R0, #+4]
   \   0000002C   0x9005             STR      R0,[SP, #+20]
   \   0000002E   0xF8D6 0x0B78      LDR      R0,[R6, #+2936]
   \   00000032   0x6880             LDR      R0,[R0, #+8]
   \   00000034   0x9006             STR      R0,[SP, #+24]
    166          			s->wave.waves[2].pinStates };
    167          	triggerSignal.weComplexInit("position sensor", s->getSize(), s->wave.switchTimes, PWM_PHASE_MAX_WAVE_PER_PWM,
    168          			pinStates, updateTriggerShapeIfNeeded, emulatorApplyPinState);
   \   00000036   0x0030             MOVS     R0,R6
   \   00000038   0x.... 0x....      BL       _ZNK12TriggerShape7getSizeEv
   \   0000003C   0x....             LDR.N    R1,??DataTable7_25
   \   0000003E   0x9103             STR      R1,[SP, #+12]
   \   00000040   0x....             LDR.N    R1,??DataTable7_26
   \   00000042   0x9102             STR      R1,[SP, #+8]
   \   00000044   0xA904             ADD      R1,SP,#+16
   \   00000046   0x9101             STR      R1,[SP, #+4]
   \   00000048   0x2103             MOVS     R1,#+3
   \   0000004A   0x9100             STR      R1,[SP, #+0]
   \   0000004C   0xF8D6 0x3B7C      LDR      R3,[R6, #+2940]
   \   00000050   0x0002             MOVS     R2,R0
   \   00000052   0x....             LDR.N    R1,??DataTable7_27
   \   00000054   0x....             LDR.N    R0,??DataTable7_10
   \   00000056   0x.... 0x....      BL       _ZN9PwmConfig13weComplexInitEPKciPfiPPaPFvPS_EPFvS5_iE
    169          
    170          	addConsoleActionIP("rpm", (VoidIntVoidPtr) setTriggerEmulatorRPM, engine);
   \   0000005A   0x002A             MOVS     R2,R5
   \   0000005C   0x....             LDR.N    R1,??DataTable7_28
   \   0000005E   0x....             ADR.N    R0,??DataTable7_1  ;; "rpm"
   \   00000060   0x.... 0x....      BL       addConsoleActionIP
    171          	addConsoleActionIP("stop_stimulator_at_index", (VoidIntVoidPtr) setEmulatorAtIndex, engine);
   \   00000064   0x002A             MOVS     R2,R5
   \   00000066   0x....             LDR.N    R1,??DataTable7_29
   \   00000068   0x....             LDR.N    R0,??DataTable7_30
   \   0000006A   0x.... 0x....      BL       addConsoleActionIP
    172          	addConsoleActionP("resume_stimulator", (VoidPtr) resumeStimulator, engine);
   \   0000006E   0x002A             MOVS     R2,R5
   \   00000070   0x....             LDR.N    R1,??DataTable7_31
   \   00000072   0x....             LDR.N    R0,??DataTable7_32
   \   00000074   0x.... 0x....      BL       addConsoleActionP
    173          }
   \   00000078   0xB008             ADD      SP,SP,#+32
   \   0000007A   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x49742400         DC32     0x49742400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x72 0x70          DC8      "rpm"
   \              0x6D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     pinStates1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     waves

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     pinStates2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     waves+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     pinStates3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     waves+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     sr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     swtchTms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x........         DC32     triggerSignal

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x........         DC32     emulatorConfigVersion

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x........         DC32     helper

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0x........         DC32     engineConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \   00000000   0x........         DC32     isUpEvent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \   00000000   0x404E0000         DC32     0x404e0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \   00000000   0x........         DC32     waveChart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_17:
   \   00000000   0x........         DC32     `?<Constant "Emulating position se...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_18:
   \   00000000   0x........         DC32     logger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_19:
   \   00000000   0x........         DC32     `?<Constant "Stimulator: updating ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_20:
   \   00000000   0x........         DC32     engine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_21:
   \   00000000   0xBF800000         DC32     0xbf800000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_22:
   \   00000000   0x........         DC32     stopEmulationAtIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_23:
   \   00000000   0x........         DC32     isEmulating

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_24:
   \   00000000   0x3B9AC9FF         DC32     0x3b9ac9ff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_25:
   \   00000000   0x........         DC32     _Z21emulatorApplyPinStateP9PwmConfigi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_26:
   \   00000000   0x........         DC32     _Z26updateTriggerShapeIfNeededP9PwmConfig

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_27:
   \   00000000   0x........         DC32     `?<Constant "position sensor">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_28:
   \   00000000   0x........         DC32     _Z21setTriggerEmulatorRPMiP6Engine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_29:
   \   00000000   0x........         DC32     _Z18setEmulatorAtIndexiP6Engine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_30:
   \   00000000   0x........         DC32     `?<Constant "stop_stimulator_at_index">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_31:
   \   00000000   0x........         DC32     _Z16resumeStimulatorP6Engine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_32:
   \   00000000   0x........         DC32     `?<Constant "resume_stimulator">`

   \                                 In section .init_array, align 4, keep-with-next, root
   \   00000000   0x........         DC32    RELOC_ARM_TARGET1 __sti__routine

   \                                 In section .rodata, align 4
   \                     `?<Constant "Emulating position se...">`:
   \   00000000   0x45 0x6D          DC8 "Emulating position sensor(s). RPM=%d"
   \              0x75 0x6C    
   \              0x61 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x70 0x6F    
   \              0x73 0x69    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x73    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x28    
   \              0x73 0x29    
   \              0x2E 0x20    
   \              0x52 0x50    
   \              0x4D 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Stimulator: updating ...">`:
   \   00000000   0x53 0x74          DC8 "Stimulator: updating trigger shape: %d/%d %d"
   \              0x69 0x6D    
   \              0x75 0x6C    
   \              0x61 0x74    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x75 0x70    
   \              0x64 0x61    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x74    
   \              0x72 0x69    
   \              0x67 0x67    
   \              0x65 0x72    
   \              0x20 0x73    
   \              0x68 0x61    
   \              0x70 0x65    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x2F 0x25    
   \              0x64 0x20    
   \              0x25 0x64    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "position sensor">`:
   \   00000000   0x70 0x6F          DC8 "position sensor"
   \              0x73 0x69    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x73    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x72 0x70          DC8 "rpm"
   \              0x6D 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "stop_stimulator_at_index">`:
   \   00000000   0x73 0x74          DC8 "stop_stimulator_at_index"
   \              0x6F 0x70    
   \              0x5F 0x73    
   \              0x74 0x69    
   \              0x6D 0x75    
   \              0x6C 0x61    
   \              0x74 0x6F    
   \              0x72 0x5F    
   \              0x61 0x74    
   \              0x5F 0x69    
   \              0x6E 0x64    
   \              0x65 0x78    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "resume_stimulator">`:
   \   00000000   0x72 0x65          DC8 "resume_stimulator"
   \              0x73 0x75    
   \              0x6D 0x65    
   \              0x5F 0x73    
   \              0x74 0x69    
   \              0x6D 0x75    
   \              0x6C 0x61    
   \              0x74 0x6F    
   \              0x72 0x00    
   \   00000012   0x00 0x00          DC8 0, 0
    174          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   TriggerEmulatorHelper::TriggerEmulatorHelper()
      48   TriggerEmulatorHelper::handleEmulatorCallback(PwmConfig *, int)
        48   -> fireShaftSignal(trigger_event_e)
       8   TriggerEmulatorHelper::subobject TriggerEmulatorHelper()
         8   -> TriggerEmulatorHelper::TriggerEmulatorHelper()
       8   __sti__routine()
         8   -> LocalVersionHolder::LocalVersionHolder()
         8   -> PwmConfig::PwmConfig(float *, single_wave_s *)
         8   -> TriggerEmulatorHelper::TriggerEmulatorHelper()
         8   -> single_wave_s::single_wave_s(signed char *)
      16   emulatorApplyPinState(PwmConfig *, int)
        16   -> TriggerEmulatorHelper::handleEmulatorCallback(PwmConfig *, int)
        16   -> applyPinState(PwmConfig *, int)
       8   fireShaftSignal(trigger_event_e)
         8   -> hwHandleShaftSignal(trigger_event_e)
      48   initTriggerEmulatorLogic(Logging *, Engine *)
        48   -> PwmConfig::weComplexInit(char const *, int, float *, int, signed char **, pwm_cycle_callback *, pwm_gen_callback *)
        48   -> TriggerShape::getSize() const
        48   -> addConsoleActionIP
        48   -> addConsoleActionP
        48   -> setTriggerEmulatorRPM(int, Engine *)
       0   resumeStimulator(Engine *)
       0   setEmulatorAtIndex(int, Engine *)
      32   setTriggerEmulatorRPM(int, Engine *)
        32   -> WaveChart::resetWaveChart()
        32   -> __aeabi_d2f
        32   -> __aeabi_ddiv
        32   -> __aeabi_f2d
        32   -> __aeabi_f2lz
        32   -> __aeabi_l2f
        32   -> getRpmMultiplier(operation_mode_e)
        32   -> scheduleMsg
      32   updateTriggerShapeIfNeeded(PwmConfig *)
        32   -> LocalVersionHolder::getVersion()
        32   -> LocalVersionHolder::isOld()
        32   -> TriggerShape::getSize() const
        32   -> applyNonPersistentConfiguration(Logging *)
        32   -> copyPwmParameters(PwmConfig *, int, float *, int, signed char **)
        32   -> currentTimeMillis
        32   -> getGlobalConfigurationVersion()
        32   -> scheduleMsg


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      40  ?<Constant "Emulating position se...">
      48  ?<Constant "Stimulator: updating ...">
      16  ?<Constant "position sensor">
      20  ?<Constant "resume_stimulator">
       4  ?<Constant "rpm">
      28  ?<Constant "stop_stimulator_at_index">
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_19
       4  ??DataTable7_2
       4  ??DataTable7_20
       4  ??DataTable7_21
       4  ??DataTable7_22
       4  ??DataTable7_23
       4  ??DataTable7_24
       4  ??DataTable7_25
       4  ??DataTable7_26
       4  ??DataTable7_27
       4  ??DataTable7_28
       4  ??DataTable7_29
       4  ??DataTable7_3
       4  ??DataTable7_30
       4  ??DataTable7_31
       4  ??DataTable7_32
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      14  TriggerEmulatorHelper::TriggerEmulatorHelper()
     236  TriggerEmulatorHelper::handleEmulatorCallback(PwmConfig *, int)
      12  TriggerEmulatorHelper::subobject TriggerEmulatorHelper()
      90  __sti__routine()
      64  emulatorApplyPinState(PwmConfig *, int)
       4  emulatorConfigVersion
      44  fireShaftSignal(trigger_event_e)
       4  helper
     124  initTriggerEmulatorLogic(Logging *, Engine *)
       1  isEmulating
       8  isUpEvent
       4  logger
     252  pinStates1
     252  pinStates2
     252  pinStates3
      14  resumeStimulator(Engine *)
       6  setEmulatorAtIndex(int, Engine *)
     160  setTriggerEmulatorRPM(int, Engine *)
      12  sr
       4  stopEmulationAtIndex
    1008  swtchTms
      96  triggerSignal
     118  updateTriggerShapeIfNeeded(PwmConfig *)
      12  waves
       4  -- Other

 
 1 896 bytes in section .bss
    13 bytes in section .data
     4 bytes in section .init_array
   156 bytes in section .rodata
 1 014 bytes in section .text
 
 1 018 bytes of CODE  memory
   156 bytes of CONST memory
 1 909 bytes of DATA  memory

Errors: none
Warnings: 4
