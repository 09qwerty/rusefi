###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:56 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\obd2 #
#                       .cpp                                                  #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\obd2 #
#                       .cpp -lCN F:\stuff\rusefi_sourceforge\firmware\iar\De #
#                       bug\List\ -lA F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\Debug\List\ -o F:\stuff\rusefi_sourceforge\firmware #
#                       \iar\Debug\Obj\ --no_cse --no_unroll --no_inline      #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\o #
#                       bd2.lst                                               #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\ob #
#                       d2.o                                                  #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\obd2.cpp
      1          /*
      2           * @file obd2.cpp
      3           *
      4           * ISO 15765-4
      5           * http://en.wikipedia.org/wiki/OBD-II_PIDs
      6           *
      7           * @date Jun 9, 2015
      8           * @author Andrey Belomutskiy, (c) 2012-2015
      9           *
     10           * This file is part of rusEfi - see http://rusefi.com
     11           *
     12           * rusEfi is free software; you can redistribute it and/or modify it under the terms of
     13           * the GNU General Public License as published by the Free Software Foundation; either
     14           * version 3 of the License, or (at your option) any later version.
     15           *
     16           * rusEfi is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
     17           * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     18           * GNU General Public License for more details.
     19           *
     20           * You should have received a copy of the GNU General Public License along with this program.
     21           * If not, see <http://www.gnu.org/licenses/>.
     22           */
     23          
     24          #include "main.h"
     25          #include "obd2.h"
     26          #include "can_hw.h"
     27          
     28          extern CANTxFrame txmsg;
     29          

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine:
   \   00000000   0xB580             PUSH     {R7,LR}
     30          static LoggingWithStorage logger("obd2");
   \   00000002   0x....             LDR.N    R1,??DataTable2
   \   00000004   0x....             LDR.N    R0,??DataTable2_1
   \   00000006   0x.... 0x....      BL       _ZN18LoggingWithStorageC1EPKc
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     logger:
   \   00000000                      DS8 260
     31          

   \                                 In section .text, align 2, keep-with-next
     32          static void handleGetDataRequest(CANRxFrame *rx) {
   \                     _Z20handleGetDataRequestP10CANRxFrame:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     33          	if (rx->data8[2] == PID_SUPPORTED_PIDS_REQUEST) {
   \   00000004   0x7BA0             LDRB     R0,[R4, #+14]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD12B             BNE.N    ??handleGetDataRequest_0
     34          		scheduleMsg(&logger, "Got lookup request");
   \   0000000A   0x....             LDR.N    R1,??DataTable2_2
   \   0000000C   0x....             LDR.N    R0,??DataTable2_1
   \   0000000E   0x.... 0x....      BL       scheduleMsg
     35          
     36          		commonTxInit(OBD_TEST_RESPONSE);
   \   00000012   0xF44F 0x60FD      MOV      R0,#+2024
   \   00000016   0x.... 0x....      BL       _Z12commonTxIniti
     37          		txmsg.data8[0] = 6; // 6 bytes
   \   0000001A   0x....             LDR.N    R0,??DataTable2_3
   \   0000001C   0x2106             MOVS     R1,#+6
   \   0000001E   0x7201             STRB     R1,[R0, #+8]
     38          		txmsg.data8[1] = 0x41; // mode 1
   \   00000020   0x....             LDR.N    R0,??DataTable2_3
   \   00000022   0x2141             MOVS     R1,#+65
   \   00000024   0x7241             STRB     R1,[R0, #+9]
     39          		txmsg.data8[2] = PID_SUPPORTED_PIDS_REQUEST;
   \   00000026   0x....             LDR.N    R0,??DataTable2_3
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x7281             STRB     R1,[R0, #+10]
     40          
     41          		setTxBit(3, 8 - PID_ENGINE_LOAD);
   \   0000002C   0x2104             MOVS     R1,#+4
   \   0000002E   0x2003             MOVS     R0,#+3
   \   00000030   0x.... 0x....      BL       _Z8setTxBitii
     42          		setTxBit(3, 8 - PID_COOLANT_TEMP);
   \   00000034   0x2103             MOVS     R1,#+3
   \   00000036   0x2003             MOVS     R0,#+3
   \   00000038   0x.... 0x....      BL       _Z8setTxBitii
     43          
     44          		setTxBit(4, 16 - PID_RPM);
   \   0000003C   0x2104             MOVS     R1,#+4
   \   0000003E   0x2004             MOVS     R0,#+4
   \   00000040   0x.... 0x....      BL       _Z8setTxBitii
     45          		setTxBit(4, 16 - PID_TIMING_ADVANCE);
   \   00000044   0x2102             MOVS     R1,#+2
   \   00000046   0x2004             MOVS     R0,#+4
   \   00000048   0x.... 0x....      BL       _Z8setTxBitii
     46          		setTxBit(4, 16 - PID_INTAKE_TEMP);
   \   0000004C   0x2101             MOVS     R1,#+1
   \   0000004E   0x2004             MOVS     R0,#+4
   \   00000050   0x.... 0x....      BL       _Z8setTxBitii
     47          
     48          		setTxBit(5, 24 - PID_THROTTLE);
   \   00000054   0x2107             MOVS     R1,#+7
   \   00000056   0x2005             MOVS     R0,#+5
   \   00000058   0x.... 0x....      BL       _Z8setTxBitii
     49          
     50          		sendMessage();
   \   0000005C   0x.... 0x....      BL       _Z11sendMessagev
   \   00000060   0xE081             B.N      ??handleGetDataRequest_1
     51          	} else if (rx->data8[2] == PID_COOLANT_TEMP) {
   \                     ??handleGetDataRequest_0:
   \   00000062   0x7BA0             LDRB     R0,[R4, #+14]
   \   00000064   0x2805             CMP      R0,#+5
   \   00000066   0xD118             BNE.N    ??handleGetDataRequest_2
     52          		scheduleMsg(&logger, "Got CLT request");
   \   00000068   0x....             LDR.N    R1,??DataTable2_4
   \   0000006A   0x....             LDR.N    R0,??DataTable2_1
   \   0000006C   0x.... 0x....      BL       scheduleMsg
     53          
     54          		int clt = 67; // todo: use real value
   \   00000070   0x2543             MOVS     R5,#+67
     55          
     56          		commonTxInit(OBD_TEST_RESPONSE);
   \   00000072   0xF44F 0x60FD      MOV      R0,#+2024
   \   00000076   0x.... 0x....      BL       _Z12commonTxIniti
     57          		txmsg.data8[0] = 3; // 3 bytes
   \   0000007A   0x....             LDR.N    R0,??DataTable2_3
   \   0000007C   0x2103             MOVS     R1,#+3
   \   0000007E   0x7201             STRB     R1,[R0, #+8]
     58          		txmsg.data8[1] = 0x41; // mode 1
   \   00000080   0x....             LDR.N    R0,??DataTable2_3
   \   00000082   0x2141             MOVS     R1,#+65
   \   00000084   0x7241             STRB     R1,[R0, #+9]
     59          		txmsg.data8[2] = PID_COOLANT_TEMP;
   \   00000086   0x....             LDR.N    R0,??DataTable2_3
   \   00000088   0x2105             MOVS     R1,#+5
   \   0000008A   0x7281             STRB     R1,[R0, #+10]
     60          		txmsg.data8[3] = clt + 40;
   \   0000008C   0xF115 0x0028      ADDS     R0,R5,#+40
   \   00000090   0x....             LDR.N    R1,??DataTable2_3
   \   00000092   0x72C8             STRB     R0,[R1, #+11]
     61          		sendMessage();
   \   00000094   0x.... 0x....      BL       _Z11sendMessagev
   \   00000098   0xE065             B.N      ??handleGetDataRequest_1
     62          	} else if (rx->data8[2] == PID_RPM) {
   \                     ??handleGetDataRequest_2:
   \   0000009A   0x7BA0             LDRB     R0,[R4, #+14]
   \   0000009C   0x280C             CMP      R0,#+12
   \   0000009E   0xD11A             BNE.N    ??handleGetDataRequest_3
     63          		scheduleMsg(&logger, "Got RPM request");
   \   000000A0   0x....             LDR.N    R1,??DataTable2_5
   \   000000A2   0x....             LDR.N    R0,??DataTable2_1
   \   000000A4   0x.... 0x....      BL       scheduleMsg
     64          		unsigned int rpm = 2000*4; //	rotation/min.	((A*256)+B)/4 todo: use real value
   \   000000A8   0xF44F 0x55FA      MOV      R5,#+8000
     65          		commonTxInit(OBD_TEST_RESPONSE);
   \   000000AC   0xF44F 0x60FD      MOV      R0,#+2024
   \   000000B0   0x.... 0x....      BL       _Z12commonTxIniti
     66          		txmsg.data8[0] = 4; // 4 bytes
   \   000000B4   0x....             LDR.N    R0,??DataTable2_3
   \   000000B6   0x2104             MOVS     R1,#+4
   \   000000B8   0x7201             STRB     R1,[R0, #+8]
     67          		txmsg.data8[1] = 0x41; // mode 1
   \   000000BA   0x....             LDR.N    R0,??DataTable2_3
   \   000000BC   0x2141             MOVS     R1,#+65
   \   000000BE   0x7241             STRB     R1,[R0, #+9]
     68          		txmsg.data8[2] = PID_RPM;
   \   000000C0   0x....             LDR.N    R0,??DataTable2_3
   \   000000C2   0x210C             MOVS     R1,#+12
   \   000000C4   0x7281             STRB     R1,[R0, #+10]
     69          		txmsg.data8[3] = ((rpm>>8) & 0xFF);
   \   000000C6   0x0A28             LSRS     R0,R5,#+8
   \   000000C8   0x....             LDR.N    R1,??DataTable2_3
   \   000000CA   0x72C8             STRB     R0,[R1, #+11]
     70          		txmsg.data8[4] = ((rpm) & 0xFF);
   \   000000CC   0x....             LDR.N    R0,??DataTable2_3
   \   000000CE   0x7305             STRB     R5,[R0, #+12]
     71          		sendMessage();
   \   000000D0   0x.... 0x....      BL       _Z11sendMessagev
   \   000000D4   0xE047             B.N      ??handleGetDataRequest_1
     72          		
     73          	} else if (rx->data8[2] == PID_TIMING_ADVANCE) {
   \                     ??handleGetDataRequest_3:
   \   000000D6   0x7BA0             LDRB     R0,[R4, #+14]
   \   000000D8   0x280E             CMP      R0,#+14
   \   000000DA   0xD104             BNE.N    ??handleGetDataRequest_4
     74          		scheduleMsg(&logger, "Got timing request");
   \   000000DC   0x....             LDR.N    R1,??DataTable2_6
   \   000000DE   0x....             LDR.N    R0,??DataTable2_1
   \   000000E0   0x.... 0x....      BL       scheduleMsg
   \   000000E4   0xE03F             B.N      ??handleGetDataRequest_1
     75          	} else if (rx->data8[2] == PID_SPEED) {
   \                     ??handleGetDataRequest_4:
   \   000000E6   0x7BA0             LDRB     R0,[R4, #+14]
   \   000000E8   0x280D             CMP      R0,#+13
   \   000000EA   0xD116             BNE.N    ??handleGetDataRequest_5
     76          		scheduleMsg(&logger, "Got speed request");
   \   000000EC   0x....             LDR.N    R1,??DataTable2_7
   \   000000EE   0x....             LDR.N    R0,??DataTable2_1
   \   000000F0   0x.... 0x....      BL       scheduleMsg
     77          		commonTxInit(OBD_TEST_RESPONSE);
   \   000000F4   0xF44F 0x60FD      MOV      R0,#+2024
   \   000000F8   0x.... 0x....      BL       _Z12commonTxIniti
     78          		txmsg.data8[0] = 3; // 3 bytes
   \   000000FC   0x....             LDR.N    R0,??DataTable2_3
   \   000000FE   0x2103             MOVS     R1,#+3
   \   00000100   0x7201             STRB     R1,[R0, #+8]
     79          		txmsg.data8[1] = 0x41; // mode 1
   \   00000102   0x....             LDR.N    R0,??DataTable2_3
   \   00000104   0x2141             MOVS     R1,#+65
   \   00000106   0x7241             STRB     R1,[R0, #+9]
     80          		txmsg.data8[2] = PID_INTAKE_MAP;
   \   00000108   0x....             LDR.N    R0,??DataTable2_3
   \   0000010A   0x210B             MOVS     R1,#+11
   \   0000010C   0x7281             STRB     R1,[R0, #+10]
     81          		txmsg.data8[3] = 123; // todo: real speed
   \   0000010E   0x....             LDR.N    R0,??DataTable2_3
   \   00000110   0x217B             MOVS     R1,#+123
   \   00000112   0x72C1             STRB     R1,[R0, #+11]
     82          		sendMessage();
   \   00000114   0x.... 0x....      BL       _Z11sendMessagev
   \   00000118   0xE025             B.N      ??handleGetDataRequest_1
     83          	} else if (rx->data8[2] == PID_FUEL_PRESSURE) {
   \                     ??handleGetDataRequest_5:
   \   0000011A   0x7BA0             LDRB     R0,[R4, #+14]
   \   0000011C   0x280A             CMP      R0,#+10
   \   0000011E   0xD104             BNE.N    ??handleGetDataRequest_6
     84          		scheduleMsg(&logger, "Got fuel pressure request");
   \   00000120   0x....             LDR.N    R1,??DataTable2_8
   \   00000122   0x....             LDR.N    R0,??DataTable2_1
   \   00000124   0x.... 0x....      BL       scheduleMsg
   \   00000128   0xE01D             B.N      ??handleGetDataRequest_1
     85          	} else if (rx->data8[2] == PID_INTAKE_MAP) {
   \                     ??handleGetDataRequest_6:
   \   0000012A   0x7BA0             LDRB     R0,[R4, #+14]
   \   0000012C   0x280B             CMP      R0,#+11
   \   0000012E   0xD116             BNE.N    ??handleGetDataRequest_7
     86          		scheduleMsg(&logger, "Got MAP request");
   \   00000130   0x....             LDR.N    R1,??DataTable2_9
   \   00000132   0x....             LDR.N    R0,??DataTable2_1
   \   00000134   0x.... 0x....      BL       scheduleMsg
     87          		commonTxInit(OBD_TEST_RESPONSE);
   \   00000138   0xF44F 0x60FD      MOV      R0,#+2024
   \   0000013C   0x.... 0x....      BL       _Z12commonTxIniti
     88          		txmsg.data8[0] = 3; // 3 bytes
   \   00000140   0x....             LDR.N    R0,??DataTable2_3
   \   00000142   0x2103             MOVS     R1,#+3
   \   00000144   0x7201             STRB     R1,[R0, #+8]
     89          		txmsg.data8[1] = 0x41; // mode 1
   \   00000146   0x....             LDR.N    R0,??DataTable2_3
   \   00000148   0x2141             MOVS     R1,#+65
   \   0000014A   0x7241             STRB     R1,[R0, #+9]
     90          		txmsg.data8[2] = PID_INTAKE_MAP;
   \   0000014C   0x....             LDR.N    R0,??DataTable2_3
   \   0000014E   0x210B             MOVS     R1,#+11
   \   00000150   0x7281             STRB     R1,[R0, #+10]
     91          		txmsg.data8[3] = 46; // todo: real MAP
   \   00000152   0x....             LDR.N    R0,??DataTable2_3
   \   00000154   0x212E             MOVS     R1,#+46
   \   00000156   0x72C1             STRB     R1,[R0, #+11]
     92          		sendMessage();
   \   00000158   0x.... 0x....      BL       _Z11sendMessagev
   \   0000015C   0xE003             B.N      ??handleGetDataRequest_1
     93          	} else {
     94          		scheduleMsg(&logger, "Got unhandled request");
   \                     ??handleGetDataRequest_7:
   \   0000015E   0x....             LDR.N    R1,??DataTable2_10
   \   00000160   0x....             LDR.N    R0,??DataTable2_1
   \   00000162   0x.... 0x....      BL       scheduleMsg
     95          	}
     96          
     97          }
   \                     ??handleGetDataRequest_1:
   \   00000166   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     98          

   \                                 In section .text, align 2, keep-with-next
     99          void obdOnCanPacketRx(CANRxFrame *rx) {
   \                     _Z16obdOnCanPacketRxP10CANRxFrame:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    100          	if (rx->SID != OBD_TEST_REQUEST) {
   \   00000004   0x68A0             LDR      R0,[R4, #+8]
   \   00000006   0x0540             LSLS     R0,R0,#+21       ;; ZeroExtS R0,R0,#+21,#+21
   \   00000008   0x0D40             LSRS     R0,R0,#+21
   \   0000000A   0xF240 0x71DF      MOVW     R1,#+2015
   \   0000000E   0x4288             CMP      R0,R1
   \   00000010   0xD118             BNE.N    ??obdOnCanPacketRx_0
    101          		return;
    102          	}
    103          	if (rx->data8[0] == 2 && rx->data8[1] == OBD_CURRENT_DATA) {
   \                     ??obdOnCanPacketRx_1:
   \   00000012   0x7B20             LDRB     R0,[R4, #+12]
   \   00000014   0x2802             CMP      R0,#+2
   \   00000016   0xD106             BNE.N    ??obdOnCanPacketRx_2
   \   00000018   0x7B60             LDRB     R0,[R4, #+13]
   \   0000001A   0x2801             CMP      R0,#+1
   \   0000001C   0xD103             BNE.N    ??obdOnCanPacketRx_2
    104          		handleGetDataRequest(rx);
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x.... 0x....      BL       _Z20handleGetDataRequestP10CANRxFrame
   \   00000024   0xE00E             B.N      ??obdOnCanPacketRx_3
    105          	} else if (rx->data8[0] == 1 && rx->data8[1] == OBD_STORED_DIAGNOSTIC_TROUBLE_CODES) {
   \                     ??obdOnCanPacketRx_2:
   \   00000026   0x7B20             LDRB     R0,[R4, #+12]
   \   00000028   0x2801             CMP      R0,#+1
   \   0000002A   0xD107             BNE.N    ??obdOnCanPacketRx_4
   \   0000002C   0x7B60             LDRB     R0,[R4, #+13]
   \   0000002E   0x2803             CMP      R0,#+3
   \   00000030   0xD104             BNE.N    ??obdOnCanPacketRx_4
    106          		scheduleMsg(&logger, "Got stored DTC request");
   \   00000032   0x....             LDR.N    R1,??DataTable2_11
   \   00000034   0x....             LDR.N    R0,??DataTable2_1
   \   00000036   0x.... 0x....      BL       scheduleMsg
   \   0000003A   0xE003             B.N      ??obdOnCanPacketRx_3
    107          	} else {
    108          		scheduleMsg(&logger, "Got unhandled OBD message");
   \                     ??obdOnCanPacketRx_4:
   \   0000003C   0x....             LDR.N    R1,??DataTable2_12
   \   0000003E   0x....             LDR.N    R0,??DataTable2_1
   \   00000040   0x.... 0x....      BL       scheduleMsg
    109          	}
    110          }
   \                     ??obdOnCanPacketRx_3:
   \                     ??obdOnCanPacketRx_0:
   \   00000044   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     `?<Constant "obd2">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     logger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     `?<Constant "Got lookup request">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     txmsg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     `?<Constant "Got CLT request">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     `?<Constant "Got RPM request">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     `?<Constant "Got timing request">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     `?<Constant "Got speed request">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x........         DC32     `?<Constant "Got fuel pressure req...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x........         DC32     `?<Constant "Got MAP request">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x........         DC32     `?<Constant "Got unhandled request">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x........         DC32     `?<Constant "Got stored DTC request">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x........         DC32     `?<Constant "Got unhandled OBD mes...">`

   \                                 In section .init_array, align 4, keep-with-next, root
   \   00000000   0x........         DC32    RELOC_ARM_TARGET1 __sti__routine

   \                                 In section .rodata, align 4
   \                     `?<Constant "Got lookup request">`:
   \   00000000   0x47 0x6F          DC8 "Got lookup request"
   \              0x74 0x20    
   \              0x6C 0x6F    
   \              0x6F 0x6B    
   \              0x75 0x70    
   \              0x20 0x72    
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x73 0x74    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Got CLT request">`:
   \   00000000   0x47 0x6F          DC8 "Got CLT request"
   \              0x74 0x20    
   \              0x43 0x4C    
   \              0x54 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \              0x65 0x73    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Got RPM request">`:
   \   00000000   0x47 0x6F          DC8 "Got RPM request"
   \              0x74 0x20    
   \              0x52 0x50    
   \              0x4D 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \              0x65 0x73    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Got timing request">`:
   \   00000000   0x47 0x6F          DC8 "Got timing request"
   \              0x74 0x20    
   \              0x74 0x69    
   \              0x6D 0x69    
   \              0x6E 0x67    
   \              0x20 0x72    
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x73 0x74    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Got speed request">`:
   \   00000000   0x47 0x6F          DC8 "Got speed request"
   \              0x74 0x20    
   \              0x73 0x70    
   \              0x65 0x65    
   \              0x64 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \              0x65 0x73    
   \              0x74 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Got fuel pressure req...">`:
   \   00000000   0x47 0x6F          DC8 "Got fuel pressure request"
   \              0x74 0x20    
   \              0x66 0x75    
   \              0x65 0x6C    
   \              0x20 0x70    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \              0x65 0x73    
   \              0x74 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Got MAP request">`:
   \   00000000   0x47 0x6F          DC8 "Got MAP request"
   \              0x74 0x20    
   \              0x4D 0x41    
   \              0x50 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \              0x65 0x73    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Got unhandled request">`:
   \   00000000   0x47 0x6F          DC8 "Got unhandled request"
   \              0x74 0x20    
   \              0x75 0x6E    
   \              0x68 0x61    
   \              0x6E 0x64    
   \              0x6C 0x65    
   \              0x64 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \              0x65 0x73    
   \              0x74 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Got stored DTC request">`:
   \   00000000   0x47 0x6F          DC8 "Got stored DTC request"
   \              0x74 0x20    
   \              0x73 0x74    
   \              0x6F 0x72    
   \              0x65 0x64    
   \              0x20 0x44    
   \              0x54 0x43    
   \              0x20 0x72    
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x73 0x74    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Got unhandled OBD mes...">`:
   \   00000000   0x47 0x6F          DC8 "Got unhandled OBD message"
   \              0x74 0x20    
   \              0x75 0x6E    
   \              0x68 0x61    
   \              0x6E 0x64    
   \              0x6C 0x65    
   \              0x64 0x20    
   \              0x4F 0x42    
   \              0x44 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "obd2">`:
   \   00000000   0x6F 0x62          DC8 "obd2"
   \              0x64 0x32    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    111          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   __sti__routine()
         8   -> LoggingWithStorage::LoggingWithStorage(char const *)
      16   handleGetDataRequest(CANRxFrame *)
        16   -> commonTxInit(int)
        16   -> scheduleMsg
        16   -> sendMessage()
        16   -> setTxBit(int, int)
       8   obdOnCanPacketRx(CANRxFrame *)
         8   -> handleGetDataRequest(CANRxFrame *)
         8   -> scheduleMsg


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "Got CLT request">
      16  ?<Constant "Got MAP request">
      16  ?<Constant "Got RPM request">
      28  ?<Constant "Got fuel pressure req...">
      20  ?<Constant "Got lookup request">
      20  ?<Constant "Got speed request">
      24  ?<Constant "Got stored DTC request">
      20  ?<Constant "Got timing request">
      28  ?<Constant "Got unhandled OBD mes...">
      24  ?<Constant "Got unhandled request">
       8  ?<Constant "obd2">
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      12  __sti__routine()
     360  handleGetDataRequest(CANRxFrame *)
     260  logger
      70  obdOnCanPacketRx(CANRxFrame *)
       4  -- Other

 
 260 bytes in section .bss
   4 bytes in section .init_array
 220 bytes in section .rodata
 494 bytes in section .text
 
 498 bytes of CODE  memory
 220 bytes of CONST memory
 260 bytes of DATA  memory

Errors: none
Warnings: none
