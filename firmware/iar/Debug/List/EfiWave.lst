###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:08:41 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\core #
#                       \EfiWave.cpp                                          #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\core #
#                       \EfiWave.cpp -lCN F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\Debug\List\ -lA F:\stuff\rusefi_sourceforge\fir #
#                       mware\iar\Debug\List\ -o F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\Debug\Obj\ --no_cse --no_unroll          #
#                       --no_inline --no_code_motion --no_tbaa                #
#                       --no_clustering --no_scheduling --debug               #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\E #
#                       fiWave.lst                                            #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\Ef #
#                       iWave.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\core\EfiWave.cpp
      1          /**
      2           * @file	EfiWave.cpp
      3           *
      4           * @date May 18, 2014
      5           * @author Andrey Belomutskiy, (c) 2012-2015
      6           */
      7          
      8          #include "main.h"
      9          #include "EfiWave.h"
     10          #include "trigger_structure.h"
     11          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp single_wave_s::subobject single_wave_s()
   \                     _ZN13single_wave_sC2Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN13single_wave_sC1Ev
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     12          single_wave_s::single_wave_s() {
   \                     _ZN13single_wave_sC1Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     13          	init(NULL);
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       _ZN13single_wave_s4initEPa
     14          }
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0xBD10             POP      {R4,PC}          ;; return
     15          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp single_wave_s::subobject single_wave_s(int8_t *)
   \                     _ZN13single_wave_sC2EPa:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN13single_wave_sC1EPa
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     16          single_wave_s::single_wave_s(pin_state_t *ps) {
   \                     _ZN13single_wave_sC1EPa:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     17          	init(ps);
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       _ZN13single_wave_s4initEPa
     18          }
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     19          

   \                                 In section .text, align 2, keep-with-next
     20          void single_wave_s::init(pin_state_t *pinStates) {
     21          	this->pinStates = pinStates;
   \                     _ZN13single_wave_s4initEPa:
   \   00000000   0x6001             STR      R1,[R0, #+0]
     22          }
   \   00000002   0x4770             BX       LR               ;; return
     23          

   \                                 In section .text, align 2, keep-with-next
     24          void multi_wave_s::baseConstructor() {
   \                     _ZN12multi_wave_s15baseConstructorEv:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     25          	waves = NULL;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x6060             STR      R0,[R4, #+4]
     26          	switchTimes = NULL;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x60A0             STR      R0,[R4, #+8]
     27          	reset();
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       _ZN12multi_wave_s5resetEv
     28          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
     29          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp multi_wave_s::subobject multi_wave_s()
   \                     _ZN12multi_wave_sC2Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN12multi_wave_sC1Ev
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     30          multi_wave_s::multi_wave_s() {
   \                     _ZN12multi_wave_sC1Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     31          	baseConstructor();
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN12multi_wave_s15baseConstructorEv
     32          }
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return
     33          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp multi_wave_s::subobject multi_wave_s(float *, single_wave_s *)
   \                     _ZN12multi_wave_sC2EPfP13single_wave_s:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN12multi_wave_sC1EPfP13single_wave_s
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     34          multi_wave_s::multi_wave_s(float *switchTimes, single_wave_s *waves) {
   \                     _ZN12multi_wave_sC1EPfP13single_wave_s:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     35          	baseConstructor();
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       _ZN12multi_wave_s15baseConstructorEv
     36          	init(switchTimes, waves);
   \   0000000E   0x0032             MOVS     R2,R6
   \   00000010   0x0029             MOVS     R1,R5
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       _ZN12multi_wave_s4initEPfP13single_wave_s
     37          }
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0xBD70             POP      {R4-R6,PC}       ;; return
     38          

   \                                 In section .text, align 2, keep-with-next
     39          void multi_wave_s::init(float *switchTimes, single_wave_s *waves) {
     40          	this->switchTimes = switchTimes;
   \                     _ZN12multi_wave_s4initEPfP13single_wave_s:
   \   00000000   0x6081             STR      R1,[R0, #+8]
     41          	this->waves = waves;
   \   00000002   0x6042             STR      R2,[R0, #+4]
     42          }
   \   00000004   0x4770             BX       LR               ;; return
     43          

   \                                 In section .text, align 2, keep-with-next
     44          void multi_wave_s::reset(void) {
     45          	waveCount = 0;
   \                     _ZN12multi_wave_s5resetEv:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x6001             STR      R1,[R0, #+0]
     46          }
   \   00000004   0x4770             BX       LR               ;; return
     47          

   \                                 In section .text, align 2, keep-with-next
     48          float multi_wave_s::getSwitchTime(int index) const {
     49          	return switchTimes[index];
   \                     _ZNK12multi_wave_s13getSwitchTimeEi:
   \   00000000   0x6880             LDR      R0,[R0, #+8]
   \   00000002   0xEB10 0x0081      ADDS     R0,R0,R1, LSL #+2
   \   00000006   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000000A   0x4770             BX       LR               ;; return
     50          }
     51          

   \                                 In section .text, align 2, keep-with-next
     52          void checkSwitchTimes2(int size, float *switchTimes) {
   \                     _Z17checkSwitchTimes2iPf:
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     53          	if (switchTimes[size - 1] != 1) {
   \   00000006   0xEB15 0x0084      ADDS     R0,R5,R4, LSL #+2
   \   0000000A   0x1F00             SUBS     R0,R0,#+4
   \   0000000C   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000010   0xEEF7 0x0A00      VMOV.F32 S1,#1.0
   \   00000014   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   00000018   0xEEF1 0xFA10      FMSTAT   
   \   0000001C   0xD00B             BEQ.N    ??checkSwitchTimes2_0
     54          		firmwareError("last switch time has to be 1 not %f", switchTimes[size - 1]);
   \   0000001E   0xEB15 0x0084      ADDS     R0,R5,R4, LSL #+2
   \   00000022   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \   00000026   0x.... 0x....      BL       __aeabi_f2d
   \   0000002A   0x0002             MOVS     R2,R0
   \   0000002C   0x000B             MOVS     R3,R1
   \   0000002E   0x....             LDR.N    R0,??DataTable0
   \   00000030   0x.... 0x....      BL       firmwareError
     55          		return;
   \   00000034   0xE023             B.N      ??checkSwitchTimes2_1
     56          	}
     57          	for (int i = 0; i < size - 1; i++) {
   \                     ??checkSwitchTimes2_0:
   \   00000036   0x2600             MOVS     R6,#+0
   \                     ??checkSwitchTimes2_2:
   \   00000038   0x1E60             SUBS     R0,R4,#+1
   \   0000003A   0x4286             CMP      R6,R0
   \   0000003C   0xDA1F             BGE.N    ??checkSwitchTimes2_3
     58          		if (switchTimes[i] >= switchTimes[i + 1]) {
   \   0000003E   0xEB15 0x0086      ADDS     R0,R5,R6, LSL #+2
   \   00000042   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000046   0xEB15 0x0086      ADDS     R0,R5,R6, LSL #+2
   \   0000004A   0xEDD0 0x0A01      VLDR     S1,[R0, #+4]
   \   0000004E   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   00000052   0xEEF1 0xFA10      FMSTAT   
   \   00000056   0xDB10             BLT.N    ??checkSwitchTimes2_4
     59          			firmwareError("invalid switchTimes @%d: %f/%f", i, switchTimes[i], switchTimes[i + 1]);
   \   00000058   0xEB15 0x0086      ADDS     R0,R5,R6, LSL #+2
   \   0000005C   0x6840             LDR      R0,[R0, #+4]
   \   0000005E   0x.... 0x....      BL       __aeabi_f2d
   \   00000062   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000066   0xF855 0x0026      LDR      R0,[R5, R6, LSL #+2]
   \   0000006A   0x.... 0x....      BL       __aeabi_f2d
   \   0000006E   0x0002             MOVS     R2,R0
   \   00000070   0x000B             MOVS     R3,R1
   \   00000072   0x0031             MOVS     R1,R6
   \   00000074   0x....             LDR.N    R0,??DataTable0_1
   \   00000076   0x.... 0x....      BL       firmwareError
     60          		}
     61          	}
   \                     ??checkSwitchTimes2_4:
   \   0000007A   0x1C76             ADDS     R6,R6,#+1
   \   0000007C   0xE7DC             B.N      ??checkSwitchTimes2_2
     62          }
   \                     ??checkSwitchTimes2_3:
   \                     ??checkSwitchTimes2_1:
   \   0000007E   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     `?<Constant "last switch time has ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x........         DC32     `?<Constant "invalid switchTimes @...">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "last switch time has ...">`:
   \   00000000   0x6C 0x61          DC8 "last switch time has to be 1 not %f"
   \              0x73 0x74    
   \              0x20 0x73    
   \              0x77 0x69    
   \              0x74 0x63    
   \              0x68 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x20 0x68    
   \              0x61 0x73    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x62 0x65    
   \              0x20 0x31    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x25    
   \              0x66 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "invalid switchTimes @...">`:
   \   00000000   0x69 0x6E          DC8 "invalid switchTimes @%d: %f/%f"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x73 0x77    
   \              0x69 0x74    
   \              0x63 0x68    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x73 0x20    
   \              0x40 0x25    
   \              0x64 0x3A    
   \              0x20 0x25    
   \              0x66 0x2F    
   \              0x25 0x66    
   \              0x00         
   \   0000001F   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   checkSwitchTimes2(int, float *)
        24   -> __aeabi_f2d
        24   -> firmwareError
       8   multi_wave_s::baseConstructor()
         8   -> multi_wave_s::reset()
       0   multi_wave_s::getSwitchTime(int) const
       0   multi_wave_s::init(float *, single_wave_s *)
       8   multi_wave_s::multi_wave_s()
         8   -> multi_wave_s::baseConstructor()
      16   multi_wave_s::multi_wave_s(float *, single_wave_s *)
        16   -> multi_wave_s::baseConstructor()
        16   -> multi_wave_s::init(float *, single_wave_s *)
       0   multi_wave_s::reset()
       8   multi_wave_s::subobject multi_wave_s()
         8   -> multi_wave_s::multi_wave_s()
       8   multi_wave_s::subobject multi_wave_s(float *, single_wave_s *)
         8   -> multi_wave_s::multi_wave_s(float *, single_wave_s *)
       0   single_wave_s::init(int8_t *)
       8   single_wave_s::single_wave_s()
         8   -> single_wave_s::init(int8_t *)
      16   single_wave_s::single_wave_s(int8_t *)
        16   -> single_wave_s::init(int8_t *)
       8   single_wave_s::subobject single_wave_s()
         8   -> single_wave_s::single_wave_s()
       8   single_wave_s::subobject single_wave_s(int8_t *)
         8   -> single_wave_s::single_wave_s(int8_t *)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      32  ?<Constant "invalid switchTimes @...">
      36  ?<Constant "last switch time has ...">
       4  ??DataTable0
       4  ??DataTable0_1
     128  checkSwitchTimes2(int, float *)
      20  multi_wave_s::baseConstructor()
      12  multi_wave_s::getSwitchTime(int) const
       6  multi_wave_s::init(float *, single_wave_s *)
      14  multi_wave_s::multi_wave_s()
      28  multi_wave_s::multi_wave_s(float *, single_wave_s *)
       6  multi_wave_s::reset()
      12  multi_wave_s::subobject multi_wave_s()
      12  multi_wave_s::subobject multi_wave_s(float *, single_wave_s *)
       4  single_wave_s::init(int8_t *)
      16  single_wave_s::single_wave_s()
      18  single_wave_s::single_wave_s(int8_t *)
      12  single_wave_s::subobject single_wave_s()
      12  single_wave_s::subobject single_wave_s(int8_t *)

 
  68 bytes in section .rodata
 308 bytes in section .text
 
 308 bytes of CODE  memory
  68 bytes of CONST memory

Errors: none
Warnings: 1
