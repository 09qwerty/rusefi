###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:19 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\hw_layer\max3185 #
#                       5.cpp                                                 #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\hw_layer\max3185 #
#                       5.cpp -lCN F:\stuff\rusefi_sourceforge\firmware\iar\D #
#                       ebug\List\ -lA F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\Debug\List\ -o F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\Debug\Obj\ --no_cse --no_unroll --no_inline     #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\m #
#                       ax31855.lst                                           #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\ma #
#                       x31855.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\hw_layer\max31855.cpp
      1          /**
      2           * @file max31855.cpp
      3           * @brief MAX31855 Thermocouple-to-Digital Converter driver
      4           *
      5           *
      6           * http://datasheets.maximintegrated.com/en/ds/MAX31855.pdf
      7           *
      8           *
      9           * Read-only communication over 5MHz SPI
     10           *
     11           * @date Sep 17, 2014
     12           * @author Andrey Belomutskiy, (c) 2012-2015
     13           */
     14          
     15          #include "main.h"
     16          #include "max31855.h"
     17          
     18          #include "hardware.h"
     19          #include "mpu_util.h"
     20          
     21          #if EFI_PROD_CODE
     22          #include "settings.h"
     23          #include "pin_repository.h"
     24          #endif /* EFI_PROD_CODE */
     25          
     26          #if EFI_MAX_31855
     27          
     28          #define EGT_ERROR_VALUE -1000
     29          

   \                                 In section .bss, align 4
     30          static SPIDriver *driver;
   \                     driver:
   \   00000000                      DS8 4
     31          

   \                                 In section .bss, align 4
     32          static Logging* logger;
   \                     logger:
   \   00000000                      DS8 4
     33          

   \                                 In section .bss, align 4
     34          static SPIConfig spiConfig[EGT_CHANNEL_COUNT];
   \                     spiConfig:
   \   00000000                      DS8 96
     35          
     36          EXTERN_ENGINE;
     37          

   \                                 In section .text, align 2, keep-with-next
     38          static void showEgtInfo(void) {
   \                     _Z11showEgtInfov:
   \   00000000   0xB510             PUSH     {R4,LR}
     39          #if EFI_PROD_CODE
     40          	printSpiState(logger, boardConfiguration);
   \   00000002   0x....             LDR.N    R0,??DataTable5_1
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x....             LDR.N    R0,??DataTable5_2
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x.... 0x....      BL       _Z13printSpiStateP7LoggingP21board_configuration_s
     41          
     42          	scheduleMsg(logger, "EGT spi: %d", boardConfiguration->max31855spiDevice);
   \   0000000E   0x....             LDR.N    R0,??DataTable5_1
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF8D0 0x21C0      LDR      R2,[R0, #+448]
   \   00000016   0x....             LDR.N    R1,??DataTable5_3
   \   00000018   0x....             LDR.N    R0,??DataTable5_2
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x.... 0x....      BL       scheduleMsg
     43          
     44          	for (int i = 0; i < EGT_CHANNEL_COUNT; i++) {
   \   00000020   0x2400             MOVS     R4,#+0
   \                     ??showEgtInfo_0:
   \   00000022   0x2C08             CMP      R4,#+8
   \   00000024   0xDA18             BGE.N    ??showEgtInfo_1
     45          		if (boardConfiguration->max31855_cs[i] != GPIO_UNASSIGNED) {
   \   00000026   0x....             LDR.N    R0,??DataTable5_1
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   0000002E   0xF8D0 0x01A0      LDR      R0,[R0, #+416]
   \   00000032   0x2850             CMP      R0,#+80
   \   00000034   0xD00E             BEQ.N    ??showEgtInfo_2
     46          			scheduleMsg(logger, "%d ETG @ %s", i, hwPortname(boardConfiguration->max31855_cs[i]));
   \   00000036   0x....             LDR.N    R0,??DataTable5_1
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   0000003E   0xF8D0 0x01A0      LDR      R0,[R0, #+416]
   \   00000042   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   00000046   0x0003             MOVS     R3,R0
   \   00000048   0x0022             MOVS     R2,R4
   \   0000004A   0x....             LDR.N    R1,??DataTable5_4
   \   0000004C   0x....             LDR.N    R0,??DataTable5_2
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x.... 0x....      BL       scheduleMsg
     47          		}
     48          	}
   \                     ??showEgtInfo_2:
   \   00000054   0x1C64             ADDS     R4,R4,#+1
   \   00000056   0xE7E4             B.N      ??showEgtInfo_0
     49          #endif
     50          }
   \                     ??showEgtInfo_1:
   \   00000058   0xBD10             POP      {R4,PC}          ;; return
     51          
     52          // bits D17 and D3 are always expected to be zero
     53          #define MC_RESERVED_BITS 0x20008
     54          #define MC_OPEN_BIT 1
     55          #define MC_GND_BIT 2
     56          #define MC_VCC_BIT 4
     57          
     58          typedef enum {
     59          	MC_OK = 0, MC_INVALID = 1, MC_OPEN = 2, MC_SHORT_GND = 3, MC_SHORT_VCC = 4,
     60          } max_32855_code;
     61          

   \                                 In section .text, align 2, keep-with-next
     62          static const char * getMcCode(max_32855_code code) {
   \                     _Z9getMcCode14max_32855_code:
   \   00000000   0x0001             MOVS     R1,R0
     63          	switch (code) {
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x0008             MOVS     R0,R1
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD006             BEQ.N    ??getMcCode_0
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD006             BEQ.N    ??getMcCode_1
   \   0000000E   0x2803             CMP      R0,#+3
   \   00000010   0xD006             BEQ.N    ??getMcCode_2
   \   00000012   0x2804             CMP      R0,#+4
   \   00000014   0xD006             BEQ.N    ??getMcCode_3
   \   00000016   0xE007             B.N      ??getMcCode_4
     64          	case MC_OK:
     65          		return "Ok";
   \                     ??getMcCode_0:
   \   00000018   0x....             ADR.N    R0,??DataTable5  ;; 0x4F, 0x6B, 0x00, 0x00
   \   0000001A   0xE006             B.N      ??getMcCode_5
     66          	case MC_OPEN:
     67          		return "Open";
   \                     ??getMcCode_1:
   \   0000001C   0x....             LDR.N    R0,??DataTable5_5
   \   0000001E   0xE004             B.N      ??getMcCode_5
     68          	case MC_SHORT_GND:
     69          		return "short gnd";
   \                     ??getMcCode_2:
   \   00000020   0x....             LDR.N    R0,??DataTable5_6
   \   00000022   0xE002             B.N      ??getMcCode_5
     70          	case MC_SHORT_VCC:
     71          		return "short VCC";
   \                     ??getMcCode_3:
   \   00000024   0x....             LDR.N    R0,??DataTable5_7
   \   00000026   0xE000             B.N      ??getMcCode_5
     72          	default:
     73          		return "invalid";
   \                     ??getMcCode_4:
   \   00000028   0x....             LDR.N    R0,??DataTable5_8
   \                     ??getMcCode_5:
   \   0000002A   0x4770             BX       LR               ;; return
     74          	}
     75          }
     76          

   \                                 In section .text, align 2, keep-with-next
     77          static max_32855_code getResultCode(uint32_t egtPacket) {
   \                     _Z13getResultCodej:
   \   00000000   0x0001             MOVS     R1,R0
     78          	if ((egtPacket & MC_RESERVED_BITS) != 0) {
   \   00000002   0x....             LDR.N    R0,??DataTable5_9  ;; 0x20008
   \   00000004   0x4201             TST      R1,R0
   \   00000006   0xD001             BEQ.N    ??getResultCode_0
     79          		return MC_INVALID;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xE00C             B.N      ??getResultCode_1
     80          	} else if ((egtPacket & MC_OPEN_BIT) != 0) {
   \                     ??getResultCode_0:
   \   0000000C   0x07C8             LSLS     R0,R1,#+31
   \   0000000E   0xD501             BPL.N    ??getResultCode_2
     81          		return MC_OPEN;
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0xE008             B.N      ??getResultCode_1
     82          	} else if ((egtPacket & MC_GND_BIT) != 0) {
   \                     ??getResultCode_2:
   \   00000014   0x0788             LSLS     R0,R1,#+30
   \   00000016   0xD501             BPL.N    ??getResultCode_3
     83          		return MC_SHORT_GND;
   \   00000018   0x2003             MOVS     R0,#+3
   \   0000001A   0xE004             B.N      ??getResultCode_1
     84          	} else if ((egtPacket & MC_VCC_BIT) != 0) {
   \                     ??getResultCode_3:
   \   0000001C   0x0748             LSLS     R0,R1,#+29
   \   0000001E   0xD501             BPL.N    ??getResultCode_4
     85          		return MC_SHORT_VCC;
   \   00000020   0x2004             MOVS     R0,#+4
   \   00000022   0xE000             B.N      ??getResultCode_1
     86          	} else {
     87          		return MC_OK;
   \                     ??getResultCode_4:
   \   00000024   0x2000             MOVS     R0,#+0
   \                     ??getResultCode_1:
   \   00000026   0x4770             BX       LR               ;; return
     88          	}
     89          }
     90          

   \                                 In section .text, align 2, keep-with-next
     91          static uint32_t readEgtPacket(int egtChannel) {
   \                     _Z13readEgtPacketi:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
     92          	uint32_t egtPacket;
     93          	if (driver == NULL) {
   \   00000006   0x....             LDR.N    R0,??DataTable5_10
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD102             BNE.N    ??readEgtPacket_0
     94          		return 0xFFFFFFFF;
   \   0000000E   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000012   0xE02A             B.N      ??readEgtPacket_1
     95          	}
     96          
     97          	spiStart(driver, &spiConfig[egtChannel]);
   \                     ??readEgtPacket_0:
   \   00000014   0x200C             MOVS     R0,#+12
   \   00000016   0x....             LDR.N    R1,??DataTable5_11
   \   00000018   0xFB00 0x1104      MLA      R1,R0,R4,R1
   \   0000001C   0x....             LDR.N    R0,??DataTable5_10
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x.... 0x....      BL       spiStart
     98          	spiSelect(driver);
   \   00000024   0x....             LDR.N    R0,??DataTable5_10
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x.... 0x....      BL       spiSelect
     99          
    100          	spiReceive(driver, sizeof(egtPacket), &egtPacket);
   \   0000002C   0xAA00             ADD      R2,SP,#+0
   \   0000002E   0x2104             MOVS     R1,#+4
   \   00000030   0x....             LDR.N    R0,??DataTable5_10
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x.... 0x....      BL       spiReceive
    101          
    102          	spiUnselect(driver);
   \   00000038   0x....             LDR.N    R0,??DataTable5_10
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x.... 0x....      BL       spiUnselect
    103          	spiStop(driver);
   \   00000040   0x....             LDR.N    R0,??DataTable5_10
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0x.... 0x....      BL       spiStop
    104          	egtPacket = SWAP_UINT32(egtPacket);
   \   00000048   0x9800             LDR      R0,[SP, #+0]
   \   0000004A   0x9900             LDR      R1,[SP, #+0]
   \   0000004C   0x0209             LSLS     R1,R1,#+8
   \   0000004E   0xF411 0x017F      ANDS     R1,R1,#0xFF0000
   \   00000052   0xEA51 0x6010      ORRS     R0,R1,R0, LSR #+24
   \   00000056   0x9900             LDR      R1,[SP, #+0]
   \   00000058   0x0A09             LSRS     R1,R1,#+8
   \   0000005A   0xF411 0x417F      ANDS     R1,R1,#0xFF00
   \   0000005E   0x4308             ORRS     R0,R1,R0
   \   00000060   0x9900             LDR      R1,[SP, #+0]
   \   00000062   0xEA50 0x6001      ORRS     R0,R0,R1, LSL #+24
   \   00000066   0x9000             STR      R0,[SP, #+0]
    105          	return egtPacket;
   \   00000068   0x9800             LDR      R0,[SP, #+0]
   \                     ??readEgtPacket_1:
   \   0000006A   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    106          }
    107          
    108          #define GET_TEMPERATURE_C(x) (((x) >> 18) / 4)
    109          

   \                                 In section .text, align 2, keep-with-next
    110          uint16_t getEgtValue(int egtChannel) {
   \                     _Z11getEgtValuei:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    111          	uint32_t packet = readEgtPacket(egtChannel);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _Z13readEgtPacketi
   \   0000000A   0x0005             MOVS     R5,R0
    112          	max_32855_code code = getResultCode(packet);
   \   0000000C   0x0028             MOVS     R0,R5
   \   0000000E   0x.... 0x....      BL       _Z13getResultCodej
   \   00000012   0x0001             MOVS     R1,R0
    113          	if (code != MC_OK) {
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0x2900             CMP      R1,#+0
   \   00000018   0xD004             BEQ.N    ??getEgtValue_0
    114          		return EGT_ERROR_VALUE + code;
   \   0000001A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001C   0xF5B1 0x707A      SUBS     R0,R1,#+1000
   \   00000020   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000022   0xE001             B.N      ??getEgtValue_1
    115          	} else {
    116          		return GET_TEMPERATURE_C(packet);
   \                     ??getEgtValue_0:
   \   00000024   0x0D28             LSRS     R0,R5,#+20
   \   00000026   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \                     ??getEgtValue_1:
   \   00000028   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    117          	}
    118          }
    119          

   \                                 In section .text, align 2, keep-with-next
    120          static void egtRead(void) {
   \                     _Z7egtReadv:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xB082             SUB      SP,SP,#+8
    121          
    122          	if (driver == NULL) {
   \   00000008   0x....             LDR.N    R0,??DataTable5_10
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD105             BNE.N    ??egtRead_0
    123          		scheduleMsg(logger, "No SPI selected for EGT");
   \   00000010   0x....             LDR.N    R1,??DataTable5_12
   \   00000012   0x....             LDR.N    R0,??DataTable5_2
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x.... 0x....      BL       scheduleMsg
    124          		return;
   \   0000001A   0xE03A             B.N      ??egtRead_1
    125          	}
    126          
    127          	scheduleMsg(logger, "Reading egt");
   \                     ??egtRead_0:
   \   0000001C   0x....             LDR.N    R1,??DataTable5_13
   \   0000001E   0x....             LDR.N    R0,??DataTable5_2
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x.... 0x....      BL       scheduleMsg
    128          
    129          	uint32_t egtPacket = readEgtPacket(0);
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      BL       _Z13readEgtPacketi
   \   0000002C   0x0004             MOVS     R4,R0
    130          
    131          	max_32855_code code = getResultCode(egtPacket);
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0x.... 0x....      BL       _Z13getResultCodej
   \   00000034   0x0005             MOVS     R5,R0
    132          
    133          	scheduleMsg(logger, "egt %x code=%d %s", egtPacket, code, getMcCode(code));
   \   00000036   0x0028             MOVS     R0,R5
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0x.... 0x....      BL       _Z9getMcCode14max_32855_code
   \   0000003E   0x9000             STR      R0,[SP, #+0]
   \   00000040   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000042   0x002B             MOVS     R3,R5
   \   00000044   0x0022             MOVS     R2,R4
   \   00000046   0x....             LDR.N    R1,??DataTable5_14
   \   00000048   0x....             LDR.N    R0,??DataTable5_2
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0x.... 0x....      BL       scheduleMsg
    134          
    135          	if (code != MC_INVALID) {
   \   00000050   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000052   0x2D01             CMP      R5,#+1
   \   00000054   0xD01D             BEQ.N    ??egtRead_2
    136          		int refBits = ((egtPacket & 0xFFFF) / 16); // bits 15:4
   \   00000056   0xF3C4 0x160B      UBFX     R6,R4,#+4,#+12
    137          		float refTemp = refBits / 16.0;
   \   0000005A   0x0030             MOVS     R0,R6
   \   0000005C   0x.... 0x....      BL       __aeabi_i2d
   \   00000060   0x2200             MOVS     R2,#+0
   \   00000062   0x....             LDR.N    R3,??DataTable5_15  ;; 0x40300000
   \   00000064   0x.... 0x....      BL       __aeabi_ddiv
   \   00000068   0x.... 0x....      BL       __aeabi_d2f
   \   0000006C   0xEE08 0x0A10      VMOV     S16,R0
    138          		scheduleMsg(logger, "reference temperature %f", refTemp);
   \   00000070   0xEE18 0x0A10      VMOV     R0,S16
   \   00000074   0x.... 0x....      BL       __aeabi_f2d
   \   00000078   0x0002             MOVS     R2,R0
   \   0000007A   0x000B             MOVS     R3,R1
   \   0000007C   0x....             LDR.N    R1,??DataTable5_16
   \   0000007E   0x....             LDR.N    R0,??DataTable5_2
   \   00000080   0x6800             LDR      R0,[R0, #+0]
   \   00000082   0x.... 0x....      BL       scheduleMsg
    139          
    140          		scheduleMsg(logger, "EGT temperature %d", GET_TEMPERATURE_C(egtPacket));
   \   00000086   0x0D22             LSRS     R2,R4,#+20
   \   00000088   0x....             LDR.N    R1,??DataTable5_17
   \   0000008A   0x....             LDR.N    R0,??DataTable5_2
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0x.... 0x....      BL       scheduleMsg
    141          	}
    142          }
   \                     ??egtRead_2:
   \                     ??egtRead_1:
   \   00000092   0xB002             ADD      SP,SP,#+8
   \   00000094   0xECBD 0x8B02      VPOP     {D8}
   \   00000098   0xBD70             POP      {R4-R6,PC}       ;; return
    143          

   \                                 In section .text, align 2, keep-with-next
    144          void initMax31855(Logging *sharedLogger, SPIDriver *drv, egt_cs_array_t max31855_cs) {
   \                     _Z12initMax31855P7LoggingP9SPIDriverP11brain_pin_e:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    145          	logger = sharedLogger;
   \   00000008   0x....             LDR.N    R0,??DataTable5_2
   \   0000000A   0x6004             STR      R4,[R0, #+0]
    146          
    147          	// todo:spi device is now enabled separately - should probably be enabled here
    148          	driver = drv;
   \   0000000C   0x....             LDR.N    R0,??DataTable5_10
   \   0000000E   0x6005             STR      R5,[R0, #+0]
    149          
    150          	addConsoleAction("egtinfo", (Void) showEgtInfo);
   \   00000010   0x....             LDR.N    R1,??DataTable5_18
   \   00000012   0x....             LDR.N    R0,??DataTable5_19
   \   00000014   0x.... 0x....      BL       addConsoleAction
    151          
    152          	addConsoleAction("egtread", (Void) egtRead);
   \   00000018   0x....             LDR.N    R1,??DataTable5_20
   \   0000001A   0x....             LDR.N    R0,??DataTable5_21
   \   0000001C   0x.... 0x....      BL       addConsoleAction
    153          
    154          	for (int i = 0; i < EGT_CHANNEL_COUNT; i++) {
   \   00000020   0x2700             MOVS     R7,#+0
   \                     ??initMax31855_0:
   \   00000022   0x2F08             CMP      R7,#+8
   \   00000024   0xDA13             BGE.N    ??initMax31855_1
    155          		if (max31855_cs[i] != GPIO_UNASSIGNED) {
   \   00000026   0xF856 0x0027      LDR      R0,[R6, R7, LSL #+2]
   \   0000002A   0x2850             CMP      R0,#+80
   \   0000002C   0xD00D             BEQ.N    ??initMax31855_2
    156          
    157          			initSpiCs(&spiConfig[i], max31855_cs[i]);
   \   0000002E   0xF856 0x1027      LDR      R1,[R6, R7, LSL #+2]
   \   00000032   0x200C             MOVS     R0,#+12
   \   00000034   0x....             LDR.N    R2,??DataTable5_11
   \   00000036   0xFB00 0x2007      MLA      R0,R0,R7,R2
   \   0000003A   0x.... 0x....      BL       initSpiCs
    158          
    159          			spiConfig[i].cr1 = SPI_BaudRatePrescaler_8;
   \   0000003E   0x200C             MOVS     R0,#+12
   \   00000040   0x....             LDR.N    R1,??DataTable5_11
   \   00000042   0xFB00 0x1007      MLA      R0,R0,R7,R1
   \   00000046   0x2110             MOVS     R1,#+16
   \   00000048   0x8141             STRH     R1,[R0, #+10]
    160          		}
    161          	}
   \                     ??initMax31855_2:
   \   0000004A   0x1C7F             ADDS     R7,R7,#+1
   \   0000004C   0xE7E9             B.N      ??initMax31855_0
    162          }
   \                     ??initMax31855_1:
   \   0000004E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x4F 0x6B          DC8      0x4F, 0x6B, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     boardConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     logger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     `?<Constant "EGT spi: %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     `?<Constant "%d ETG @ %s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     `?<Constant "Open">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     `?<Constant "short gnd">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     `?<Constant "short VCC">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     `?<Constant "invalid">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x00020008         DC32     0x20008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     driver

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     spiConfig

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x........         DC32     `?<Constant "No SPI selected for EGT">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x........         DC32     `?<Constant "Reading egt">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x........         DC32     `?<Constant "egt %x code=%d %s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \   00000000   0x40300000         DC32     0x40300000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_16:
   \   00000000   0x........         DC32     `?<Constant "reference temperature %f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_17:
   \   00000000   0x........         DC32     `?<Constant "EGT temperature %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_18:
   \   00000000   0x........         DC32     _Z11showEgtInfov

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_19:
   \   00000000   0x........         DC32     `?<Constant "egtinfo">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_20:
   \   00000000   0x........         DC32     _Z7egtReadv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_21:
   \   00000000   0x........         DC32     `?<Constant "egtread">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "EGT spi: %d">`:
   \   00000000   0x45 0x47          DC8 "EGT spi: %d"
   \              0x54 0x20    
   \              0x73 0x70    
   \              0x69 0x3A    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "%d ETG @ %s">`:
   \   00000000   0x25 0x64          DC8 "%d ETG @ %s"
   \              0x20 0x45    
   \              0x54 0x47    
   \              0x20 0x40    
   \              0x20 0x25    
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x4F 0x6B          DC8 "Ok"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Open">`:
   \   00000000   0x4F 0x70          DC8 "Open"
   \              0x65 0x6E    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "short gnd">`:
   \   00000000   0x73 0x68          DC8 "short gnd"
   \              0x6F 0x72    
   \              0x74 0x20    
   \              0x67 0x6E    
   \              0x64 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "short VCC">`:
   \   00000000   0x73 0x68          DC8 "short VCC"
   \              0x6F 0x72    
   \              0x74 0x20    
   \              0x56 0x43    
   \              0x43 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "invalid">`:
   \   00000000   0x69 0x6E          DC8 "invalid"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "No SPI selected for EGT">`:
   \   00000000   0x4E 0x6F          DC8 "No SPI selected for EGT"
   \              0x20 0x53    
   \              0x50 0x49    
   \              0x20 0x73    
   \              0x65 0x6C    
   \              0x65 0x63    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x45 0x47    
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Reading egt">`:
   \   00000000   0x52 0x65          DC8 "Reading egt"
   \              0x61 0x64    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x65 0x67    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "egt %x code=%d %s">`:
   \   00000000   0x65 0x67          DC8 "egt %x code=%d %s"
   \              0x74 0x20    
   \              0x25 0x78    
   \              0x20 0x63    
   \              0x6F 0x64    
   \              0x65 0x3D    
   \              0x25 0x64    
   \              0x20 0x25    
   \              0x73 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "reference temperature %f">`:
   \   00000000   0x72 0x65          DC8 "reference temperature %f"
   \              0x66 0x65    
   \              0x72 0x65    
   \              0x6E 0x63    
   \              0x65 0x20    
   \              0x74 0x65    
   \              0x6D 0x70    
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x25 0x66    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "EGT temperature %d">`:
   \   00000000   0x45 0x47          DC8 "EGT temperature %d"
   \              0x54 0x20    
   \              0x74 0x65    
   \              0x6D 0x70    
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x25 0x64    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "egtinfo">`:
   \   00000000   0x65 0x67          DC8 "egtinfo"
   \              0x74 0x69    
   \              0x6E 0x66    
   \              0x6F 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "egtread">`:
   \   00000000   0x65 0x67          DC8 "egtread"
   \              0x74 0x72    
   \              0x65 0x61    
   \              0x64 0x00    
    163          
    164          #endif /* EFI_MAX_31855 */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   egtRead()
        32   -> __aeabi_d2f
        32   -> __aeabi_ddiv
        32   -> __aeabi_f2d
        32   -> __aeabi_i2d
        32   -> getMcCode(max_32855_code)
        32   -> getResultCode(uint32_t)
        32   -> readEgtPacket(int)
        32   -> scheduleMsg
      16   getEgtValue(int)
        16   -> getResultCode(uint32_t)
        16   -> readEgtPacket(int)
       0   getMcCode(max_32855_code)
       0   getResultCode(uint32_t)
      24   initMax31855(Logging *, SPIDriver *, brain_pin_e *)
        24   -> addConsoleAction
        24   -> initSpiCs
      16   readEgtPacket(int)
        16   -> spiReceive
        16   -> spiSelect
        16   -> spiStart
        16   -> spiStop
        16   -> spiUnselect
       8   showEgtInfo()
         8   -> hwPortname(brain_pin_e)
         8   -> printSpiState(Logging *, board_configuration_s *)
         8   -> scheduleMsg


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "%d ETG @ %s">
      12  ?<Constant "EGT spi: %d">
      20  ?<Constant "EGT temperature %d">
      24  ?<Constant "No SPI selected for EGT">
       4  ?<Constant "Ok">
       8  ?<Constant "Open">
      12  ?<Constant "Reading egt">
      20  ?<Constant "egt %x code=%d %s">
       8  ?<Constant "egtinfo">
       8  ?<Constant "egtread">
       8  ?<Constant "invalid">
      28  ?<Constant "reference temperature %f">
      12  ?<Constant "short VCC">
      12  ?<Constant "short gnd">
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_16
       4  ??DataTable5_17
       4  ??DataTable5_18
       4  ??DataTable5_19
       4  ??DataTable5_2
       4  ??DataTable5_20
       4  ??DataTable5_21
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
       4  driver
     154  egtRead()
      42  getEgtValue(int)
      44  getMcCode(max_32855_code)
      40  getResultCode(uint32_t)
      80  initMax31855(Logging *, SPIDriver *, brain_pin_e *)
       4  logger
     108  readEgtPacket(int)
      90  showEgtInfo()
      96  spiConfig

 
 104 bytes in section .bss
 188 bytes in section .rodata
 646 bytes in section .text
 
 646 bytes of CODE  memory
 188 bytes of CONST memory
 104 bytes of DATA  memory

Errors: none
Warnings: 1
