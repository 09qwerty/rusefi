###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:48 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\s #
#                       rc\ext.c                                              #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\s #
#                       rc\ext.c -lCN F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\Debug\List\ -lA F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\Debug\List\ -o F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\Debug\Obj\ --no_cse --no_unroll --no_inline  #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\ -On #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\e #
#                       xt.lst                                                #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\ex #
#                       t.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\src\ext.c
      1          /*
      2              ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
      3                           2011,2012,2013 Giovanni Di Sirio.
      4          
      5              This file is part of ChibiOS/RT.
      6          
      7              ChibiOS/RT is free software; you can redistribute it and/or modify
      8              it under the terms of the GNU General Public License as published by
      9              the Free Software Foundation; either version 3 of the License, or
     10              (at your option) any later version.
     11          
     12              ChibiOS/RT is distributed in the hope that it will be useful,
     13              but WITHOUT ANY WARRANTY; without even the implied warranty of
     14              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     15              GNU General Public License for more details.
     16          
     17              You should have received a copy of the GNU General Public License
     18              along with this program.  If not, see <http://www.gnu.org/licenses/>.
     19          
     20                                                ---
     21          
     22              A special exception to the GPL can be applied should you wish to distribute
     23              a combined work that includes ChibiOS/RT, without being obliged to provide
     24              the source code for any proprietary components. See the file exception.txt
     25              for full details of how and when the exception can be applied.
     26          */
     27          
     28          /**
     29           * @file    ext.c
     30           * @brief   EXT Driver code.
     31           *
     32           * @addtogroup EXT
     33           * @{
     34           */
     35          
     36          #include "ch.h"
     37          #include "hal.h"
     38          
     39          #if HAL_USE_EXT || defined(__DOXYGEN__)
     40          
     41          /*===========================================================================*/
     42          /* Driver local definitions.                                                 */
     43          /*===========================================================================*/
     44          
     45          /*===========================================================================*/
     46          /* Driver exported variables.                                                */
     47          /*===========================================================================*/
     48          
     49          /*===========================================================================*/
     50          /* Driver local variables and types.                                         */
     51          /*===========================================================================*/
     52          
     53          /*===========================================================================*/
     54          /* Driver local functions.                                                   */
     55          /*===========================================================================*/
     56          
     57          /*===========================================================================*/
     58          /* Driver exported functions.                                                */
     59          /*===========================================================================*/
     60          
     61          /**
     62           * @brief   EXT Driver initialization.
     63           * @note    This function is implicitly invoked by @p halInit(), there is
     64           *          no need to explicitly initialize the driver.
     65           *
     66           * @init
     67           */

   \                                 In section .text, align 2, keep-with-next
     68          void extInit(void) {
   \                     extInit:
   \   00000000   0xB580             PUSH     {R7,LR}
     69          
     70            ext_lld_init();
   \   00000002   0x.... 0x....      BL       ext_lld_init
     71          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     72          
     73          /**
     74           * @brief   Initializes the standard part of a @p EXTDriver structure.
     75           *
     76           * @param[out] extp     pointer to the @p EXTDriver object
     77           *
     78           * @init
     79           */

   \                                 In section .text, align 2, keep-with-next
     80          void extObjectInit(EXTDriver *extp) {
     81          
     82            extp->state  = EXT_STOP;
   \                     extObjectInit:
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x7001             STRB     R1,[R0, #+0]
     83            extp->config = NULL;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6041             STR      R1,[R0, #+4]
     84          }
   \   00000008   0x4770             BX       LR               ;; return
     85          
     86          /**
     87           * @brief   Configures and activates the EXT peripheral.
     88           * @post    After activation all EXT channels are in the disabled state,
     89           *          use @p extChannelEnable() in order to activate them.
     90           *
     91           * @param[in] extp      pointer to the @p EXTDriver object
     92           * @param[in] config    pointer to the @p EXTConfig object
     93           *
     94           * @api
     95           */

   \                                 In section .text, align 2, keep-with-next
     96          void extStart(EXTDriver *extp, const EXTConfig *config) {
   \                     extStart:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     97          
     98            chDbgCheck((extp != NULL) && (config != NULL), "extStart");
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD001             BEQ.N    ??extStart_0
   \   0000000A   0x2D00             CMP      R5,#+0
   \   0000000C   0xD104             BNE.N    ??extStart_1
   \                     ??extStart_0:
   \   0000000E   0x2262             MOVS     R2,#+98
   \   00000010   0x....             LDR.N    R1,??DataTable4
   \   00000012   0x....             LDR.N    R0,??DataTable4_1
   \   00000014   0x.... 0x....      BL       chDbgPanic3
     99          
    100            chSysLock();
   \                     ??extStart_1:
   \   00000018   0x2020             MOVS     R0,#+32
   \   0000001A   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000001E   0x.... 0x....      BL       dbg_check_lock
    101            chDbgAssert((extp->state == EXT_STOP) || (extp->state == EXT_ACTIVE),
    102                        "extStart(), #1", "invalid state");
   \   00000022   0x7820             LDRB     R0,[R4, #+0]
   \   00000024   0x2801             CMP      R0,#+1
   \   00000026   0xD005             BEQ.N    ??extStart_2
   \   00000028   0x7820             LDRB     R0,[R4, #+0]
   \   0000002A   0x2802             CMP      R0,#+2
   \   0000002C   0xD002             BEQ.N    ??extStart_2
   \   0000002E   0x....             LDR.N    R0,??DataTable4_2
   \   00000030   0x.... 0x....      BL       chDbgPanic
    103            extp->config = config;
   \                     ??extStart_2:
   \   00000034   0x6065             STR      R5,[R4, #+4]
    104            ext_lld_start(extp);
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0x.... 0x....      BL       ext_lld_start
    105            extp->state = EXT_ACTIVE;
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0x7020             STRB     R0,[R4, #+0]
    106            chSysUnlock();
   \   00000040   0x.... 0x....      BL       dbg_check_unlock
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0xF380 0x8811      MSR      BASEPRI,R0
    107          }
   \   0000004A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    108          
    109          /**
    110           * @brief   Deactivates the EXT peripheral.
    111           *
    112           * @param[in] extp      pointer to the @p EXTDriver object
    113           *
    114           * @api
    115           */

   \                                 In section .text, align 2, keep-with-next
    116          void extStop(EXTDriver *extp) {
   \                     extStop:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    117          
    118            chDbgCheck(extp != NULL, "extStop");
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD104             BNE.N    ??extStop_0
   \   00000008   0x2276             MOVS     R2,#+118
   \   0000000A   0x....             LDR.N    R1,??DataTable4
   \   0000000C   0x....             LDR.N    R0,??DataTable4_3
   \   0000000E   0x.... 0x....      BL       chDbgPanic3
    119          
    120            chSysLock();
   \                     ??extStop_0:
   \   00000012   0x2020             MOVS     R0,#+32
   \   00000014   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000018   0x.... 0x....      BL       dbg_check_lock
    121            chDbgAssert((extp->state == EXT_STOP) || (extp->state == EXT_ACTIVE),
    122                        "extStop(), #1", "invalid state");
   \   0000001C   0x7820             LDRB     R0,[R4, #+0]
   \   0000001E   0x2801             CMP      R0,#+1
   \   00000020   0xD005             BEQ.N    ??extStop_1
   \   00000022   0x7820             LDRB     R0,[R4, #+0]
   \   00000024   0x2802             CMP      R0,#+2
   \   00000026   0xD002             BEQ.N    ??extStop_1
   \   00000028   0x....             LDR.N    R0,??DataTable4_4
   \   0000002A   0x.... 0x....      BL       chDbgPanic
    123            ext_lld_stop(extp);
   \                     ??extStop_1:
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0x.... 0x....      BL       ext_lld_stop
    124            extp->state = EXT_STOP;
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x7020             STRB     R0,[R4, #+0]
    125            chSysUnlock();
   \   00000038   0x.... 0x....      BL       dbg_check_unlock
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xF380 0x8811      MSR      BASEPRI,R0
    126          }
   \   00000042   0xBD10             POP      {R4,PC}          ;; return
    127          
    128          /**
    129           * @brief   Enables an EXT channel.
    130           * @pre     The channel must not be in @p EXT_CH_MODE_DISABLED mode.
    131           *
    132           * @param[in] extp      pointer to the @p EXTDriver object
    133           * @param[in] channel   channel to be enabled
    134           *
    135           * @api
    136           */

   \                                 In section .text, align 2, keep-with-next
    137          void extChannelEnable(EXTDriver *extp, expchannel_t channel) {
   \                     extChannelEnable:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    138          
    139            chDbgCheck((extp != NULL) && (channel < EXT_MAX_CHANNELS),
    140                       "extChannelEnable");
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD001             BEQ.N    ??extChannelEnable_0
   \   0000000A   0x2D17             CMP      R5,#+23
   \   0000000C   0xD304             BCC.N    ??extChannelEnable_1
   \                     ??extChannelEnable_0:
   \   0000000E   0x228C             MOVS     R2,#+140
   \   00000010   0x....             LDR.N    R1,??DataTable4
   \   00000012   0x....             LDR.N    R0,??DataTable4_5
   \   00000014   0x.... 0x....      BL       chDbgPanic3
    141          
    142            chSysLock();
   \                     ??extChannelEnable_1:
   \   00000018   0x2020             MOVS     R0,#+32
   \   0000001A   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000001E   0x.... 0x....      BL       dbg_check_lock
    143            chDbgAssert((extp->state == EXT_ACTIVE) &&
    144                        ((extp->config->channels[channel].mode &
    145                          EXT_CH_MODE_EDGES_MASK) != EXT_CH_MODE_DISABLED),
    146                        "extChannelEnable(), #1", "invalid state");
   \   00000022   0x7820             LDRB     R0,[R4, #+0]
   \   00000024   0x2802             CMP      R0,#+2
   \   00000026   0xD105             BNE.N    ??extChannelEnable_2
   \   00000028   0x6860             LDR      R0,[R4, #+4]
   \   0000002A   0xF810 0x0035      LDRB     R0,[R0, R5, LSL #+3]
   \   0000002E   0xF010 0x0F03      TST      R0,#0x3
   \   00000032   0xD102             BNE.N    ??extChannelEnable_3
   \                     ??extChannelEnable_2:
   \   00000034   0x....             LDR.N    R0,??DataTable4_6
   \   00000036   0x.... 0x....      BL       chDbgPanic
    147            extChannelEnableI(extp, channel);
   \                     ??extChannelEnable_3:
   \   0000003A   0x0029             MOVS     R1,R5
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0x.... 0x....      BL       ext_lld_channel_enable
    148            chSysUnlock();
   \   00000042   0x.... 0x....      BL       dbg_check_unlock
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0xF380 0x8811      MSR      BASEPRI,R0
    149          }
   \   0000004C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    150          
    151          /**
    152           * @brief   Disables an EXT channel.
    153           * @pre     The channel must not be in @p EXT_CH_MODE_DISABLED mode.
    154           *
    155           * @param[in] extp      pointer to the @p EXTDriver object
    156           * @param[in] channel   channel to be disabled
    157           *
    158           * @api
    159           */

   \                                 In section .text, align 2, keep-with-next
    160          void extChannelDisable(EXTDriver *extp, expchannel_t channel) {
   \                     extChannelDisable:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    161          
    162            chDbgCheck((extp != NULL) && (channel < EXT_MAX_CHANNELS),
    163                       "extChannelDisable");
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD001             BEQ.N    ??extChannelDisable_0
   \   0000000A   0x2D17             CMP      R5,#+23
   \   0000000C   0xD304             BCC.N    ??extChannelDisable_1
   \                     ??extChannelDisable_0:
   \   0000000E   0x22A3             MOVS     R2,#+163
   \   00000010   0x....             LDR.N    R1,??DataTable4
   \   00000012   0x....             LDR.N    R0,??DataTable4_7
   \   00000014   0x.... 0x....      BL       chDbgPanic3
    164          
    165            chSysLock();
   \                     ??extChannelDisable_1:
   \   00000018   0x2020             MOVS     R0,#+32
   \   0000001A   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000001E   0x.... 0x....      BL       dbg_check_lock
    166            chDbgAssert((extp->state == EXT_ACTIVE) &&
    167                        ((extp->config->channels[channel].mode &
    168                          EXT_CH_MODE_EDGES_MASK) != EXT_CH_MODE_DISABLED),
    169                        "extChannelDisable(), #1", "invalid state");
   \   00000022   0x7820             LDRB     R0,[R4, #+0]
   \   00000024   0x2802             CMP      R0,#+2
   \   00000026   0xD105             BNE.N    ??extChannelDisable_2
   \   00000028   0x6860             LDR      R0,[R4, #+4]
   \   0000002A   0xF810 0x0035      LDRB     R0,[R0, R5, LSL #+3]
   \   0000002E   0xF010 0x0F03      TST      R0,#0x3
   \   00000032   0xD102             BNE.N    ??extChannelDisable_3
   \                     ??extChannelDisable_2:
   \   00000034   0x....             LDR.N    R0,??DataTable4_8
   \   00000036   0x.... 0x....      BL       chDbgPanic
    170            extChannelDisableI(extp, channel);
   \                     ??extChannelDisable_3:
   \   0000003A   0x0029             MOVS     R1,R5
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0x.... 0x....      BL       ext_lld_channel_disable
    171            chSysUnlock();
   \   00000042   0x.... 0x....      BL       dbg_check_unlock
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0xF380 0x8811      MSR      BASEPRI,R0
    172          }
   \   0000004C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    173          
    174          /**
    175           * @brief   Changes the operation mode of a channel.
    176           * @note    This function attempts to write over the current configuration
    177           *          structure that must have been not declared constant. This
    178           *          violates the @p const qualifier in @p extStart() but it is
    179           *          intentional.
    180           * @note    This function cannot be used if the configuration structure is
    181           *          declared @p const.
    182           * @note    The effect of this function on constant configuration structures
    183           *          is not defined.
    184           *
    185           * @param[in] extp      pointer to the @p EXTDriver object
    186           * @param[in] channel   channel to be changed
    187           * @param[in] extcp     new configuration for the channel
    188           *
    189           * @iclass
    190           */

   \                                 In section .text, align 2, keep-with-next
    191          void extSetChannelModeI(EXTDriver *extp,
    192                                  expchannel_t channel,
    193                                  const EXTChannelConfig *extcp) {
   \                     extSetChannelModeI:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    194            EXTChannelConfig *oldcp;
    195          
    196            chDbgCheck((extp != NULL) && (channel < EXT_MAX_CHANNELS) &&
    197                       (extcp != NULL), "extSetChannelModeI");
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD003             BEQ.N    ??extSetChannelModeI_0
   \   0000000C   0x2D17             CMP      R5,#+23
   \   0000000E   0xD201             BCS.N    ??extSetChannelModeI_0
   \   00000010   0x2E00             CMP      R6,#+0
   \   00000012   0xD104             BNE.N    ??extSetChannelModeI_1
   \                     ??extSetChannelModeI_0:
   \   00000014   0x22C5             MOVS     R2,#+197
   \   00000016   0x....             LDR.N    R1,??DataTable4
   \   00000018   0x....             LDR.N    R0,??DataTable4_9
   \   0000001A   0x.... 0x....      BL       chDbgPanic3
    198          
    199            chDbgAssert(extp->state == EXT_ACTIVE,
    200                        "extSetChannelModeI(), #1", "invalid state");
   \                     ??extSetChannelModeI_1:
   \   0000001E   0x7820             LDRB     R0,[R4, #+0]
   \   00000020   0x2802             CMP      R0,#+2
   \   00000022   0xD002             BEQ.N    ??extSetChannelModeI_2
   \   00000024   0x....             LDR.N    R0,??DataTable4_10
   \   00000026   0x.... 0x....      BL       chDbgPanic
    201          
    202            /* Note that here the access is enforced as non-const, known access
    203               violation.*/
    204            oldcp = (EXTChannelConfig *)&extp->config->channels[channel];
   \                     ??extSetChannelModeI_2:
   \   0000002A   0x6860             LDR      R0,[R4, #+4]
   \   0000002C   0xEB10 0x00C5      ADDS     R0,R0,R5, LSL #+3
   \   00000030   0x0007             MOVS     R7,R0
    205          
    206            /* Overwiting the old channels configuration then the channel is reconfigured
    207               by the low level driver.*/
    208            *oldcp = *extcp;
   \   00000032   0xE9D6 0x0100      LDRD     R0,R1,[R6, #+0]
   \   00000036   0xE9C7 0x0100      STRD     R0,R1,[R7, #+0]
    209            ext_lld_channel_enable(extp, channel);
   \   0000003A   0x0029             MOVS     R1,R5
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0x.... 0x....      BL       ext_lld_channel_enable
    210          }
   \   00000042   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     `?<Constant "F:\\\\stuff\\\\rusefi_sourc...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     `?<Constant "\\"extStart\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     `?<Constant "extStart(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     `?<Constant "\\"extStop\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     `?<Constant "extStop(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     `?<Constant "\\"extChannelEnable\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     `?<Constant "extChannelEnable(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     `?<Constant "\\"extChannelDisable\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     `?<Constant "extChannelDisable(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     `?<Constant "\\"extSetChannelModeI\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     `?<Constant "extSetChannelModeI(), #1">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"extStart\\"()">`:
   \   00000000   0x22 0x65          DC8 "\"extStart\"()"
   \              0x78 0x74    
   \              0x53 0x74    
   \              0x61 0x72    
   \              0x74 0x22    
   \              0x28 0x29    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "F:\\\\stuff\\\\rusefi_sourc...">`:
   \   00000000   0x46 0x3A          DC8 46H, 3AH, 5CH, 73H, 74H, 75H, 66H, 66H
   \              0x5C 0x73    
   \              0x74 0x75    
   \              0x66 0x66    
   \   00000008   0x5C 0x72          DC8 5CH, 72H, 75H, 73H, 65H, 66H, 69H, 5FH
   \              0x75 0x73    
   \              0x65 0x66    
   \              0x69 0x5F    
   \   00000010   0x73 0x6F          DC8 73H, 6FH, 75H, 72H, 63H, 65H, 66H, 6FH
   \              0x75 0x72    
   \              0x63 0x65    
   \              0x66 0x6F    
   \   00000018   0x72 0x67          DC8 72H, 67H, 65H, 5CH, 66H, 69H, 72H, 6DH
   \              0x65 0x5C    
   \              0x66 0x69    
   \              0x72 0x6D    
   \   00000020   0x77 0x61          DC8 77H, 61H, 72H, 65H, 5CH, 63H, 68H, 69H
   \              0x72 0x65    
   \              0x5C 0x63    
   \              0x68 0x69    
   \   00000028   0x62 0x69          DC8 62H, 69H, 6FH, 73H, 5CH, 6FH, 73H, 5CH
   \              0x6F 0x73    
   \              0x5C 0x6F    
   \              0x73 0x5C    
   \   00000030   0x68 0x61          DC8 68H, 61H, 6CH, 5CH, 73H, 72H, 63H, 5CH
   \              0x6C 0x5C    
   \              0x73 0x72    
   \              0x63 0x5C    
   \   00000038   0x65 0x78          DC8 65H, 78H, 74H, 2EH, 63H, 0
   \              0x74 0x2E    
   \              0x63 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "extStart(), #1">`:
   \   00000000   0x65 0x78          DC8 "extStart(), #1"
   \              0x74 0x53    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x28 0x29    
   \              0x2C 0x20    
   \              0x23 0x31    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"extStop\\"()">`:
   \   00000000   0x22 0x65          DC8 "\"extStop\"()"
   \              0x78 0x74    
   \              0x53 0x74    
   \              0x6F 0x70    
   \              0x22 0x28    
   \              0x29 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "extStop(), #1">`:
   \   00000000   0x65 0x78          DC8 "extStop(), #1"
   \              0x74 0x53    
   \              0x74 0x6F    
   \              0x70 0x28    
   \              0x29 0x2C    
   \              0x20 0x23    
   \              0x31 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"extChannelEnable\\"()">`:
   \   00000000   0x22 0x65          DC8 "\"extChannelEnable\"()"
   \              0x78 0x74    
   \              0x43 0x68    
   \              0x61 0x6E    
   \              0x6E 0x65    
   \              0x6C 0x45    
   \              0x6E 0x61    
   \              0x62 0x6C    
   \              0x65 0x22    
   \              0x28 0x29    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "extChannelEnable(), #1">`:
   \   00000000   0x65 0x78          DC8 "extChannelEnable(), #1"
   \              0x74 0x43    
   \              0x68 0x61    
   \              0x6E 0x6E    
   \              0x65 0x6C    
   \              0x45 0x6E    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x28 0x29    
   \              0x2C 0x20    
   \              0x23 0x31    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"extChannelDisable\\"()">`:
   \   00000000   0x22 0x65          DC8 "\"extChannelDisable\"()"
   \              0x78 0x74    
   \              0x43 0x68    
   \              0x61 0x6E    
   \              0x6E 0x65    
   \              0x6C 0x44    
   \              0x69 0x73    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x22 0x28    
   \              0x29 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "extChannelDisable(), #1">`:
   \   00000000   0x65 0x78          DC8 "extChannelDisable(), #1"
   \              0x74 0x43    
   \              0x68 0x61    
   \              0x6E 0x6E    
   \              0x65 0x6C    
   \              0x44 0x69    
   \              0x73 0x61    
   \              0x62 0x6C    
   \              0x65 0x28    
   \              0x29 0x2C    
   \              0x20 0x23    
   \              0x31 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"extSetChannelModeI\\"()">`:
   \   00000000   0x22 0x65          DC8 "\"extSetChannelModeI\"()"
   \              0x78 0x74    
   \              0x53 0x65    
   \              0x74 0x43    
   \              0x68 0x61    
   \              0x6E 0x6E    
   \              0x65 0x6C    
   \              0x4D 0x6F    
   \              0x64 0x65    
   \              0x49 0x22    
   \              0x28 0x29    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "extSetChannelModeI(), #1">`:
   \   00000000   0x65 0x78          DC8 "extSetChannelModeI(), #1"
   \              0x74 0x53    
   \              0x65 0x74    
   \              0x43 0x68    
   \              0x61 0x6E    
   \              0x6E 0x65    
   \              0x6C 0x4D    
   \              0x6F 0x64    
   \              0x65 0x49    
   \              0x28 0x29    
   \              0x2C 0x20    
   \              0x23 0x31    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    211          
    212          #endif /* HAL_USE_EXT */
    213          
    214          /** @} */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   extChannelDisable
        16   -> chDbgPanic
        16   -> chDbgPanic3
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
        16   -> ext_lld_channel_disable
      16   extChannelEnable
        16   -> chDbgPanic
        16   -> chDbgPanic3
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
        16   -> ext_lld_channel_enable
       8   extInit
         8   -> ext_lld_init
       0   extObjectInit
      24   extSetChannelModeI
        24   -> chDbgPanic
        24   -> chDbgPanic3
        24   -> ext_lld_channel_enable
      16   extStart
        16   -> chDbgPanic
        16   -> chDbgPanic3
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
        16   -> ext_lld_start
       8   extStop
         8   -> chDbgPanic
         8   -> chDbgPanic3
         8   -> dbg_check_lock
         8   -> dbg_check_unlock
         8   -> ext_lld_stop


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      64  ?<Constant "F:\\stuff\\rusefi_sourc...">
      24  ?<Constant "\"extChannelDisable\"()">
      24  ?<Constant "\"extChannelEnable\"()">
      24  ?<Constant "\"extSetChannelModeI\"()">
      16  ?<Constant "\"extStart\"()">
      12  ?<Constant "\"extStop\"()">
      24  ?<Constant "extChannelDisable(), #1">
      24  ?<Constant "extChannelEnable(), #1">
      28  ?<Constant "extSetChannelModeI(), #1">
      16  ?<Constant "extStart(), #1">
      16  ?<Constant "extStop(), #1">
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      78  extChannelDisable
      78  extChannelEnable
       8  extInit
      10  extObjectInit
      68  extSetChannelModeI
      76  extStart
      68  extStop

 
 272 bytes in section .rodata
 430 bytes in section .text
 
 430 bytes of CODE  memory
 272 bytes of CONST memory

Errors: none
Warnings: none
