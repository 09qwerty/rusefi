###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:13 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\core #
#                       \avg_values.cpp                                       #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\core #
#                       \avg_values.cpp -lCN F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\Debug\List\ -lA F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\Debug\List\ -o                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\   #
#                       --no_cse --no_unroll --no_inline --no_code_motion     #
#                       --no_tbaa --no_clustering --no_scheduling --debug     #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\a #
#                       vg_values.lst                                         #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\av #
#                       g_values.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\core\avg_values.cpp
      1          /*
      2           * avg_values.c
      3           *
      4           * @date Jul 23, 2013
      5           * @author Andrey Belomutskiy, (c) 2012-2015
      6           */
      7          
      8          #include "avg_values.h"
      9          #include <math.h>
     10          

   \                                 In section .text, align 2, keep-with-next
     11          void avgFill(AvgTable *table, int count, float value) {
   \                     _Z7avgFillP8AvgTableif:
   \   00000000   0xB410             PUSH     {R4}
     12          	for (int i = 0; i < AVG_TAB_SIZE; i++) {
   \   00000002   0x2200             MOVS     R2,#+0
   \                     ??avgFill_0:
   \   00000004   0x2A30             CMP      R2,#+48
   \   00000006   0xDA15             BGE.N    ??avgFill_1
     13          		for (int j = 0; j < AVG_TAB_SIZE; j++) {
   \   00000008   0x2300             MOVS     R3,#+0
   \                     ??avgFill_2:
   \   0000000A   0x2B30             CMP      R3,#+48
   \   0000000C   0xDA10             BGE.N    ??avgFill_3
     14          			table->counts[i][j] = count;
   \   0000000E   0x24C0             MOVS     R4,#+192
   \   00000010   0xFB04 0x0402      MLA      R4,R4,R2,R0
   \   00000014   0xEB14 0x0483      ADDS     R4,R4,R3, LSL #+2
   \   00000018   0xF514 0x5410      ADDS     R4,R4,#+9216
   \   0000001C   0x6021             STR      R1,[R4, #+0]
     15          			table->values[i][j] = value;
   \   0000001E   0x24C0             MOVS     R4,#+192
   \   00000020   0xFB04 0x0402      MLA      R4,R4,R2,R0
   \   00000024   0xEB14 0x0483      ADDS     R4,R4,R3, LSL #+2
   \   00000028   0xED84 0x0A00      VSTR     S0,[R4, #0]
     16          		}
   \   0000002C   0x1C5B             ADDS     R3,R3,#+1
   \   0000002E   0xE7EC             B.N      ??avgFill_2
     17          	}
   \                     ??avgFill_3:
   \   00000030   0x1C52             ADDS     R2,R2,#+1
   \   00000032   0xE7E7             B.N      ??avgFill_0
     18          }
   \                     ??avgFill_1:
   \   00000034   0xBC10             POP      {R4}
   \   00000036   0x4770             BX       LR               ;; return
     19          

   \                                 In section .text, align 4, keep-with-next
     20          void avgReset(AvgTable *table) {
   \                     _Z8avgResetP8AvgTable:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     21          	avgFill(table, 0, 0);
   \   00000004   0xED9F 0x....      VLDR.W   S0,??DataTable4  ;; 0x0
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       _Z7avgFillP8AvgTableif
     22          }
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
     23          

   \                                 In section .text, align 4, keep-with-next
     24          void avgAddValue(AvgTable *table, int rpm, float key, float value) {
   \                     _Z11avgAddValueP8AvgTableiff:
   \   00000000   0xB430             PUSH     {R4,R5}
     25            if (rpm >= MAX_RPM || key >= MAX_KEY) {
   \   00000002   0xF5B1 0x5FFA      CMP      R1,#+8000
   \   00000006   0xDA06             BGE.N    ??avgAddValue_0
   \   00000008   0xEEB1 0x1A04      VMOV.F32 S2,#5.0
   \   0000000C   0xEEB4 0x0A41      VCMP.F32 S0,S2
   \   00000010   0xEEF1 0xFA10      FMSTAT   
   \   00000014   0xDB00             BLT.N    ??avgAddValue_1
     26          		return;
   \                     ??avgAddValue_0:
   \   00000016   0xE033             B.N      ??avgAddValue_2
     27                  }
     28          	int i = (int)(AVG_TAB_SIZE * rpm / MAX_RPM);
   \                     ??avgAddValue_1:
   \   00000018   0x2230             MOVS     R2,#+48
   \   0000001A   0xFB02 0xF201      MUL      R2,R2,R1
   \   0000001E   0xF44F 0x53FA      MOV      R3,#+8000
   \   00000022   0xFB92 0xF2F3      SDIV     R2,R2,R3
     29          	int j = (int)(AVG_TAB_SIZE * key / MAX_KEY);
   \   00000026   0xED9F 0x....      VLDR.W   S2,??DataTable4_1  ;; 0x42400000
   \   0000002A   0xEE20 0x1A01      VMUL.F32 S2,S0,S2
   \   0000002E   0xEEF1 0x1A04      VMOV.F32 S3,#5.0
   \   00000032   0xEE81 0x1A21      VDIV.F32 S2,S2,S3
   \   00000036   0xEEBD 0x1AC1      VCVT.S32.F32 S2,S2
   \   0000003A   0xEE11 0x3A10      VMOV     R3,S2
     30          
     31          	table->values[i][j] += value;
   \   0000003E   0x24C0             MOVS     R4,#+192
   \   00000040   0xFB04 0x0402      MLA      R4,R4,R2,R0
   \   00000044   0xEB14 0x0483      ADDS     R4,R4,R3, LSL #+2
   \   00000048   0x25C0             MOVS     R5,#+192
   \   0000004A   0xFB05 0x0502      MLA      R5,R5,R2,R0
   \   0000004E   0xEB15 0x0583      ADDS     R5,R5,R3, LSL #+2
   \   00000052   0xED95 0x1A00      VLDR     S2,[R5, #0]
   \   00000056   0xEE31 0x1A20      VADD.F32 S2,S2,S1
   \   0000005A   0xED84 0x1A00      VSTR     S2,[R4, #0]
     32          	table->counts[i][j]++;
   \   0000005E   0x24C0             MOVS     R4,#+192
   \   00000060   0xFB04 0x0402      MLA      R4,R4,R2,R0
   \   00000064   0xEB14 0x0483      ADDS     R4,R4,R3, LSL #+2
   \   00000068   0xF514 0x5410      ADDS     R4,R4,#+9216
   \   0000006C   0x25C0             MOVS     R5,#+192
   \   0000006E   0xFB05 0x0502      MLA      R5,R5,R2,R0
   \   00000072   0xEB15 0x0583      ADDS     R5,R5,R3, LSL #+2
   \   00000076   0xF515 0x5510      ADDS     R5,R5,#+9216
   \   0000007A   0x682D             LDR      R5,[R5, #+0]
   \   0000007C   0x1C6D             ADDS     R5,R5,#+1
   \   0000007E   0x6025             STR      R5,[R4, #+0]
     33          }
   \                     ??avgAddValue_2:
   \   00000080   0xBC30             POP      {R4,R5}
   \   00000082   0x4770             BX       LR               ;; return
     34          

   \                                 In section .text, align 4, keep-with-next
     35          float avgGetValueByIndexes(AvgTable *table, int i, int j) {
     36          	int count = table->counts[i][j];
   \                     _Z20avgGetValueByIndexesP8AvgTableii:
   \   00000000   0x23C0             MOVS     R3,#+192
   \   00000002   0xFB03 0x0301      MLA      R3,R3,R1,R0
   \   00000006   0xEB13 0x0382      ADDS     R3,R3,R2, LSL #+2
   \   0000000A   0xF513 0x5310      ADDS     R3,R3,#+9216
   \   0000000E   0x681B             LDR      R3,[R3, #+0]
     37          	if (count == 0) {
   \   00000010   0x2B00             CMP      R3,#+0
   \   00000012   0xD102             BNE.N    ??avgGetValueByIndexes_0
     38          		return NAN;
   \   00000014   0xED9F 0x....      VLDR.W   S0,??DataTable4_2  ;; 0x7fffffff
   \   00000018   0xE00C             B.N      ??avgGetValueByIndexes_1
     39                  }
     40          	return table->values[i][j] / count;
   \                     ??avgGetValueByIndexes_0:
   \   0000001A   0xEE00 0x3A10      VMOV     S0,R3
   \   0000001E   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000022   0x23C0             MOVS     R3,#+192
   \   00000024   0xFB03 0x0001      MLA      R0,R3,R1,R0
   \   00000028   0xEB10 0x0082      ADDS     R0,R0,R2, LSL #+2
   \   0000002C   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000030   0xEE80 0x0A80      VDIV.F32 S0,S1,S0
   \                     ??avgGetValueByIndexes_1:
   \   00000034   0x4770             BX       LR               ;; return
     41          }
     42          

   \                                 In section .text, align 4, keep-with-next
     43          float avgGetValue(AvgTable *table, int rpm, float key) {
   \                     _Z11avgGetValueP8AvgTableif:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0xEEB0 0x8A40      VMOV.F32 S16,S0
     44            if (rpm >= MAX_RPM || key >= MAX_KEY) {
   \   0000000E   0xF5B5 0x5FFA      CMP      R5,#+8000
   \   00000012   0xDA06             BGE.N    ??avgGetValue_0
   \   00000014   0xEEB1 0x0A04      VMOV.F32 S0,#5.0
   \   00000018   0xEEB4 0x8A40      VCMP.F32 S16,S0
   \   0000001C   0xEEF1 0xFA10      FMSTAT   
   \   00000020   0xDB02             BLT.N    ??avgGetValue_1
     45          		return NAN;
   \                     ??avgGetValue_0:
   \   00000022   0xED9F 0x....      VLDR.W   S0,??DataTable4_2  ;; 0x7fffffff
   \   00000026   0xE016             B.N      ??avgGetValue_2
     46            }
     47          	int i = (int)(AVG_TAB_SIZE * rpm / MAX_RPM);
   \                     ??avgGetValue_1:
   \   00000028   0x2030             MOVS     R0,#+48
   \   0000002A   0xFB00 0xF005      MUL      R0,R0,R5
   \   0000002E   0xF44F 0x51FA      MOV      R1,#+8000
   \   00000032   0xFB90 0xF6F1      SDIV     R6,R0,R1
     48          	int j = (int)(AVG_TAB_SIZE * key / MAX_KEY);
   \   00000036   0xED9F 0x....      VLDR.W   S0,??DataTable4_1  ;; 0x42400000
   \   0000003A   0xEE28 0x0A00      VMUL.F32 S0,S16,S0
   \   0000003E   0xEEF1 0x0A04      VMOV.F32 S1,#5.0
   \   00000042   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   00000046   0xEEFD 0x8AC0      VCVT.S32.F32 S17,S0
     49          	return avgGetValueByIndexes(table, i, j);
   \   0000004A   0xEE18 0x2A90      VMOV     R2,S17
   \   0000004E   0x0031             MOVS     R1,R6
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0x.... 0x....      BL       _Z20avgGetValueByIndexesP8AvgTableii
   \                     ??avgGetValue_2:
   \   00000056   0xECBD 0x8B02      VPOP     {D8}
   \   0000005A   0xBD70             POP      {R4-R6,PC}       ;; return
     50          }
     51          

   \                                 In section .text, align 4, keep-with-next
     52          int avgGetValuesCount(AvgTable *table, int rpm, float key) {
   \                     _Z17avgGetValuesCountP8AvgTableif:
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0002             MOVS     R2,R0
     53            if (rpm >= MAX_RPM || key >= MAX_KEY) {
   \   00000004   0xF5B1 0x5FFA      CMP      R1,#+8000
   \   00000008   0xDA06             BGE.N    ??avgGetValuesCount_0
   \   0000000A   0xEEF1 0x0A04      VMOV.F32 S1,#5.0
   \   0000000E   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   00000012   0xEEF1 0xFA10      FMSTAT   
   \   00000016   0xDB01             BLT.N    ??avgGetValuesCount_1
     54          		return 0;
   \                     ??avgGetValuesCount_0:
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xE01A             B.N      ??avgGetValuesCount_2
     55            }
     56          	int i = (int)(AVG_TAB_SIZE * rpm / MAX_RPM);
   \                     ??avgGetValuesCount_1:
   \   0000001C   0x2030             MOVS     R0,#+48
   \   0000001E   0xFB00 0xF001      MUL      R0,R0,R1
   \   00000022   0xF44F 0x53FA      MOV      R3,#+8000
   \   00000026   0xFB90 0xF0F3      SDIV     R0,R0,R3
     57          	int j = (int)(AVG_TAB_SIZE * key / MAX_KEY);
   \   0000002A   0xEDDF 0x....      VLDR.W   S1,??DataTable4_1  ;; 0x42400000
   \   0000002E   0xEE60 0x0A20      VMUL.F32 S1,S0,S1
   \   00000032   0xEEB1 0x1A04      VMOV.F32 S2,#5.0
   \   00000036   0xEEC0 0x0A81      VDIV.F32 S1,S1,S2
   \   0000003A   0xEEFD 0x0AE0      VCVT.S32.F32 S1,S1
   \   0000003E   0xEE10 0x3A90      VMOV     R3,S1
     58          
     59          	return table->counts[i][j];
   \   00000042   0x24C0             MOVS     R4,#+192
   \   00000044   0xFB04 0x2000      MLA      R0,R4,R0,R2
   \   00000048   0xEB10 0x0083      ADDS     R0,R0,R3, LSL #+2
   \   0000004C   0xF510 0x5010      ADDS     R0,R0,#+9216
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \                     ??avgGetValuesCount_2:
   \   00000052   0xBC10             POP      {R4}
   \   00000054   0x4770             BX       LR               ;; return
     60          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x42400000         DC32     0x42400000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x7FFFFFFF         DC32     0x7fffffff

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   avgAddValue(AvgTable *, int, float, float)
       4   avgFill(AvgTable *, int, float)
      24   avgGetValue(AvgTable *, int, float)
        24   -> avgGetValueByIndexes(AvgTable *, int, int)
       0   avgGetValueByIndexes(AvgTable *, int, int)
       4   avgGetValuesCount(AvgTable *, int, float)
       8   avgReset(AvgTable *)
         8   -> avgFill(AvgTable *, int, float)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
     132  avgAddValue(AvgTable *, int, float, float)
      56  avgFill(AvgTable *, int, float)
      92  avgGetValue(AvgTable *, int, float)
      54  avgGetValueByIndexes(AvgTable *, int, int)
      86  avgGetValuesCount(AvgTable *, int, float)
      18  avgReset(AvgTable *)

 
 450 bytes in section .text
 
 450 bytes of CODE memory

Errors: none
Warnings: none
