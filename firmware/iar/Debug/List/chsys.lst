###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:30 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\kerne #
#                       l\src\chsys.c                                         #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\kerne #
#                       l\src\chsys.c -lCN F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\Debug\List\ -lA F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\Debug\List\ -o                             #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\   #
#                       --no_cse --no_unroll --no_inline --no_code_motion     #
#                       --no_tbaa --no_clustering --no_scheduling --debug     #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\ -On #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\c #
#                       hsys.lst                                              #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\ch #
#                       sys.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\chibios\os\kernel\src\chsys.c
      1          /*
      2              ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
      3                           2011,2012,2013 Giovanni Di Sirio.
      4          
      5              This file is part of ChibiOS/RT.
      6          
      7              ChibiOS/RT is free software; you can redistribute it and/or modify
      8              it under the terms of the GNU General Public License as published by
      9              the Free Software Foundation; either version 3 of the License, or
     10              (at your option) any later version.
     11          
     12              ChibiOS/RT is distributed in the hope that it will be useful,
     13              but WITHOUT ANY WARRANTY; without even the implied warranty of
     14              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     15              GNU General Public License for more details.
     16          
     17              You should have received a copy of the GNU General Public License
     18              along with this program.  If not, see <http://www.gnu.org/licenses/>.
     19          
     20                                                ---
     21          
     22              A special exception to the GPL can be applied should you wish to distribute
     23              a combined work that includes ChibiOS/RT, without being obliged to provide
     24              the source code for any proprietary components. See the file exception.txt
     25              for full details of how and when the exception can be applied.
     26          */
     27          
     28          /**
     29           * @file    chsys.c
     30           * @brief   System related code.
     31           *
     32           * @addtogroup system
     33           * @details System related APIs and services:
     34           *          - Initialization.
     35           *          - Locks.
     36           *          - Interrupt Handling.
     37           *          - Power Management.
     38           *          - Abnormal Termination.
     39           *          .
     40           * @{
     41           */
     42          
     43          #include "ch.h"
     44          
     45          #if !CH_NO_IDLE_THREAD || defined(__DOXYGEN__)
     46          /**
     47           * @brief   Idle thread working area.
     48           */

   \                                 In section .bss, align 8
     49          WORKING_AREA(_idle_thread_wa, PORT_IDLE_THREAD_STACK_SIZE);
   \                     _idle_thread_wa:
   \   00000000                      DS8 1336
     50          
     51          /**
     52           * @brief   This function implements the idle thread infinite loop.
     53           * @details The function puts the processor in the lowest power mode capable
     54           *          to serve interrupts.<br>
     55           *          The priority is internally set to the minimum system value so
     56           *          that this thread is executed only if there are no other ready
     57           *          threads in the system.
     58           *
     59           * @param[in] p the thread parameter, unused in this scenario
     60           */

   \                                 In section .text, align 2, keep-with-next
     61          void _idle_thread(void *p) {
     62          
     63            (void)p;
     64            chRegSetThreadName("idle");
   \                     _idle_thread:
   \   00000000   0x....             LDR.N    R1,??DataTable2
   \   00000002   0x6989             LDR      R1,[R1, #+24]
   \   00000004   0x....             LDR.N    R2,??DataTable2_1
   \   00000006   0x618A             STR      R2,[R1, #+24]
     65            while (TRUE) {
   \                     ??_idle_thread_0:
   \   00000008   0xE7FE             B.N      ??_idle_thread_0
     66              port_wait_for_interrupt();
     67              IDLE_LOOP_HOOK();
     68            }
     69          }
     70          #endif /* CH_NO_IDLE_THREAD */
     71          
     72          /**
     73           * @brief   ChibiOS/RT initialization.
     74           * @details After executing this function the current instructions stream
     75           *          becomes the main thread.
     76           * @pre     Interrupts must be still disabled when @p chSysInit() is invoked
     77           *          and are internally enabled.
     78           * @post    The main thread is created with priority @p NORMALPRIO.
     79           * @note    This function has special, architecture-dependent, requirements,
     80           *          see the notes into the various port reference manuals.
     81           *
     82           * @special
     83           */

   \                                 In section .text, align 2, keep-with-next
     84          void chSysInit(void) {
   \                     chSysInit:
   \   00000000   0xB580             PUSH     {R7,LR}
     85            static Thread mainthread;
     86          #if CH_DBG_ENABLE_STACK_CHECK
     87            extern stkalign_t __main_thread_stack_base__;
     88          #endif
     89          
     90            port_init();
   \   00000002   0x.... 0x....      BL       _port_init
     91            _scheduler_init();
   \   00000006   0x.... 0x....      BL       _scheduler_init
     92            _vt_init();
   \   0000000A   0x.... 0x....      BL       _vt_init
     93          #if CH_USE_MEMCORE
     94            _core_init();
   \   0000000E   0x.... 0x....      BL       _core_init
     95          #endif
     96          #if CH_USE_HEAP
     97            _heap_init();
   \   00000012   0x.... 0x....      BL       _heap_init
     98          #endif
     99          #if CH_DBG_ENABLE_TRACE
    100            _trace_init();
   \   00000016   0x.... 0x....      BL       _trace_init
    101          #endif
    102          
    103            /* Now this instructions flow becomes the main thread.*/
    104            setcurrp(_thread_init(&mainthread, NORMALPRIO));
   \   0000001A   0x2140             MOVS     R1,#+64
   \   0000001C   0x....             LDR.N    R0,??DataTable2_2
   \   0000001E   0x.... 0x....      BL       _thread_init
   \   00000022   0x....             LDR.N    R1,??DataTable2
   \   00000024   0x6188             STR      R0,[R1, #+24]
    105            currp->p_state = THD_STATE_CURRENT;
   \   00000026   0x....             LDR.N    R0,??DataTable2
   \   00000028   0x6980             LDR      R0,[R0, #+24]
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0xF880 0x1020      STRB     R1,[R0, #+32]
    106          #if CH_DBG_ENABLE_STACK_CHECK
    107            /* This is a special case because the main thread Thread structure is not
    108               adjacent to its stack area.*/
    109            currp->p_stklimit = &__main_thread_stack_base__;
   \   00000030   0x....             LDR.N    R0,??DataTable2
   \   00000032   0x6980             LDR      R0,[R0, #+24]
   \   00000034   0x....             LDR.N    R1,??DataTable2_3
   \   00000036   0x61C1             STR      R1,[R0, #+28]
    110          #endif
    111            chSysEnable();
   \   00000038   0x.... 0x....      BL       dbg_check_enable
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000042   0xB662             CPSIE    I
    112          
    113            /* Note, &ch_debug points to the string "main" if the registry is
    114               active, else the parameter is ignored.*/
    115            chRegSetThreadName((const char *)&ch_debug);
   \   00000044   0x....             LDR.N    R0,??DataTable2
   \   00000046   0x6980             LDR      R0,[R0, #+24]
   \   00000048   0x....             LDR.N    R1,??DataTable2_4
   \   0000004A   0x6181             STR      R1,[R0, #+24]
    116          
    117          #if !CH_NO_IDLE_THREAD
    118            /* This thread has the lowest priority in the system, its role is just to
    119               serve interrupts in its context while keeping the lowest energy saving
    120               mode compatible with the system status.*/
    121            chThdCreateStatic(_idle_thread_wa, sizeof(_idle_thread_wa), IDLEPRIO,
    122                              (tfunc_t)_idle_thread, NULL);
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x9000             STR      R0,[SP, #+0]
   \   00000050   0x....             LDR.N    R3,??DataTable2_5
   \   00000052   0x2201             MOVS     R2,#+1
   \   00000054   0xF44F 0x61A7      MOV      R1,#+1336
   \   00000058   0x....             LDR.N    R0,??DataTable2_6
   \   0000005A   0x.... 0x....      BL       chThdCreateStatic
    123          #endif
    124          }
   \   0000005E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     ??mainthread:
   \   00000000                      DS8 76
    125          
    126          /**
    127           * @brief   Handles time ticks for round robin preemption and timer increments.
    128           * @details Decrements the remaining time quantum of the running thread
    129           *          and preempts it when the quantum is used up. Increments system
    130           *          time and manages the timers.
    131           * @note    The frequency of the timer determines the system tick granularity
    132           *          and, together with the @p CH_TIME_QUANTUM macro, the round robin
    133           *          interval.
    134           *
    135           * @iclass
    136           */

   \                                 In section .text, align 2, keep-with-next
    137          void chSysTimerHandlerI(void) {
   \                     chSysTimerHandlerI:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    138          
    139            chDbgCheckClassI();
   \   00000002   0x.... 0x....      BL       chDbgCheckClassI
    140          
    141          #if CH_TIME_QUANTUM > 0
    142            /* Running thread has not used up quantum yet? */
    143            if (currp->p_preempt > 0)
   \   00000006   0x....             LDR.N    R0,??DataTable2
   \   00000008   0x6980             LDR      R0,[R0, #+24]
   \   0000000A   0xF890 0x0022      LDRB     R0,[R0, #+34]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD008             BEQ.N    ??chSysTimerHandlerI_0
    144              /* Decrement remaining quantum.*/
    145              currp->p_preempt--;
   \   00000012   0x....             LDR.N    R0,??DataTable2
   \   00000014   0x6980             LDR      R0,[R0, #+24]
   \   00000016   0xF890 0x0022      LDRB     R0,[R0, #+34]
   \   0000001A   0x1E40             SUBS     R0,R0,#+1
   \   0000001C   0x....             LDR.N    R1,??DataTable2
   \   0000001E   0x6989             LDR      R1,[R1, #+24]
   \   00000020   0xF881 0x0022      STRB     R0,[R1, #+34]
    146          #endif
    147          #if CH_DBG_THREADS_PROFILING
    148            currp->p_time++;
   \                     ??chSysTimerHandlerI_0:
   \   00000024   0x....             LDR.N    R0,??DataTable2
   \   00000026   0x6980             LDR      R0,[R0, #+24]
   \   00000028   0x6A40             LDR      R0,[R0, #+36]
   \   0000002A   0x1C40             ADDS     R0,R0,#+1
   \   0000002C   0x....             LDR.N    R1,??DataTable2
   \   0000002E   0x6989             LDR      R1,[R1, #+24]
   \   00000030   0x6248             STR      R0,[R1, #+36]
    149          #endif
    150            chVTDoTickI();
   \   00000032   0x....             LDR.N    R0,??DataTable2_7
   \   00000034   0x68C0             LDR      R0,[R0, #+12]
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \   00000038   0x....             LDR.N    R1,??DataTable2_7
   \   0000003A   0x60C8             STR      R0,[R1, #+12]
   \   0000003C   0x....             LDR.N    R0,??DataTable2_7
   \   0000003E   0x....             LDR.N    R1,??DataTable2_7
   \   00000040   0x6809             LDR      R1,[R1, #+0]
   \   00000042   0x4288             CMP      R0,R1
   \   00000044   0xD023             BEQ.N    ??chSysTimerHandlerI_1
   \   00000046   0x....             LDR.N    R0,??DataTable2_7
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x6880             LDR      R0,[R0, #+8]
   \   0000004C   0x1E40             SUBS     R0,R0,#+1
   \   0000004E   0x....             LDR.N    R1,??DataTable2_7
   \   00000050   0x6809             LDR      R1,[R1, #+0]
   \   00000052   0x6088             STR      R0,[R1, #+8]
   \                     ??chSysTimerHandlerI_2:
   \   00000054   0x....             LDR.N    R0,??DataTable2_7
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0x0004             MOVS     R4,R0
   \   0000005A   0x6880             LDR      R0,[R0, #+8]
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD116             BNE.N    ??chSysTimerHandlerI_1
   \   00000060   0x68E0             LDR      R0,[R4, #+12]
   \   00000062   0x0005             MOVS     R5,R0
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x60E0             STR      R0,[R4, #+12]
   \   00000068   0x6820             LDR      R0,[R4, #+0]
   \   0000006A   0x....             LDR.N    R1,??DataTable2_7
   \   0000006C   0x6041             STR      R1,[R0, #+4]
   \   0000006E   0x....             LDR.N    R0,??DataTable2_7
   \   00000070   0x6821             LDR      R1,[R4, #+0]
   \   00000072   0x6001             STR      R1,[R0, #+0]
   \   00000074   0x.... 0x....      BL       dbg_check_unlock_from_isr
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000007E   0x6920             LDR      R0,[R4, #+16]
   \   00000080   0x47A8             BLX      R5
   \   00000082   0x2020             MOVS     R0,#+32
   \   00000084   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000088   0x.... 0x....      BL       dbg_check_lock_from_isr
   \   0000008C   0xE7E2             B.N      ??chSysTimerHandlerI_2
    151          #if defined(SYSTEM_TICK_EVENT_HOOK)
    152            SYSTEM_TICK_EVENT_HOOK();
    153          #endif
    154          }
   \                     ??chSysTimerHandlerI_1:
   \   0000008E   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     rlist

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     `?<Constant "idle">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     ??mainthread

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     __main_thread_stack_base__

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     ch_debug

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     _idle_thread

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     _idle_thread_wa

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     vtlist

   \                                 In section .rodata, align 4
   \                     `?<Constant "idle">`:
   \   00000000   0x69 0x64          DC8 "idle"
   \              0x6C 0x65    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    155          
    156          /** @} */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   _idle_thread
       8   chSysInit
         8   -> _core_init
         8   -> _heap_init
         8   -> _port_init
         8   -> _scheduler_init
         8   -> _thread_init
         8   -> _trace_init
         8   -> _vt_init
         8   -> chThdCreateStatic
         8   -> dbg_check_enable
      16   chSysTimerHandlerI
        16   -- Indirect call
        16   -> chDbgCheckClassI
        16   -> dbg_check_lock_from_isr
        16   -> dbg_check_unlock_from_isr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "idle">
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
      10  _idle_thread
    1336  _idle_thread_wa
      96  chSysInit
     144  chSysTimerHandlerI
      76  mainthread

 
 1 412 bytes in section .bss
     8 bytes in section .rodata
   282 bytes in section .text
 
   282 bytes of CODE  memory
     8 bytes of CONST memory
 1 412 bytes of DATA  memory

Errors: none
Warnings: none
