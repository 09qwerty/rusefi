###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:52 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\lcd_ #
#                       controller.cpp                                        #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\lcd_ #
#                       controller.cpp -lCN F:\stuff\rusefi_sourceforge\firmw #
#                       are\iar\Debug\List\ -lA F:\stuff\rusefi_sourceforge\f #
#                       irmware\iar\Debug\List\ -o                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\   #
#                       --no_cse --no_unroll --no_inline --no_code_motion     #
#                       --no_tbaa --no_clustering --no_scheduling --debug     #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\l #
#                       cd_controller.lst                                     #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\lc #
#                       d_controller.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\lcd_controller.cpp
      1          /**
      2           * @file lcd_controller.cpp
      3           *
      4           * @date Aug 14, 2014
      5           * @author Andrey Belomutskiy, (c) 2012-2015
      6           */
      7          
      8          #include "main.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x0032             MOVS     R2,R6
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memcpy
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
      9          #include "lcd_controller.h"
     10          #include "lcd_HD44780.h"
     11          #include "efilib.h"
     12          #include "rpm_calculator.h"
     13          #include "allsensors.h"
     14          #include "engine.h"
     15          #include "rtc_helper.h"
     16          #include "io_pins.h"
     17          #include "efiGpio.h"
     18          #include "svnversion.h"
     19          #include "joystick.h"
     20          #include "utlist.h"
     21          #include "lcd_menu_tree.h"
     22          #include "memstreams.h"
     23          #include "settings.h"
     24          #include "injector_central.h"
     25          
     26          #if EFI_HD44780_LCD || defined(__DOXYGEN__)
     27          
     28          EXTERN_ENGINE
     29          ;
     30          

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine:
   \   00000000   0xB580             PUSH     {R7,LR}
     31          static MenuItem ROOT(NULL, NULL);
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   0000000A   0x.... 0x....      BL       _ZN8MenuItemC1EPS_PKc
   \   0000000E   0x0001             MOVS     R1,R0
     32          
     33          static MenuTree tree(&ROOT);
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable5_2
   \   00000014   0x.... 0x....      BL       _ZN8MenuTreeC1EP8MenuItem
     34          
     35          static MenuItem miRpm(tree.root, LL_RPM);
   \   00000018   0x2207             MOVS     R2,#+7
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable5_2
   \   0000001E   0x6801             LDR      R1,[R0, #+0]
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable5_3
   \   00000024   0x.... 0x....      BL       _ZN8MenuItemC1EPS_10lcd_line_e
     36          static MenuItem miSensors(tree.root, "sensors");
   \   00000028   0x.... 0x....      LDR.W    R2,??DataTable5_4
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable5_2
   \   00000030   0x6801             LDR      R1,[R0, #+0]
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   00000036   0x.... 0x....      BL       _ZN8MenuItemC1EPS_PKc
     37          static MenuItem miBench(tree.root, "bench test");
   \   0000003A   0x.... 0x....      LDR.W    R2,??DataTable5_6
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable5_2
   \   00000042   0x6801             LDR      R1,[R0, #+0]
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable5_7
   \   00000048   0x.... 0x....      BL       _ZN8MenuItemC1EPS_PKc
     38          static MenuItem miAbout(tree.root, "about");
   \   0000004C   0x.... 0x....      LDR.W    R2,??DataTable5_8
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable5_2
   \   00000054   0x6801             LDR      R1,[R0, #+0]
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable5_9
   \   0000005A   0x.... 0x....      BL       _ZN8MenuItemC1EPS_PKc
     39          
     40          static MenuItem miTriggerErrors(&miRpm, LL_TRIGGER_ERRORS);
   \   0000005E   0x2208             MOVS     R2,#+8
   \   00000060   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable5_10
   \   00000068   0x.... 0x....      BL       _ZN8MenuItemC1EPS_10lcd_line_e
     41          static MenuItem miTriggerDuty(&miRpm, LL_TRIGGER_DUTY);
   \   0000006C   0x2209             MOVS     R2,#+9
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable5_11
   \   00000076   0x.... 0x....      BL       _ZN8MenuItemC1EPS_10lcd_line_e
     42          
     43          static MenuItem miClt(&miSensors, LL_CLT_TEMPERATURE);
   \   0000007A   0x220A             MOVS     R2,#+10
   \   0000007C   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable5_12
   \   00000084   0x.... 0x....      BL       _ZN8MenuItemC1EPS_10lcd_line_e
     44          static MenuItem miIat(&miSensors, LL_IAT_TEMPERATURE);
   \   00000088   0x220B             MOVS     R2,#+11
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable5_13
   \   00000092   0x.... 0x....      BL       _ZN8MenuItemC1EPS_10lcd_line_e
     45          static MenuItem miTps(&miSensors, LL_TPS);
   \   00000096   0x220D             MOVS     R2,#+13
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable5_14
   \   000000A0   0x.... 0x....      BL       _ZN8MenuItemC1EPS_10lcd_line_e
     46          static MenuItem miVBatt(&miSensors, LL_VBATT);
   \   000000A4   0x220E             MOVS     R2,#+14
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   000000AA   0x.... 0x....      LDR.W    R0,??DataTable5_15
   \   000000AE   0x.... 0x....      BL       _ZN8MenuItemC1EPS_10lcd_line_e
     47          static MenuItem miMap(&miSensors, LL_MAP);
   \   000000B2   0x2210             MOVS     R2,#+16
   \   000000B4   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   000000B8   0x.... 0x....      LDR.W    R0,??DataTable5_16
   \   000000BC   0x.... 0x....      BL       _ZN8MenuItemC1EPS_10lcd_line_e
     48          static MenuItem miAfr(&miSensors, LL_AFR);
   \   000000C0   0x220C             MOVS     R2,#+12
   \   000000C2   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   000000C6   0x.... 0x....      LDR.W    R0,??DataTable5_17
   \   000000CA   0x.... 0x....      BL       _ZN8MenuItemC1EPS_10lcd_line_e
     49          static MenuItem miBaro(&miSensors, LL_BARO);
   \   000000CE   0x2214             MOVS     R2,#+20
   \   000000D0   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable5_18
   \   000000D8   0x.... 0x....      BL       _ZN8MenuItemC1EPS_10lcd_line_e
     50          static MenuItem miMapV(&miSensors, LL_MAF_V);
   \   000000DC   0x2211             MOVS     R2,#+17
   \   000000DE   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable5_19
   \   000000E6   0x.... 0x....      BL       _ZN8MenuItemC1EPS_10lcd_line_e
     51          static MenuItem miMapKgHr(&miSensors, LL_MAF_KG_HR);
   \   000000EA   0x2212             MOVS     R2,#+18
   \   000000EC   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable5_20
   \   000000F4   0x.... 0x....      BL       _ZN8MenuItemC1EPS_10lcd_line_e
     52          
     53          static MenuItem miStopEngine(&miBench, "stop engine", stopEngine);
   \   000000F8   0x.... 0x....      LDR.W    R3,??DataTable5_21
   \   000000FC   0x.... 0x....      LDR.W    R2,??DataTable5_22
   \   00000100   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable5_23
   \   00000108   0x.... 0x....      BL       _ZN8MenuItemC1EPS_PKcPFvvE
     54          static MenuItem miTestFan(&miBench, "test fan", fanBench);
   \   0000010C   0x.... 0x....      LDR.W    R3,??DataTable5_24
   \   00000110   0x.... 0x....      LDR.W    R2,??DataTable5_25
   \   00000114   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \   00000118   0x.... 0x....      LDR.W    R0,??DataTable5_26
   \   0000011C   0x.... 0x....      BL       _ZN8MenuItemC1EPS_PKcPFvvE
     55          static MenuItem miTestFuelPump(&miBench, "test pump", fuelPumpBench);
   \   00000120   0x.... 0x....      LDR.W    R3,??DataTable5_27
   \   00000124   0x.... 0x....      LDR.W    R2,??DataTable5_28
   \   00000128   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \   0000012C   0x.... 0x....      LDR.W    R0,??DataTable5_29
   \   00000130   0x.... 0x....      BL       _ZN8MenuItemC1EPS_PKcPFvvE
     56          static MenuItem miTestSpark1(&miBench, "test spark1");
   \   00000134   0x.... 0x....      LDR.W    R2,??DataTable5_30
   \   00000138   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \   0000013C   0x.... 0x....      LDR.W    R0,??DataTable5_31
   \   00000140   0x.... 0x....      BL       _ZN8MenuItemC1EPS_PKc
     57          static MenuItem miTestSpark2(&miBench, "test spark2");
   \   00000144   0x.... 0x....      LDR.W    R2,??DataTable5_32
   \   00000148   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \   0000014C   0x.... 0x....      LDR.W    R0,??DataTable5_33
   \   00000150   0x.... 0x....      BL       _ZN8MenuItemC1EPS_PKc
     58          static MenuItem miTestSpark3(&miBench, "test spark3");
   \   00000154   0x.... 0x....      LDR.W    R2,??DataTable5_34
   \   00000158   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \   0000015C   0x.... 0x....      LDR.W    R0,??DataTable5_35
   \   00000160   0x.... 0x....      BL       _ZN8MenuItemC1EPS_PKc
     59          static MenuItem miTestSpark4(&miBench, "test spark4");
   \   00000164   0x.... 0x....      LDR.W    R2,??DataTable5_36
   \   00000168   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \   0000016C   0x.... 0x....      LDR.W    R0,??DataTable5_37
   \   00000170   0x.... 0x....      BL       _ZN8MenuItemC1EPS_PKc
     60          static MenuItem miTestInj1(&miBench, "test injector1");
   \   00000174   0x.... 0x....      LDR.W    R2,??DataTable5_38
   \   00000178   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \   0000017C   0x.... 0x....      LDR.W    R0,??DataTable5_39
   \   00000180   0x.... 0x....      BL       _ZN8MenuItemC1EPS_PKc
     61          static MenuItem miTestInj2(&miBench, "test injector2");
   \   00000184   0x.... 0x....      LDR.W    R2,??DataTable5_40
   \   00000188   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \   0000018C   0x.... 0x....      LDR.W    R0,??DataTable5_41
   \   00000190   0x.... 0x....      BL       _ZN8MenuItemC1EPS_PKc
     62          static MenuItem miTestInj3(&miBench, "test injector3");
   \   00000194   0x.... 0x....      LDR.W    R2,??DataTable5_42
   \   00000198   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \   0000019C   0x.... 0x....      LDR.W    R0,??DataTable5_43
   \   000001A0   0x.... 0x....      BL       _ZN8MenuItemC1EPS_PKc
     63          static MenuItem miTestInj4(&miBench, "test injector4");
   \   000001A4   0x.... 0x....      LDR.W    R2,??DataTable5_44
   \   000001A8   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \   000001AC   0x.... 0x....      LDR.W    R0,??DataTable5_45
   \   000001B0   0x.... 0x....      BL       _ZN8MenuItemC1EPS_PKc
     64          
     65          static MenuItem miVersion(&miAbout, LL_VERSION);
   \   000001B4   0x2201             MOVS     R2,#+1
   \   000001B6   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \   000001BA   0x.... 0x....      LDR.W    R0,??DataTable5_46
   \   000001BE   0x.... 0x....      BL       _ZN8MenuItemC1EPS_10lcd_line_e
     66          static MenuItem miConfig(&miAbout, LL_CONFIG);
   \   000001C2   0x2202             MOVS     R2,#+2
   \   000001C4   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \   000001C8   0x.... 0x....      LDR.W    R0,??DataTable5_47
   \   000001CC   0x.... 0x....      BL       _ZN8MenuItemC1EPS_10lcd_line_e
     67          static MenuItem miAlgo(&miAbout, LL_ALGORITHM);
   \   000001D0   0x2203             MOVS     R2,#+3
   \   000001D2   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \   000001D6   0x.... 0x....      LDR.W    R0,??DataTable5_48
   \   000001DA   0x.... 0x....      BL       _ZN8MenuItemC1EPS_10lcd_line_e
     68          static MenuItem miInjection(&miAbout, LL_INJECTION);
   \   000001DE   0x2204             MOVS     R2,#+4
   \   000001E0   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \   000001E4   0x.... 0x....      LDR.W    R0,??DataTable5_49
   \   000001E8   0x.... 0x....      BL       _ZN8MenuItemC1EPS_10lcd_line_e
     69          static MenuItem miIgnition(&miAbout, LL_IGNITION);
   \   000001EC   0x2205             MOVS     R2,#+5
   \   000001EE   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \   000001F2   0x.... 0x....      LDR.W    R0,??DataTable5_50
   \   000001F6   0x.... 0x....      BL       _ZN8MenuItemC1EPS_10lcd_line_e
     70          static MenuItem miInjFlow(&miAbout, LL_ING_FLOW);
   \   000001FA   0x2206             MOVS     R2,#+6
   \   000001FC   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \   00000200   0x.... 0x....      LDR.W    R0,??DataTable5_51
   \   00000204   0x.... 0x....      BL       _ZN8MenuItemC1EPS_10lcd_line_e
   \   00000208   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     ROOT:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     tree:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
   \                     miRpm:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miSensors:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miBench:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miAbout:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miTriggerErrors:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miTriggerDuty:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miClt:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miIat:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miTps:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miVBatt:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miMap:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miAfr:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miBaro:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miMapV:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miMapKgHr:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miStopEngine:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miTestFan:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miTestFuelPump:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miTestSpark1:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miTestSpark2:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miTestSpark3:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miTestSpark4:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miTestInj1:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miTestInj2:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miTestInj3:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miTestInj4:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miVersion:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miConfig:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miAlgo:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miInjection:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miIgnition:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     miInjFlow:
   \   00000000                      DS8 36
     71          
     72          #define DISP_LINES (engineConfiguration->HD44780height - 1)
     73          

   \                                 In section .bss, align 4
     74          static char lcdLineBuffer[30];
   \                     lcdLineBuffer:
   \   00000000                      DS8 32

   \                                 In section .bss, align 4
     75          static MemoryStream lcdLineStream;
   \                     lcdLineStream:
   \   00000000                      DS8 20
     76          

   \                                 In section .text, align 2, keep-with-next
     77          void onJoystick(joystick_button_e button) {
   \                     _Z10onJoystick17joystick_button_e:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     78          	/**
     79          	 * this method is invoked on EXTI IRQ thread
     80          	 */
     81          	if (button == JB_CENTER) {
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD104             BNE.N    ??onJoystick_0
     82          		tree.enterSubMenu();
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable5_2
   \   0000000E   0x.... 0x....      BL       _ZN8MenuTree12enterSubMenuEv
   \   00000012   0xE00E             B.N      ??onJoystick_1
     83          	} else if (button == JB_BUTTON_D) {
   \                     ??onJoystick_0:
   \   00000014   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000016   0x2C04             CMP      R4,#+4
   \   00000018   0xD104             BNE.N    ??onJoystick_2
     84          		tree.nextItem();
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable5_2
   \   0000001E   0x.... 0x....      BL       _ZN8MenuTree8nextItemEv
   \   00000022   0xE006             B.N      ??onJoystick_1
     85          	} else if (button == JB_BUTTON_A) {
   \                     ??onJoystick_2:
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x2C01             CMP      R4,#+1
   \   00000028   0xD103             BNE.N    ??onJoystick_1
     86          		tree.back();
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable5_2
   \   0000002E   0x.... 0x....      BL       _ZN8MenuTree4backEv
     87          	}
     88          	// actual repaint happends in the repaint loop
     89          }
   \                     ??onJoystick_1:
   \   00000032   0xBD10             POP      {R4,PC}          ;; return
     90          

   \                                 In section .text, align 2, keep-with-next
     91          char * appendStr(char *ptr, const char *suffix) {
   \                     _Z9appendStrPcPKc:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     92          	for (uint32_t i = 0; i < efiStrlen(suffix); i++) {
   \   00000006   0x2600             MOVS     R6,#+0
   \                     ??appendStr_0:
   \   00000008   0x0028             MOVS     R0,R5
   \   0000000A   0x.... 0x....      BL       efiStrlen
   \   0000000E   0x4286             CMP      R6,R0
   \   00000010   0xD204             BCS.N    ??appendStr_1
     93          		*ptr++ = suffix[i];
   \   00000012   0x5D70             LDRB     R0,[R6, R5]
   \   00000014   0x7020             STRB     R0,[R4, #+0]
   \   00000016   0x1C64             ADDS     R4,R4,#+1
     94          	}
   \   00000018   0x1C76             ADDS     R6,R6,#+1
   \   0000001A   0xE7F5             B.N      ??appendStr_0
     95          	return ptr;
   \                     ??appendStr_1:
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0xBD70             POP      {R4-R6,PC}       ;; return
     96          }
     97          

   \                                 In section .text, align 2, keep-with-next
     98          void initLcdController(void) {
   \                     _Z17initLcdControllerv:
   \   00000000   0xB580             PUSH     {R7,LR}
     99          	tree.init(&miRpm, engineConfiguration->HD44780height - 1);
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable5_52
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF8D0 0x0208      LDR      R0,[R0, #+520]
   \   0000000C   0x1E42             SUBS     R2,R0,#+1
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable5_2
   \   00000016   0x.... 0x....      BL       _ZN8MenuTree4initEP8MenuItemi
    100          	msObjectInit(&lcdLineStream, (uint8_t *) lcdLineBuffer, sizeof(lcdLineBuffer), 0);
   \   0000001A   0x2300             MOVS     R3,#+0
   \   0000001C   0x221E             MOVS     R2,#+30
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable5_53
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable5_54
   \   00000026   0x.... 0x....      BL       msObjectInit
    101          }
   \   0000002A   0xBD01             POP      {R0,PC}          ;; return
    102          
    103          static char * prepareVBattMapLine(engine_configuration_s *engineConfiguration, char *buffer) {
    104          	char *ptr = buffer;
    105          	*ptr++ = 'V';
    106          	ptr = ftoa(ptr, getVBatt(PASS_ENGINE_PARAMETER_F), 10.0f);
    107          
    108          	ptr = appendStr(ptr, " M");
    109          	ptr = ftoa(ptr, getRawMap(), 10.0f);
    110          	return ptr;
    111          }
    112          
    113          static char * prepareCltIatTpsLine(Engine *engine, char *buffer) {
    114          	char *ptr = buffer;
    115          	*ptr++ = 'C';
    116          
    117          	ptr = appendStr(ptr, " TP");
    118          	ptr = itoa10(ptr, (int) getTPS(PASS_ENGINE_PARAMETER_F));
    119          	return ptr;
    120          }
    121          
    122          static const char* ignitionModeStr[] = { "1C", "IND", "WS" };
    123          static const char* injectionModeStr[] = { "Sim", "Seq", "Bch" };
    124          static const char* idleModeStr[] = { "I:A", "I:M" };
    125          
    126          //static const char *getPinShortName(io_pin_e pin) {
    127          //	switch (pin) {
    128          //	case ALTERNATOR_SWITCH:
    129          //		return "AL";
    130          //	case FUEL_PUMP_RELAY:
    131          //		return "FP";
    132          //	case FAN_RELAY:
    133          //		return "FN";
    134          //	case O2_HEATER:
    135          //		return "O2H";
    136          //	default:
    137          //		firmwareError("No short name for %d", (int) pin);
    138          //		return "";
    139          //	}
    140          //}
    141          
    142          //char * appendPinStatus(char *buffer, io_pin_e pin) {
    143          //	char *ptr = appendStr(buffer, getPinShortName(pin));
    144          //	int state = getOutputPinValue(pin);
    145          //	// todo: should we handle INITIAL_PIN_STATE?
    146          //	if (state) {
    147          //		return appendStr(ptr, ":Y ");
    148          //	} else {
    149          //		return appendStr(ptr, ":n ");
    150          //	}
    151          //}
    152          
    153          static char * prepareInfoLine(engine_configuration_s *engineConfiguration, char *buffer) {
    154          	char *ptr = buffer;
    155          
    156          	ptr = appendStr(ptr, " ");
    157          	ptr = appendStr(ptr, ignitionModeStr[engineConfiguration->ignitionMode]);
    158          
    159          	ptr = appendStr(ptr, " ");
    160          	ptr = appendStr(ptr, injectionModeStr[engineConfiguration->injectionMode]);
    161          
    162          	ptr = appendStr(ptr, " ");
    163          	ptr = appendStr(ptr, idleModeStr[engineConfiguration->idleMode]);
    164          
    165          	ptr = appendStr(ptr, " ");
    166          	return ptr;
    167          }
    168          
    169          //static char * prepareStatusLine(char *buffer) {
    170          //	char *ptr = buffer;
    171          //
    172          //	ptr = appendPinStatus(ptr, FUEL_PUMP_RELAY);
    173          //	ptr = appendPinStatus(ptr, FAN_RELAY);
    174          //	ptr = appendPinStatus(ptr, O2_HEATER);
    175          //	return ptr;
    176          //}
    177          

   \                                 In section .bss, align 4
    178          static char buffer[MAX_LCD_WIDTH + 4];
   \                     buffer:
   \   00000000                      DS8 24
    179          static char dateBuffer[30];
    180          

   \                                 In section .text, align 2, keep-with-next
    181          static void lcdPrintf(const char *fmt, ...) {
   \                     _Z9lcdPrintfPKcz:
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB530             PUSH     {R4,R5,LR}
   \   00000004   0x0004             MOVS     R4,R0
    182          	va_list ap;
    183          	va_start(ap, fmt);
   \   00000006   0xA803             ADD      R0,SP,#+12
   \   00000008   0x0005             MOVS     R5,R0
    184          	lcdLineStream.eos = 0; // reset
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable5_54
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x60C1             STR      R1,[R0, #+12]
    185          	chvprintf((BaseSequentialStream *) &lcdLineStream, fmt, ap);
   \   00000012   0x002A             MOVS     R2,R5
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable5_54
   \   0000001A   0x.... 0x....      BL       chvprintf
    186          	lcdLineStream.buffer[lcdLineStream.eos] = 0; // terminator
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable5_54
   \   00000022   0x68C0             LDR      R0,[R0, #+12]
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable5_54
   \   00000028   0x6849             LDR      R1,[R1, #+4]
   \   0000002A   0x2200             MOVS     R2,#+0
   \   0000002C   0x5442             STRB     R2,[R0, R1]
    187          	va_end(ap);
    188          	lcd_HD44780_print_string(lcdLineBuffer);
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable5_53
   \   00000032   0x.... 0x....      BL       lcd_HD44780_print_string
    189          }
   \   00000036   0xBC30             POP      {R4,R5}
   \   00000038   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return
    190          

   \                                 In section .text, align 2, keep-with-next
    191          static void showLine(lcd_line_e line, int screenY) {
   \                     _Z8showLine10lcd_line_ei:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    192          
    193          	switch (line) {
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD02B             BEQ.N    ??showLine_0
   \   0000000E   0x2802             CMP      R0,#+2
   \   00000010   0xD030             BEQ.N    ??showLine_1
   \   00000012   0x2803             CMP      R0,#+3
   \   00000014   0xD06A             BEQ.N    ??showLine_2
   \   00000016   0x2804             CMP      R0,#+4
   \   00000018   0xD071             BEQ.N    ??showLine_3
   \   0000001A   0x2805             CMP      R0,#+5
   \   0000001C   0xF000 0x8083      BEQ.W    ??showLine_4
   \   00000020   0x2806             CMP      R0,#+6
   \   00000022   0xD075             BEQ.N    ??showLine_5
   \   00000024   0x2807             CMP      R0,#+7
   \   00000026   0xD031             BEQ.N    ??showLine_6
   \   00000028   0x2808             CMP      R0,#+8
   \   0000002A   0xF000 0x810B      BEQ.W    ??showLine_7
   \   0000002E   0x2809             CMP      R0,#+9
   \   00000030   0xF000 0x810C      BEQ.W    ??showLine_8
   \   00000034   0x280A             CMP      R0,#+10
   \   00000036   0xD040             BEQ.N    ??showLine_9
   \   00000038   0x280B             CMP      R0,#+11
   \   0000003A   0xD04B             BEQ.N    ??showLine_10
   \   0000003C   0x280C             CMP      R0,#+12
   \   0000003E   0xF000 0x80A7      BEQ.W    ??showLine_11
   \   00000042   0x280D             CMP      R0,#+13
   \   00000044   0xD078             BEQ.N    ??showLine_12
   \   00000046   0x280E             CMP      R0,#+14
   \   00000048   0xF000 0x8082      BEQ.W    ??showLine_13
   \   0000004C   0x2810             CMP      R0,#+16
   \   0000004E   0xF000 0x80B9      BEQ.W    ??showLine_14
   \   00000052   0x2811             CMP      R0,#+17
   \   00000054   0xF000 0x80CE      BEQ.W    ??showLine_15
   \   00000058   0x2812             CMP      R0,#+18
   \   0000005A   0xF000 0x80DF      BEQ.W    ??showLine_16
   \   0000005E   0x2814             CMP      R0,#+20
   \   00000060   0xF000 0x8082      BEQ.W    ??showLine_17
   \   00000064   0xE0F6             B.N      ??showLine_18
    194          	case LL_VERSION:
    195          		lcdPrintf("version %s", VCS_VERSION);
   \                     ??showLine_0:
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable5_55
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable5_56
   \   0000006E   0x.... 0x....      BL       _Z9lcdPrintfPKcz
    196          		return;
   \   00000072   0xE0F2             B.N      ??showLine_19
    197          	case LL_CONFIG:
    198          		lcdPrintf("config %s", getConfigurationName(engineConfiguration->engineType));
   \                     ??showLine_1:
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable5_52
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0x.... 0x....      BL       _Z20getConfigurationName13engine_type_e
   \   00000080   0x0001             MOVS     R1,R0
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable5_57
   \   00000086   0x.... 0x....      BL       _Z9lcdPrintfPKcz
    199          		return;
   \   0000008A   0xE0E6             B.N      ??showLine_19
    200          	case LL_RPM:
    201          		lcdPrintf("RPM %d", getRpmE(engine));
   \                     ??showLine_6:
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable5_58
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x.... 0x....      BL       _ZN13RpmCalculator3rpmEv
   \   00000096   0x0001             MOVS     R1,R0
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable5_59
   \   0000009C   0x.... 0x....      BL       _Z9lcdPrintfPKcz
    202          		{
    203          			int seconds = getTimeNowSeconds();
   \   000000A0   0x.... 0x....      BL       getTimeNowSeconds
   \   000000A4   0x0006             MOVS     R6,R0
    204          			if (seconds < 10000) {
   \   000000A6   0xF242 0x7010      MOVW     R0,#+10000
   \   000000AA   0x4286             CMP      R6,R0
   \   000000AC   0xDA04             BGE.N    ??showLine_20
    205          				lcdPrintf("  %d", seconds);
   \   000000AE   0x0031             MOVS     R1,R6
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable5_60
   \   000000B4   0x.... 0x....      BL       _Z9lcdPrintfPKcz
    206          			}
    207          		}
    208          		return;
   \                     ??showLine_20:
   \   000000B8   0xE0CF             B.N      ??showLine_19
    209          	case LL_CLT_TEMPERATURE:
    210          		lcdPrintf("Coolant %f", getCoolantTemperature(PASS_ENGINE_PARAMETER_F));
   \                     ??showLine_9:
   \   000000BA   0x.... 0x....      BL       _Z21getCoolantTemperaturev
   \   000000BE   0xEE10 0x0A10      VMOV     R0,S0
   \   000000C2   0x.... 0x....      BL       __aeabi_f2d
   \   000000C6   0x0002             MOVS     R2,R0
   \   000000C8   0x000B             MOVS     R3,R1
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable5_61
   \   000000CE   0x.... 0x....      BL       _Z9lcdPrintfPKcz
    211          		return;
   \   000000D2   0xE0C2             B.N      ??showLine_19
    212          	case LL_IAT_TEMPERATURE:
    213          		lcdPrintf("Intake Air %f", getIntakeAirTemperature(PASS_ENGINE_PARAMETER_F));
   \                     ??showLine_10:
   \   000000D4   0x.... 0x....      BL       _Z23getIntakeAirTemperaturev
   \   000000D8   0xEE10 0x0A10      VMOV     R0,S0
   \   000000DC   0x.... 0x....      BL       __aeabi_f2d
   \   000000E0   0x0002             MOVS     R2,R0
   \   000000E2   0x000B             MOVS     R3,R1
   \   000000E4   0x....             LDR.N    R0,??DataTable5_62
   \   000000E6   0x.... 0x....      BL       _Z9lcdPrintfPKcz
    214          		return;
   \   000000EA   0xE0B6             B.N      ??showLine_19
    215          	case LL_ALGORITHM:
    216          		lcdPrintf(getEngine_load_mode_e(engineConfiguration->algorithm));
   \                     ??showLine_2:
   \   000000EC   0x....             LDR.N    R0,??DataTable5_52
   \   000000EE   0x6800             LDR      R0,[R0, #+0]
   \   000000F0   0xF8D0 0x01A8      LDR      R0,[R0, #+424]
   \   000000F4   0x.... 0x....      BL       _Z21getEngine_load_mode_e18engine_load_mode_e
   \   000000F8   0x.... 0x....      BL       _Z9lcdPrintfPKcz
    217          		return;
   \   000000FC   0xE0AD             B.N      ??showLine_19
    218          	case LL_INJECTION:
    219          		lcdPrintf(getInjection_mode_e(engineConfiguration->injectionMode));
   \                     ??showLine_3:
   \   000000FE   0x....             LDR.N    R0,??DataTable5_52
   \   00000100   0x6800             LDR      R0,[R0, #+0]
   \   00000102   0xF8D0 0x01B0      LDR      R0,[R0, #+432]
   \   00000106   0x.... 0x....      BL       _Z19getInjection_mode_e16injection_mode_e
   \   0000010A   0x.... 0x....      BL       _Z9lcdPrintfPKcz
    220          		return;
   \   0000010E   0xE0A4             B.N      ??showLine_19
    221          	case LL_ING_FLOW:
    222          		lcdPrintf("Inj %fcc", engineConfiguration->injector.flow);
   \                     ??showLine_5:
   \   00000110   0x....             LDR.N    R0,??DataTable5_52
   \   00000112   0x6800             LDR      R0,[R0, #+0]
   \   00000114   0x6880             LDR      R0,[R0, #+8]
   \   00000116   0x.... 0x....      BL       __aeabi_f2d
   \   0000011A   0x0002             MOVS     R2,R0
   \   0000011C   0x000B             MOVS     R3,R1
   \   0000011E   0x....             LDR.N    R0,??DataTable5_63
   \   00000120   0x.... 0x....      BL       _Z9lcdPrintfPKcz
    223          		return;
   \   00000124   0xE099             B.N      ??showLine_19
    224          	case LL_IGNITION:
    225          		lcdPrintf(getIgnition_mode_e(engineConfiguration->ignitionMode));
   \                     ??showLine_4:
   \   00000126   0x....             LDR.N    R0,??DataTable5_52
   \   00000128   0x6800             LDR      R0,[R0, #+0]
   \   0000012A   0xF8D0 0x01BC      LDR      R0,[R0, #+444]
   \   0000012E   0x.... 0x....      BL       _Z18getIgnition_mode_e15ignition_mode_e
   \   00000132   0x.... 0x....      BL       _Z9lcdPrintfPKcz
    226          		return;
   \   00000136   0xE090             B.N      ??showLine_19
    227          	case LL_TPS:
    228          		lcdPrintf("Throttle %f%%", getTPS());
   \                     ??showLine_12:
   \   00000138   0x.... 0x....      BL       _Z6getTPSv
   \   0000013C   0xEE10 0x0A10      VMOV     R0,S0
   \   00000140   0x.... 0x....      BL       __aeabi_f2d
   \   00000144   0x0002             MOVS     R2,R0
   \   00000146   0x000B             MOVS     R3,R1
   \   00000148   0x....             LDR.N    R0,??DataTable5_64
   \   0000014A   0x.... 0x....      BL       _Z9lcdPrintfPKcz
    229          		return;
   \   0000014E   0xE084             B.N      ??showLine_19
    230          	case LL_VBATT:
    231          		lcdPrintf("Battery %fv", getVBatt(PASS_ENGINE_PARAMETER_F));
   \                     ??showLine_13:
   \   00000150   0x.... 0x....      BL       _Z8getVBattv
   \   00000154   0xEE10 0x0A10      VMOV     R0,S0
   \   00000158   0x.... 0x....      BL       __aeabi_f2d
   \   0000015C   0x0002             MOVS     R2,R0
   \   0000015E   0x000B             MOVS     R3,R1
   \   00000160   0x....             LDR.N    R0,??DataTable5_65
   \   00000162   0x.... 0x....      BL       _Z9lcdPrintfPKcz
    232          		return;
   \   00000166   0xE078             B.N      ??showLine_19
    233          #if	EFI_ANALOG_SENSORS || defined(__DOXYGEN__)
    234          	case LL_BARO:
    235          		if (hasBaroSensor()) {
   \                     ??showLine_17:
   \   00000168   0x.... 0x....      BL       _Z13hasBaroSensorv
   \   0000016C   0x2800             CMP      R0,#+0
   \   0000016E   0xD00B             BEQ.N    ??showLine_21
    236          			lcdPrintf("Baro: %f", getBaroPressure());
   \   00000170   0x.... 0x....      BL       _Z15getBaroPressurev
   \   00000174   0xEE10 0x0A10      VMOV     R0,S0
   \   00000178   0x.... 0x....      BL       __aeabi_f2d
   \   0000017C   0x0002             MOVS     R2,R0
   \   0000017E   0x000B             MOVS     R3,R1
   \   00000180   0x....             LDR.N    R0,??DataTable5_66
   \   00000182   0x.... 0x....      BL       _Z9lcdPrintfPKcz
   \   00000186   0xE002             B.N      ??showLine_22
    237          		} else {
    238          			lcdPrintf("Baro: none");
   \                     ??showLine_21:
   \   00000188   0x....             LDR.N    R0,??DataTable5_67
   \   0000018A   0x.... 0x....      BL       _Z9lcdPrintfPKcz
    239          		}
    240          		return;
   \                     ??showLine_22:
   \   0000018E   0xE064             B.N      ??showLine_19
    241          #endif
    242          	case LL_AFR:
    243          		if (engineConfiguration->hasAfrSensor) {
   \                     ??showLine_11:
   \   00000190   0x....             LDR.N    R0,??DataTable5_52
   \   00000192   0x6800             LDR      R0,[R0, #+0]
   \   00000194   0xF890 0x05D8      LDRB     R0,[R0, #+1496]
   \   00000198   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000019A   0x08C0             LSRS     R0,R0,#+3
   \   0000019C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000001A0   0x2800             CMP      R0,#+0
   \   000001A2   0xD00B             BEQ.N    ??showLine_23
    244          			lcdPrintf("AFR: %f", getAfr());
   \   000001A4   0x.... 0x....      BL       _Z6getAfrv
   \   000001A8   0xEE10 0x0A10      VMOV     R0,S0
   \   000001AC   0x.... 0x....      BL       __aeabi_f2d
   \   000001B0   0x0002             MOVS     R2,R0
   \   000001B2   0x000B             MOVS     R3,R1
   \   000001B4   0x....             LDR.N    R0,??DataTable5_68
   \   000001B6   0x.... 0x....      BL       _Z9lcdPrintfPKcz
   \   000001BA   0xE002             B.N      ??showLine_24
    245          		} else {
    246          			lcdPrintf("AFR: none");
   \                     ??showLine_23:
   \   000001BC   0x....             LDR.N    R0,??DataTable5_69
   \   000001BE   0x.... 0x....      BL       _Z9lcdPrintfPKcz
    247          		}
    248          		return;
   \                     ??showLine_24:
   \   000001C2   0xE04A             B.N      ??showLine_19
    249          	case LL_MAP:
    250          		if (engineConfiguration->hasMapSensor) {
   \                     ??showLine_14:
   \   000001C4   0x....             LDR.N    R0,??DataTable5_52
   \   000001C6   0x6800             LDR      R0,[R0, #+0]
   \   000001C8   0xF890 0x05D8      LDRB     R0,[R0, #+1496]
   \   000001CC   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000001D0   0x2800             CMP      R0,#+0
   \   000001D2   0xD00B             BEQ.N    ??showLine_25
    251          			lcdPrintf("MAP %f", getMap());
   \   000001D4   0x.... 0x....      BL       _Z6getMapv
   \   000001D8   0xEE10 0x0A10      VMOV     R0,S0
   \   000001DC   0x.... 0x....      BL       __aeabi_f2d
   \   000001E0   0x0002             MOVS     R2,R0
   \   000001E2   0x000B             MOVS     R3,R1
   \   000001E4   0x....             LDR.N    R0,??DataTable5_70
   \   000001E6   0x.... 0x....      BL       _Z9lcdPrintfPKcz
   \   000001EA   0xE002             B.N      ??showLine_26
    252          		} else {
    253          			lcdPrintf("MAP: none");
   \                     ??showLine_25:
   \   000001EC   0x....             LDR.N    R0,??DataTable5_71
   \   000001EE   0x.... 0x....      BL       _Z9lcdPrintfPKcz
    254          		}
    255          		return;
   \                     ??showLine_26:
   \   000001F2   0xE032             B.N      ??showLine_19
    256          	case LL_MAF_V:
    257          		if (hasMafSensor()) {
   \                     ??showLine_15:
   \   000001F4   0x.... 0x....      BL       _Z12hasMafSensorv
   \   000001F8   0x2800             CMP      R0,#+0
   \   000001FA   0xD00B             BEQ.N    ??showLine_27
    258          			lcdPrintf("MAF: %fv", getMaf());
   \   000001FC   0x.... 0x....      BL       _Z6getMafv
   \   00000200   0xEE10 0x0A10      VMOV     R0,S0
   \   00000204   0x.... 0x....      BL       __aeabi_f2d
   \   00000208   0x0002             MOVS     R2,R0
   \   0000020A   0x000B             MOVS     R3,R1
   \   0000020C   0x....             LDR.N    R0,??DataTable5_72
   \   0000020E   0x.... 0x....      BL       _Z9lcdPrintfPKcz
   \   00000212   0xE002             B.N      ??showLine_28
    259          		} else {
    260          			lcdPrintf("MAF: none");
   \                     ??showLine_27:
   \   00000214   0x....             LDR.N    R0,??DataTable5_73
   \   00000216   0x.... 0x....      BL       _Z9lcdPrintfPKcz
    261          		}
    262          		return;
   \                     ??showLine_28:
   \   0000021A   0xE01E             B.N      ??showLine_19
    263          	case LL_MAF_KG_HR:
    264          		if (hasMafSensor()) {
   \                     ??showLine_16:
   \   0000021C   0x.... 0x....      BL       _Z12hasMafSensorv
   \   00000220   0x2800             CMP      R0,#+0
   \   00000222   0xD00B             BEQ.N    ??showLine_29
    265          			lcdPrintf("MAF: %f kg/hr", getRealMaf());
   \   00000224   0x.... 0x....      BL       _Z10getRealMafv
   \   00000228   0xEE10 0x0A10      VMOV     R0,S0
   \   0000022C   0x.... 0x....      BL       __aeabi_f2d
   \   00000230   0x0002             MOVS     R2,R0
   \   00000232   0x000B             MOVS     R3,R1
   \   00000234   0x....             LDR.N    R0,??DataTable5_74
   \   00000236   0x.... 0x....      BL       _Z9lcdPrintfPKcz
   \   0000023A   0xE002             B.N      ??showLine_30
    266          		} else {
    267          			lcdPrintf("MAF: none");
   \                     ??showLine_29:
   \   0000023C   0x....             LDR.N    R0,??DataTable5_73
   \   0000023E   0x.... 0x....      BL       _Z9lcdPrintfPKcz
    268          		}
    269          		return;
   \                     ??showLine_30:
   \   00000242   0xE00A             B.N      ??showLine_19
    270          	case LL_TRIGGER_ERRORS:
    271          		lcdPrintf("Errors");
   \                     ??showLine_7:
   \   00000244   0x....             LDR.N    R0,??DataTable5_75
   \   00000246   0x.... 0x....      BL       _Z9lcdPrintfPKcz
    272          		return;
   \   0000024A   0xE006             B.N      ??showLine_19
    273          	case LL_TRIGGER_DUTY:
    274          		lcdPrintf("Duty");
   \                     ??showLine_8:
   \   0000024C   0x....             LDR.N    R0,??DataTable5_76
   \   0000024E   0x.... 0x....      BL       _Z9lcdPrintfPKcz
    275          		return;
   \   00000252   0xE002             B.N      ??showLine_19
    276          	default:
    277          		lcdPrintf("()");
   \                     ??showLine_18:
   \   00000254   0x....             ADR.N    R0,??DataTable5  ;; 0x28, 0x29, 0x00, 0x00
   \   00000256   0x.... 0x....      BL       _Z9lcdPrintfPKcz
    278          	}
    279          }
   \                     ??showLine_19:
   \   0000025A   0xBD70             POP      {R4-R6,PC}       ;; return
    280          

   \                                 In section .text, align 2, keep-with-next
    281          static void fillWithSpaces(void) {
   \                     _Z14fillWithSpacesv:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    282          	int column = getCurrentHD44780column();
   \   00000002   0x.... 0x....      BL       getCurrentHD44780column
   \   00000006   0x0004             MOVS     R4,R0
    283          	for (int r = column; r < 20; r++) {
   \   00000008   0x0025             MOVS     R5,R4
   \                     ??fillWithSpaces_0:
   \   0000000A   0x2D14             CMP      R5,#+20
   \   0000000C   0xDA04             BGE.N    ??fillWithSpaces_1
    284          		lcd_HD44780_print_char(' ');
   \   0000000E   0x2020             MOVS     R0,#+32
   \   00000010   0x.... 0x....      BL       lcd_HD44780_print_char
    285          	}
   \   00000014   0x1C6D             ADDS     R5,R5,#+1
   \   00000016   0xE7F8             B.N      ??fillWithSpaces_0
    286          }
   \                     ??fillWithSpaces_1:
   \   00000018   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    287          

   \                                 In section .text, align 2, keep-with-next
    288          void updateHD44780lcd(Engine *engine) {
   \                     _Z16updateHD44780lcdP6Engine:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    289          	MenuItem *p = tree.topVisible;
   \   00000004   0x....             LDR.N    R0,??DataTable5_2
   \   00000006   0x68C5             LDR      R5,[R0, #+12]
    290          	int screenY = 0;
   \   00000008   0x2600             MOVS     R6,#+0
    291          	for (; screenY < tree.linesCount && p != NULL; screenY++) {
   \                     ??updateHD44780lcd_0:
   \   0000000A   0x....             LDR.N    R0,??DataTable5_2
   \   0000000C   0x6840             LDR      R0,[R0, #+4]
   \   0000000E   0x4286             CMP      R6,R0
   \   00000010   0xDA2D             BGE.N    ??updateHD44780lcd_1
   \   00000012   0x2D00             CMP      R5,#+0
   \   00000014   0xD02B             BEQ.N    ??updateHD44780lcd_1
    292          		lcd_HD44780_set_position(screenY, 0);
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x0030             MOVS     R0,R6
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x.... 0x....      BL       lcd_HD44780_set_position
    293          		char firstChar;
    294          		if (p == tree.current) {
   \   00000020   0x....             LDR.N    R0,??DataTable5_2
   \   00000022   0x6880             LDR      R0,[R0, #+8]
   \   00000024   0x4285             CMP      R5,R0
   \   00000026   0xD10C             BNE.N    ??updateHD44780lcd_2
    295          			if (p->callback != NULL) {
   \   00000028   0x6A28             LDR      R0,[R5, #+32]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD002             BEQ.N    ??updateHD44780lcd_3
    296          				firstChar = '!';
   \   0000002E   0x2021             MOVS     R0,#+33
   \   00000030   0x0007             MOVS     R7,R0
   \   00000032   0xE008             B.N      ??updateHD44780lcd_4
    297          			} else {
    298          				firstChar = p->firstChild == NULL ? '*' : '>';
   \                     ??updateHD44780lcd_3:
   \   00000034   0x6968             LDR      R0,[R5, #+20]
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD101             BNE.N    ??updateHD44780lcd_5
   \   0000003A   0x272A             MOVS     R7,#+42
   \   0000003C   0xE003             B.N      ??updateHD44780lcd_4
   \                     ??updateHD44780lcd_5:
   \   0000003E   0x273E             MOVS     R7,#+62
   \   00000040   0xE001             B.N      ??updateHD44780lcd_4
    299          			}
    300          		} else {
    301          			firstChar = ' ';
   \                     ??updateHD44780lcd_2:
   \   00000042   0x2020             MOVS     R0,#+32
   \   00000044   0x0007             MOVS     R7,R0
    302          		}
    303          		lcd_HD44780_print_char(firstChar);
   \                     ??updateHD44780lcd_4:
   \   00000046   0x0038             MOVS     R0,R7
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0x.... 0x....      BL       lcd_HD44780_print_char
    304          		if (p->lcdLine == LL_STRING) {
   \   0000004E   0x7928             LDRB     R0,[R5, #+4]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD103             BNE.N    ??updateHD44780lcd_6
    305          			lcd_HD44780_print_string(p->text);
   \   00000054   0x6828             LDR      R0,[R5, #+0]
   \   00000056   0x.... 0x....      BL       lcd_HD44780_print_string
   \   0000005A   0xE003             B.N      ??updateHD44780lcd_7
    306          		} else {
    307          			showLine(p->lcdLine, screenY);
   \                     ??updateHD44780lcd_6:
   \   0000005C   0x0031             MOVS     R1,R6
   \   0000005E   0x7928             LDRB     R0,[R5, #+4]
   \   00000060   0x.... 0x....      BL       _Z8showLine10lcd_line_ei
    308          		}
    309          		fillWithSpaces();
   \                     ??updateHD44780lcd_7:
   \   00000064   0x.... 0x....      BL       _Z14fillWithSpacesv
    310          		p = p->next;
   \   00000068   0x69ED             LDR      R5,[R5, #+28]
    311          	}
   \   0000006A   0x1C76             ADDS     R6,R6,#+1
   \   0000006C   0xE7CD             B.N      ??updateHD44780lcd_0
    312          
    313          	for (; screenY < tree.linesCount; screenY++) {
   \                     ??updateHD44780lcd_1:
   \   0000006E   0x....             LDR.N    R0,??DataTable5_2
   \   00000070   0x6840             LDR      R0,[R0, #+4]
   \   00000072   0x4286             CMP      R6,R0
   \   00000074   0xDA08             BGE.N    ??updateHD44780lcd_8
    314          		lcd_HD44780_set_position(screenY, 0);
   \   00000076   0x2100             MOVS     R1,#+0
   \   00000078   0x0030             MOVS     R0,R6
   \   0000007A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007C   0x.... 0x....      BL       lcd_HD44780_set_position
    315          		fillWithSpaces();
   \   00000080   0x.... 0x....      BL       _Z14fillWithSpacesv
    316          	}
   \   00000084   0x1C76             ADDS     R6,R6,#+1
   \   00000086   0xE7F2             B.N      ??updateHD44780lcd_1
    317          
    318          	memcpy(buffer, getWarninig(), engineConfiguration->HD44780width);
   \                     ??updateHD44780lcd_8:
   \   00000088   0x.... 0x....      BL       getWarninig
   \   0000008C   0x....             LDR.N    R1,??DataTable5_52
   \   0000008E   0x6809             LDR      R1,[R1, #+0]
   \   00000090   0xF8D1 0x2204      LDR      R2,[R1, #+516]
   \   00000094   0x0001             MOVS     R1,R0
   \   00000096   0x....             LDR.N    R0,??DataTable5_77
   \   00000098   0x.... 0x....      BL       memcpy
    319          	buffer[engineConfiguration->HD44780width] = 0;
   \   0000009C   0x....             LDR.N    R0,??DataTable5_52
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0xF8D0 0x0204      LDR      R0,[R0, #+516]
   \   000000A4   0x....             LDR.N    R1,??DataTable5_77
   \   000000A6   0x2200             MOVS     R2,#+0
   \   000000A8   0x5442             STRB     R2,[R0, R1]
    320          	lcd_HD44780_set_position(engineConfiguration->HD44780height - 1, 0);
   \   000000AA   0x2100             MOVS     R1,#+0
   \   000000AC   0x....             LDR.N    R0,??DataTable5_52
   \   000000AE   0x6800             LDR      R0,[R0, #+0]
   \   000000B0   0xF8D0 0x0208      LDR      R0,[R0, #+520]
   \   000000B4   0x1E40             SUBS     R0,R0,#+1
   \   000000B6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B8   0x.... 0x....      BL       lcd_HD44780_set_position
    321          	lcd_HD44780_print_string(buffer);
   \   000000BC   0x....             LDR.N    R0,??DataTable5_77
   \   000000BE   0x.... 0x....      BL       lcd_HD44780_print_string
    322          	fillWithSpaces();
   \   000000C2   0x.... 0x....      BL       _Z14fillWithSpacesv
    323          
    324          //
    325          //	lcd_HD44780_set_position(0, 9);
    326          //	/**
    327          //	 * this would blink so that we know the LCD is alive
    328          //	 */
    329          //	if (isEven) {
    330          //		lcd_HD44780_print_char('R');
    331          //	} else {
    332          //		lcd_HD44780_print_char(' ');
    333          //	}
    334          //	lcd_HD44780_set_position(0, 10);
    335          //
    336          //	char * ptr = itoa10(buffer, getRpmE(engine));
    337          //	ptr[0] = 0;
    338          //	int len = ptr - buffer;
    339          //	for (int i = 0; i < 6 - len; i++) {
    340          //		lcd_HD44780_print_char(' ');
    341          //	}
    342          //	lcd_HD44780_print_string(buffer);
    343          //
    344          //	if (hasFirmwareError()) {
    345          //		memcpy(buffer, getFirmwareError(), LCD_WIDTH);
    346          //		buffer[LCD_WIDTH] = 0;
    347          //		lcd_HD44780_set_position(1, 0);
    348          //		lcd_HD44780_print_string(buffer);
    349          //		return;
    350          //	}
    351          //
    352          //	lcd_HD44780_set_position(1, 0);
    353          //	memset(buffer, ' ', LCD_WIDTH);
    354          //	memcpy(buffer, getWarninig(), LCD_WIDTH);
    355          //	buffer[LCD_WIDTH] = 0;
    356          //	lcd_HD44780_print_string(buffer);
    357          //
    358          //	if (engineConfiguration->HD44780height < 3) {
    359          //		return;
    360          //	}
    361          //
    362          //	int index = (getTimeNowSeconds() / 2) % (NUMBER_OF_DIFFERENT_LINES / 2);
    363          //
    364          //	prepareCurrentSecondLine(engine, index);
    365          //	buffer[LCD_WIDTH] = 0;
    366          //	lcd_HD44780_set_position(2, 0);
    367          //	lcd_HD44780_print_string(buffer);
    368          //
    369          //	prepareCurrentSecondLine(engine, index + NUMBER_OF_DIFFERENT_LINES / 2);
    370          //	buffer[LCD_WIDTH] = 0;
    371          //	lcd_HD44780_set_position(3, 0);
    372          //	lcd_HD44780_print_string(buffer);
    373          //
    374          //#if EFI_PROD_CODE
    375          //	dateToString(dateBuffer);
    376          //	lcd_HD44780_set_position(1, 0);
    377          //	lcd_HD44780_print_string(dateBuffer);
    378          //#endif /* EFI_PROD_CODE */
    379          }
   \   000000C6   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x28 0x29          DC8      0x28, 0x29, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     ROOT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     tree

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     miRpm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     `?<Constant "sensors">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     miSensors

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     `?<Constant "bench test">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     miBench

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     `?<Constant "about">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     miAbout

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     miTriggerErrors

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     miTriggerDuty

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x........         DC32     miClt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x........         DC32     miIat

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x........         DC32     miTps

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \   00000000   0x........         DC32     miVBatt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_16:
   \   00000000   0x........         DC32     miMap

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_17:
   \   00000000   0x........         DC32     miAfr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_18:
   \   00000000   0x........         DC32     miBaro

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_19:
   \   00000000   0x........         DC32     miMapV

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_20:
   \   00000000   0x........         DC32     miMapKgHr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_21:
   \   00000000   0x........         DC32     _Z10stopEnginev

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_22:
   \   00000000   0x........         DC32     `?<Constant "stop engine">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_23:
   \   00000000   0x........         DC32     miStopEngine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_24:
   \   00000000   0x........         DC32     _Z8fanBenchv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_25:
   \   00000000   0x........         DC32     `?<Constant "test fan">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_26:
   \   00000000   0x........         DC32     miTestFan

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_27:
   \   00000000   0x........         DC32     _Z13fuelPumpBenchv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_28:
   \   00000000   0x........         DC32     `?<Constant "test pump">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_29:
   \   00000000   0x........         DC32     miTestFuelPump

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_30:
   \   00000000   0x........         DC32     `?<Constant "test spark1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_31:
   \   00000000   0x........         DC32     miTestSpark1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_32:
   \   00000000   0x........         DC32     `?<Constant "test spark2">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_33:
   \   00000000   0x........         DC32     miTestSpark2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_34:
   \   00000000   0x........         DC32     `?<Constant "test spark3">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_35:
   \   00000000   0x........         DC32     miTestSpark3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_36:
   \   00000000   0x........         DC32     `?<Constant "test spark4">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_37:
   \   00000000   0x........         DC32     miTestSpark4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_38:
   \   00000000   0x........         DC32     `?<Constant "test injector1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_39:
   \   00000000   0x........         DC32     miTestInj1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_40:
   \   00000000   0x........         DC32     `?<Constant "test injector2">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_41:
   \   00000000   0x........         DC32     miTestInj2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_42:
   \   00000000   0x........         DC32     `?<Constant "test injector3">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_43:
   \   00000000   0x........         DC32     miTestInj3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_44:
   \   00000000   0x........         DC32     `?<Constant "test injector4">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_45:
   \   00000000   0x........         DC32     miTestInj4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_46:
   \   00000000   0x........         DC32     miVersion

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_47:
   \   00000000   0x........         DC32     miConfig

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_48:
   \   00000000   0x........         DC32     miAlgo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_49:
   \   00000000   0x........         DC32     miInjection

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_50:
   \   00000000   0x........         DC32     miIgnition

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_51:
   \   00000000   0x........         DC32     miInjFlow

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_52:
   \   00000000   0x........         DC32     engineConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_53:
   \   00000000   0x........         DC32     lcdLineBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_54:
   \   00000000   0x........         DC32     lcdLineStream

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_55:
   \   00000000   0x........         DC32     `?<Constant "8529">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_56:
   \   00000000   0x........         DC32     `?<Constant "version %s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_57:
   \   00000000   0x........         DC32     `?<Constant "config %s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_58:
   \   00000000   0x........         DC32     engine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_59:
   \   00000000   0x........         DC32     `?<Constant "RPM %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_60:
   \   00000000   0x........         DC32     `?<Constant "  %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_61:
   \   00000000   0x........         DC32     `?<Constant "Coolant %f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_62:
   \   00000000   0x........         DC32     `?<Constant "Intake Air %f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_63:
   \   00000000   0x........         DC32     `?<Constant "Inj %fcc">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_64:
   \   00000000   0x........         DC32     `?<Constant "Throttle %f%%">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_65:
   \   00000000   0x........         DC32     `?<Constant "Battery %fv">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_66:
   \   00000000   0x........         DC32     `?<Constant "Baro: %f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_67:
   \   00000000   0x........         DC32     `?<Constant "Baro: none">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_68:
   \   00000000   0x........         DC32     `?<Constant "AFR: %f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_69:
   \   00000000   0x........         DC32     `?<Constant "AFR: none">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_70:
   \   00000000   0x........         DC32     `?<Constant "MAP %f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_71:
   \   00000000   0x........         DC32     `?<Constant "MAP: none">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_72:
   \   00000000   0x........         DC32     `?<Constant "MAF: %fv">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_73:
   \   00000000   0x........         DC32     `?<Constant "MAF: none">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_74:
   \   00000000   0x........         DC32     `?<Constant "MAF: %f kg/hr">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_75:
   \   00000000   0x........         DC32     `?<Constant "Errors">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_76:
   \   00000000   0x........         DC32     `?<Constant "Duty">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_77:
   \   00000000   0x........         DC32     buffer

   \                                 In section .init_array, align 4, keep-with-next, root
   \   00000000   0x........         DC32    RELOC_ARM_TARGET1 __sti__routine

   \                                 In section .rodata, align 4
   \                     `?<Constant "version %s">`:
   \   00000000   0x76 0x65          DC8 "version %s"
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x25 0x73    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "8529">`:
   \   00000000   0x38 0x35          DC8 "8529"
   \              0x32 0x39    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "config %s">`:
   \   00000000   0x63 0x6F          DC8 "config %s"
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x20 0x25    
   \              0x73 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RPM %d">`:
   \   00000000   0x52 0x50          DC8 "RPM %d"
   \              0x4D 0x20    
   \              0x25 0x64    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  %d">`:
   \   00000000   0x20 0x20          DC8 "  %d"
   \              0x25 0x64    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Coolant %f">`:
   \   00000000   0x43 0x6F          DC8 "Coolant %f"
   \              0x6F 0x6C    
   \              0x61 0x6E    
   \              0x74 0x20    
   \              0x25 0x66    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Intake Air %f">`:
   \   00000000   0x49 0x6E          DC8 "Intake Air %f"
   \              0x74 0x61    
   \              0x6B 0x65    
   \              0x20 0x41    
   \              0x69 0x72    
   \              0x20 0x25    
   \              0x66 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Inj %fcc">`:
   \   00000000   0x49 0x6E          DC8 "Inj %fcc"
   \              0x6A 0x20    
   \              0x25 0x66    
   \              0x63 0x63    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Throttle %f%%">`:
   \   00000000   0x54 0x68          DC8 "Throttle %f%%"
   \              0x72 0x6F    
   \              0x74 0x74    
   \              0x6C 0x65    
   \              0x20 0x25    
   \              0x66 0x25    
   \              0x25 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Battery %fv">`:
   \   00000000   0x42 0x61          DC8 "Battery %fv"
   \              0x74 0x74    
   \              0x65 0x72    
   \              0x79 0x20    
   \              0x25 0x66    
   \              0x76 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Baro: %f">`:
   \   00000000   0x42 0x61          DC8 "Baro: %f"
   \              0x72 0x6F    
   \              0x3A 0x20    
   \              0x25 0x66    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Baro: none">`:
   \   00000000   0x42 0x61          DC8 "Baro: none"
   \              0x72 0x6F    
   \              0x3A 0x20    
   \              0x6E 0x6F    
   \              0x6E 0x65    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "AFR: %f">`:
   \   00000000   0x41 0x46          DC8 "AFR: %f"
   \              0x52 0x3A    
   \              0x20 0x25    
   \              0x66 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "AFR: none">`:
   \   00000000   0x41 0x46          DC8 "AFR: none"
   \              0x52 0x3A    
   \              0x20 0x6E    
   \              0x6F 0x6E    
   \              0x65 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MAP %f">`:
   \   00000000   0x4D 0x41          DC8 "MAP %f"
   \              0x50 0x20    
   \              0x25 0x66    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MAP: none">`:
   \   00000000   0x4D 0x41          DC8 "MAP: none"
   \              0x50 0x3A    
   \              0x20 0x6E    
   \              0x6F 0x6E    
   \              0x65 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MAF: %fv">`:
   \   00000000   0x4D 0x41          DC8 "MAF: %fv"
   \              0x46 0x3A    
   \              0x20 0x25    
   \              0x66 0x76    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "MAF: none">`:
   \   00000000   0x4D 0x41          DC8 "MAF: none"
   \              0x46 0x3A    
   \              0x20 0x6E    
   \              0x6F 0x6E    
   \              0x65 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MAF: %f kg/hr">`:
   \   00000000   0x4D 0x41          DC8 "MAF: %f kg/hr"
   \              0x46 0x3A    
   \              0x20 0x25    
   \              0x66 0x20    
   \              0x6B 0x67    
   \              0x2F 0x68    
   \              0x72 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Errors">`:
   \   00000000   0x45 0x72          DC8 "Errors"
   \              0x72 0x6F    
   \              0x72 0x73    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Duty">`:
   \   00000000   0x44 0x75          DC8 "Duty"
   \              0x74 0x79    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x28 0x29          DC8 "()"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "sensors">`:
   \   00000000   0x73 0x65          DC8 "sensors"
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "bench test">`:
   \   00000000   0x62 0x65          DC8 "bench test"
   \              0x6E 0x63    
   \              0x68 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "about">`:
   \   00000000   0x61 0x62          DC8 "about"
   \              0x6F 0x75    
   \              0x74 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "stop engine">`:
   \   00000000   0x73 0x74          DC8 "stop engine"
   \              0x6F 0x70    
   \              0x20 0x65    
   \              0x6E 0x67    
   \              0x69 0x6E    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "test fan">`:
   \   00000000   0x74 0x65          DC8 "test fan"
   \              0x73 0x74    
   \              0x20 0x66    
   \              0x61 0x6E    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "test pump">`:
   \   00000000   0x74 0x65          DC8 "test pump"
   \              0x73 0x74    
   \              0x20 0x70    
   \              0x75 0x6D    
   \              0x70 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "test spark1">`:
   \   00000000   0x74 0x65          DC8 "test spark1"
   \              0x73 0x74    
   \              0x20 0x73    
   \              0x70 0x61    
   \              0x72 0x6B    
   \              0x31 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "test spark2">`:
   \   00000000   0x74 0x65          DC8 "test spark2"
   \              0x73 0x74    
   \              0x20 0x73    
   \              0x70 0x61    
   \              0x72 0x6B    
   \              0x32 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "test spark3">`:
   \   00000000   0x74 0x65          DC8 "test spark3"
   \              0x73 0x74    
   \              0x20 0x73    
   \              0x70 0x61    
   \              0x72 0x6B    
   \              0x33 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "test spark4">`:
   \   00000000   0x74 0x65          DC8 "test spark4"
   \              0x73 0x74    
   \              0x20 0x73    
   \              0x70 0x61    
   \              0x72 0x6B    
   \              0x34 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "test injector1">`:
   \   00000000   0x74 0x65          DC8 "test injector1"
   \              0x73 0x74    
   \              0x20 0x69    
   \              0x6E 0x6A    
   \              0x65 0x63    
   \              0x74 0x6F    
   \              0x72 0x31    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "test injector2">`:
   \   00000000   0x74 0x65          DC8 "test injector2"
   \              0x73 0x74    
   \              0x20 0x69    
   \              0x6E 0x6A    
   \              0x65 0x63    
   \              0x74 0x6F    
   \              0x72 0x32    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "test injector3">`:
   \   00000000   0x74 0x65          DC8 "test injector3"
   \              0x73 0x74    
   \              0x20 0x69    
   \              0x6E 0x6A    
   \              0x65 0x63    
   \              0x74 0x6F    
   \              0x72 0x33    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "test injector4">`:
   \   00000000   0x74 0x65          DC8 "test injector4"
   \              0x73 0x74    
   \              0x20 0x69    
   \              0x6E 0x6A    
   \              0x65 0x63    
   \              0x74 0x6F    
   \              0x72 0x34    
   \              0x00         
   \   0000000F   0x00               DC8 0
    380          
    381          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   __sti__routine()
         8   -> MenuItem::MenuItem(MenuItem *, char const *)
         8   -> MenuItem::MenuItem(MenuItem *, char const *, void (*)())
         8   -> MenuItem::MenuItem(MenuItem *, lcd_line_e)
         8   -> MenuTree::MenuTree(MenuItem *)
      16   appendStr(char *, char const *)
        16   -> efiStrlen
      16   fillWithSpaces()
        16   -> getCurrentHD44780column
        16   -> lcd_HD44780_print_char
       8   initLcdController()
         8   -> MenuTree::init(MenuItem *, int)
         8   -> msObjectInit
      24   lcdPrintf(char const *, ...)
        24   -> chvprintf
        24   -> lcd_HD44780_print_string
      16   memcpy
        16   -> __aeabi_memcpy
       8   onJoystick(joystick_button_e)
         8   -> MenuTree::back()
         8   -> MenuTree::enterSubMenu()
         8   -> MenuTree::nextItem()
      16   showLine(lcd_line_e, int)
        16   -> RpmCalculator::rpm()
        16   -> __aeabi_f2d
        16   -> getAfr()
        16   -> getBaroPressure()
        16   -> getConfigurationName(engine_type_e)
        16   -> getCoolantTemperature()
        16   -> getEngine_load_mode_e(engine_load_mode_e)
        16   -> getIgnition_mode_e(ignition_mode_e)
        16   -> getInjection_mode_e(injection_mode_e)
        16   -> getIntakeAirTemperature()
        16   -> getMaf()
        16   -> getMap()
        16   -> getRealMaf()
        16   -> getTPS()
        16   -> getTimeNowSeconds
        16   -> getVBatt()
        16   -> hasBaroSensor()
        16   -> hasMafSensor()
        16   -> lcdPrintf(char const *, ...)
      24   updateHD44780lcd(Engine *)
        24   -> fillWithSpaces()
        24   -> getWarninig
        24   -> lcd_HD44780_print_char
        24   -> lcd_HD44780_print_string
        24   -> lcd_HD44780_set_position
        24   -> memcpy
        24   -> showLine(lcd_line_e, int)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "  %d">
       4  ?<Constant "()">
       8  ?<Constant "8529">
       8  ?<Constant "AFR: %f">
      12  ?<Constant "AFR: none">
      12  ?<Constant "Baro: %f">
      12  ?<Constant "Baro: none">
      12  ?<Constant "Battery %fv">
      12  ?<Constant "Coolant %f">
       8  ?<Constant "Duty">
       8  ?<Constant "Errors">
      12  ?<Constant "Inj %fcc">
      16  ?<Constant "Intake Air %f">
      16  ?<Constant "MAF: %f kg/hr">
      12  ?<Constant "MAF: %fv">
      12  ?<Constant "MAF: none">
       8  ?<Constant "MAP %f">
      12  ?<Constant "MAP: none">
       8  ?<Constant "RPM %d">
      16  ?<Constant "Throttle %f%%">
       8  ?<Constant "about">
      12  ?<Constant "bench test">
      12  ?<Constant "config %s">
       8  ?<Constant "sensors">
      12  ?<Constant "stop engine">
      12  ?<Constant "test fan">
      16  ?<Constant "test injector1">
      16  ?<Constant "test injector2">
      16  ?<Constant "test injector3">
      16  ?<Constant "test injector4">
      12  ?<Constant "test pump">
      12  ?<Constant "test spark1">
      12  ?<Constant "test spark2">
      12  ?<Constant "test spark3">
      12  ?<Constant "test spark4">
      12  ?<Constant "version %s">
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_16
       4  ??DataTable5_17
       4  ??DataTable5_18
       4  ??DataTable5_19
       4  ??DataTable5_2
       4  ??DataTable5_20
       4  ??DataTable5_21
       4  ??DataTable5_22
       4  ??DataTable5_23
       4  ??DataTable5_24
       4  ??DataTable5_25
       4  ??DataTable5_26
       4  ??DataTable5_27
       4  ??DataTable5_28
       4  ??DataTable5_29
       4  ??DataTable5_3
       4  ??DataTable5_30
       4  ??DataTable5_31
       4  ??DataTable5_32
       4  ??DataTable5_33
       4  ??DataTable5_34
       4  ??DataTable5_35
       4  ??DataTable5_36
       4  ??DataTable5_37
       4  ??DataTable5_38
       4  ??DataTable5_39
       4  ??DataTable5_4
       4  ??DataTable5_40
       4  ??DataTable5_41
       4  ??DataTable5_42
       4  ??DataTable5_43
       4  ??DataTable5_44
       4  ??DataTable5_45
       4  ??DataTable5_46
       4  ??DataTable5_47
       4  ??DataTable5_48
       4  ??DataTable5_49
       4  ??DataTable5_5
       4  ??DataTable5_50
       4  ??DataTable5_51
       4  ??DataTable5_52
       4  ??DataTable5_53
       4  ??DataTable5_54
       4  ??DataTable5_55
       4  ??DataTable5_56
       4  ??DataTable5_57
       4  ??DataTable5_58
       4  ??DataTable5_59
       4  ??DataTable5_6
       4  ??DataTable5_60
       4  ??DataTable5_61
       4  ??DataTable5_62
       4  ??DataTable5_63
       4  ??DataTable5_64
       4  ??DataTable5_65
       4  ??DataTable5_66
       4  ??DataTable5_67
       4  ??DataTable5_68
       4  ??DataTable5_69
       4  ??DataTable5_7
       4  ??DataTable5_70
       4  ??DataTable5_71
       4  ??DataTable5_72
       4  ??DataTable5_73
       4  ??DataTable5_74
       4  ??DataTable5_75
       4  ??DataTable5_76
       4  ??DataTable5_77
       4  ??DataTable5_8
       4  ??DataTable5_9
      36  ROOT
     522  __sti__routine()
      32  appendStr(char *, char const *)
      24  buffer
      26  fillWithSpaces()
      44  initLcdController()
      32  lcdLineBuffer
      20  lcdLineStream
      60  lcdPrintf(char const *, ...)
      22  memcpy
      36  miAbout
      36  miAfr
      36  miAlgo
      36  miBaro
      36  miBench
      36  miClt
      36  miConfig
      36  miIat
      36  miIgnition
      36  miInjFlow
      36  miInjection
      36  miMap
      36  miMapKgHr
      36  miMapV
      36  miRpm
      36  miSensors
      36  miStopEngine
      36  miTestFan
      36  miTestFuelPump
      36  miTestInj1
      36  miTestInj2
      36  miTestInj3
      36  miTestInj4
      36  miTestSpark1
      36  miTestSpark2
      36  miTestSpark3
      36  miTestSpark4
      36  miTps
      36  miTriggerDuty
      36  miTriggerErrors
      36  miVBatt
      36  miVersion
      52  onJoystick(joystick_button_e)
     604  showLine(lcd_line_e, int)
      16  tree
     200  updateHD44780lcd(Engine *)
       4  -- Other

 
 1 280 bytes in section .bss
     4 bytes in section .init_array
   416 bytes in section .rodata
 1 874 bytes in section .text
 
 1 856 bytes of CODE  memory (+ 22 bytes shared)
   416 bytes of CONST memory
 1 280 bytes of DATA  memory

Errors: none
Warnings: 5
