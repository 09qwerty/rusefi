###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:38 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\hw_layer\HIP9011 #
#                       .cpp                                                  #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\hw_layer\HIP9011 #
#                       .cpp -lCN F:\stuff\rusefi_sourceforge\firmware\iar\De #
#                       bug\List\ -lA F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\Debug\List\ -o F:\stuff\rusefi_sourceforge\firmware #
#                       \iar\Debug\Obj\ --no_cse --no_unroll --no_inline      #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\H #
#                       IP9011.lst                                            #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\HI #
#                       P9011.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\hw_layer\HIP9011.cpp
      1          /**
      2           * @file	HIP9011.cpp
      3           * @brief	HIP9011/TPIC8101 driver
      4           *
      5           *	pin1	VDD
      6           *	pin2	GND
      7           *
      8           *	pin8	Chip Select - CS
      9           *	pin11	Slave Data Out - MISO-
     10           *	pin12	Slave Data In - MOSI
     11           *	pin13	SPI clock - SCLK
     12           *
     13           *
     14           *
     15           * http://www.ti.com/lit/ds/symlink/tpic8101.pdf
     16           * http://www.intersil.com/content/dam/Intersil/documents/hip9/hip9011.pdf
     17           * http://www.intersil.com/content/dam/Intersil/documents/an97/an9770.pdf
     18           * http://e2e.ti.com/cfs-file/__key/telligent-evolution-components-attachments/00-26-01-00-00-42-36-40/TPIC8101-Training.pdf
     19           *
     20           * max SPI frequency: 5MHz max
     21           *
     22           * @date Nov 27, 2013
     23           * @author Andrey Belomutskiy, (c) 2012-2015
     24           * @Spilly
     25           */
     26          
     27          #include "main.h"
     28          #include "engine.h"
     29          #include "settings.h"
     30          #include "pin_repository.h"
     31          #include "hardware.h"
     32          #include "rpm_calculator.h"
     33          #include "trigger_central.h"
     34          #include "hip9011_lookup.h"
     35          #include "HIP9011.h"
     36          #include "adc_inputs.h"
     37          #include "efilib2.h"
     38          #include "engine_controller.h"
     39          
     40          #if EFI_HIP_9011 || defined(__DOXYGEN__)
     41          

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine:
   \   00000000   0xB580             PUSH     {R7,LR}
     42          static NamedOutputPin intHold("HIP");
   \   00000002   0x....             ADR.N    R1,??DataTable2  ;; "HIP"
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable16
   \   00000008   0x.... 0x....      BL       _ZN14NamedOutputPinC1EPKc
     43          static OutputPin hipCs;
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000010   0x.... 0x....      BL       _ZN9OutputPinC1Ev
     44          
     45          extern pin_output_mode_e DEFAULT_OUTPUT;
     46          
     47          extern uint32_t lastExecutionCount;
     48          
     49          uint32_t hipLastExecutionCount;
     50          
     51          /**
     52           * band index is only send to HIP chip on startup
     53           */
     54          static int currentBandIndex;
     55          static int currentGainIndex = -1;
     56          static int currentIntergratorIndex = -1;
     57          static int settingUpdateCount = 0;
     58          static int totalKnockEventsCount = 0;
     59          static int currentPrescaler;
     60          static float hipValueMax = 0;
     61          static float knockVolts = 0;
     62          static int spiCount = 0;
     63          
     64          static unsigned char tx_buff[1];
     65          static unsigned char rx_buff[1];
     66          static int nonZeroResponse = 0;
     67          static char pinNameBuffer[16];
     68          static float currentAngleWindowWidth;
     69          
     70          /**
     71           * Int/Hold pin is controlled from scheduler callbacks which are set according to current RPM
     72           *
     73           * The following state makes sure that we only have SPI communication while not integrating and that we take
     74           * a good ADC reading after integrating.
     75           *
     76           * Once integtation window is over, we wait for the 2nd ADC callback and then initiate SPI communication if needed
     77           *
     78           * hipOutput should be set to used FAST adc device
     79           */
     80          static hip_state_e state = NOT_READY;
     81          
     82          static scheduling_s startTimer[2];
   \   00000014   0x2302             MOVS     R3,#+2
   \   00000016   0x2218             MOVS     R2,#+24
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable16_3
   \   00000020   0x.... 0x....      BL       __aeabi_vec_ctor_nocookie_nodtor
     83          static scheduling_s endTimer[2];
   \   00000024   0x2302             MOVS     R3,#+2
   \   00000026   0x2218             MOVS     R2,#+24
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable16_4
   \   00000030   0x.... 0x....      BL       __aeabi_vec_ctor_nocookie_nodtor
   \   00000034   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     intHold:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
   \                     hipCs:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
   \                     hipLastExecutionCount:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     currentBandIndex:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
   \                     currentGainIndex:
   \   00000000   0xFFFFFFFF         DC32 -1

   \                                 In section .data, align 4
   \                     currentIntergratorIndex:
   \   00000000   0xFFFFFFFF         DC32 -1

   \                                 In section .bss, align 4
   \                     settingUpdateCount:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     currentPrescaler:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     hipValueMax:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     knockVolts:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     spiCount:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
   \                     tx_buff:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     rx_buff:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     nonZeroResponse:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     pinNameBuffer:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
   \                     currentAngleWindowWidth:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
   \                     state:
   \   00000000                      DS8 1

   \                                 In section .bss, align 8
   \                     startTimer:
   \   00000000                      DS8 48

   \                                 In section .bss, align 8
   \                     endTimer:
   \   00000000                      DS8 48
     84          

   \                                 In section .bss, align 4
     85          static Logging *logger;
   \                     logger:
   \   00000000                      DS8 4
     86          
     87          // SPI_CR1_BR_1 // 5MHz
     88          // SPI_CR1_CPHA Clock Phase
     89          // todo: nicer method which would mention SPI speed explicitly?
     90          

   \                                 In section .data, align 4
     91          static SPIConfig spicfg = { NULL,
   \                     spicfg:
   \   00000000   0x00000000         DC32 0H, 0H
   \              0x00000000   
   \   00000008   0x0000 0x003D      DC16 0, 61
     92          /* HW dependent part.*/
     93          NULL, 0,
     94          SPI_CR1_MSTR |
     95          //SPI_CR1_BR_1 // 5MHz
     96          		SPI_CR1_CPHA | SPI_CR1_BR_0 | SPI_CR1_BR_1 | SPI_CR1_BR_2 };
     97          
     98          #define SPI_SYNCHRONOUS(value) \
     99          	spiSelect(driver); \
    100          	tx_buff[0] = value; \
    101          	spiExchange(driver, 1, tx_buff, rx_buff); \
    102          	spiUnselect(driver); \
    103          	if (rx_buff[0] != 0) nonZeroResponse++;
    104          
    105          // todo: make this configurable

   \                                 In section .data, align 4
    106          static SPIDriver *driver = &SPID2;
   \                     driver:
   \   00000000   0x........         DC32 SPID2
    107          
    108          EXTERN_ENGINE
    109          ;
    110          

   \                                 In section .text, align 4, keep-with-next
    111          static float getBand(void) {
    112          	return engineConfiguration->knockBandCustom == 0 ?
    113          			BAND(engineConfiguration->cylinderBore) : engineConfiguration->knockBandCustom;
   \                     _Z7getBandv:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xED90 0x0A53      VLDR     S0,[R0, #+332]
   \   0000000A   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   0000000E   0xEEF1 0xFA10      FMSTAT   
   \   00000012   0xD111             BNE.N    ??getBand_0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xED90 0x0A67      VLDR     S0,[R0, #+412]
   \   0000001E   0xEDDF 0x....      VLDR.W   S1,??DataTable3  ;; 0x40490fd0
   \   00000022   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000026   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   0000002A   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   0000002E   0xEDDF 0x....      VLDR.W   S1,??DataTable3_1  ;; 0x44610000
   \   00000032   0xEE80 0x0A80      VDIV.F32 S0,S1,S0
   \   00000036   0xE004             B.N      ??getBand_1
   \                     ??getBand_0:
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0xED90 0x0A53      VLDR     S0,[R0, #+332]
   \                     ??getBand_1:
   \   00000042   0x4770             BX       LR               ;; return
    114          }
    115          

   \                                 In section .text, align 2, keep-with-next
    116          static void showHipInfo(void) {
   \                     _Z11showHipInfov:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xB086             SUB      SP,SP,#+24
    117          	if (!boardConfiguration->isHip9011Enabled) {
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0xF890 0x0180      LDRB     R0,[R0, #+384]
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x0980             LSRS     R0,R0,#+6
   \   00000016   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD107             BNE.N    ??showHipInfo_0
    118          		scheduleMsg(logger, "hip9011 driver not active");
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable16_7
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable16_8
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x.... 0x....      BL       scheduleMsg
    119          		return;
   \   0000002C   0xE0E4             B.N      ??showHipInfo_1
    120          	}
    121          
    122          	printSpiState(logger, boardConfiguration);
   \                     ??showHipInfo_0:
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   00000032   0x6801             LDR      R1,[R0, #+0]
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable16_8
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x.... 0x....      BL       _Z13printSpiStateP7LoggingP21board_configuration_s
    123          	scheduleMsg(logger, "enabled=%s state=%d bore=%fmm freq=%fkHz PaSDO=%d",
    124          			boolToString(boardConfiguration->isHip9011Enabled),
    125          			state,
    126          			engineConfiguration->cylinderBore, getBand(),
    127          			engineConfiguration->hip9011PrescalerAndSDO);
   \   0000003E   0x.... 0x....      BL       _Z7getBandv
   \   00000042   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF890 0x0180      LDRB     R0,[R0, #+384]
   \   00000050   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000052   0x0980             LSRS     R0,R0,#+6
   \   00000054   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000058   0x.... 0x....      BL       _Z12boolToStringb
   \   0000005C   0x0004             MOVS     R4,R0
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0xF8D0 0x0148      LDR      R0,[R0, #+328]
   \   00000068   0x9004             STR      R0,[SP, #+16]
   \   0000006A   0xEE18 0x0A10      VMOV     R0,S16
   \   0000006E   0x.... 0x....      BL       __aeabi_f2d
   \   00000072   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0xF8D0 0x019C      LDR      R0,[R0, #+412]
   \   00000080   0x.... 0x....      BL       __aeabi_f2d
   \   00000084   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable16_9
   \   0000008C   0x7803             LDRB     R3,[R0, #+0]
   \   0000008E   0x0022             MOVS     R2,R4
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable16_10
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable16_8
   \   00000098   0x6800             LDR      R0,[R0, #+0]
   \   0000009A   0x.... 0x....      BL       scheduleMsg
    128          
    129          	scheduleMsg(logger, "band_index=%d gain %f/index=%d", currentBandIndex, boardConfiguration->hip9011Gain, currentGainIndex);
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable16_11
   \   000000A2   0x6800             LDR      R0,[R0, #+0]
   \   000000A4   0x9002             STR      R0,[SP, #+8]
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0xF8D0 0x02F8      LDR      R0,[R0, #+760]
   \   000000B0   0x.... 0x....      BL       __aeabi_f2d
   \   000000B4   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000000B8   0x.... 0x....      LDR.W    R0,??DataTable16_12
   \   000000BC   0x6802             LDR      R2,[R0, #+0]
   \   000000BE   0x.... 0x....      LDR.W    R1,??DataTable16_13
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable16_8
   \   000000C6   0x6800             LDR      R0,[R0, #+0]
   \   000000C8   0x.... 0x....      BL       scheduleMsg
    130          	scheduleMsg(logger, "integrator index=%d knockVThreshold=%f knockCount=%d maxKnockSubDeg=%f",
    131          	            currentIntergratorIndex, engineConfiguration->knockVThreshold,
    132          	            engine->knockCount, engineConfiguration->maxKnockSubDeg);
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   000000D0   0x6800             LDR      R0,[R0, #+0]
   \   000000D2   0xF8D0 0x0240      LDR      R0,[R0, #+576]
   \   000000D6   0x.... 0x....      BL       __aeabi_f2d
   \   000000DA   0xE9CD 0x0104      STRD     R0,R1,[SP, #+16]
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable16_14
   \   000000E2   0x6800             LDR      R0,[R0, #+0]
   \   000000E4   0xF8D0 0x026C      LDR      R0,[R0, #+620]
   \   000000E8   0x9002             STR      R0,[SP, #+8]
   \   000000EA   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   000000EE   0x6800             LDR      R0,[R0, #+0]
   \   000000F0   0xF8D0 0x0610      LDR      R0,[R0, #+1552]
   \   000000F4   0x.... 0x....      BL       __aeabi_f2d
   \   000000F8   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000000FC   0x.... 0x....      LDR.W    R0,??DataTable16_15
   \   00000100   0x6802             LDR      R2,[R0, #+0]
   \   00000102   0x.... 0x....      LDR.W    R1,??DataTable16_16
   \   00000106   0x.... 0x....      LDR.W    R0,??DataTable16_8
   \   0000010A   0x6800             LDR      R0,[R0, #+0]
   \   0000010C   0x.... 0x....      BL       scheduleMsg
    133          
    134          	scheduleMsg(logger, "spi= IntHold@%s response count=%d", hwPortname(boardConfiguration->hip9011IntHoldPin),
    135          			nonZeroResponse);
   \   00000110   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   00000114   0x6800             LDR      R0,[R0, #+0]
   \   00000116   0xF8D0 0x028C      LDR      R0,[R0, #+652]
   \   0000011A   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   0000011E   0x.... 0x....      LDR.W    R1,??DataTable16_17
   \   00000122   0x680B             LDR      R3,[R1, #+0]
   \   00000124   0x0002             MOVS     R2,R0
   \   00000126   0x.... 0x....      LDR.W    R1,??DataTable16_18
   \   0000012A   0x.... 0x....      LDR.W    R0,??DataTable16_8
   \   0000012E   0x6800             LDR      R0,[R0, #+0]
   \   00000130   0x.... 0x....      BL       scheduleMsg
    136          	scheduleMsg(logger, "CS@%s updateCount=%d", hwPortname(boardConfiguration->hip9011CsPin), settingUpdateCount);
   \   00000134   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   00000138   0x6800             LDR      R0,[R0, #+0]
   \   0000013A   0xF8D0 0x0288      LDR      R0,[R0, #+648]
   \   0000013E   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   00000142   0x0002             MOVS     R2,R0
   \   00000144   0x.... 0x....      LDR.W    R0,??DataTable16_19
   \   00000148   0x6803             LDR      R3,[R0, #+0]
   \   0000014A   0x.... 0x....      LDR.W    R1,??DataTable16_20
   \   0000014E   0x.... 0x....      LDR.W    R0,??DataTable16_8
   \   00000152   0x6800             LDR      R0,[R0, #+0]
   \   00000154   0x.... 0x....      BL       scheduleMsg
    137          
    138          	scheduleMsg(logger, "hip %fv@%s/max=%f spiCount=%d adv=%d",
    139          			knockVolts,
    140          			getPinNameByAdcChannel(engineConfiguration->hipOutputChannel, pinNameBuffer),
    141          			hipValueMax,
    142          			spiCount, boardConfiguration->useTpicAdvancedMode);
   \   00000158   0x.... 0x....      LDR.W    R1,??DataTable16_21
   \   0000015C   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   00000160   0x6800             LDR      R0,[R0, #+0]
   \   00000162   0xF8D0 0x05DC      LDR      R0,[R0, #+1500]
   \   00000166   0x.... 0x....      BL       _Z22getPinNameByAdcChannel13adc_channel_ePc
   \   0000016A   0x0004             MOVS     R4,R0
   \   0000016C   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   00000170   0x6800             LDR      R0,[R0, #+0]
   \   00000172   0xF890 0x0181      LDRB     R0,[R0, #+385]
   \   00000176   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000178   0x08C0             LSRS     R0,R0,#+3
   \   0000017A   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000017E   0x9005             STR      R0,[SP, #+20]
   \   00000180   0x.... 0x....      LDR.W    R0,??DataTable16_22
   \   00000184   0x6800             LDR      R0,[R0, #+0]
   \   00000186   0x9004             STR      R0,[SP, #+16]
   \   00000188   0x.... 0x....      LDR.W    R0,??DataTable16_23
   \   0000018C   0x6800             LDR      R0,[R0, #+0]
   \   0000018E   0x.... 0x....      BL       __aeabi_f2d
   \   00000192   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00000196   0x9400             STR      R4,[SP, #+0]
   \   00000198   0x.... 0x....      LDR.W    R0,??DataTable16_24
   \   0000019C   0x6800             LDR      R0,[R0, #+0]
   \   0000019E   0x.... 0x....      BL       __aeabi_f2d
   \   000001A2   0x0002             MOVS     R2,R0
   \   000001A4   0x000B             MOVS     R3,R1
   \   000001A6   0x.... 0x....      LDR.W    R1,??DataTable16_25
   \   000001AA   0x.... 0x....      LDR.W    R0,??DataTable16_8
   \   000001AE   0x6800             LDR      R0,[R0, #+0]
   \   000001B0   0x.... 0x....      BL       scheduleMsg
    143          
    144          	scheduleMsg(logger, "start %f end %f", engineConfiguration->knockDetectionWindowStart,
    145          			engineConfiguration->knockDetectionWindowEnd);
   \   000001B4   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   000001B8   0x6800             LDR      R0,[R0, #+0]
   \   000001BA   0xF8D0 0x0608      LDR      R0,[R0, #+1544]
   \   000001BE   0x.... 0x....      BL       __aeabi_f2d
   \   000001C2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000001C6   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   000001CA   0x6800             LDR      R0,[R0, #+0]
   \   000001CC   0xF8D0 0x0604      LDR      R0,[R0, #+1540]
   \   000001D0   0x.... 0x....      BL       __aeabi_f2d
   \   000001D4   0x0002             MOVS     R2,R0
   \   000001D6   0x000B             MOVS     R3,R1
   \   000001D8   0x.... 0x....      LDR.W    R1,??DataTable16_26
   \   000001DC   0x.... 0x....      LDR.W    R0,??DataTable16_8
   \   000001E0   0x6800             LDR      R0,[R0, #+0]
   \   000001E2   0x.... 0x....      BL       scheduleMsg
    146          
    147          	hipValueMax = 0;
   \   000001E6   0x.... 0x....      LDR.W    R0,??DataTable16_23
   \   000001EA   0x2100             MOVS     R1,#+0
   \   000001EC   0x6001             STR      R1,[R0, #+0]
    148          	engine->printKnockState();
   \   000001EE   0x.... 0x....      LDR.W    R0,??DataTable16_14
   \   000001F2   0x6800             LDR      R0,[R0, #+0]
   \   000001F4   0x.... 0x....      BL       _ZN6Engine15printKnockStateEv
    149          }
   \                     ??showHipInfo_1:
   \   000001F8   0xB006             ADD      SP,SP,#+24
   \   000001FA   0xECBD 0x8B02      VPOP     {D8}
   \   000001FE   0xBD10             POP      {R4,PC}          ;; return
    150          

   \                                 In section .text, align 2, keep-with-next
    151          void setHip9011FrankensoPinout(void) {
    152          	/**
    153          	 * SPI on PB13/14/15
    154          	 */
    155          	boardConfiguration->isHip9011Enabled = true;
   \                     _Z25setHip9011FrankensoPinoutv:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF890 0x0180      LDRB     R0,[R0, #+384]
   \   0000000A   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable16_6
   \   00000012   0x6809             LDR      R1,[R1, #+0]
   \   00000014   0xF881 0x0180      STRB     R0,[R1, #+384]
    156          	boardConfiguration->hip9011CsPin = GPIOD_0;
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x2130             MOVS     R1,#+48
   \   00000020   0xF8C0 0x1288      STR      R1,[R0, #+648]
    157          	boardConfiguration->hip9011IntHoldPin = GPIOB_11;
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x211B             MOVS     R1,#+27
   \   0000002C   0xF8C0 0x128C      STR      R1,[R0, #+652]
    158          	boardConfiguration->is_enabled_spi_2 = true;
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0xF890 0x0180      LDRB     R0,[R0, #+384]
   \   0000003A   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable16_6
   \   00000042   0x6809             LDR      R1,[R1, #+0]
   \   00000044   0xF881 0x0180      STRB     R0,[R1, #+384]
    159          
    160          	boardConfiguration->hip9011Gain = 1;
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0xF05F 0x517E      MOVS     R1,#+1065353216
   \   00000052   0xF8C0 0x12F8      STR      R1,[R0, #+760]
    161          	engineConfiguration->knockVThreshold = 4;
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0xF05F 0x4181      MOVS     R1,#+1082130432
   \   00000060   0xF8C0 0x1610      STR      R1,[R0, #+1552]
    162          	engineConfiguration->maxKnockSubDeg = 20;
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0x.... 0x....      LDR.W    R1,??DataTable16_27  ;; 0x41a00000
   \   0000006E   0xF8C0 0x1240      STR      R1,[R0, #+576]
    163          
    164          
    165          	if (!boardConfiguration->useTpicAdvancedMode) {
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0xF890 0x0181      LDRB     R0,[R0, #+385]
   \   0000007C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007E   0x08C0             LSRS     R0,R0,#+3
   \   00000080   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000084   0x2800             CMP      R0,#+0
   \   00000086   0xD105             BNE.N    ??setHip9011FrankensoPinout_0
    166          	    engineConfiguration->hipOutputChannel = EFI_ADC_10; // PC0
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0x210A             MOVS     R1,#+10
   \   00000090   0xF8C0 0x15DC      STR      R1,[R0, #+1500]
    167          	}
    168          }
   \                     ??setHip9011FrankensoPinout_0:
   \   00000094   0x4770             BX       LR               ;; return
    169          

   \                                 In section .text, align 2, keep-with-next
    170          static void startIntegration(void) {
   \                     _Z16startIntegrationv:
   \   00000000   0xB580             PUSH     {R7,LR}
    171          	if (state == READY_TO_INTEGRATE) {
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable16_9
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD107             BNE.N    ??startIntegration_0
    172          		/**
    173          		 * SPI communication is only allowed while not integrating, so we postpone the exchange
    174          		 * until we are done integrating
    175          		 */
    176          		state = IS_INTEGRATING;
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable16_9
   \   00000010   0x2102             MOVS     R1,#+2
   \   00000012   0x7001             STRB     R1,[R0, #+0]
    177          		turnPinHigh(&intHold);
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable16
   \   00000018   0x.... 0x....      BL       _Z11turnPinHighP14NamedOutputPin
    178          	}
    179          }
   \                     ??startIntegration_0:
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return
    180          

   \                                 In section .text, align 2, keep-with-next
    181          static void endIntegration(void) {
   \                     _Z14endIntegrationv:
   \   00000000   0xB580             PUSH     {R7,LR}
    182          	/**
    183          	 * isIntegrating could be 'false' if an SPI command was pending thus we did not integrate during this
    184          	 * engine cycle
    185          	 */
    186          	if (state == IS_INTEGRATING) {
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable16_9
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xD107             BNE.N    ??endIntegration_0
    187          		turnPinLow(&intHold);
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable16
   \   00000010   0x.... 0x....      BL       _Z10turnPinLowP14NamedOutputPin
    188          		state = WAITING_FOR_ADC_TO_SKIP;
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable16_9
   \   00000018   0x2103             MOVS     R1,#+3
   \   0000001A   0x7001             STRB     R1,[R0, #+0]
    189          	}
    190          }
   \                     ??endIntegration_0:
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return
    191          
    192          /**
    193           * Shaft Position callback used to start or finish HIP integration
    194           */

   \                                 In section .text, align 2, keep-with-next
    195          static void intHoldCallback(trigger_event_e ckpEventType, uint32_t index DECLARE_ENGINE_PARAMETER_S) {
   \                     _Z15intHoldCallback15trigger_event_ej:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    196          	// this callback is invoked on interrupt thread
    197          	engine->m.beforeHipCb = GET_TIMESTAMP();
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable16_14
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF510 0x5010      ADDS     R0,R0,#+9216
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable16_28  ;; 0xe0001004
   \   00000014   0x6809             LDR      R1,[R1, #+0]
   \   00000016   0x6001             STR      R1,[R0, #+0]
    198          	if (index != 0)
   \   00000018   0x2D00             CMP      R5,#+0
   \   0000001A   0xD153             BNE.N    ??intHoldCallback_0
    199          		return;
    200          
    201          	int rpm = engine->rpmCalculator.rpmValue;
   \                     ??intHoldCallback_1:
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable16_14
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x6806             LDR      R6,[R0, #+0]
    202          	if (!isValidRpm(rpm))
   \   00000024   0x2E01             CMP      R6,#+1
   \   00000026   0xDB03             BLT.N    ??intHoldCallback_2
   \   00000028   0xF247 0x5030      MOVW     R0,#+30000
   \   0000002C   0x4286             CMP      R6,R0
   \   0000002E   0xDB00             BLT.N    ??intHoldCallback_3
    203          		return;
   \                     ??intHoldCallback_2:
   \   00000030   0xE048             B.N      ??intHoldCallback_0
    204          
    205          	int structIndex = getRevolutionCounter() % 2;
   \                     ??intHoldCallback_3:
   \   00000032   0x.... 0x....      BL       _Z20getRevolutionCounterv
   \   00000036   0x2102             MOVS     R1,#+2
   \   00000038   0xFB90 0xF7F1      SDIV     R7,R0,R1
   \   0000003C   0xFB07 0x0711      MLS      R7,R7,R1,R0
    206          	// todo: schedule this based on closest trigger event, same as ignition works
    207          	scheduleByAngle(rpm, &startTimer[structIndex], engineConfiguration->knockDetectionWindowStart,
    208          			(schfunc_t) &startIntegration, NULL, &engine->rpmCalculator);
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable16_14
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x9000             STR      R0,[SP, #+0]
   \   00000048   0x2300             MOVS     R3,#+0
   \   0000004A   0x.... 0x....      LDR.W    R2,??DataTable16_29
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0xF8D0 0x0604      LDR      R0,[R0, #+1540]
   \   00000058   0xEE00 0x0A10      VMOV     S0,R0
   \   0000005C   0x2018             MOVS     R0,#+24
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable16_3
   \   00000062   0xFB00 0x1107      MLA      R1,R0,R7,R1
   \   00000066   0x0030             MOVS     R0,R6
   \   00000068   0x.... 0x....      BL       _Z15scheduleByAngleiP12scheduling_sfPFvPvES1_P13RpmCalculator
    209          	hipLastExecutionCount = lastExecutionCount;
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable16_30
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable16_31
   \   00000074   0x6809             LDR      R1,[R1, #+0]
   \   00000076   0x6001             STR      R1,[R0, #+0]
    210          	scheduleByAngle(rpm, &endTimer[structIndex], engineConfiguration->knockDetectionWindowEnd,
    211          			(schfunc_t) &endIntegration,
    212          			NULL, &engine->rpmCalculator);
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable16_14
   \   0000007C   0x6800             LDR      R0,[R0, #+0]
   \   0000007E   0x9000             STR      R0,[SP, #+0]
   \   00000080   0x2300             MOVS     R3,#+0
   \   00000082   0x.... 0x....      LDR.W    R2,??DataTable16_32
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   0000008A   0x6800             LDR      R0,[R0, #+0]
   \   0000008C   0xF8D0 0x0608      LDR      R0,[R0, #+1544]
   \   00000090   0xEE00 0x0A10      VMOV     S0,R0
   \   00000094   0x2018             MOVS     R0,#+24
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable16_4
   \   0000009A   0xFB00 0x1107      MLA      R1,R0,R7,R1
   \   0000009E   0x0030             MOVS     R0,R6
   \   000000A0   0x.... 0x....      BL       _Z15scheduleByAngleiP12scheduling_sfPFvPvES1_P13RpmCalculator
    213          	engine->m.hipCbTime = GET_TIMESTAMP() - engine->m.beforeHipCb;
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable16_28  ;; 0xe0001004
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0x.... 0x....      LDR.W    R1,??DataTable16_14
   \   000000AE   0x6809             LDR      R1,[R1, #+0]
   \   000000B0   0xF511 0x5110      ADDS     R1,R1,#+9216
   \   000000B4   0x6809             LDR      R1,[R1, #+0]
   \   000000B6   0x1A40             SUBS     R0,R0,R1
   \   000000B8   0xF242 0x4104      MOVW     R1,#+9220
   \   000000BC   0x.... 0x....      LDR.W    R2,??DataTable16_14
   \   000000C0   0x6812             LDR      R2,[R2, #+0]
   \   000000C2   0x5088             STR      R0,[R1, R2]
    214          }
   \                     ??intHoldCallback_0:
   \   000000C4   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    215          

   \                                 In section .text, align 2, keep-with-next
    216          static void setMaxKnockSubDeg(int value){
   \                     _Z17setMaxKnockSubDegi:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xEE08 0x0A10      VMOV     S16,R0
    217              engineConfiguration->maxKnockSubDeg = value;
   \   0000000A   0xEEB8 0x0AC8      VCVT.F32.S32 S0,S16
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xED80 0x0A90      VSTR     S0,[R0, #+576]
    218              showHipInfo();
   \   00000018   0x.... 0x....      BL       _Z11showHipInfov
    219          }
   \   0000001C   0xECBD 0x8B02      VPOP     {D8}
   \   00000020   0xBD01             POP      {R0,PC}          ;; return
    220          

   \                                 In section .text, align 2, keep-with-next
    221          static void setKnockThresh(float value){
   \                     _Z14setKnockThreshf:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xEEB0 0x8A40      VMOV.F32 S16,S0
    222              engineConfiguration->knockVThreshold = value;
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF200 0x6010      ADDW     R0,R0,#+1552
   \   00000014   0xED80 0x8A00      VSTR     S16,[R0, #0]
    223              showHipInfo();
   \   00000018   0x.... 0x....      BL       _Z11showHipInfov
    224          }
   \   0000001C   0xECBD 0x8B02      VPOP     {D8}
   \   00000020   0xBD01             POP      {R0,PC}          ;; return
    225          

   \                                 In section .text, align 2, keep-with-next
    226          static void setPrescalerAndSDO(int value) {
    227          	engineConfiguration->hip9011PrescalerAndSDO = value;
   \                     _Z18setPrescalerAndSDOi:
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable16_5
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0xF8C1 0x0148      STR      R0,[R1, #+328]
    228          }
   \   0000000A   0x4770             BX       LR               ;; return
    229          

   \                                 In section .text, align 2, keep-with-next
    230          static void setBand(float value) {
   \                     _Z7setBandf:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xEEB0 0x8A40      VMOV.F32 S16,S0
    231          	engineConfiguration->knockBandCustom = value;
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xED80 0x8A53      VSTR     S16,[R0, #+332]
    232          	showHipInfo();
   \   00000014   0x.... 0x....      BL       _Z11showHipInfov
    233          }
   \   00000018   0xECBD 0x8B02      VPOP     {D8}
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return
    234          

   \                                 In section .text, align 2, keep-with-next
    235          static void setGain(float value) {
   \                     _Z7setGainf:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xEEB0 0x8A40      VMOV.F32 S16,S0
    236          	boardConfiguration->hip9011Gain = value;
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xED80 0x8ABE      VSTR     S16,[R0, #+760]
    237          	showHipInfo();
   \   00000014   0x.... 0x....      BL       _Z11showHipInfov
    238          }
   \   00000018   0xECBD 0x8B02      VPOP     {D8}
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return
    239          

   \                                 In section .text, align 2, keep-with-next
    240          static void endOfSpiExchange(SPIDriver *spip) {
   \                     _Z16endOfSpiExchangeP9SPIDriver:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    241          	spiUnselectI(driver);
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable16_33
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x.... 0x....      BL       spi_lld_unselect
    242          	state = READY_TO_INTEGRATE;
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable16_9
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x7001             STRB     R1,[R0, #+0]
    243          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    244          

   \                                 In section .text, align 2, keep-with-next
    245          static int getBandIndex(void) {
   \                     _Z12getBandIndexv:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
    246          	float freq = getBand();
   \   00000006   0x.... 0x....      BL       _Z7getBandv
   \   0000000A   0xEEB0 0x8A40      VMOV.F32 S16,S0
    247          	return getHip9011BandIndex(freq);
   \   0000000E   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000012   0x.... 0x....      BL       _Z19getHip9011BandIndexf
   \   00000016   0xECBD 0x8B02      VPOP     {D8}
   \   0000001A   0xBD02             POP      {R1,PC}          ;; return
    248          }
    249          

   \                                 In section .text, align 4, keep-with-next
    250          void hipAdcCallback(adcsample_t value) {
   \                     _Z14hipAdcCallbackt:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xED2D 0x8B02      VPUSH    {D8}
   \   00000008   0x0004             MOVS     R4,R0
    251          	if (state == WAITING_FOR_ADC_TO_SKIP) {
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable16_9
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x2803             CMP      R0,#+3
   \   00000012   0xD104             BNE.N    ??hipAdcCallback_0
    252          		state = WAITING_FOR_RESULT_ADC;
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable16_9
   \   00000018   0x2104             MOVS     R1,#+4
   \   0000001A   0x7001             STRB     R1,[R0, #+0]
   \   0000001C   0xE100             B.N      ??hipAdcCallback_1
    253          	} else if (state == WAITING_FOR_RESULT_ADC) {
   \                     ??hipAdcCallback_0:
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable16_9
   \   00000022   0x7800             LDRB     R0,[R0, #+0]
   \   00000024   0x2804             CMP      R0,#+4
   \   00000026   0xF040 0x80FB      BNE.W    ??hipAdcCallback_1
    254          		knockVolts = adcToVoltsDivided(value);
   \   0000002A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000002C   0xEE00 0x4A10      VMOV     S0,R4
   \   00000030   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   00000034   0xEDDF 0x....      VLDR.W   S1,??DataTable13  ;; 0x3a400c01
   \   00000038   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0xEDD0 0x0A74      VLDR     S1,[R0, #+464]
   \   00000046   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable16_24
   \   0000004E   0xED80 0x0A00      VSTR     S0,[R0, #0]
    255          		hipValueMax = maxF(knockVolts, hipValueMax);
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable16_23
   \   00000056   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable16_24
   \   0000005E   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000062   0x.... 0x....      BL       maxF
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable16_23
   \   0000006A   0xED80 0x0A00      VSTR     S0,[R0, #0]
    256          		engine->knockLogic(knockVolts);
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable16_24
   \   00000072   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable16_14
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0x.... 0x....      BL       _ZN6Engine10knockLogicEf
    257          
    258          		float angleWindowWidth =
    259          		engineConfiguration->knockDetectionWindowEnd - engineConfiguration->knockDetectionWindowStart;
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0xF8D0 0x0608      LDR      R0,[R0, #+1544]
   \   0000008A   0xEE00 0x0A10      VMOV     S0,R0
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   00000092   0x6800             LDR      R0,[R0, #+0]
   \   00000094   0xF8D0 0x0604      LDR      R0,[R0, #+1540]
   \   00000098   0xEE00 0x0A90      VMOV     S1,R0
   \   0000009C   0xEE30 0x8A60      VSUB.F32 S16,S0,S1
    260          
    261          		if (angleWindowWidth != currentAngleWindowWidth) {
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable16_34
   \   000000A4   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000000A8   0xEEB4 0x8A40      VCMP.F32 S16,S0
   \   000000AC   0xEEF1 0xFA10      FMSTAT   
   \   000000B0   0xD009             BEQ.N    ??hipAdcCallback_2
    262          			currentAngleWindowWidth = angleWindowWidth;
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable16_34
   \   000000B6   0xED80 0x8A00      VSTR     S16,[R0, #0]
    263          		prepareHip9011RpmLookup(currentAngleWindowWidth);
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable16_34
   \   000000BE   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000000C2   0x.... 0x....      BL       _Z23prepareHip9011RpmLookupf
    264          		}
    265          
    266          		int integratorIndex = getIntegrationIndexByRpm(engine->rpmCalculator.rpmValue);
   \                     ??hipAdcCallback_2:
   \   000000C6   0x.... 0x....      LDR.W    R0,??DataTable16_14
   \   000000CA   0x6800             LDR      R0,[R0, #+0]
   \   000000CC   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000000D0   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000000D4   0x.... 0x....      BL       _Z24getIntegrationIndexByRpmf
   \   000000D8   0x0005             MOVS     R5,R0
    267          		int gainIndex = getHip9011GainIndex(boardConfiguration->hip9011Gain);
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   000000DE   0x6800             LDR      R0,[R0, #+0]
   \   000000E0   0xED90 0x0ABE      VLDR     S0,[R0, #+760]
   \   000000E4   0x.... 0x....      BL       _Z19getHip9011GainIndexf
   \   000000E8   0x0006             MOVS     R6,R0
    268          		int bandIndex = getBandIndex();
   \   000000EA   0x.... 0x....      BL       _Z12getBandIndexv
   \   000000EE   0x0007             MOVS     R7,R0
    269          		int prescalerIndex = engineConfiguration->hip9011PrescalerAndSDO;
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   000000F4   0x6800             LDR      R0,[R0, #+0]
   \   000000F6   0xF8D0 0x8148      LDR      R8,[R0, #+328]
    270          
    271          
    272          		if (currentGainIndex != gainIndex) {
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable16_11
   \   000000FE   0x6800             LDR      R0,[R0, #+0]
   \   00000100   0x42B0             CMP      R0,R6
   \   00000102   0xD020             BEQ.N    ??hipAdcCallback_3
    273          			currentGainIndex = gainIndex;
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable16_11
   \   00000108   0x6006             STR      R6,[R0, #+0]
    274          			tx_buff[0] = SET_GAIN_CMD + gainIndex;
   \   0000010A   0x0030             MOVS     R0,R6
   \   0000010C   0x3880             SUBS     R0,R0,#+128
   \   0000010E   0x.... 0x....      LDR.W    R1,??DataTable16_35
   \   00000112   0x7008             STRB     R0,[R1, #+0]
    275          
    276          			state = IS_SENDING_SPI_COMMAND;
   \   00000114   0x.... 0x....      LDR.W    R0,??DataTable16_9
   \   00000118   0x2105             MOVS     R1,#+5
   \   0000011A   0x7001             STRB     R1,[R0, #+0]
    277          			spiSelectI(driver);
   \   0000011C   0x.... 0x....      LDR.W    R0,??DataTable16_33
   \   00000120   0x6800             LDR      R0,[R0, #+0]
   \   00000122   0x.... 0x....      BL       spi_lld_select
    278          			spiStartExchangeI(driver, 1, tx_buff, rx_buff);
   \   00000126   0x.... 0x....      LDR.W    R0,??DataTable16_33
   \   0000012A   0x6800             LDR      R0,[R0, #+0]
   \   0000012C   0x2103             MOVS     R1,#+3
   \   0000012E   0x7001             STRB     R1,[R0, #+0]
   \   00000130   0x.... 0x....      LDR.W    R3,??DataTable16_36
   \   00000134   0x.... 0x....      LDR.W    R2,??DataTable16_35
   \   00000138   0x2101             MOVS     R1,#+1
   \   0000013A   0x.... 0x....      LDR.W    R0,??DataTable16_33
   \   0000013E   0x6800             LDR      R0,[R0, #+0]
   \   00000140   0x.... 0x....      BL       spi_lld_exchange
   \   00000144   0xE06C             B.N      ??hipAdcCallback_1
    279          		} else if (currentIntergratorIndex != integratorIndex) {
   \                     ??hipAdcCallback_3:
   \   00000146   0x.... 0x....      LDR.W    R0,??DataTable16_15
   \   0000014A   0x6800             LDR      R0,[R0, #+0]
   \   0000014C   0x42A8             CMP      R0,R5
   \   0000014E   0xD020             BEQ.N    ??hipAdcCallback_4
    280          			currentIntergratorIndex = integratorIndex;
   \   00000150   0x.... 0x....      LDR.W    R0,??DataTable16_15
   \   00000154   0x6005             STR      R5,[R0, #+0]
    281          			tx_buff[0] = SET_INTEGRATOR_CMD + integratorIndex;
   \   00000156   0x0028             MOVS     R0,R5
   \   00000158   0x3840             SUBS     R0,R0,#+64
   \   0000015A   0x.... 0x....      LDR.W    R1,??DataTable16_35
   \   0000015E   0x7008             STRB     R0,[R1, #+0]
    282          
    283          			state = IS_SENDING_SPI_COMMAND;
   \   00000160   0x.... 0x....      LDR.W    R0,??DataTable16_9
   \   00000164   0x2105             MOVS     R1,#+5
   \   00000166   0x7001             STRB     R1,[R0, #+0]
    284          			spiSelectI(driver);
   \   00000168   0x.... 0x....      LDR.W    R0,??DataTable16_33
   \   0000016C   0x6800             LDR      R0,[R0, #+0]
   \   0000016E   0x.... 0x....      BL       spi_lld_select
    285          			spiStartExchangeI(driver, 1, tx_buff, rx_buff);
   \   00000172   0x.... 0x....      LDR.W    R0,??DataTable16_33
   \   00000176   0x6800             LDR      R0,[R0, #+0]
   \   00000178   0x2103             MOVS     R1,#+3
   \   0000017A   0x7001             STRB     R1,[R0, #+0]
   \   0000017C   0x.... 0x....      LDR.W    R3,??DataTable16_36
   \   00000180   0x.... 0x....      LDR.W    R2,??DataTable16_35
   \   00000184   0x2101             MOVS     R1,#+1
   \   00000186   0x.... 0x....      LDR.W    R0,??DataTable16_33
   \   0000018A   0x6800             LDR      R0,[R0, #+0]
   \   0000018C   0x.... 0x....      BL       spi_lld_exchange
   \   00000190   0xE046             B.N      ??hipAdcCallback_1
    286          		} else if (currentBandIndex != bandIndex) {
   \                     ??hipAdcCallback_4:
   \   00000192   0x.... 0x....      LDR.W    R0,??DataTable16_12
   \   00000196   0x6800             LDR      R0,[R0, #+0]
   \   00000198   0x42B8             CMP      R0,R7
   \   0000019A   0xD01D             BEQ.N    ??hipAdcCallback_5
    287          			currentBandIndex = bandIndex;
   \   0000019C   0x.... 0x....      LDR.W    R0,??DataTable16_12
   \   000001A0   0x6007             STR      R7,[R0, #+0]
    288          			tx_buff[0] = SET_BAND_PASS_CMD + bandIndex;
   \   000001A2   0x.... 0x....      LDR.W    R0,??DataTable16_35
   \   000001A6   0x7007             STRB     R7,[R0, #+0]
    289          
    290          			state = IS_SENDING_SPI_COMMAND;
   \   000001A8   0x....             LDR.N    R0,??DataTable16_9
   \   000001AA   0x2105             MOVS     R1,#+5
   \   000001AC   0x7001             STRB     R1,[R0, #+0]
    291          			spiSelectI(driver);
   \   000001AE   0x.... 0x....      LDR.W    R0,??DataTable16_33
   \   000001B2   0x6800             LDR      R0,[R0, #+0]
   \   000001B4   0x.... 0x....      BL       spi_lld_select
    292          			spiStartExchangeI(driver, 1, tx_buff, rx_buff);
   \   000001B8   0x.... 0x....      LDR.W    R0,??DataTable16_33
   \   000001BC   0x6800             LDR      R0,[R0, #+0]
   \   000001BE   0x2103             MOVS     R1,#+3
   \   000001C0   0x7001             STRB     R1,[R0, #+0]
   \   000001C2   0x.... 0x....      LDR.W    R3,??DataTable16_36
   \   000001C6   0x.... 0x....      LDR.W    R2,??DataTable16_35
   \   000001CA   0x2101             MOVS     R1,#+1
   \   000001CC   0x.... 0x....      LDR.W    R0,??DataTable16_33
   \   000001D0   0x6800             LDR      R0,[R0, #+0]
   \   000001D2   0x.... 0x....      BL       spi_lld_exchange
   \   000001D6   0xE023             B.N      ??hipAdcCallback_1
    293          		} else if (currentPrescaler != prescalerIndex) {
   \                     ??hipAdcCallback_5:
   \   000001D8   0x.... 0x....      LDR.W    R0,??DataTable16_37
   \   000001DC   0x6800             LDR      R0,[R0, #+0]
   \   000001DE   0x4540             CMP      R0,R8
   \   000001E0   0xD01B             BEQ.N    ??hipAdcCallback_6
    294          			currentPrescaler = prescalerIndex;
   \   000001E2   0x.... 0x....      LDR.W    R0,??DataTable16_37
   \   000001E6   0xF8C0 0x8000      STR      R8,[R0, #+0]
    295          			tx_buff[0] = SET_PRESCALER_CMD + prescalerIndex;
   \   000001EA   0xF118 0x0040      ADDS     R0,R8,#+64
   \   000001EE   0x.... 0x....      LDR.W    R1,??DataTable16_35
   \   000001F2   0x7008             STRB     R0,[R1, #+0]
    296          
    297          			state = IS_SENDING_SPI_COMMAND;
   \   000001F4   0x....             LDR.N    R0,??DataTable16_9
   \   000001F6   0x2105             MOVS     R1,#+5
   \   000001F8   0x7001             STRB     R1,[R0, #+0]
    298          			spiSelectI(driver);
   \   000001FA   0x....             LDR.N    R0,??DataTable16_33
   \   000001FC   0x6800             LDR      R0,[R0, #+0]
   \   000001FE   0x.... 0x....      BL       spi_lld_select
    299          			spiStartExchangeI(driver, 1, tx_buff, rx_buff);
   \   00000202   0x....             LDR.N    R0,??DataTable16_33
   \   00000204   0x6800             LDR      R0,[R0, #+0]
   \   00000206   0x2103             MOVS     R1,#+3
   \   00000208   0x7001             STRB     R1,[R0, #+0]
   \   0000020A   0x....             LDR.N    R3,??DataTable16_36
   \   0000020C   0x....             LDR.N    R2,??DataTable16_35
   \   0000020E   0x2101             MOVS     R1,#+1
   \   00000210   0x....             LDR.N    R0,??DataTable16_33
   \   00000212   0x6800             LDR      R0,[R0, #+0]
   \   00000214   0x.... 0x....      BL       spi_lld_exchange
   \   00000218   0xE002             B.N      ??hipAdcCallback_1
    300          		} else {
    301          			state = READY_TO_INTEGRATE;
   \                     ??hipAdcCallback_6:
   \   0000021A   0x....             LDR.N    R0,??DataTable16_9
   \   0000021C   0x2101             MOVS     R1,#+1
   \   0000021E   0x7001             STRB     R1,[R0, #+0]
    302          		}
    303          	}
    304          }
   \                     ??hipAdcCallback_1:
   \   00000220   0xECBD 0x8B02      VPOP     {D8}
   \   00000224   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .data, align 1
    305          static bool_t needToInit = true;
   \                     needToInit:
   \   00000000   0x01               DC8 1
    306          

   \                                 In section .text, align 2, keep-with-next
    307          static void hipStartupCode(void) {
   \                     _Z14hipStartupCodev:
   \   00000000   0xB580             PUSH     {R7,LR}
    308          //	D[4:1] = 0000 : 4 MHz
    309          //	D[4:1] = 0001 : 5 MHz
    310          //	D[4:1] = 0010 : 6 MHz
    311          //	D[4:1] = 0011 ; 8 MHz
    312          //	D[4:1] = 0100 ; 10 MHz
    313          //	D[4:1] = 0101 ; 12 MHz
    314          //	D[4:1] = 0110 : 16 MHz
    315          //	D[4:1] = 0111 : 20 MHz
    316          //	D[4:1] = 1000 : 24 MHz
    317          
    318          
    319          // '0' for 4MHz
    320          	currentPrescaler = engineConfiguration->hip9011PrescalerAndSDO;
   \   00000002   0x....             LDR.N    R0,??DataTable16_5
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF8D0 0x0148      LDR      R0,[R0, #+328]
   \   0000000A   0x....             LDR.N    R1,??DataTable16_37
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    321          	SPI_SYNCHRONOUS(SET_PRESCALER_CMD + currentPrescaler);
   \   0000000E   0x....             LDR.N    R0,??DataTable16_33
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       spiSelect
   \   00000016   0x....             LDR.N    R0,??DataTable16_37
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x3040             ADDS     R0,R0,#+64
   \   0000001C   0x....             LDR.N    R1,??DataTable16_35
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
   \   00000020   0x....             LDR.N    R3,??DataTable16_36
   \   00000022   0x....             LDR.N    R2,??DataTable16_35
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0x....             LDR.N    R0,??DataTable16_33
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x.... 0x....      BL       spiExchange
   \   0000002E   0x....             LDR.N    R0,??DataTable16_33
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x.... 0x....      BL       spiUnselect
   \   00000036   0x....             LDR.N    R0,??DataTable16_36
   \   00000038   0x7800             LDRB     R0,[R0, #+0]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD004             BEQ.N    ??hipStartupCode_0
   \   0000003E   0x....             LDR.N    R0,??DataTable16_17
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x....             LDR.N    R1,??DataTable16_17
   \   00000046   0x6008             STR      R0,[R1, #+0]
    322          
    323          	chThdSleepMilliseconds(10);
   \                     ??hipStartupCode_0:
   \   00000048   0x200A             MOVS     R0,#+10
   \   0000004A   0x.... 0x....      BL       chThdSleep
    324          
    325          	// '0' for channel #1
    326          	SPI_SYNCHRONOUS(SET_CHANNEL_CMD + 0);
   \   0000004E   0x....             LDR.N    R0,??DataTable16_33
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0x.... 0x....      BL       spiSelect
   \   00000056   0x....             LDR.N    R0,??DataTable16_35
   \   00000058   0x21E0             MOVS     R1,#+224
   \   0000005A   0x7001             STRB     R1,[R0, #+0]
   \   0000005C   0x....             LDR.N    R3,??DataTable16_36
   \   0000005E   0x....             LDR.N    R2,??DataTable16_35
   \   00000060   0x2101             MOVS     R1,#+1
   \   00000062   0x....             LDR.N    R0,??DataTable16_33
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0x.... 0x....      BL       spiExchange
   \   0000006A   0x....             LDR.N    R0,??DataTable16_33
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0x.... 0x....      BL       spiUnselect
   \   00000072   0x....             LDR.N    R0,??DataTable16_36
   \   00000074   0x7800             LDRB     R0,[R0, #+0]
   \   00000076   0x2800             CMP      R0,#+0
   \   00000078   0xD004             BEQ.N    ??hipStartupCode_1
   \   0000007A   0x....             LDR.N    R0,??DataTable16_17
   \   0000007C   0x6800             LDR      R0,[R0, #+0]
   \   0000007E   0x1C40             ADDS     R0,R0,#+1
   \   00000080   0x....             LDR.N    R1,??DataTable16_17
   \   00000082   0x6008             STR      R0,[R1, #+0]
    327          
    328          	chThdSleepMilliseconds(10);
   \                     ??hipStartupCode_1:
   \   00000084   0x200A             MOVS     R0,#+10
   \   00000086   0x.... 0x....      BL       chThdSleep
    329          
    330          	// band index depends on cylinder bore
    331          	SPI_SYNCHRONOUS(SET_BAND_PASS_CMD + currentBandIndex);
   \   0000008A   0x....             LDR.N    R0,??DataTable16_33
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0x.... 0x....      BL       spiSelect
   \   00000092   0x....             LDR.N    R0,??DataTable16_35
   \   00000094   0x....             LDR.N    R1,??DataTable16_12
   \   00000096   0x6809             LDR      R1,[R1, #+0]
   \   00000098   0x7001             STRB     R1,[R0, #+0]
   \   0000009A   0x....             LDR.N    R3,??DataTable16_36
   \   0000009C   0x....             LDR.N    R2,??DataTable16_35
   \   0000009E   0x2101             MOVS     R1,#+1
   \   000000A0   0x....             LDR.N    R0,??DataTable16_33
   \   000000A2   0x6800             LDR      R0,[R0, #+0]
   \   000000A4   0x.... 0x....      BL       spiExchange
   \   000000A8   0x....             LDR.N    R0,??DataTable16_33
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0x.... 0x....      BL       spiUnselect
   \   000000B0   0x....             LDR.N    R0,??DataTable16_36
   \   000000B2   0x7800             LDRB     R0,[R0, #+0]
   \   000000B4   0x2800             CMP      R0,#+0
   \   000000B6   0xD004             BEQ.N    ??hipStartupCode_2
   \   000000B8   0x....             LDR.N    R0,??DataTable16_17
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0x1C40             ADDS     R0,R0,#+1
   \   000000BE   0x....             LDR.N    R1,??DataTable16_17
   \   000000C0   0x6008             STR      R0,[R1, #+0]
    332          
    333          	chThdSleepMilliseconds(10);
   \                     ??hipStartupCode_2:
   \   000000C2   0x200A             MOVS     R0,#+10
   \   000000C4   0x.... 0x....      BL       chThdSleep
    334          
    335          	if (boardConfiguration->useTpicAdvancedMode) {
   \   000000C8   0x....             LDR.N    R0,??DataTable16_6
   \   000000CA   0x6800             LDR      R0,[R0, #+0]
   \   000000CC   0xF890 0x0181      LDRB     R0,[R0, #+385]
   \   000000D0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D2   0x08C0             LSRS     R0,R0,#+3
   \   000000D4   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000000D8   0x2800             CMP      R0,#+0
   \   000000DA   0xD01D             BEQ.N    ??hipStartupCode_3
    336          		// enable advanced mode for digital integrator output
    337          		SPI_SYNCHRONOUS(SET_ADVANCED_MODE);
   \   000000DC   0x....             LDR.N    R0,??DataTable16_33
   \   000000DE   0x6800             LDR      R0,[R0, #+0]
   \   000000E0   0x.... 0x....      BL       spiSelect
   \   000000E4   0x....             LDR.N    R0,??DataTable16_35
   \   000000E6   0x2171             MOVS     R1,#+113
   \   000000E8   0x7001             STRB     R1,[R0, #+0]
   \   000000EA   0x....             LDR.N    R3,??DataTable16_36
   \   000000EC   0x....             LDR.N    R2,??DataTable16_35
   \   000000EE   0x2101             MOVS     R1,#+1
   \   000000F0   0x....             LDR.N    R0,??DataTable16_33
   \   000000F2   0x6800             LDR      R0,[R0, #+0]
   \   000000F4   0x.... 0x....      BL       spiExchange
   \   000000F8   0x....             LDR.N    R0,??DataTable16_33
   \   000000FA   0x6800             LDR      R0,[R0, #+0]
   \   000000FC   0x.... 0x....      BL       spiUnselect
   \   00000100   0x....             LDR.N    R0,??DataTable16_36
   \   00000102   0x7800             LDRB     R0,[R0, #+0]
   \   00000104   0x2800             CMP      R0,#+0
   \   00000106   0xD004             BEQ.N    ??hipStartupCode_4
   \   00000108   0x....             LDR.N    R0,??DataTable16_17
   \   0000010A   0x6800             LDR      R0,[R0, #+0]
   \   0000010C   0x1C40             ADDS     R0,R0,#+1
   \   0000010E   0x....             LDR.N    R1,??DataTable16_17
   \   00000110   0x6008             STR      R0,[R1, #+0]
    338          
    339              	chThdSleepMilliseconds(10);
   \                     ??hipStartupCode_4:
   \   00000112   0x200A             MOVS     R0,#+10
   \   00000114   0x.... 0x....      BL       chThdSleep
    340          	}
    341          
    342          	/**
    343          	 * Let's restart SPI to switch it from synchronous mode into
    344          	 * asynchronous mode
    345          	 */
    346          	spiStop(driver);
   \                     ??hipStartupCode_3:
   \   00000118   0x....             LDR.N    R0,??DataTable16_33
   \   0000011A   0x6800             LDR      R0,[R0, #+0]
   \   0000011C   0x.... 0x....      BL       spiStop
    347          	spicfg.end_cb = endOfSpiExchange;
   \   00000120   0x....             LDR.N    R0,??DataTable16_38
   \   00000122   0x....             LDR.N    R1,??DataTable16_39
   \   00000124   0x6001             STR      R1,[R0, #+0]
    348          	spiStart(driver, &spicfg);
   \   00000126   0x....             LDR.N    R1,??DataTable16_38
   \   00000128   0x....             LDR.N    R0,??DataTable16_33
   \   0000012A   0x6800             LDR      R0,[R0, #+0]
   \   0000012C   0x.... 0x....      BL       spiStart
    349          	state = READY_TO_INTEGRATE;
   \   00000130   0x....             LDR.N    R0,??DataTable16_9
   \   00000132   0x2101             MOVS     R1,#+1
   \   00000134   0x7001             STRB     R1,[R0, #+0]
    350          }
   \   00000136   0xBD01             POP      {R0,PC}          ;; return
    351          

   \                                 In section .bss, align 8
    352          static THD_WORKING_AREA(hipTreadStack, UTILITY_THREAD_STACK_SIZE);
   \                     hipTreadStack:
   \   00000000                      DS8 712
    353          

   \                                 In section .text, align 2, keep-with-next
    354          static msg_t hipThread(void *arg) {
   \                     _Z9hipThreadPv:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    355          	chRegSetThreadName("hip9011 init");
   \   00000004   0x....             LDR.N    R0,??DataTable16_40
   \   00000006   0x6980             LDR      R0,[R0, #+24]
   \   00000008   0x....             LDR.N    R1,??DataTable16_41
   \   0000000A   0x6181             STR      R1,[R0, #+24]
    356          	while (true) {
    357          		// some time to let the hardware start
    358          		chThdSleepMilliseconds(500);
   \                     ??hipThread_0:
   \   0000000C   0xF44F 0x70FA      MOV      R0,#+500
   \   00000010   0x.... 0x....      BL       chThdSleep
    359          		if (needToInit) {
   \   00000014   0x....             LDR.N    R0,??DataTable16_42
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD0F7             BEQ.N    ??hipThread_0
    360          			hipStartupCode();
   \   0000001C   0x.... 0x....      BL       _Z14hipStartupCodev
    361          			needToInit = false;
   \   00000020   0x....             LDR.N    R0,??DataTable16_42
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x7001             STRB     R1,[R0, #+0]
   \   00000026   0xE7F1             B.N      ??hipThread_0
    362          		}
    363          	}
    364          	return -1;
    365          }
    366          

   \                                 In section .text, align 2, keep-with-next
    367          void initHip9011(Logging *sharedLogger) {
   \                     _Z11initHip9011P7Logging:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    368          	logger = sharedLogger;
   \   00000006   0x....             LDR.N    R0,??DataTable16_8
   \   00000008   0x6004             STR      R4,[R0, #+0]
    369          	addConsoleAction("hipinfo", showHipInfo);
   \   0000000A   0x....             LDR.N    R1,??DataTable16_43
   \   0000000C   0x....             LDR.N    R0,??DataTable16_44
   \   0000000E   0x.... 0x....      BL       addConsoleAction
    370          	if (!boardConfiguration->isHip9011Enabled)
   \   00000012   0x....             LDR.N    R0,??DataTable16_6
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF890 0x0180      LDRB     R0,[R0, #+384]
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x0980             LSRS     R0,R0,#+6
   \   0000001E   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD068             BEQ.N    ??initHip9011_0
    371          		return;
    372          
    373          
    374          	currentAngleWindowWidth =
    375          	engineConfiguration->knockDetectionWindowEnd - engineConfiguration->knockDetectionWindowStart;
   \                     ??initHip9011_1:
   \   00000026   0x....             LDR.N    R0,??DataTable16_5
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0xF8D0 0x0608      LDR      R0,[R0, #+1544]
   \   0000002E   0xEE00 0x0A10      VMOV     S0,R0
   \   00000032   0x....             LDR.N    R0,??DataTable16_5
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0xF8D0 0x0604      LDR      R0,[R0, #+1540]
   \   0000003A   0xEE00 0x0A90      VMOV     S1,R0
   \   0000003E   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   00000042   0x....             LDR.N    R0,??DataTable16_34
   \   00000044   0xED80 0x0A00      VSTR     S0,[R0, #0]
    376          
    377          	prepareHip9011RpmLookup(currentAngleWindowWidth);
   \   00000048   0x....             LDR.N    R0,??DataTable16_34
   \   0000004A   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000004E   0x.... 0x....      BL       _Z23prepareHip9011RpmLookupf
    378          
    379          	// todo: configurable
    380          //	driver = getSpiDevice(boardConfiguration->hip9011SpiDevice);
    381          
    382          	spicfg.ssport = getHwPort(boardConfiguration->hip9011CsPin);
   \   00000052   0x....             LDR.N    R0,??DataTable16_6
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0xF8D0 0x0288      LDR      R0,[R0, #+648]
   \   0000005A   0x.... 0x....      BL       _Z9getHwPort11brain_pin_e
   \   0000005E   0x....             LDR.N    R1,??DataTable16_38
   \   00000060   0x6048             STR      R0,[R1, #+4]
    383          	spicfg.sspad = getHwPin(boardConfiguration->hip9011CsPin);
   \   00000062   0x....             LDR.N    R0,??DataTable16_6
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0xF8D0 0x0288      LDR      R0,[R0, #+648]
   \   0000006A   0x.... 0x....      BL       _Z8getHwPin11brain_pin_e
   \   0000006E   0x....             LDR.N    R1,??DataTable16_38
   \   00000070   0x8108             STRH     R0,[R1, #+8]
    384          
    385          	outputPinRegisterExt2("hip int/hold", &intHold, boardConfiguration->hip9011IntHoldPin, &DEFAULT_OUTPUT);
   \   00000072   0x....             LDR.N    R3,??DataTable16_45
   \   00000074   0x....             LDR.N    R0,??DataTable16_6
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0xF8D0 0x228C      LDR      R2,[R0, #+652]
   \   0000007C   0x....             LDR.N    R1,??DataTable16
   \   0000007E   0x....             LDR.N    R0,??DataTable16_46
   \   00000080   0x.... 0x....      BL       _Z21outputPinRegisterExt2PKcP9OutputPin11brain_pin_eP17pin_output_mode_e
    386          	outputPinRegisterExt2("hip CS", &hipCs, boardConfiguration->hip9011CsPin, &DEFAULT_OUTPUT);
   \   00000084   0x....             LDR.N    R3,??DataTable16_45
   \   00000086   0x....             LDR.N    R0,??DataTable16_6
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0xF8D0 0x2288      LDR      R2,[R0, #+648]
   \   0000008E   0x....             LDR.N    R1,??DataTable16_1
   \   00000090   0x....             LDR.N    R0,??DataTable16_47
   \   00000092   0x.... 0x....      BL       _Z21outputPinRegisterExt2PKcP9OutputPin11brain_pin_eP17pin_output_mode_e
    387          
    388          	scheduleMsg(logger, "Starting HIP9011/TPIC8101 driver");
   \   00000096   0x....             LDR.N    R1,??DataTable16_48
   \   00000098   0x....             LDR.N    R0,??DataTable16_8
   \   0000009A   0x6800             LDR      R0,[R0, #+0]
   \   0000009C   0x.... 0x....      BL       scheduleMsg
    389          	spiStart(driver, &spicfg);
   \   000000A0   0x....             LDR.N    R1,??DataTable16_38
   \   000000A2   0x....             LDR.N    R0,??DataTable16_33
   \   000000A4   0x6800             LDR      R0,[R0, #+0]
   \   000000A6   0x.... 0x....      BL       spiStart
    390          
    391          	currentBandIndex = getBandIndex();
   \   000000AA   0x.... 0x....      BL       _Z12getBandIndexv
   \   000000AE   0x....             LDR.N    R1,??DataTable16_12
   \   000000B0   0x6008             STR      R0,[R1, #+0]
    392          
    393          	/**
    394          	 * this engine cycle callback would be scheduling actual integration start and end callbacks
    395          	 */
    396          	addTriggerEventListener(&intHoldCallback, "DD int/hold", engine);
   \   000000B2   0x....             LDR.N    R0,??DataTable16_14
   \   000000B4   0x6802             LDR      R2,[R0, #+0]
   \   000000B6   0x....             LDR.N    R1,??DataTable16_49
   \   000000B8   0x....             LDR.N    R0,??DataTable16_50
   \   000000BA   0x.... 0x....      BL       _Z23addTriggerEventListenerPFv15trigger_event_ejEPKcP6Engine
    397          
    398          	// MISO PB14
    399          //	palSetPadMode(GPIOB, 14, PAL_MODE_ALTERNATE(EFI_SPI2_AF) | PAL_STM32_PUDR_PULLUP);
    400          	// MOSI PB15
    401          //	palSetPadMode(GPIOB, 15, PAL_MODE_ALTERNATE(EFI_SPI2_AF) | PAL_STM32_OTYPE_OPENDRAIN);
    402          
    403          	addConsoleActionF("set_gain", setGain);
   \   000000BE   0x....             LDR.N    R1,??DataTable16_51
   \   000000C0   0x....             LDR.N    R0,??DataTable16_52
   \   000000C2   0x.... 0x....      BL       addConsoleActionF
    404          	addConsoleActionF("set_band", setBand);
   \   000000C6   0x....             LDR.N    R1,??DataTable16_53
   \   000000C8   0x....             LDR.N    R0,??DataTable16_54
   \   000000CA   0x.... 0x....      BL       addConsoleActionF
    405          	addConsoleActionI("set_hip_prescalerandsdo", setPrescalerAndSDO);
   \   000000CE   0x....             LDR.N    R1,??DataTable16_55
   \   000000D0   0x....             LDR.N    R0,??DataTable16_56
   \   000000D2   0x.... 0x....      BL       addConsoleActionI
    406              addConsoleActionF("set_knock_threshold", setKnockThresh);
   \   000000D6   0x....             LDR.N    R1,??DataTable16_57
   \   000000D8   0x....             LDR.N    R0,??DataTable16_58
   \   000000DA   0x.... 0x....      BL       addConsoleActionF
    407              addConsoleActionI("set_max_knock_sub_deg", setMaxKnockSubDeg);
   \   000000DE   0x....             LDR.N    R1,??DataTable16_59
   \   000000E0   0x....             LDR.N    R0,??DataTable16_60
   \   000000E2   0x.... 0x....      BL       addConsoleActionI
    408          	chThdCreateStatic(hipTreadStack, sizeof(hipTreadStack), NORMALPRIO, (tfunc_t) hipThread, NULL);
   \   000000E6   0x2000             MOVS     R0,#+0
   \   000000E8   0x9000             STR      R0,[SP, #+0]
   \   000000EA   0x....             LDR.N    R3,??DataTable16_61
   \   000000EC   0x2240             MOVS     R2,#+64
   \   000000EE   0xF44F 0x7132      MOV      R1,#+712
   \   000000F2   0x....             LDR.N    R0,??DataTable16_62
   \   000000F4   0x.... 0x....      BL       chThdCreateStatic
    409          }
   \                     ??initHip9011_0:
   \   000000F8   0xBD13             POP      {R0,R1,R4,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x48 0x49          DC8      "HIP"
   \              0x50 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40490FD0         DC32     0x40490fd0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x44610000         DC32     0x44610000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x3A400C01         DC32     0x3a400c01

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x........         DC32     intHold

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0x........         DC32     hipCs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   0x........         DC32     _ZN12scheduling_sC1Ev

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   0x........         DC32     startTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   0x........         DC32     endTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \   00000000   0x........         DC32     engineConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_6:
   \   00000000   0x........         DC32     boardConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_7:
   \   00000000   0x........         DC32     `?<Constant "hip9011 driver not ac...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_8:
   \   00000000   0x........         DC32     logger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_9:
   \   00000000   0x........         DC32     state

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_10:
   \   00000000   0x........         DC32     `?<Constant "enabled=%s state=%d b...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_11:
   \   00000000   0x........         DC32     currentGainIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_12:
   \   00000000   0x........         DC32     currentBandIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_13:
   \   00000000   0x........         DC32     `?<Constant "band_index=%d gain %f...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_14:
   \   00000000   0x........         DC32     engine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_15:
   \   00000000   0x........         DC32     currentIntergratorIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_16:
   \   00000000   0x........         DC32     `?<Constant "integrator index=%d k...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_17:
   \   00000000   0x........         DC32     nonZeroResponse

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_18:
   \   00000000   0x........         DC32     `?<Constant "spi= IntHold@%s respo...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_19:
   \   00000000   0x........         DC32     settingUpdateCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_20:
   \   00000000   0x........         DC32     `?<Constant "CS@%s updateCount=%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_21:
   \   00000000   0x........         DC32     pinNameBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_22:
   \   00000000   0x........         DC32     spiCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_23:
   \   00000000   0x........         DC32     hipValueMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_24:
   \   00000000   0x........         DC32     knockVolts

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_25:
   \   00000000   0x........         DC32     `?<Constant "hip %fv@%s/max=%f spi...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_26:
   \   00000000   0x........         DC32     `?<Constant "start %f end %f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_27:
   \   00000000   0x41A00000         DC32     0x41a00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_28:
   \   00000000   0xE0001004         DC32     0xe0001004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_29:
   \   00000000   0x........         DC32     _Z16startIntegrationv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_30:
   \   00000000   0x........         DC32     hipLastExecutionCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_31:
   \   00000000   0x........         DC32     lastExecutionCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_32:
   \   00000000   0x........         DC32     _Z14endIntegrationv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_33:
   \   00000000   0x........         DC32     driver

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_34:
   \   00000000   0x........         DC32     currentAngleWindowWidth

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_35:
   \   00000000   0x........         DC32     tx_buff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_36:
   \   00000000   0x........         DC32     rx_buff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_37:
   \   00000000   0x........         DC32     currentPrescaler

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_38:
   \   00000000   0x........         DC32     spicfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_39:
   \   00000000   0x........         DC32     _Z16endOfSpiExchangeP9SPIDriver

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_40:
   \   00000000   0x........         DC32     rlist

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_41:
   \   00000000   0x........         DC32     `?<Constant "hip9011 init">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_42:
   \   00000000   0x........         DC32     needToInit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_43:
   \   00000000   0x........         DC32     _Z11showHipInfov

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_44:
   \   00000000   0x........         DC32     `?<Constant "hipinfo">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_45:
   \   00000000   0x........         DC32     DEFAULT_OUTPUT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_46:
   \   00000000   0x........         DC32     `?<Constant "hip int/hold">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_47:
   \   00000000   0x........         DC32     `?<Constant "hip CS">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_48:
   \   00000000   0x........         DC32     `?<Constant "Starting HIP9011/TPIC...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_49:
   \   00000000   0x........         DC32     `?<Constant "DD int/hold">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_50:
   \   00000000   0x........         DC32     _Z15intHoldCallback15trigger_event_ej

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_51:
   \   00000000   0x........         DC32     _Z7setGainf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_52:
   \   00000000   0x........         DC32     `?<Constant "set_gain">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_53:
   \   00000000   0x........         DC32     _Z7setBandf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_54:
   \   00000000   0x........         DC32     `?<Constant "set_band">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_55:
   \   00000000   0x........         DC32     _Z18setPrescalerAndSDOi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_56:
   \   00000000   0x........         DC32     `?<Constant "set_hip_prescalerandsdo">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_57:
   \   00000000   0x........         DC32     _Z14setKnockThreshf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_58:
   \   00000000   0x........         DC32     `?<Constant "set_knock_threshold">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_59:
   \   00000000   0x........         DC32     _Z17setMaxKnockSubDegi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_60:
   \   00000000   0x........         DC32     `?<Constant "set_max_knock_sub_deg">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_61:
   \   00000000   0x........         DC32     _Z9hipThreadPv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_62:
   \   00000000   0x........         DC32     hipTreadStack

   \                                 In section .init_array, align 4, keep-with-next, root
   \   00000000   0x........         DC32    RELOC_ARM_TARGET1 __sti__routine

   \                                 In section .rodata, align 4
   \                     `?<Constant "hip9011 driver not ac...">`:
   \   00000000   0x68 0x69          DC8 "hip9011 driver not active"
   \              0x70 0x39    
   \              0x30 0x31    
   \              0x31 0x20    
   \              0x64 0x72    
   \              0x69 0x76    
   \              0x65 0x72    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x63 0x74    
   \              0x69 0x76    
   \              0x65 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "enabled=%s state=%d b...">`:
   \   00000000   0x65 0x6E          DC8 "enabled=%s state=%d bore=%fmm freq=%fkHz PaSDO=%d"
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x64 0x3D    
   \              0x25 0x73    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x3D 0x25    
   \              0x64 0x20    
   \              0x62 0x6F    
   \              0x72 0x65    
   \              0x3D 0x25    
   \              0x66 0x6D    
   \              0x6D 0x20    
   \              0x66 0x72    
   \              0x65 0x71    
   \              0x3D 0x25    
   \              0x66 0x6B    
   \              0x48 0x7A    
   \              0x20 0x50    
   \              0x61 0x53    
   \              0x44 0x4F    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   00000032   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "band_index=%d gain %f...">`:
   \   00000000   0x62 0x61          DC8 "band_index=%d gain %f/index=%d"
   \              0x6E 0x64    
   \              0x5F 0x69    
   \              0x6E 0x64    
   \              0x65 0x78    
   \              0x3D 0x25    
   \              0x64 0x20    
   \              0x67 0x61    
   \              0x69 0x6E    
   \              0x20 0x25    
   \              0x66 0x2F    
   \              0x69 0x6E    
   \              0x64 0x65    
   \              0x78 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "integrator index=%d k...">`:
   \   00000000   0x69 0x6E          DC8 69H, 6EH, 74H, 65H, 67H, 72H, 61H, 74H
   \              0x74 0x65    
   \              0x67 0x72    
   \              0x61 0x74    
   \   00000008   0x6F 0x72          DC8 6FH, 72H, 20H, 69H, 6EH, 64H, 65H, 78H
   \              0x20 0x69    
   \              0x6E 0x64    
   \              0x65 0x78    
   \   00000010   0x3D 0x25          DC8 3DH, 25H, 64H, 20H, 6BH, 6EH, 6FH, 63H
   \              0x64 0x20    
   \              0x6B 0x6E    
   \              0x6F 0x63    
   \   00000018   0x6B 0x56          DC8 6BH, 56H, 54H, 68H, 72H, 65H, 73H, 68H
   \              0x54 0x68    
   \              0x72 0x65    
   \              0x73 0x68    
   \   00000020   0x6F 0x6C          DC8 6FH, 6CH, 64H, 3DH, 25H, 66H, 20H, 6BH
   \              0x64 0x3D    
   \              0x25 0x66    
   \              0x20 0x6B    
   \   00000028   0x6E 0x6F          DC8 6EH, 6FH, 63H, 6BH, 43H, 6FH, 75H, 6EH
   \              0x63 0x6B    
   \              0x43 0x6F    
   \              0x75 0x6E    
   \   00000030   0x74 0x3D          DC8 74H, 3DH, 25H, 64H, 20H, 6DH, 61H, 78H
   \              0x25 0x64    
   \              0x20 0x6D    
   \              0x61 0x78    
   \   00000038   0x4B 0x6E          DC8 4BH, 6EH, 6FH, 63H, 6BH, 53H, 75H, 62H
   \              0x6F 0x63    
   \              0x6B 0x53    
   \              0x75 0x62    
   \   00000040   0x44 0x65          DC8 44H, 65H, 67H, 3DH, 25H, 66H, 0
   \              0x67 0x3D    
   \              0x25 0x66    
   \              0x00         
   \   00000047   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "spi= IntHold@%s respo...">`:
   \   00000000   0x73 0x70          DC8 "spi= IntHold@%s response count=%d"
   \              0x69 0x3D    
   \              0x20 0x49    
   \              0x6E 0x74    
   \              0x48 0x6F    
   \              0x6C 0x64    
   \              0x40 0x25    
   \              0x73 0x20    
   \              0x72 0x65    
   \              0x73 0x70    
   \              0x6F 0x6E    
   \              0x73 0x65    
   \              0x20 0x63    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "CS@%s updateCount=%d">`:
   \   00000000   0x43 0x53          DC8 "CS@%s updateCount=%d"
   \              0x40 0x25    
   \              0x73 0x20    
   \              0x75 0x70    
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x43 0x6F    
   \              0x75 0x6E    
   \              0x74 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "hip %fv@%s/max=%f spi...">`:
   \   00000000   0x68 0x69          DC8 "hip %fv@%s/max=%f spiCount=%d adv=%d"
   \              0x70 0x20    
   \              0x25 0x66    
   \              0x76 0x40    
   \              0x25 0x73    
   \              0x2F 0x6D    
   \              0x61 0x78    
   \              0x3D 0x25    
   \              0x66 0x20    
   \              0x73 0x70    
   \              0x69 0x43    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x3D 0x25    
   \              0x64 0x20    
   \              0x61 0x64    
   \              0x76 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "start %f end %f">`:
   \   00000000   0x73 0x74          DC8 "start %f end %f"
   \              0x61 0x72    
   \              0x74 0x20    
   \              0x25 0x66    
   \              0x20 0x65    
   \              0x6E 0x64    
   \              0x20 0x25    
   \              0x66 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "hip9011 init">`:
   \   00000000   0x68 0x69          DC8 "hip9011 init"
   \              0x70 0x39    
   \              0x30 0x31    
   \              0x31 0x20    
   \              0x69 0x6E    
   \              0x69 0x74    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "hipinfo">`:
   \   00000000   0x68 0x69          DC8 "hipinfo"
   \              0x70 0x69    
   \              0x6E 0x66    
   \              0x6F 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "hip int/hold">`:
   \   00000000   0x68 0x69          DC8 "hip int/hold"
   \              0x70 0x20    
   \              0x69 0x6E    
   \              0x74 0x2F    
   \              0x68 0x6F    
   \              0x6C 0x64    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "hip CS">`:
   \   00000000   0x68 0x69          DC8 "hip CS"
   \              0x70 0x20    
   \              0x43 0x53    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Starting HIP9011/TPIC...">`:
   \   00000000   0x53 0x74          DC8 "Starting HIP9011/TPIC8101 driver"
   \              0x61 0x72    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x48    
   \              0x49 0x50    
   \              0x39 0x30    
   \              0x31 0x31    
   \              0x2F 0x54    
   \              0x50 0x49    
   \              0x43 0x38    
   \              0x31 0x30    
   \              0x31 0x20    
   \              0x64 0x72    
   \              0x69 0x76    
   \              0x65 0x72    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "DD int/hold">`:
   \   00000000   0x44 0x44          DC8 "DD int/hold"
   \              0x20 0x69    
   \              0x6E 0x74    
   \              0x2F 0x68    
   \              0x6F 0x6C    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "set_gain">`:
   \   00000000   0x73 0x65          DC8 "set_gain"
   \              0x74 0x5F    
   \              0x67 0x61    
   \              0x69 0x6E    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "set_band">`:
   \   00000000   0x73 0x65          DC8 "set_band"
   \              0x74 0x5F    
   \              0x62 0x61    
   \              0x6E 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "set_hip_prescalerandsdo">`:
   \   00000000   0x73 0x65          DC8 "set_hip_prescalerandsdo"
   \              0x74 0x5F    
   \              0x68 0x69    
   \              0x70 0x5F    
   \              0x70 0x72    
   \              0x65 0x73    
   \              0x63 0x61    
   \              0x6C 0x65    
   \              0x72 0x61    
   \              0x6E 0x64    
   \              0x73 0x64    
   \              0x6F 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "set_knock_threshold">`:
   \   00000000   0x73 0x65          DC8 "set_knock_threshold"
   \              0x74 0x5F    
   \              0x6B 0x6E    
   \              0x6F 0x63    
   \              0x6B 0x5F    
   \              0x74 0x68    
   \              0x72 0x65    
   \              0x73 0x68    
   \              0x6F 0x6C    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "set_max_knock_sub_deg">`:
   \   00000000   0x73 0x65          DC8 "set_max_knock_sub_deg"
   \              0x74 0x5F    
   \              0x6D 0x61    
   \              0x78 0x5F    
   \              0x6B 0x6E    
   \              0x6F 0x63    
   \              0x6B 0x5F    
   \              0x73 0x75    
   \              0x62 0x5F    
   \              0x64 0x65    
   \              0x67 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   0x48 0x49          DC8 "HIP"
   \              0x50 0x00    
    410          
    411          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   __sti__routine()
         8   -> NamedOutputPin::NamedOutputPin(char const *)
         8   -> OutputPin::OutputPin()
         8   -> __aeabi_vec_ctor_nocookie_nodtor
       8   endIntegration()
         8   -> turnPinLow(NamedOutputPin *)
       8   endOfSpiExchange(SPIDriver *)
         8   -> spi_lld_unselect
       0   getBand()
      16   getBandIndex()
        16   -> getBand()
        16   -> getHip9011BandIndex(float)
      32   hipAdcCallback(uint16_t)
        32   -> Engine::knockLogic(float)
        32   -> getBandIndex()
        32   -> getHip9011GainIndex(float)
        32   -> getIntegrationIndexByRpm(float)
        32   -> maxF
        32   -> prepareHip9011RpmLookup(float)
        32   -> spi_lld_exchange
        32   -> spi_lld_select
       8   hipStartupCode()
         8   -> chThdSleep
         8   -> spiExchange
         8   -> spiSelect
         8   -> spiStart
         8   -> spiStop
         8   -> spiUnselect
       8   hipThread(void *)
         8   -> chThdSleep
         8   -> hipStartupCode()
      16   initHip9011(Logging *)
        16   -> addConsoleAction
        16   -> addConsoleActionF
        16   -> addConsoleActionI
        16   -> addTriggerEventListener(ShaftPositionListener, char const *, Engine *)
        16   -> chThdCreateStatic
        16   -> getBandIndex()
        16   -> getHwPin(brain_pin_e)
        16   -> getHwPort(brain_pin_e)
        16   -> outputPinRegisterExt2(char const *, OutputPin *, brain_pin_e, pin_output_mode_e *)
        16   -> prepareHip9011RpmLookup(float)
        16   -> scheduleMsg
        16   -> spiStart
      24   intHoldCallback(trigger_event_e, uint32_t)
        24   -> getRevolutionCounter()
        24   -> scheduleByAngle(int, scheduling_s *, float, schfunc_t, void *, RpmCalculator *)
      16   setBand(float)
        16   -> showHipInfo()
      16   setGain(float)
        16   -> showHipInfo()
       0   setHip9011FrankensoPinout()
      16   setKnockThresh(float)
        16   -> showHipInfo()
      16   setMaxKnockSubDeg(int)
        16   -> showHipInfo()
       0   setPrescalerAndSDO(int)
      40   showHipInfo()
        40   -> Engine::printKnockState()
        40   -> __aeabi_f2d
        40   -> boolToString(bool)
        40   -> getBand()
        40   -> getPinNameByAdcChannel(adc_channel_e, char *)
        40   -> hwPortname(brain_pin_e)
        40   -> printSpiState(Logging *, board_configuration_s *)
        40   -> scheduleMsg
       8   startIntegration()
         8   -> turnPinHigh(NamedOutputPin *)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant "CS@%s updateCount=%d">
      12  ?<Constant "DD int/hold">
       4  ?<Constant "HIP">
      36  ?<Constant "Starting HIP9011/TPIC...">
      32  ?<Constant "band_index=%d gain %f...">
      52  ?<Constant "enabled=%s state=%d b...">
      40  ?<Constant "hip %fv@%s/max=%f spi...">
       8  ?<Constant "hip CS">
      16  ?<Constant "hip int/hold">
      28  ?<Constant "hip9011 driver not ac...">
      16  ?<Constant "hip9011 init">
       8  ?<Constant "hipinfo">
      72  ?<Constant "integrator index=%d k...">
      12  ?<Constant "set_band">
      12  ?<Constant "set_gain">
      24  ?<Constant "set_hip_prescalerandsdo">
      20  ?<Constant "set_knock_threshold">
      24  ?<Constant "set_max_knock_sub_deg">
      36  ?<Constant "spi= IntHold@%s respo...">
      16  ?<Constant "start %f end %f">
       4  ??DataTable13
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_10
       4  ??DataTable16_11
       4  ??DataTable16_12
       4  ??DataTable16_13
       4  ??DataTable16_14
       4  ??DataTable16_15
       4  ??DataTable16_16
       4  ??DataTable16_17
       4  ??DataTable16_18
       4  ??DataTable16_19
       4  ??DataTable16_2
       4  ??DataTable16_20
       4  ??DataTable16_21
       4  ??DataTable16_22
       4  ??DataTable16_23
       4  ??DataTable16_24
       4  ??DataTable16_25
       4  ??DataTable16_26
       4  ??DataTable16_27
       4  ??DataTable16_28
       4  ??DataTable16_29
       4  ??DataTable16_3
       4  ??DataTable16_30
       4  ??DataTable16_31
       4  ??DataTable16_32
       4  ??DataTable16_33
       4  ??DataTable16_34
       4  ??DataTable16_35
       4  ??DataTable16_36
       4  ??DataTable16_37
       4  ??DataTable16_38
       4  ??DataTable16_39
       4  ??DataTable16_4
       4  ??DataTable16_40
       4  ??DataTable16_41
       4  ??DataTable16_42
       4  ??DataTable16_43
       4  ??DataTable16_44
       4  ??DataTable16_45
       4  ??DataTable16_46
       4  ??DataTable16_47
       4  ??DataTable16_48
       4  ??DataTable16_49
       4  ??DataTable16_5
       4  ??DataTable16_50
       4  ??DataTable16_51
       4  ??DataTable16_52
       4  ??DataTable16_53
       4  ??DataTable16_54
       4  ??DataTable16_55
       4  ??DataTable16_56
       4  ??DataTable16_57
       4  ??DataTable16_58
       4  ??DataTable16_59
       4  ??DataTable16_6
       4  ??DataTable16_60
       4  ??DataTable16_61
       4  ??DataTable16_62
       4  ??DataTable16_7
       4  ??DataTable16_8
       4  ??DataTable16_9
       4  ??DataTable2
       4  ??DataTable3
       4  ??DataTable3_1
      54  __sti__routine()
       4  currentAngleWindowWidth
       4  currentBandIndex
       4  currentGainIndex
       4  currentIntergratorIndex
       4  currentPrescaler
       4  driver
      30  endIntegration()
      24  endOfSpiExchange(SPIDriver *)
      48  endTimer
      68  getBand()
      28  getBandIndex()
     552  hipAdcCallback(uint16_t)
      16  hipCs
       4  hipLastExecutionCount
     312  hipStartupCode()
      40  hipThread(void *)
     712  hipTreadStack
       4  hipValueMax
     250  initHip9011(Logging *)
      20  intHold
     198  intHoldCallback(trigger_event_e, uint32_t)
       4  knockVolts
       4  logger
       1  needToInit
       4  nonZeroResponse
      16  pinNameBuffer
       1  rx_buff
      30  setBand(float)
      30  setGain(float)
     150  setHip9011FrankensoPinout()
      34  setKnockThresh(float)
      34  setMaxKnockSubDeg(int)
      12  setPrescalerAndSDO(int)
       4  settingUpdateCount
     512  showHipInfo()
       4  spiCount
      12  spicfg
      30  startIntegration()
      48  startTimer
       1  state
       1  tx_buff
       4  -- Other

 
   903 bytes in section .bss
    25 bytes in section .data
     4 bytes in section .init_array
   492 bytes in section .rodata
 2 656 bytes in section .text
 
 2 660 bytes of CODE  memory
   492 bytes of CONST memory
   928 bytes of DATA  memory

Errors: none
Warnings: 3
