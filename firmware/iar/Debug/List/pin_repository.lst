###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:57 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\hw_layer\pin_rep #
#                       ository.cpp                                           #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\hw_layer\pin_rep #
#                       ository.cpp -lCN F:\stuff\rusefi_sourceforge\firmware #
#                       \iar\Debug\List\ -lA F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\Debug\List\ -o F:\stuff\rusefi_sourceforge\f #
#                       irmware\iar\Debug\Obj\ --no_cse --no_unroll           #
#                       --no_inline --no_code_motion --no_tbaa                #
#                       --no_clustering --no_scheduling --debug               #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\p #
#                       in_repository.lst                                     #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\pi #
#                       n_repository.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\hw_layer\pin_repository.cpp
      1          /**
      2           * @file    pin_repository.cpp
      3           * @brief   I/O pin registry code
      4           *
      5           * This job of this class is to make sure that we are not using same hardware pin for two
      6           * different purposes.
      7           *
      8           * @date Jan 15, 2013
      9           * @author Andrey Belomutskiy, (c) 2012-2015
     10           */
     11          
     12          #include "main.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void chprintf(BaseSequentialStream *, char const *, ...)
   \                     _Z8chprintfP20BaseSequentialStreamPKcz:
   \   00000000   0xB40C             PUSH     {R2,R3}
   \   00000002   0xB570             PUSH     {R4-R6,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0xA804             ADD      R0,SP,#+16
   \   0000000A   0x0006             MOVS     R6,R0
   \   0000000C   0x0032             MOVS     R2,R6
   \   0000000E   0x0029             MOVS     R1,R5
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       chvprintf
   \   00000016   0xBC70             POP      {R4-R6}
   \   00000018   0xF85D 0xFB0C      LDR      PC,[SP], #+12    ;; return
     13          #include "pin_repository.h"
     14          #include "eficonsole.h"
     15          #include "memstreams.h"
     16          #include "chprintf.h"
     17          #include "rusefi.h"
     18          
     19          #define PIN_REPO_SIZE 7 * PORT_SIZE

   \                                 In section .bss, align 4
     20          const char *PIN_USED[PIN_REPO_SIZE];
   \                     PIN_USED:
   \   00000000                      DS8 448

   \                                 In section .bss, align 4
     21          static int initialized = FALSE;
   \                     initialized:
   \   00000000                      DS8 4
     22          

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine:
   \   00000000   0xB580             PUSH     {R7,LR}
     23          static LoggingWithStorage logger("pin repos");
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable12_1
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000000A   0x.... 0x....      BL       _ZN18LoggingWithStorageC1EPKc
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     logger:
   \   00000000                      DS8 260

   \                                 In section .bss, align 4
     24          static int totalPinsUsed = 0;
   \                     totalPinsUsed:
   \   00000000                      DS8 4
     25          

   \                                 In section .data, align 4
     26          static GPIO_TypeDef* ports[7] = {GPIOA,
   \                     ports:
   \   00000000   0x40020000         DC32 40020000H, 40020400H, 40020800H, 40020C00H, 40021000H, 40021400H
   \              0x40020400   
   \              0x40020800   
   \              0x40020C00   
   \              0x40021000   
   \              0x40021400   
   \   00000018   0x40021C00         DC32 40021C00H
     27          		GPIOB,
     28          		GPIOC,
     29          		GPIOD,
     30          		GPIOE,
     31          		GPIOF,
     32          		GPIOH,
     33          };
     34          
     35          /**
     36           * @deprecated - use hwPortname() instead
     37           */

   \                                 In section .text, align 2, keep-with-next
     38          const char *portname(GPIO_TypeDef* GPIOx) {
   \                     _Z8portnameP12GPIO_TypeDef:
   \   00000000   0x0001             MOVS     R1,R0
     39          	if (GPIOx == GPIOA)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable12_3  ;; 0x40020000
   \   00000006   0x4281             CMP      R1,R0
   \   00000008   0xD101             BNE.N    ??portname_0
     40          		return "PA";
   \   0000000A   0x....             ADR.N    R0,??DataTable7  ;; 0x50, 0x41, 0x00, 0x00
   \   0000000C   0xE025             B.N      ??portname_1
     41          	if (GPIOx == GPIOB)
   \                     ??portname_0:
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable12_4  ;; 0x40020400
   \   00000012   0x4281             CMP      R1,R0
   \   00000014   0xD101             BNE.N    ??portname_2
     42          		return "PB";
   \   00000016   0x....             ADR.N    R0,??DataTable7_1  ;; 0x50, 0x42, 0x00, 0x00
   \   00000018   0xE01F             B.N      ??portname_1
     43          	if (GPIOx == GPIOC)
   \                     ??portname_2:
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable12_5  ;; 0x40020800
   \   0000001E   0x4281             CMP      R1,R0
   \   00000020   0xD101             BNE.N    ??portname_3
     44          		return "PC";
   \   00000022   0x....             ADR.N    R0,??DataTable7_2  ;; 0x50, 0x43, 0x00, 0x00
   \   00000024   0xE019             B.N      ??portname_1
     45          	if (GPIOx == GPIOD)
   \                     ??portname_3:
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable12_6  ;; 0x40020c00
   \   0000002A   0x4281             CMP      R1,R0
   \   0000002C   0xD101             BNE.N    ??portname_4
     46          		return "PD";
   \   0000002E   0x....             ADR.N    R0,??DataTable7_3  ;; 0x50, 0x44, 0x00, 0x00
   \   00000030   0xE013             B.N      ??portname_1
     47          #if defined(STM32F4XX)
     48          	if (GPIOx == GPIOE)
   \                     ??portname_4:
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable12_7  ;; 0x40021000
   \   00000036   0x4281             CMP      R1,R0
   \   00000038   0xD101             BNE.N    ??portname_5
     49          		return "PE";
   \   0000003A   0x....             ADR.N    R0,??DataTable7_4  ;; 0x50, 0x45, 0x00, 0x00
   \   0000003C   0xE00D             B.N      ??portname_1
     50          	if (GPIOx == GPIOH)
   \                     ??portname_5:
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable12_8  ;; 0x40021c00
   \   00000042   0x4281             CMP      R1,R0
   \   00000044   0xD101             BNE.N    ??portname_6
     51          		return "PH";
   \   00000046   0x....             ADR.N    R0,??DataTable8  ;; 0x50, 0x48, 0x00, 0x00
   \   00000048   0xE007             B.N      ??portname_1
     52          #endif
     53          	if (GPIOx == GPIOF)
   \                     ??portname_6:
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable12_9  ;; 0x40021400
   \   0000004E   0x4281             CMP      R1,R0
   \   00000050   0xD101             BNE.N    ??portname_7
     54          		return "PF";
   \   00000052   0x....             ADR.N    R0,??DataTable8_1  ;; 0x50, 0x46, 0x00, 0x00
   \   00000054   0xE001             B.N      ??portname_1
     55          	return "unknown";
   \                     ??portname_7:
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \                     ??portname_1:
   \   0000005A   0x4770             BX       LR               ;; return
     56          }
     57          

   \                                 In section .text, align 2, keep-with-next
     58          static int getPortIndex(GPIO_TypeDef* port) {
   \                     _Z12getPortIndexP12GPIO_TypeDef:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     59          	if (port == GPIOA)
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable12_3  ;; 0x40020000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD101             BNE.N    ??getPortIndex_0
     60          		return 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xE029             B.N      ??getPortIndex_1
     61          	if (port == GPIOB)
   \                     ??getPortIndex_0:
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable12_4  ;; 0x40020400
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD101             BNE.N    ??getPortIndex_2
     62          		return 1;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xE023             B.N      ??getPortIndex_1
     63          	if (port == GPIOC)
   \                     ??getPortIndex_2:
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable12_5  ;; 0x40020800
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD101             BNE.N    ??getPortIndex_3
     64          		return 2;
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0xE01D             B.N      ??getPortIndex_1
     65          	if (port == GPIOD)
   \                     ??getPortIndex_3:
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable12_6  ;; 0x40020c00
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD101             BNE.N    ??getPortIndex_4
     66          		return 3;
   \   00000030   0x2003             MOVS     R0,#+3
   \   00000032   0xE017             B.N      ??getPortIndex_1
     67          #if defined(STM32F4XX)
     68          	if (port == GPIOE)
   \                     ??getPortIndex_4:
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable12_7  ;; 0x40021000
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD101             BNE.N    ??getPortIndex_5
     69          		return 4;
   \   0000003C   0x2004             MOVS     R0,#+4
   \   0000003E   0xE011             B.N      ??getPortIndex_1
     70          #endif /* defined(STM32F4XX) */
     71          	if (port == GPIOF)
   \                     ??getPortIndex_5:
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable12_9  ;; 0x40021400
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD101             BNE.N    ??getPortIndex_6
     72          		return 5;
   \   00000048   0x2005             MOVS     R0,#+5
   \   0000004A   0xE00B             B.N      ??getPortIndex_1
     73          #if defined(STM32F4XX)
     74          	if (port == GPIOH)
   \                     ??getPortIndex_6:
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable12_8  ;; 0x40021c00
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xD101             BNE.N    ??getPortIndex_7
     75          		return 6;
   \   00000054   0x2006             MOVS     R0,#+6
   \   00000056   0xE005             B.N      ??getPortIndex_1
     76          #endif /* defined(STM32F4XX) */
     77          	firmwareError("portindex");
   \                     ??getPortIndex_7:
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable12_11
   \   0000005C   0x.... 0x....      BL       firmwareError
     78          	return -1;
   \   00000060   0xF05F 0x30FF      MOVS     R0,#-1
   \                     ??getPortIndex_1:
   \   00000064   0xBD10             POP      {R4,PC}          ;; return
     79          }
     80          

   \                                 In section .text, align 2, keep-with-next
     81          static void reportPins(void) {
   \                     _Z10reportPinsv:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
     82          	for (int i = 0; i < PIN_REPO_SIZE; i++) {
   \   00000006   0x2400             MOVS     R4,#+0
   \                     ??reportPins_0:
   \   00000008   0x2C70             CMP      R4,#+112
   \   0000000A   0xDA1E             BGE.N    ??reportPins_1
     83          		const char *name = PIN_USED[i];
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable12_12
   \   00000010   0xF850 0x5024      LDR      R5,[R0, R4, LSL #+2]
     84          		int portIndex = i / PORT_SIZE;
   \   00000014   0x2010             MOVS     R0,#+16
   \   00000016   0xFB94 0xF6F0      SDIV     R6,R4,R0
     85          		int pin = i % PORT_SIZE;
   \   0000001A   0x2010             MOVS     R0,#+16
   \   0000001C   0xFB94 0xF7F0      SDIV     R7,R4,R0
   \   00000020   0xFB07 0x4710      MLS      R7,R7,R0,R4
     86          		GPIO_TypeDef* port = ports[portIndex];
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable12_13
   \   00000028   0xF850 0x8026      LDR      R8,[R0, R6, LSL #+2]
     87          		if (name != NULL) {
   \   0000002C   0x2D00             CMP      R5,#+0
   \   0000002E   0xD00A             BEQ.N    ??reportPins_2
     88          			scheduleMsg(&logger, "pin %s%d: %s", portname(port), pin, name);
   \   00000030   0x4640             MOV      R0,R8
   \   00000032   0x.... 0x....      BL       _Z8portnameP12GPIO_TypeDef
   \   00000036   0x9500             STR      R5,[SP, #+0]
   \   00000038   0x003B             MOVS     R3,R7
   \   0000003A   0x0002             MOVS     R2,R0
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable12_14
   \   00000040   0x....             LDR.N    R0,??DataTable12_2
   \   00000042   0x.... 0x....      BL       scheduleMsg
     89          		}
     90          	}
   \                     ??reportPins_2:
   \   00000046   0x1C64             ADDS     R4,R4,#+1
   \   00000048   0xE7DE             B.N      ??reportPins_0
     91          
     92          	scheduleMsg(&logger, "Total pins count: %d", totalPinsUsed);
   \                     ??reportPins_1:
   \   0000004A   0x....             LDR.N    R0,??DataTable12_15
   \   0000004C   0x6802             LDR      R2,[R0, #+0]
   \   0000004E   0x....             LDR.N    R1,??DataTable12_16
   \   00000050   0x....             LDR.N    R0,??DataTable12_2
   \   00000052   0x.... 0x....      BL       scheduleMsg
     93          }
   \   00000056   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return
     94          

   \                                 In section .bss, align 4
     95          static MemoryStream portNameStream;
   \                     portNameStream:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     96          static char portNameBuffer[20];
   \                     portNameBuffer:
   \   00000000                      DS8 20
     97          
     98          /**
     99           * Parse string representation of physical pin into brain_pin_e ordinal.
    100           *
    101           * @return GPIO_UNASSIGNED for "none", GPIO_INVALID for invalid entry
    102           */

   \                                 In section .text, align 2, keep-with-next
    103          brain_pin_e parseBrainPin(const char *str) {
   \                     _Z13parseBrainPinPKc:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    104          	if (strEqual(str, "none"))
   \   00000004   0x....             LDR.N    R1,??DataTable12_17
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       strEqual
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD001             BEQ.N    ??parseBrainPin_0
    105          		return GPIO_UNASSIGNED;
   \   00000010   0x2050             MOVS     R0,#+80
   \   00000012   0xE027             B.N      ??parseBrainPin_1
    106          	// todo: create method toLowerCase?
    107          	if (str[0] != 'p' && str[0] != 'P') {
   \                     ??parseBrainPin_0:
   \   00000014   0x7820             LDRB     R0,[R4, #+0]
   \   00000016   0x2870             CMP      R0,#+112
   \   00000018   0xD004             BEQ.N    ??parseBrainPin_2
   \   0000001A   0x7820             LDRB     R0,[R4, #+0]
   \   0000001C   0x2850             CMP      R0,#+80
   \   0000001E   0xD001             BEQ.N    ??parseBrainPin_2
    108          		return GPIO_INVALID;
   \   00000020   0x2051             MOVS     R0,#+81
   \   00000022   0xE01F             B.N      ??parseBrainPin_1
    109          	}
    110          	char port = str[1];
   \                     ??parseBrainPin_2:
   \   00000024   0x7865             LDRB     R5,[R4, #+1]
    111          	brain_pin_e basePin;
    112          	if (port >= 'a' && port <= 'z') {
   \   00000026   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000028   0x2D61             CMP      R5,#+97
   \   0000002A   0xDB08             BLT.N    ??parseBrainPin_3
   \   0000002C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002E   0x2D7B             CMP      R5,#+123
   \   00000030   0xDA05             BGE.N    ??parseBrainPin_3
    113          		basePin = (brain_pin_e) ((int) GPIOA_0 + 16 * (port - 'a'));
   \   00000032   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000034   0xF1B5 0x0061      SUBS     R0,R5,#+97
   \   00000038   0x0100             LSLS     R0,R0,#+4
   \   0000003A   0x0006             MOVS     R6,R0
   \   0000003C   0xE00D             B.N      ??parseBrainPin_4
    114          	} else if (port >= 'A' && port <= 'Z') {
   \                     ??parseBrainPin_3:
   \   0000003E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000040   0x2D41             CMP      R5,#+65
   \   00000042   0xDB08             BLT.N    ??parseBrainPin_5
   \   00000044   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000046   0x2D5B             CMP      R5,#+91
   \   00000048   0xDA05             BGE.N    ??parseBrainPin_5
    115          		basePin = (brain_pin_e) ((int) GPIOA_0 + 16 * (port - 'A'));
   \   0000004A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004C   0xF1B5 0x0041      SUBS     R0,R5,#+65
   \   00000050   0x0100             LSLS     R0,R0,#+4
   \   00000052   0x0006             MOVS     R6,R0
   \   00000054   0xE001             B.N      ??parseBrainPin_4
    116          	} else {
    117          		return GPIO_INVALID;
   \                     ??parseBrainPin_5:
   \   00000056   0x2051             MOVS     R0,#+81
   \   00000058   0xE004             B.N      ??parseBrainPin_1
    118          	}
    119          	const char *pinStr = str + 2;
   \                     ??parseBrainPin_4:
   \   0000005A   0x1CA7             ADDS     R7,R4,#+2
    120          	int pin = atoi(pinStr);
   \   0000005C   0x0038             MOVS     R0,R7
   \   0000005E   0x.... 0x....      BL       atoi
    121          	return (brain_pin_e)(basePin + pin);
   \   00000062   0x1980             ADDS     R0,R0,R6
   \                     ??parseBrainPin_1:
   \   00000064   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    122          }
    123          

   \                                 In section .text, align 2, keep-with-next
    124          const char *hwPortname(brain_pin_e brainPin) {
   \                     _Z10hwPortname11brain_pin_e:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    125          	if (brainPin == GPIO_INVALID) {
   \   00000004   0x2C51             CMP      R4,#+81
   \   00000006   0xD101             BNE.N    ??hwPortname_0
    126          		return "INVALID";
   \   00000008   0x....             LDR.N    R0,??DataTable12_18
   \   0000000A   0xE01E             B.N      ??hwPortname_1
    127          	}
    128          	GPIO_TypeDef *hwPort = getHwPort(brainPin);
   \                     ??hwPortname_0:
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       _Z9getHwPort11brain_pin_e
   \   00000012   0x0005             MOVS     R5,R0
    129          	if (hwPort == GPIO_NULL) {
   \   00000014   0x2D00             CMP      R5,#+0
   \   00000016   0xD101             BNE.N    ??hwPortname_2
    130          		return "NONE";
   \   00000018   0x....             LDR.N    R0,??DataTable12_19
   \   0000001A   0xE016             B.N      ??hwPortname_1
    131          	}
    132          	int hwPin = getHwPin(brainPin);
   \                     ??hwPortname_2:
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      BL       _Z8getHwPin11brain_pin_e
   \   00000022   0x0006             MOVS     R6,R0
    133          	portNameStream.eos = 0; // reset
   \   00000024   0x....             LDR.N    R0,??DataTable12_20
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x60C1             STR      R1,[R0, #+12]
    134          	chprintf((BaseSequentialStream *) &portNameStream, "%s%d", portname(hwPort), hwPin);
   \   0000002A   0x0028             MOVS     R0,R5
   \   0000002C   0x.... 0x....      BL       _Z8portnameP12GPIO_TypeDef
   \   00000030   0x0033             MOVS     R3,R6
   \   00000032   0x0002             MOVS     R2,R0
   \   00000034   0x....             LDR.N    R1,??DataTable12_21
   \   00000036   0x....             LDR.N    R0,??DataTable12_20
   \   00000038   0x.... 0x....      BL       _Z8chprintfP20BaseSequentialStreamPKcz
    135          	portNameStream.buffer[portNameStream.eos] = 0; // need to terminate explicitly
   \   0000003C   0x....             LDR.N    R0,??DataTable12_20
   \   0000003E   0x68C0             LDR      R0,[R0, #+12]
   \   00000040   0x....             LDR.N    R1,??DataTable12_20
   \   00000042   0x6849             LDR      R1,[R1, #+4]
   \   00000044   0x2200             MOVS     R2,#+0
   \   00000046   0x5442             STRB     R2,[R0, R1]
    136          	return portNameBuffer;
   \   00000048   0x....             LDR.N    R0,??DataTable12_22
   \                     ??hwPortname_1:
   \   0000004A   0xBD70             POP      {R4-R6,PC}       ;; return
    137          }
    138          

   \                                 In section .text, align 2, keep-with-next
    139          void initPinRepository(void) {
   \                     _Z17initPinRepositoryv:
   \   00000000   0xB580             PUSH     {R7,LR}
    140          	/**
    141          	 * this method cannot use console because this method is invoked before console is initialized
    142          	 */
    143          
    144          	msObjectInit(&portNameStream, (uint8_t*) portNameBuffer, sizeof(portNameBuffer), 0);
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2214             MOVS     R2,#+20
   \   00000006   0x....             LDR.N    R1,??DataTable12_22
   \   00000008   0x....             LDR.N    R0,??DataTable12_20
   \   0000000A   0x.... 0x....      BL       msObjectInit
    145          
    146          	for (int i = 0; i < PIN_REPO_SIZE; i++)
   \   0000000E   0x2000             MOVS     R0,#+0
   \                     ??initPinRepository_0:
   \   00000010   0x2870             CMP      R0,#+112
   \   00000012   0xDA05             BGE.N    ??initPinRepository_1
    147          		PIN_USED[i] = 0;
   \   00000014   0x....             LDR.N    R1,??DataTable12_12
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0xE7F7             B.N      ??initPinRepository_0
    148          	initialized = true;
   \                     ??initPinRepository_1:
   \   00000020   0x....             LDR.N    R0,??DataTable12_23
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x6001             STR      R1,[R0, #+0]
    149          	addConsoleAction("pins", reportPins);
   \   00000026   0x....             LDR.N    R1,??DataTable12_24
   \   00000028   0x....             LDR.N    R0,??DataTable12_25
   \   0000002A   0x.... 0x....      BL       addConsoleAction
    150          }
   \   0000002E   0xBD01             POP      {R0,PC}          ;; return
    151          

   \                                 In section .text, align 2, keep-with-next
    152          static inline void markUsed(int index, const char *msg) {
    153          	PIN_USED[index] = msg;
   \                     _Z8markUsediPKc:
   \   00000000   0x....             LDR.N    R2,??DataTable12_12
   \   00000002   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    154          	totalPinsUsed++;
   \   00000006   0x....             LDR.N    R2,??DataTable12_15
   \   00000008   0x6812             LDR      R2,[R2, #+0]
   \   0000000A   0x1C52             ADDS     R2,R2,#+1
   \   0000000C   0x....             LDR.N    R3,??DataTable12_15
   \   0000000E   0x601A             STR      R2,[R3, #+0]
    155          }
   \   00000010   0x4770             BX       LR               ;; return
    156          

   \                                 In section .text, align 2, keep-with-next
    157          void mySetPadMode2(const char *msg, brain_pin_e pin, iomode_t mode) {
   \                     _Z13mySetPadMode2PKc11brain_pin_ej:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    158          	mySetPadMode(msg, getHwPort(pin), getHwPin(pin), mode);
   \   00000008   0x0028             MOVS     R0,R5
   \   0000000A   0x.... 0x....      BL       _Z8getHwPin11brain_pin_e
   \   0000000E   0x0007             MOVS     R7,R0
   \   00000010   0x0028             MOVS     R0,R5
   \   00000012   0x.... 0x....      BL       _Z9getHwPort11brain_pin_e
   \   00000016   0x0033             MOVS     R3,R6
   \   00000018   0x003A             MOVS     R2,R7
   \   0000001A   0x0001             MOVS     R1,R0
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      BL       _Z12mySetPadModePKcP12GPIO_TypeDefjj
    159          }
   \   00000022   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    160          

   \                                 In section .text, align 2, keep-with-next
    161          iomode_t getInputMode(pin_input_mode_e mode) {
   \                     _Z12getInputMode16pin_input_mode_e:
   \   00000000   0x0001             MOVS     R1,R0
    162          	switch (mode) {
   \   00000002   0x0008             MOVS     R0,R1
   \   00000004   0x2801             CMP      R0,#+1
   \   00000006   0xD002             BEQ.N    ??getInputMode_0
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xD002             BEQ.N    ??getInputMode_1
   \   0000000C   0xE003             B.N      ??getInputMode_2
    163          	case PI_PULLUP:
    164          		return PAL_MODE_INPUT_PULLUP;
   \                     ??getInputMode_0:
   \   0000000E   0x2020             MOVS     R0,#+32
   \   00000010   0xE002             B.N      ??getInputMode_3
    165          	case PI_PULLDOWN:
    166          		return PAL_MODE_INPUT_PULLDOWN;
   \                     ??getInputMode_1:
   \   00000012   0x2040             MOVS     R0,#+64
   \   00000014   0xE000             B.N      ??getInputMode_3
    167          	case PI_DEFAULT:
    168          	default:
    169          		return PAL_MODE_INPUT;
   \                     ??getInputMode_2:
   \   00000016   0x2000             MOVS     R0,#+0
   \                     ??getInputMode_3:
   \   00000018   0x4770             BX       LR               ;; return
    170          	}
    171          }
    172          

   \                                 In section .text, align 2, keep-with-next
    173          static int getIndex(ioportid_t port, ioportmask_t pin) {
   \                     _Z8getIndexP12GPIO_TypeDefj:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    174          	int portIndex = getPortIndex(port);
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       _Z12getPortIndexP12GPIO_TypeDef
    175          	return portIndex * PORT_SIZE + pin;
   \   0000000C   0xEB15 0x1000      ADDS     R0,R5,R0, LSL #+4
   \   00000010   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    176          }
    177          

   \                                 In section .text, align 2, keep-with-next
    178          const char * getPinFunction(brain_input_pin_e brainPin) {
   \                     _Z14getPinFunction11brain_pin_e:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    179          	ioportid_t port = getHwPort(brainPin);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _Z9getHwPort11brain_pin_e
   \   0000000A   0x0005             MOVS     R5,R0
    180          	ioportmask_t pin = getHwPin(brainPin);
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       _Z8getHwPin11brain_pin_e
   \   00000012   0x0006             MOVS     R6,R0
    181          
    182          	int index = getIndex(port, pin);
   \   00000014   0x0031             MOVS     R1,R6
   \   00000016   0x0028             MOVS     R0,R5
   \   00000018   0x.... 0x....      BL       _Z8getIndexP12GPIO_TypeDefj
    183          	return PIN_USED[index];
   \   0000001C   0x....             LDR.N    R1,??DataTable12_12
   \   0000001E   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   00000022   0xBD70             POP      {R4-R6,PC}       ;; return
    184          }
    185          
    186          /**
    187           * This method would set an error condition if pin is already used
    188           */

   \                                 In section .text, align 2, keep-with-next
    189          void mySetPadMode(const char *msg, ioportid_t port, ioportmask_t pin, iomode_t mode) {
   \                     _Z12mySetPadModePKcP12GPIO_TypeDefjj:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
    190          	if (!initialized) {
   \   0000000E   0x....             LDR.N    R0,??DataTable12_23
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD103             BNE.N    ??mySetPadMode_0
    191          		firmwareError("repository not initialized");
   \   00000016   0x....             LDR.N    R0,??DataTable12_26
   \   00000018   0x.... 0x....      BL       firmwareError
    192          		return;
   \   0000001C   0xE040             B.N      ??mySetPadMode_1
    193          	}
    194          	if (port == GPIO_NULL)
   \                     ??mySetPadMode_0:
   \   0000001E   0x2D00             CMP      R5,#+0
   \   00000020   0xD03E             BEQ.N    ??mySetPadMode_1
    195          		return;
    196          	print("%s on %s:%d\r\n", msg, portname(port), pin);
   \                     ??mySetPadMode_2:
   \   00000022   0x0028             MOVS     R0,R5
   \   00000024   0x.... 0x....      BL       _Z8portnameP12GPIO_TypeDef
   \   00000028   0x0033             MOVS     R3,R6
   \   0000002A   0x0002             MOVS     R2,R0
   \   0000002C   0x0021             MOVS     R1,R4
   \   0000002E   0x....             LDR.N    R0,??DataTable12_27
   \   00000030   0x.... 0x....      BL       print
    197          
    198          	appendPrintf(&logger, "msg,%s", msg);
   \   00000034   0x0022             MOVS     R2,R4
   \   00000036   0x....             LDR.N    R1,??DataTable12_28
   \   00000038   0x....             LDR.N    R0,??DataTable12_2
   \   0000003A   0x.... 0x....      BL       appendPrintf
    199          	appendPrintf(&logger, " on %s%d%s", portname(port), pin, DELIMETER);
   \   0000003E   0x0028             MOVS     R0,R5
   \   00000040   0x.... 0x....      BL       _Z8portnameP12GPIO_TypeDef
   \   00000044   0x0002             MOVS     R2,R0
   \   00000046   0x....             ADR.N    R0,??DataTable12  ;; ","
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x0033             MOVS     R3,R6
   \   0000004C   0x....             LDR.N    R1,??DataTable12_29
   \   0000004E   0x....             LDR.N    R0,??DataTable12_2
   \   00000050   0x.... 0x....      BL       appendPrintf
    200          	printLine(&logger);
   \   00000054   0x....             LDR.N    R0,??DataTable12_2
   \   00000056   0x.... 0x....      BL       printLine
    201          
    202          	int index = getIndex(port, pin);
   \   0000005A   0x0031             MOVS     R1,R6
   \   0000005C   0x0028             MOVS     R0,R5
   \   0000005E   0x.... 0x....      BL       _Z8getIndexP12GPIO_TypeDefj
   \   00000062   0x4680             MOV      R8,R0
    203          
    204          	if (PIN_USED[index] != NULL) {
   \   00000064   0x....             LDR.N    R0,??DataTable12_12
   \   00000066   0xF850 0x0028      LDR      R0,[R0, R8, LSL #+2]
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xD00D             BEQ.N    ??mySetPadMode_3
    205          		/**
    206          		 * todo: the problem is that this warning happens before the console is even
    207          		 * connected, so the warning is never displayed on the console and that's quite a problem!
    208          		 */
    209          //		warning(OBD_PCM_Processor_Fault, "%s%d req by %s used by %s", portname(port), pin, msg, PIN_USED[index]);
    210          		firmwareError("%s%d req by %s used by %s", portname(port), pin, msg, PIN_USED[index]);
   \   0000006E   0x0028             MOVS     R0,R5
   \   00000070   0x.... 0x....      BL       _Z8portnameP12GPIO_TypeDef
   \   00000074   0x0001             MOVS     R1,R0
   \   00000076   0x....             LDR.N    R0,??DataTable12_12
   \   00000078   0xF850 0x0028      LDR      R0,[R0, R8, LSL #+2]
   \   0000007C   0x9000             STR      R0,[SP, #+0]
   \   0000007E   0x0023             MOVS     R3,R4
   \   00000080   0x0032             MOVS     R2,R6
   \   00000082   0x....             LDR.N    R0,??DataTable12_30
   \   00000084   0x.... 0x....      BL       firmwareError
    211          		return;
   \   00000088   0xE00A             B.N      ??mySetPadMode_1
    212          	}
    213          	markUsed(index, msg);
   \                     ??mySetPadMode_3:
   \   0000008A   0x0021             MOVS     R1,R4
   \   0000008C   0x4640             MOV      R0,R8
   \   0000008E   0x.... 0x....      BL       _Z8markUsediPKc
    214          
    215          	palSetPadMode(port, pin, mode);
   \   00000092   0x003A             MOVS     R2,R7
   \   00000094   0x2001             MOVS     R0,#+1
   \   00000096   0xFA10 0xF106      LSLS     R1,R0,R6
   \   0000009A   0x0028             MOVS     R0,R5
   \   0000009C   0x.... 0x....      BL       _pal_lld_setgroupmode
    216          }
   \                     ??mySetPadMode_1:
   \   000000A0   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return
    217          

   \                                 In section .text, align 2, keep-with-next
    218          void unmarkPin(brain_pin_e brainPin) {
   \                     _Z9unmarkPin11brain_pin_e:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    219          	ioportid_t port = getHwPort(brainPin);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _Z9getHwPort11brain_pin_e
   \   0000000A   0x0005             MOVS     R5,R0
    220          	ioportmask_t pin = getHwPin(brainPin);
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       _Z8getHwPin11brain_pin_e
   \   00000012   0x0006             MOVS     R6,R0
    221          
    222          	int index = getIndex(port, pin);
   \   00000014   0x0031             MOVS     R1,R6
   \   00000016   0x0028             MOVS     R0,R5
   \   00000018   0x.... 0x....      BL       _Z8getIndexP12GPIO_TypeDefj
    223          
    224          	if (PIN_USED[index] != NULL) {
   \   0000001C   0x....             LDR.N    R1,??DataTable12_12
   \   0000001E   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000022   0x2900             CMP      R1,#+0
   \   00000024   0xD008             BEQ.N    ??unmarkPin_0
    225          		PIN_USED[index] = NULL;
   \   00000026   0x....             LDR.N    R1,??DataTable12_12
   \   00000028   0x2200             MOVS     R2,#+0
   \   0000002A   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
    226          		totalPinsUsed--;
   \   0000002E   0x....             LDR.N    R1,??DataTable12_15
   \   00000030   0x6809             LDR      R1,[R1, #+0]
   \   00000032   0x1E49             SUBS     R1,R1,#+1
   \   00000034   0x....             LDR.N    R2,??DataTable12_15
   \   00000036   0x6011             STR      R1,[R2, #+0]
    227          	}
    228          }
   \                     ??unmarkPin_0:
   \   00000038   0xBD70             POP      {R4-R6,PC}       ;; return
    229          
    230          /**
    231           * This method would crash the program if pin is already in use
    232           */

   \                                 In section .text, align 2, keep-with-next
    233          void registedFundamentralIoPin(char *msg, ioportid_t port, ioportmask_t pin, iomode_t mode) {
   \                     _Z25registedFundamentralIoPinPcP12GPIO_TypeDefjj:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    234          	efiAssertVoid(initialized, "repo not initialized");
   \   0000000C   0x....             LDR.N    R0,??DataTable12_23
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD103             BNE.N    ??registedFundamentralIoPin_0
   \   00000014   0x....             LDR.N    R0,??DataTable12_31
   \   00000016   0x.... 0x....      BL       firmwareError
   \   0000001A   0xE023             B.N      ??registedFundamentralIoPin_1
    235          
    236          	int index = getIndex(port, pin);
   \                     ??registedFundamentralIoPin_0:
   \   0000001C   0x0031             MOVS     R1,R6
   \   0000001E   0x0028             MOVS     R0,R5
   \   00000020   0x.... 0x....      BL       _Z8getIndexP12GPIO_TypeDefj
   \   00000024   0x4680             MOV      R8,R0
    237          
    238          	if (PIN_USED[index] != NULL) {
   \   00000026   0x....             LDR.N    R0,??DataTable12_12
   \   00000028   0xF850 0x0028      LDR      R0,[R0, R8, LSL #+2]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD00E             BEQ.N    ??registedFundamentralIoPin_2
    239          		print("!!!!!!!!!!!!! Already used [%s] %d\r\n", msg, pin);
   \   00000030   0x0032             MOVS     R2,R6
   \   00000032   0x0021             MOVS     R1,R4
   \   00000034   0x....             LDR.N    R0,??DataTable12_32
   \   00000036   0x.... 0x....      BL       print
    240          		print("!!!!!!!!!!!!! Already used by [%s]\r\n", PIN_USED[index]);
   \   0000003A   0x....             LDR.N    R0,??DataTable12_12
   \   0000003C   0xF850 0x1028      LDR      R1,[R0, R8, LSL #+2]
   \   00000040   0x....             LDR.N    R0,??DataTable12_33
   \   00000042   0x.... 0x....      BL       print
    241          		firmwareError("pin already used");
   \   00000046   0x....             LDR.N    R0,??DataTable12_34
   \   00000048   0x.... 0x....      BL       firmwareError
    242          		return;
   \   0000004C   0xE00A             B.N      ??registedFundamentralIoPin_1
    243          	}
    244          	markUsed(index, msg);
   \                     ??registedFundamentralIoPin_2:
   \   0000004E   0x0021             MOVS     R1,R4
   \   00000050   0x4640             MOV      R0,R8
   \   00000052   0x.... 0x....      BL       _Z8markUsediPKc
    245          	palSetPadMode(port, pin, mode);
   \   00000056   0x003A             MOVS     R2,R7
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0xFA10 0xF106      LSLS     R1,R0,R6
   \   0000005E   0x0028             MOVS     R0,R5
   \   00000060   0x.... 0x....      BL       _pal_lld_setgroupmode
    246          }
   \                     ??registedFundamentralIoPin_1:
   \   00000064   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    247          

   \                                 In section .text, align 2, keep-with-next
    248          void efiIcuStart(ICUDriver *icup, const ICUConfig *config) {
   \                     _Z11efiIcuStartP9ICUDriverPK9ICUConfig:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    249          	  efiAssertVoid((icup->state == ICU_STOP) || (icup->state == ICU_READY),
    250          	              "input already used?");
   \   00000006   0x7820             LDRB     R0,[R4, #+0]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD006             BEQ.N    ??efiIcuStart_0
   \   0000000C   0x7820             LDRB     R0,[R4, #+0]
   \   0000000E   0x2802             CMP      R0,#+2
   \   00000010   0xD003             BEQ.N    ??efiIcuStart_0
   \   00000012   0x....             LDR.N    R0,??DataTable12_35
   \   00000014   0x.... 0x....      BL       firmwareError
   \   00000018   0xE003             B.N      ??efiIcuStart_1
    251          
    252          	icuStart(icup, config);
   \                     ??efiIcuStart_0:
   \   0000001A   0x0029             MOVS     R1,R5
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      BL       icuStart
    253          }
   \                     ??efiIcuStart_1:
   \   00000022   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x50 0x41          DC8      0x50, 0x41, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x50 0x42          DC8      0x50, 0x42, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x50 0x43          DC8      0x50, 0x43, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x50 0x44          DC8      0x50, 0x44, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x50 0x45          DC8      0x50, 0x45, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x50 0x48          DC8      0x50, 0x48, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x50 0x46          DC8      0x50, 0x46, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x2C 0x00          DC8      ",",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x........         DC32     `?<Constant "pin repos">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x........         DC32     logger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   0x40020C00         DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_8:
   \   00000000   0x40021C00         DC32     0x40021c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_9:
   \   00000000   0x40021400         DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_10:
   \   00000000   0x........         DC32     `?<Constant "unknown">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_11:
   \   00000000   0x........         DC32     `?<Constant "portindex">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_12:
   \   00000000   0x........         DC32     PIN_USED

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_13:
   \   00000000   0x........         DC32     ports

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_14:
   \   00000000   0x........         DC32     `?<Constant "pin %s%d: %s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_15:
   \   00000000   0x........         DC32     totalPinsUsed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_16:
   \   00000000   0x........         DC32     `?<Constant "Total pins count: %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_17:
   \   00000000   0x........         DC32     `?<Constant "none">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_18:
   \   00000000   0x........         DC32     `?<Constant "INVALID">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_19:
   \   00000000   0x........         DC32     `?<Constant "NONE">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_20:
   \   00000000   0x........         DC32     portNameStream

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_21:
   \   00000000   0x........         DC32     `?<Constant "%s%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_22:
   \   00000000   0x........         DC32     portNameBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_23:
   \   00000000   0x........         DC32     initialized

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_24:
   \   00000000   0x........         DC32     _Z10reportPinsv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_25:
   \   00000000   0x........         DC32     `?<Constant "pins">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_26:
   \   00000000   0x........         DC32     `?<Constant "repository not initia...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_27:
   \   00000000   0x........         DC32     `?<Constant "%s on %s:%d\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_28:
   \   00000000   0x........         DC32     `?<Constant "msg,%s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_29:
   \   00000000   0x........         DC32     `?<Constant " on %s%d%s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_30:
   \   00000000   0x........         DC32     `?<Constant "%s%d req by %s used b...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_31:
   \   00000000   0x........         DC32     `?<Constant "repo not initialized">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_32:
   \   00000000   0x........         DC32     `?<Constant "!!!!!!!!!!!!! Already...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_33:
   \   00000000   0x........         DC32     `?<Constant "!!!!!!!!!!!!! Already...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_34:
   \   00000000   0x........         DC32     `?<Constant "pin already used">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_35:
   \   00000000   0x........         DC32     `?<Constant "input already used?">`

   \                                 In section .init_array, align 4, keep-with-next, root
   \   00000000   0x........         DC32    RELOC_ARM_TARGET1 __sti__routine

   \                                 In section .rodata, align 4
   \   00000000   0x50 0x41          DC8 "PA"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x50 0x42          DC8 "PB"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x50 0x43          DC8 "PC"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x50 0x44          DC8 "PD"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x50 0x45          DC8 "PE"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x50 0x48          DC8 "PH"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x50 0x46          DC8 "PF"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "unknown">`:
   \   00000000   0x75 0x6E          DC8 "unknown"
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "portindex">`:
   \   00000000   0x70 0x6F          DC8 "portindex"
   \              0x72 0x74    
   \              0x69 0x6E    
   \              0x64 0x65    
   \              0x78 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "pin %s%d: %s">`:
   \   00000000   0x70 0x69          DC8 "pin %s%d: %s"
   \              0x6E 0x20    
   \              0x25 0x73    
   \              0x25 0x64    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Total pins count: %d">`:
   \   00000000   0x54 0x6F          DC8 "Total pins count: %d"
   \              0x74 0x61    
   \              0x6C 0x20    
   \              0x70 0x69    
   \              0x6E 0x73    
   \              0x20 0x63    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "none">`:
   \   00000000   0x6E 0x6F          DC8 "none"
   \              0x6E 0x65    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "INVALID">`:
   \   00000000   0x49 0x4E          DC8 "INVALID"
   \              0x56 0x41    
   \              0x4C 0x49    
   \              0x44 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "NONE">`:
   \   00000000   0x4E 0x4F          DC8 "NONE"
   \              0x4E 0x45    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "%s%d">`:
   \   00000000   0x25 0x73          DC8 "%s%d"
   \              0x25 0x64    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "pins">`:
   \   00000000   0x70 0x69          DC8 "pins"
   \              0x6E 0x73    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "repository not initia...">`:
   \   00000000   0x72 0x65          DC8 "repository not initialized"
   \              0x70 0x6F    
   \              0x73 0x69    
   \              0x74 0x6F    
   \              0x72 0x79    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x69    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x65 0x64    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "%s on %s:%d\\r\\n">`:
   \   00000000   0x25 0x73          DC8 "%s on %s:%d\015\012"
   \              0x20 0x6F    
   \              0x6E 0x20    
   \              0x25 0x73    
   \              0x3A 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "msg,%s">`:
   \   00000000   0x6D 0x73          DC8 "msg,%s"
   \              0x67 0x2C    
   \              0x25 0x73    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " on %s%d%s">`:
   \   00000000   0x20 0x6F          DC8 " on %s%d%s"
   \              0x6E 0x20    
   \              0x25 0x73    
   \              0x25 0x64    
   \              0x25 0x73    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 2
   \   00000000   0x2C 0x00          DC8 ","

   \                                 In section .rodata, align 4
   \                     `?<Constant "%s%d req by %s used b...">`:
   \   00000000   0x25 0x73          DC8 "%s%d req by %s used by %s"
   \              0x25 0x64    
   \              0x20 0x72    
   \              0x65 0x71    
   \              0x20 0x62    
   \              0x79 0x20    
   \              0x25 0x73    
   \              0x20 0x75    
   \              0x73 0x65    
   \              0x64 0x20    
   \              0x62 0x79    
   \              0x20 0x25    
   \              0x73 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "repo not initialized">`:
   \   00000000   0x72 0x65          DC8 "repo not initialized"
   \              0x70 0x6F    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x69    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x65 0x64    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "!!!!!!!!!!!!! Already...">`:
   \   00000000   0x21 0x21          DC8 "!!!!!!!!!!!!! Already used [%s] %d\015\012"
   \              0x21 0x21    
   \              0x21 0x21    
   \              0x21 0x21    
   \              0x21 0x21    
   \              0x21 0x21    
   \              0x21 0x20    
   \              0x41 0x6C    
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x79 0x20    
   \              0x75 0x73    
   \              0x65 0x64    
   \              0x20 0x5B    
   \              0x25 0x73    
   \              0x5D 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "!!!!!!!!!!!!! Already...">_1`:
   \   00000000   0x21 0x21          DC8 "!!!!!!!!!!!!! Already used by [%s]\015\012"
   \              0x21 0x21    
   \              0x21 0x21    
   \              0x21 0x21    
   \              0x21 0x21    
   \              0x21 0x21    
   \              0x21 0x20    
   \              0x41 0x6C    
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x79 0x20    
   \              0x75 0x73    
   \              0x65 0x64    
   \              0x20 0x62    
   \              0x79 0x20    
   \              0x5B 0x25    
   \              0x73 0x5D    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "pin already used">`:
   \   00000000   0x70 0x69          DC8 "pin already used"
   \              0x6E 0x20    
   \              0x61 0x6C    
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x79 0x20    
   \              0x75 0x73    
   \              0x65 0x64    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "input already used?">`:
   \   00000000   0x69 0x6E          DC8 "input already used?"
   \              0x70 0x75    
   \              0x74 0x20    
   \              0x61 0x6C    
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x79 0x20    
   \              0x75 0x73    
   \              0x65 0x64    
   \              0x3F 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "pin repos">`:
   \   00000000   0x70 0x69          DC8 "pin repos"
   \              0x6E 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x73 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   __sti__routine()
         8   -> LoggingWithStorage::LoggingWithStorage(char const *)
      24   chprintf(BaseSequentialStream *, char const *, ...)
        24   -> chvprintf
      16   efiIcuStart(ICUDriver *, ICUConfig const *)
        16   -> firmwareError
        16   -> icuStart
      16   getIndex(ioportid_t, uint32_t)
        16   -> getPortIndex(GPIO_TypeDef *)
       0   getInputMode(pin_input_mode_e)
      16   getPinFunction(brain_pin_e)
        16   -> getHwPin(brain_pin_e)
        16   -> getHwPort(brain_pin_e)
        16   -> getIndex(ioportid_t, uint32_t)
       8   getPortIndex(GPIO_TypeDef *)
         8   -> firmwareError
      16   hwPortname(brain_pin_e)
        16   -> chprintf(BaseSequentialStream *, char const *, ...)
        16   -> getHwPin(brain_pin_e)
        16   -> getHwPort(brain_pin_e)
        16   -> portname(GPIO_TypeDef *)
       8   initPinRepository()
         8   -> addConsoleAction
         8   -> msObjectInit
       0   markUsed(int, char const *)
      32   mySetPadMode(char const *, ioportid_t, uint32_t, iomode_t)
        32   -> _pal_lld_setgroupmode
        32   -> appendPrintf
        32   -> firmwareError
        32   -> getIndex(ioportid_t, uint32_t)
        32   -> markUsed(int, char const *)
        32   -> portname(GPIO_TypeDef *)
        32   -> print
        32   -> printLine
      24   mySetPadMode2(char const *, brain_pin_e, iomode_t)
        24   -> getHwPin(brain_pin_e)
        24   -> getHwPort(brain_pin_e)
        24   -> mySetPadMode(char const *, ioportid_t, uint32_t, iomode_t)
      24   parseBrainPin(char const *)
        24   -> atoi
        24   -> strEqual
       0   portname(GPIO_TypeDef *)
      24   registedFundamentralIoPin(char *, ioportid_t, uint32_t, iomode_t)
        24   -> _pal_lld_setgroupmode
        24   -> firmwareError
        24   -> getIndex(ioportid_t, uint32_t)
        24   -> markUsed(int, char const *)
        24   -> print
      32   reportPins()
        32   -> portname(GPIO_TypeDef *)
        32   -> scheduleMsg
      16   unmarkPin(brain_pin_e)
        16   -> getHwPin(brain_pin_e)
        16   -> getHwPort(brain_pin_e)
        16   -> getIndex(ioportid_t, uint32_t)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant " on %s%d%s">
      40  ?<Constant "!!!!!!!!!!!!! Already...">
      40  ?<Constant "!!!!!!!!!!!!! Already...">_1
      16  ?<Constant "%s on %s:%d\r\n">
      28  ?<Constant "%s%d req by %s used b...">
       8  ?<Constant "%s%d">
       2  ?<Constant ",">
       8  ?<Constant "INVALID">
       8  ?<Constant "NONE">
       4  ?<Constant "PA">
       4  ?<Constant "PB">
       4  ?<Constant "PC">
       4  ?<Constant "PD">
       4  ?<Constant "PE">
       4  ?<Constant "PF">
       4  ?<Constant "PH">
      24  ?<Constant "Total pins count: %d">
      20  ?<Constant "input already used?">
       8  ?<Constant "msg,%s">
       8  ?<Constant "none">
      16  ?<Constant "pin %s%d: %s">
      20  ?<Constant "pin already used">
      12  ?<Constant "pin repos">
       8  ?<Constant "pins">
      12  ?<Constant "portindex">
      24  ?<Constant "repo not initialized">
      28  ?<Constant "repository not initia...">
       8  ?<Constant "unknown">
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_10
       4  ??DataTable12_11
       4  ??DataTable12_12
       4  ??DataTable12_13
       4  ??DataTable12_14
       4  ??DataTable12_15
       4  ??DataTable12_16
       4  ??DataTable12_17
       4  ??DataTable12_18
       4  ??DataTable12_19
       4  ??DataTable12_2
       4  ??DataTable12_20
       4  ??DataTable12_21
       4  ??DataTable12_22
       4  ??DataTable12_23
       4  ??DataTable12_24
       4  ??DataTable12_25
       4  ??DataTable12_26
       4  ??DataTable12_27
       4  ??DataTable12_28
       4  ??DataTable12_29
       4  ??DataTable12_3
       4  ??DataTable12_30
       4  ??DataTable12_31
       4  ??DataTable12_32
       4  ??DataTable12_33
       4  ??DataTable12_34
       4  ??DataTable12_35
       4  ??DataTable12_4
       4  ??DataTable12_5
       4  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable12_9
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable8
       4  ??DataTable8_1
     448  PIN_USED
      16  __sti__routine()
      28  chprintf(BaseSequentialStream *, char const *, ...)
      36  efiIcuStart(ICUDriver *, ICUConfig const *)
      18  getIndex(ioportid_t, uint32_t)
      26  getInputMode(pin_input_mode_e)
      36  getPinFunction(brain_pin_e)
     102  getPortIndex(GPIO_TypeDef *)
      76  hwPortname(brain_pin_e)
      48  initPinRepository()
       4  initialized
     260  logger
      18  markUsed(int, char const *)
     164  mySetPadMode(char const *, ioportid_t, uint32_t, iomode_t)
      36  mySetPadMode2(char const *, brain_pin_e, iomode_t)
     102  parseBrainPin(char const *)
      20  portNameBuffer
      20  portNameStream
      92  portname(GPIO_TypeDef *)
      28  ports
     104  registedFundamentralIoPin(char *, ioportid_t, uint32_t, iomode_t)
      90  reportPins()
       4  totalPinsUsed
      58  unmarkPin(brain_pin_e)
       4  -- Other

 
   756 bytes in section .bss
    28 bytes in section .data
     4 bytes in section .init_array
   378 bytes in section .rodata
 1 222 bytes in section .text
 
 1 226 bytes of CODE  memory
   378 bytes of CONST memory
   784 bytes of DATA  memory

Errors: none
Warnings: none
