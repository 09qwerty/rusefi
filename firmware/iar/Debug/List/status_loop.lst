###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:08:53 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\console\status_l #
#                       oop.cpp                                               #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\console\status_l #
#                       oop.cpp -lCN F:\stuff\rusefi_sourceforge\firmware\iar #
#                       \Debug\List\ -lA F:\stuff\rusefi_sourceforge\firmware #
#                       \iar\Debug\List\ -o F:\stuff\rusefi_sourceforge\firmw #
#                       are\iar\Debug\Obj\ --no_cse --no_unroll --no_inline   #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\s #
#                       tatus_loop.lst                                        #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\st #
#                       atus_loop.o                                           #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\console\status_loop.cpp
      1          /**
      2           * @file	status_loop.cpp
      3           * @brief Human-readable protocol status messages
      4           *
      5           * http://rusefi.com/forum/viewtopic.php?t=263 Dev console overview
      6           * http://rusefi.com/forum/viewtopic.php?t=210 Commands overview
      7           *
      8           *
      9           * @date Mar 15, 2013
     10           * @author Andrey Belomutskiy, (c) 2012-2015
     11           *
     12           * This file is part of rusEfi - see http://rusefi.com
     13           *
     14           * rusEfi is free software; you can redistribute it and/or modify it under the terms of
     15           * the GNU General Public License as published by the Free Software Foundation; either
     16           * version 3 of the License, or (at your option) any later version.
     17           *
     18           * rusEfi is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
     19           * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     20           * GNU General Public License for more details.
     21           *
     22           * You should have received a copy of the GNU General Public License along with this program.
     23           * If not, see <http://www.gnu.org/licenses/>.
     24           *
     25           */
     26          
     27          #include "main.h"
     28          #include "status_loop.h"

   \                                 In section .text, align 4
   \   __interwork __vfp float Map3D<16, 16>::getValue(float, float)
   \                     _ZN5Map3DILi16ELi16EE8getValueEff:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xB082             SUB      SP,SP,#+8
   \   00000008   0x0004             MOVS     R4,R0
   \   0000000A   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   0000000E   0xEEF0 0x8A60      VMOV.F32 S17,S1
   \   00000012   0x6CA0             LDR      R0,[R4, #+72]
   \   00000014   0x490C             LDR.N    R1,??getValue_0+0x4  ;; 0x923f558
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xD005             BEQ.N    ??getValue_1
   \   0000001A   0x480C             LDR.N    R0,??getValue_0+0x8
   \   0000001C   0x.... 0x....      BL       firmwareError
   \   00000020   0xED9F 0x0A08      VLDR.W   S0,??getValue_0  ;; 0x7fffffff
   \   00000024   0xE00A             B.N      ??getValue_2
   \                     ??getValue_1:
   \   00000026   0x9400             STR      R4,[SP, #+0]
   \   00000028   0x2310             MOVS     R3,#+16
   \   0000002A   0x6C62             LDR      R2,[R4, #+68]
   \   0000002C   0xEEF0 0x0A68      VMOV.F32 S1,S17
   \   00000030   0x2110             MOVS     R1,#+16
   \   00000032   0x6C20             LDR      R0,[R4, #+64]
   \   00000034   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000038   0x.... 0x....      BL       _Z13interpolate3dfPfifS_iPS_
   \                     ??getValue_2:
   \   0000003C   0xB002             ADD      SP,SP,#+8
   \   0000003E   0xECBD 0x8B02      VPOP     {D8}
   \   00000042   0xBD10             POP      {R4,PC}          ;; return
   \                     ??getValue_0:
   \   00000044   0x7FFFFFFF         DC32     0x7fffffff
   \   00000048   0x0923F558         DC32     0x923f558
   \   0000004C   0x........         DC32     _ZZN5Map3DILi16ELi16EE8getValueEffEs
     29          
     30          #include "adc_inputs.h"
     31          #if EFI_WAVE_ANALYZER || defined(__DOXYGEN__)
     32          #include "wave_analyzer.h"
     33          #endif
     34          
     35          #include "trigger_central.h"
     36          #include "engine_state.h"
     37          #include "io_pins.h"
     38          #include "efiGpio.h"
     39          #include "mmc_card.h"
     40          #include "console_io.h"
     41          #include "malfunction_central.h"
     42          #include "speed_density.h"
     43          
     44          #include "advance_map.h"
     45          #include "tunerstudio.h"
     46          #include "fuel_math.h"
     47          #include "main_trigger_callback.h"
     48          #include "engine_math.h"
     49          #include "idle_thread.h"
     50          #include "engine_configuration.h"
     51          #include "rfiutil.h"
     52          #include "svnversion.h"
     53          #include "engine.h"
     54          #include "lcd_controller.h"
     55          #include "settings.h"
     56          #include "rusefi_outputs.h"
     57          
     58          extern bool_t main_loop_started;
     59          
     60          #if EFI_PROD_CODE || defined(__DOXYGEN__)
     61          // todo: move this logic to algo folder!
     62          #include "rtc_helper.h"
     63          #include "lcd_HD44780.h"
     64          #include "rusefi.h"
     65          #include "pin_repository.h"
     66          #include "flash_main.h"
     67          #include "max31855.h"
     68          #include "vehicle_speed.h"
     69          #endif
     70          
     71          extern engine_pins_s enginePins;
     72          extern TriggerCentral triggerCentral;
     73          

   \                                 In section .bss, align 4
     74          static bool_t subscription[(int) RO_LAST_ELEMENT];
   \                     subscription:
   \   00000000                      DS8 16
     75          
     76          // this 'true' value is needed for simulator

   \                                 In section .data, align 1
     77          static volatile bool fullLog = true;
   \                     fullLog:
   \   00000000   0x01               DC8 1

   \                                 In section .data, align 4
     78          int warningEnabled = true;
   \                     warningEnabled:
   \   00000000   0x00000001         DC32 1
     79          //int warningEnabled = FALSE;
     80          
     81          extern bool hasFirmwareErrorFlag;
     82          #define FULL_LOGGING_KEY "fl"
     83          

   \                                 In section .bss, align 4
     84          static char LOGGING_BUFFER[1400];
   \                     LOGGING_BUFFER:
   \   00000000                      DS8 1400

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine:
   \   00000000   0xB580             PUSH     {R7,LR}
     85          static Logging logger("status loop", LOGGING_BUFFER, sizeof(LOGGING_BUFFER));
   \   00000002   0xF44F 0x63AF      MOV      R3,#+1400
   \   00000006   0x.... 0x....      LDR.W    R2,??DataTable17
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable17_1
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000012   0x.... 0x....      BL       _ZN7LoggingC1EPKcPci
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable18_2
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable18_3
   \   0000001E   0x.... 0x....      BL       _ZN18LoggingWithStorageC1EPKc
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable18_4
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable18_5
   \   0000002A   0x.... 0x....      BL       _ZN18LoggingWithStorageC1EPKc
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable18_6
   \   00000032   0x.... 0x....      BL       _ZN9OutputPinC1Ev
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable18_7
   \   0000003A   0x.... 0x....      BL       _ZN9OutputPinC1Ev
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable18_8
   \   00000042   0x.... 0x....      BL       _ZN9OutputPinC1Ev
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable21
   \   0000004A   0x.... 0x....      BL       _ZN9OutputPinC1Ev
   \   0000004E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     logger:
   \   00000000                      DS8 60
     86          

   \                                 In section .text, align 2, keep-with-next
     87          static void setWarningEnabled(int value) {
     88          	warningEnabled = value;
   \                     _Z17setWarningEnabledi:
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable22
   \   00000004   0x6008             STR      R0,[R1, #+0]
     89          }
   \   00000006   0x4770             BX       LR               ;; return
     90          
     91          #if EFI_FILE_LOGGING || defined(__DOXYGEN__)

   \                                 In section .bss, align 4
     92          static LoggingWithStorage fileLogger("file logger");
   \                     fileLogger:
   \   00000000                      DS8 260
     93          #endif /* EFI_FILE_LOGGING */
     94          

   \                                 In section .bss, align 4
     95          static int logFileLineIndex = 0;
   \                     logFileLineIndex:
   \   00000000                      DS8 4
     96          #define TAB "\t"
     97          

   \                                 In section .text, align 2, keep-with-next
     98          static void reportSensorF(Logging *log, bool fileFormat, const char *caption, const char *units, float value,
     99          		int precision) {
   \                     _Z13reportSensorFP7LoggingbPKcS2_fi:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xED2D 0x8B02      VPUSH    {D8}
   \   00000008   0x0004             MOVS     R4,R0
   \   0000000A   0x000D             MOVS     R5,R1
   \   0000000C   0x0016             MOVS     R6,R2
   \   0000000E   0x001F             MOVS     R7,R3
   \   00000010   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   00000014   0xF8DD 0x8020      LDR      R8,[SP, #+32]
    100          	if (!fileFormat) {
   \   00000018   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001A   0x2D00             CMP      R5,#+0
   \   0000001C   0xD107             BNE.N    ??reportSensorF_0
    101          #if (EFI_PROD_CODE || EFI_SIMULATOR) || defined(__DOXYGEN__)
    102          		debugFloat(log, caption, value, precision);
   \   0000001E   0x4642             MOV      R2,R8
   \   00000020   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000024   0x0031             MOVS     R1,R6
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x.... 0x....      BL       debugFloat
   \   0000002C   0xE025             B.N      ??reportSensorF_1
    103          #endif /* EFI_PROD_CODE || EFI_SIMULATOR */
    104          	} else {
    105          
    106          #if EFI_FILE_LOGGING || defined(__DOXYGEN__)
    107          		if (logFileLineIndex == 0) {
   \                     ??reportSensorF_0:
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable18_9
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD108             BNE.N    ??reportSensorF_2
    108          			append(log, caption);
   \   00000038   0x0031             MOVS     R1,R6
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x.... 0x....      BL       append
    109          			append(log, TAB);
   \   00000040   0x....             ADR.N    R1,??DataTable3  ;; "\t"
   \   00000042   0x0020             MOVS     R0,R4
   \   00000044   0x.... 0x....      BL       append
   \   00000048   0xE017             B.N      ??reportSensorF_1
    110          		} else if (logFileLineIndex == 1) {
   \                     ??reportSensorF_2:
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable18_9
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x2801             CMP      R0,#+1
   \   00000052   0xD108             BNE.N    ??reportSensorF_3
    111          			append(log, units);
   \   00000054   0x0039             MOVS     R1,R7
   \   00000056   0x0020             MOVS     R0,R4
   \   00000058   0x.... 0x....      BL       append
    112          			append(log, TAB);
   \   0000005C   0x....             ADR.N    R1,??DataTable3  ;; "\t"
   \   0000005E   0x0020             MOVS     R0,R4
   \   00000060   0x.... 0x....      BL       append
   \   00000064   0xE009             B.N      ??reportSensorF_1
    113          		} else {
    114          			appendFloat(log, value, precision);
   \                     ??reportSensorF_3:
   \   00000066   0x4641             MOV      R1,R8
   \   00000068   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   0000006C   0x0020             MOVS     R0,R4
   \   0000006E   0x.... 0x....      BL       appendFloat
    115          			append(log, TAB);
   \   00000072   0x....             ADR.N    R1,??DataTable3  ;; "\t"
   \   00000074   0x0020             MOVS     R0,R4
   \   00000076   0x.... 0x....      BL       append
    116          		}
    117          #endif /* EFI_FILE_LOGGING */
    118          	}
    119          }
   \                     ??reportSensorF_1:
   \   0000007A   0xECBD 0x8B02      VPOP     {D8}
   \   0000007E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    120          

   \                                 In section .text, align 2, keep-with-next
    121          static void reportSensorI(Logging *log, bool fileFormat, const char *caption, const char *units, int value) {
   \                     _Z13reportSensorIP7LoggingbPKcS2_i:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0xF8DD 0x8018      LDR      R8,[SP, #+24]
    122          	if (!fileFormat) {
   \   00000010   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000012   0x2D00             CMP      R5,#+0
   \   00000014   0xD105             BNE.N    ??reportSensorI_0
    123          
    124          #if (EFI_PROD_CODE || EFI_SIMULATOR) || defined(__DOXYGEN__)
    125          		debugInt(log, caption, value);
   \   00000016   0x4642             MOV      R2,R8
   \   00000018   0x0031             MOVS     R1,R6
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       debugInt
   \   00000020   0xE022             B.N      ??reportSensorI_1
    126          #endif /* EFI_PROD_CODE || EFI_SIMULATOR */
    127          	} else {
    128          #if EFI_FILE_LOGGING || defined(__DOXYGEN__)
    129          		if (logFileLineIndex == 0) {
   \                     ??reportSensorI_0:
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable18_9
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD108             BNE.N    ??reportSensorI_2
    130          			append(log, caption);
   \   0000002C   0x0031             MOVS     R1,R6
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0x.... 0x....      BL       append
    131          			append(log, TAB);
   \   00000034   0x....             ADR.N    R1,??DataTable3  ;; "\t"
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0x.... 0x....      BL       append
   \   0000003C   0xE014             B.N      ??reportSensorI_1
    132          		} else if (logFileLineIndex == 1) {
   \                     ??reportSensorI_2:
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable18_9
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0x2801             CMP      R0,#+1
   \   00000046   0xD108             BNE.N    ??reportSensorI_3
    133          			append(log, units);
   \   00000048   0x0039             MOVS     R1,R7
   \   0000004A   0x0020             MOVS     R0,R4
   \   0000004C   0x.... 0x....      BL       append
    134          			append(log, TAB);
   \   00000050   0x....             ADR.N    R1,??DataTable3  ;; "\t"
   \   00000052   0x0020             MOVS     R0,R4
   \   00000054   0x.... 0x....      BL       append
   \   00000058   0xE006             B.N      ??reportSensorI_1
    135          		} else {
    136          			appendPrintf(log, "%d%s", value, TAB);
   \                     ??reportSensorI_3:
   \   0000005A   0x....             ADR.N    R3,??DataTable3  ;; "\t"
   \   0000005C   0x4642             MOV      R2,R8
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable24
   \   00000062   0x0020             MOVS     R0,R4
   \   00000064   0x.... 0x....      BL       appendPrintf
    137          		}
    138          #endif /* EFI_FILE_LOGGING */
    139          	}
    140          }
   \                     ??reportSensorI_1:
   \   00000068   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    141          
    142          EXTERN_ENGINE
    143          ;
    144          

   \                                 In section .text, align 4, keep-with-next
    145          static void printSensors(Logging *log, bool fileFormat) {
   \                     _Z12printSensorsP7Loggingb:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xB082             SUB      SP,SP,#+8
   \   00000008   0x0004             MOVS     R4,R0
   \   0000000A   0x000D             MOVS     R5,R1
    146          	// current time, in milliseconds
    147          	int nowMs = currentTimeMillis();
   \   0000000C   0x.... 0x....      BL       currentTimeMillis
   \   00000010   0xEE08 0x0A10      VMOV     S16,R0
    148          	float sec = ((float) nowMs) / 1000;
   \   00000014   0xEEB8 0x0AC8      VCVT.F32.S32 S0,S16
   \   00000018   0xEDDF 0x....      VLDR.W   S1,??DataTable4  ;; 0x447a0000
   \   0000001C   0xEEC0 0x8A20      VDIV.F32 S17,S0,S1
    149          	reportSensorF(log, fileFormat, "time", "", sec, 3);
   \   00000020   0x2003             MOVS     R0,#+3
   \   00000022   0x9000             STR      R0,[SP, #+0]
   \   00000024   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \   00000028   0x....             ADR.N    R3,??DataTable5  ;; ""
   \   0000002A   0x.... 0x....      LDR.W    R2,??DataTable18_10
   \   0000002E   0x0029             MOVS     R1,R5
   \   00000030   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0x.... 0x....      BL       _Z13reportSensorFP7LoggingbPKcS2_fi
    150          
    151          	int rpm = 0;
   \   00000038   0x2600             MOVS     R6,#+0
    152          #if EFI_SHAFT_POSITION_INPUT || defined(__DOXYGEN__)
    153          	rpm = getRpmE(engine);
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable18_11
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x.... 0x....      BL       _ZN13RpmCalculator3rpmEv
   \   00000044   0x0006             MOVS     R6,R0
    154          	reportSensorI(log, fileFormat, "rpm", "RPM", rpm);
   \   00000046   0x9600             STR      R6,[SP, #+0]
   \   00000048   0x....             ADR.N    R3,??DataTable5_1  ;; "RPM"
   \   0000004A   0x....             ADR.N    R2,??DataTable5_2  ;; "rpm"
   \   0000004C   0x0029             MOVS     R1,R5
   \   0000004E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0x.... 0x....      BL       _Z13reportSensorIP7LoggingbPKcS2_i
    155          
    156          //	reportSensorF(log, fileFormat, "TRG_0_DUTY", "%", getTriggerDutyCycle(0), 2);
    157          //	reportSensorF(log, fileFormat, "TRG_1_DUTY", "%", getTriggerDutyCycle(1), 2);
    158          #endif
    159          
    160          	if (hasMafSensor()) {
   \   00000056   0x.... 0x....      BL       _Z12hasMafSensorv
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD017             BEQ.N    ??printSensors_0
    161          		reportSensorF(log, fileFormat, "maf", "V", getMaf(), 2);
   \   0000005E   0x.... 0x....      BL       _Z6getMafv
   \   00000062   0x2002             MOVS     R0,#+2
   \   00000064   0x9000             STR      R0,[SP, #+0]
   \   00000066   0x....             ADR.N    R3,??DataTable5_3  ;; "V"
   \   00000068   0x....             ADR.N    R2,??DataTable5_4  ;; "maf"
   \   0000006A   0x0029             MOVS     R1,R5
   \   0000006C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000006E   0x0020             MOVS     R0,R4
   \   00000070   0x.... 0x....      BL       _Z13reportSensorFP7LoggingbPKcS2_fi
    162          		reportSensorF(log, fileFormat, "mafr", "kg/hr", getRealMaf(), 2);
   \   00000074   0x.... 0x....      BL       _Z10getRealMafv
   \   00000078   0x2002             MOVS     R0,#+2
   \   0000007A   0x9000             STR      R0,[SP, #+0]
   \   0000007C   0x.... 0x....      LDR.W    R3,??DataTable18_12
   \   00000080   0x.... 0x....      LDR.W    R2,??DataTable18_13
   \   00000084   0x0029             MOVS     R1,R5
   \   00000086   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000088   0x0020             MOVS     R0,R4
   \   0000008A   0x.... 0x....      BL       _Z13reportSensorFP7LoggingbPKcS2_fi
    163          	}
    164          
    165          	reportSensorF(log, fileFormat, "ENGINE_LOAD", "x", getEngineLoadT(), 2);
   \                     ??printSensors_0:
   \   0000008E   0x.... 0x....      BL       _Z14getEngineLoadTv
   \   00000092   0x2002             MOVS     R0,#+2
   \   00000094   0x9000             STR      R0,[SP, #+0]
   \   00000096   0x....             ADR.N    R3,??DataTable5_5  ;; "x"
   \   00000098   0x.... 0x....      LDR.W    R2,??DataTable18_14
   \   0000009C   0x0029             MOVS     R1,R5
   \   0000009E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000A0   0x0020             MOVS     R0,R4
   \   000000A2   0x.... 0x....      BL       _Z13reportSensorFP7LoggingbPKcS2_fi
    166          
    167          
    168          #if EFI_ANALOG_SENSORS || defined(__DOXYGEN__)
    169          	if (engineConfiguration->hasMapSensor) {
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable18_15
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0xF890 0x05D8      LDRB     R0,[R0, #+1496]
   \   000000B0   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000000B4   0x2800             CMP      R0,#+0
   \   000000B6   0xD00A             BEQ.N    ??printSensors_1
    170          		reportSensorF(log, fileFormat, "MAP", "kPa", getMap(), 2);
   \   000000B8   0x.... 0x....      BL       _Z6getMapv
   \   000000BC   0x2002             MOVS     R0,#+2
   \   000000BE   0x9000             STR      R0,[SP, #+0]
   \   000000C0   0x....             ADR.N    R3,??DataTable5_6  ;; "kPa"
   \   000000C2   0x....             ADR.N    R2,??DataTable5_7  ;; "MAP"
   \   000000C4   0x0029             MOVS     R1,R5
   \   000000C6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000C8   0x0020             MOVS     R0,R4
   \   000000CA   0x.... 0x....      BL       _Z13reportSensorFP7LoggingbPKcS2_fi
    171          //		reportSensorF(log, fileFormat, "map_r", "V", getRawMap(), 2);
    172          	}
    173          	if (hasBaroSensor()) {
   \                     ??printSensors_1:
   \   000000CE   0x.... 0x....      BL       _Z13hasBaroSensorv
   \   000000D2   0x2800             CMP      R0,#+0
   \   000000D4   0xD00B             BEQ.N    ??printSensors_2
    174          		reportSensorF(log, fileFormat, "baro", "kPa", getBaroPressure(), 2);
   \   000000D6   0x.... 0x....      BL       _Z15getBaroPressurev
   \   000000DA   0x2002             MOVS     R0,#+2
   \   000000DC   0x9000             STR      R0,[SP, #+0]
   \   000000DE   0x....             ADR.N    R3,??DataTable5_6  ;; "kPa"
   \   000000E0   0x.... 0x....      LDR.W    R2,??DataTable18_16
   \   000000E4   0x0029             MOVS     R1,R5
   \   000000E6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000E8   0x0020             MOVS     R0,R4
   \   000000EA   0x.... 0x....      BL       _Z13reportSensorFP7LoggingbPKcS2_fi
    175          	}
    176          	if (engineConfiguration->hasAfrSensor) {
   \                     ??printSensors_2:
   \   000000EE   0x.... 0x....      LDR.W    R0,??DataTable18_15
   \   000000F2   0x6800             LDR      R0,[R0, #+0]
   \   000000F4   0xF890 0x05D8      LDRB     R0,[R0, #+1496]
   \   000000F8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000FA   0x08C0             LSRS     R0,R0,#+3
   \   000000FC   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000100   0x2800             CMP      R0,#+0
   \   00000102   0xD00A             BEQ.N    ??printSensors_3
    177          		reportSensorF(log, fileFormat, "afr", "AFR", getAfr(), 2);
   \   00000104   0x.... 0x....      BL       _Z6getAfrv
   \   00000108   0x2002             MOVS     R0,#+2
   \   0000010A   0x9000             STR      R0,[SP, #+0]
   \   0000010C   0x....             ADR.N    R3,??DataTable5_8  ;; "AFR"
   \   0000010E   0x....             ADR.N    R2,??DataTable5_9  ;; "afr"
   \   00000110   0x0029             MOVS     R1,R5
   \   00000112   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000114   0x0020             MOVS     R0,R4
   \   00000116   0x.... 0x....      BL       _Z13reportSensorFP7LoggingbPKcS2_fi
    178          	}
    179          #endif
    180          
    181          #if EFI_VEHICLE_SPEED || defined(__DOXYGEN__)
    182          	if (engineConfiguration->hasVehicleSpeedSensor) {
   \                     ??printSensors_3:
   \   0000011A   0x.... 0x....      LDR.W    R0,??DataTable18_15
   \   0000011E   0x6800             LDR      R0,[R0, #+0]
   \   00000120   0xF890 0x05D9      LDRB     R0,[R0, #+1497]
   \   00000124   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000126   0x0880             LSRS     R0,R0,#+2
   \   00000128   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000012C   0x2800             CMP      R0,#+0
   \   0000012E   0xD00A             BEQ.N    ??printSensors_4
    183          		reportSensorF(log, fileFormat, "vss", "kph", getVehicleSpeed(), 2);
   \   00000130   0x.... 0x....      BL       _Z15getVehicleSpeedv
   \   00000134   0x2002             MOVS     R0,#+2
   \   00000136   0x9000             STR      R0,[SP, #+0]
   \   00000138   0x....             ADR.N    R3,??DataTable5_10  ;; "kph"
   \   0000013A   0x....             ADR.N    R2,??DataTable5_11  ;; "vss"
   \   0000013C   0x0029             MOVS     R1,R5
   \   0000013E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000140   0x0020             MOVS     R0,R4
   \   00000142   0x.... 0x....      BL       _Z13reportSensorFP7LoggingbPKcS2_fi
    184          	}
    185          #endif /* EFI_PROD_CODE */
    186          
    187          	reportSensorF(log, fileFormat, "ks", "count", engine->knockCount, 0);
   \                     ??printSensors_4:
   \   00000146   0x2000             MOVS     R0,#+0
   \   00000148   0x9000             STR      R0,[SP, #+0]
   \   0000014A   0x.... 0x....      LDR.W    R0,??DataTable18_11
   \   0000014E   0x6800             LDR      R0,[R0, #+0]
   \   00000150   0xED90 0x0A9B      VLDR     S0,[R0, #+620]
   \   00000154   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000158   0x.... 0x....      LDR.W    R3,??DataTable18_17
   \   0000015C   0x....             ADR.N    R2,??DataTable7  ;; 0x6B, 0x73, 0x00, 0x00
   \   0000015E   0x0029             MOVS     R1,R5
   \   00000160   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000162   0x0020             MOVS     R0,R4
   \   00000164   0x.... 0x....      BL       _Z13reportSensorFP7LoggingbPKcS2_fi
    188          
    189          
    190          //	reportSensorF(log, fileFormat, "vref", "V", getVRef(engineConfiguration), 2);
    191          	if (hasVBatt(PASS_ENGINE_PARAMETER_F)) {
   \   00000168   0x.... 0x....      BL       _Z8hasVBattv
   \   0000016C   0x2800             CMP      R0,#+0
   \   0000016E   0xD00B             BEQ.N    ??printSensors_5
    192          		reportSensorF(log, fileFormat, "vbatt", "V", getVBatt(PASS_ENGINE_PARAMETER_F), 2);
   \   00000170   0x.... 0x....      BL       _Z8getVBattv
   \   00000174   0x2002             MOVS     R0,#+2
   \   00000176   0x9000             STR      R0,[SP, #+0]
   \   00000178   0x....             ADR.N    R3,??DataTable5_3  ;; "V"
   \   0000017A   0x.... 0x....      LDR.W    R2,??DataTable18_18
   \   0000017E   0x0029             MOVS     R1,R5
   \   00000180   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000182   0x0020             MOVS     R0,R4
   \   00000184   0x.... 0x....      BL       _Z13reportSensorFP7LoggingbPKcS2_fi
    193          	}
    194          
    195          	reportSensorF(log, fileFormat, "TP", "%", getTPS(PASS_ENGINE_PARAMETER_F), 2);
   \                     ??printSensors_5:
   \   00000188   0x.... 0x....      BL       _Z6getTPSv
   \   0000018C   0x2002             MOVS     R0,#+2
   \   0000018E   0x9000             STR      R0,[SP, #+0]
   \   00000190   0x....             ADR.N    R3,??DataTable8  ;; "%"
   \   00000192   0x....             ADR.N    R2,??DataTable8_1  ;; 0x54, 0x50, 0x00, 0x00
   \   00000194   0x0029             MOVS     R1,R5
   \   00000196   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000198   0x0020             MOVS     R0,R4
   \   0000019A   0x.... 0x....      BL       _Z13reportSensorFP7LoggingbPKcS2_fi
    196          
    197          	if (fileFormat) {
   \   0000019E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001A0   0x2D00             CMP      R5,#+0
   \   000001A2   0xD02E             BEQ.N    ??printSensors_6
    198          		reportSensorF(log, fileFormat, "tpsacc", "ms", engine->tpsAccelEnrichment.getTpsEnrichment(PASS_ENGINE_PARAMETER_F), 2);
   \   000001A4   0x.... 0x....      LDR.W    R0,??DataTable18_11
   \   000001A8   0x6800             LDR      R0,[R0, #+0]
   \   000001AA   0xF510 0x70A6      ADDS     R0,R0,#+332
   \   000001AE   0x.... 0x....      BL       _ZN16AccelEnrichmemnt16getTpsEnrichmentEv
   \   000001B2   0x2002             MOVS     R0,#+2
   \   000001B4   0x9000             STR      R0,[SP, #+0]
   \   000001B6   0x....             ADR.N    R3,??DataTable8_2  ;; 0x6D, 0x73, 0x00, 0x00
   \   000001B8   0x.... 0x....      LDR.W    R2,??DataTable22_2
   \   000001BC   0x0029             MOVS     R1,R5
   \   000001BE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001C0   0x0020             MOVS     R0,R4
   \   000001C2   0x.... 0x....      BL       _Z13reportSensorFP7LoggingbPKcS2_fi
    199          		reportSensorF(log, fileFormat, "advance", "deg", engine->tpsAccelEnrichment.getTpsEnrichment(PASS_ENGINE_PARAMETER_F), 2);
   \   000001C6   0x.... 0x....      LDR.W    R0,??DataTable18_11
   \   000001CA   0x6800             LDR      R0,[R0, #+0]
   \   000001CC   0xF510 0x70A6      ADDS     R0,R0,#+332
   \   000001D0   0x.... 0x....      BL       _ZN16AccelEnrichmemnt16getTpsEnrichmentEv
   \   000001D4   0x2002             MOVS     R0,#+2
   \   000001D6   0x9000             STR      R0,[SP, #+0]
   \   000001D8   0x....             ADR.N    R3,??DataTable8_3  ;; "deg"
   \   000001DA   0x.... 0x....      LDR.W    R2,??DataTable22_3
   \   000001DE   0x0029             MOVS     R1,R5
   \   000001E0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001E2   0x0020             MOVS     R0,R4
   \   000001E4   0x.... 0x....      BL       _Z13reportSensorFP7LoggingbPKcS2_fi
    200          		reportSensorF(log, fileFormat, "advance", "deg", getFuelMs(rpm PASS_ENGINE_PARAMETER), 2);
   \   000001E8   0x0030             MOVS     R0,R6
   \   000001EA   0x.... 0x....      BL       _Z9getFuelMsi
   \   000001EE   0x2002             MOVS     R0,#+2
   \   000001F0   0x9000             STR      R0,[SP, #+0]
   \   000001F2   0x....             ADR.N    R3,??DataTable8_3  ;; "deg"
   \   000001F4   0x.... 0x....      LDR.W    R2,??DataTable22_3
   \   000001F8   0x0029             MOVS     R1,R5
   \   000001FA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001FC   0x0020             MOVS     R0,R4
   \   000001FE   0x.... 0x....      BL       _Z13reportSensorFP7LoggingbPKcS2_fi
    201          	}
    202          
    203          	if (engineConfiguration->hasCltSensor) {
   \                     ??printSensors_6:
   \   00000202   0x.... 0x....      LDR.W    R0,??DataTable18_15
   \   00000206   0x6800             LDR      R0,[R0, #+0]
   \   00000208   0xF890 0x05D8      LDRB     R0,[R0, #+1496]
   \   0000020C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000020E   0x09C0             LSRS     R0,R0,#+7
   \   00000210   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000212   0x2800             CMP      R0,#+0
   \   00000214   0xD00A             BEQ.N    ??printSensors_7
    204          		reportSensorF(log, fileFormat, "CLT", "C", getCoolantTemperature(PASS_ENGINE_PARAMETER_F), 2);
   \   00000216   0x.... 0x....      BL       _Z21getCoolantTemperaturev
   \   0000021A   0x2002             MOVS     R0,#+2
   \   0000021C   0x9000             STR      R0,[SP, #+0]
   \   0000021E   0x....             ADR.N    R3,??DataTable8_4  ;; "C"
   \   00000220   0x....             ADR.N    R2,??DataTable8_5  ;; "CLT"
   \   00000222   0x0029             MOVS     R1,R5
   \   00000224   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000226   0x0020             MOVS     R0,R4
   \   00000228   0x.... 0x....      BL       _Z13reportSensorFP7LoggingbPKcS2_fi
    205          	}
    206          
    207          	reportSensorF(log, fileFormat, "MAT", "C", getIntakeAirTemperature(PASS_ENGINE_PARAMETER_F), 2);
   \                     ??printSensors_7:
   \   0000022C   0x.... 0x....      BL       _Z23getIntakeAirTemperaturev
   \   00000230   0x2002             MOVS     R0,#+2
   \   00000232   0x9000             STR      R0,[SP, #+0]
   \   00000234   0x....             ADR.N    R3,??DataTable8_4  ;; "C"
   \   00000236   0x....             ADR.N    R2,??DataTable10  ;; "MAT"
   \   00000238   0x0029             MOVS     R1,R5
   \   0000023A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000023C   0x0020             MOVS     R0,R4
   \   0000023E   0x.... 0x....      BL       _Z13reportSensorFP7LoggingbPKcS2_fi
    208          
    209          //	debugFloat(&logger, "tch", getTCharge1(tps), 2);
    210          
    211          }
   \   00000242   0xB002             ADD      SP,SP,#+8
   \   00000244   0xECBD 0x8B02      VPOP     {D8}
   \   00000248   0xBD70             POP      {R4-R6,PC}       ;; return
    212          
    213          

   \                                 In section .text, align 2, keep-with-next
    214          void writeLogLine(void) {
   \                     _Z12writeLogLinev:
   \   00000000   0xB580             PUSH     {R7,LR}
    215          #if EFI_FILE_LOGGING || defined(__DOXYGEN__)
    216          	if (!main_loop_started)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable22_4
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD01D             BEQ.N    ??writeLogLine_0
    217          		return;
    218          	resetLogging(&fileLogger);
   \                     ??writeLogLine_1:
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable18_3
   \   00000010   0x.... 0x....      BL       resetLogging
    219          	printSensors(&fileLogger, true);
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable18_3
   \   0000001A   0x.... 0x....      BL       _Z12printSensorsP7Loggingb
    220          
    221          	if (isSdCardAlive()) {
   \   0000001E   0x.... 0x....      BL       isSdCardAlive
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD010             BEQ.N    ??writeLogLine_2
    222          		appendPrintf(&fileLogger, "\r\n");
   \   00000026   0x....             ADR.N    R1,??DataTable9  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable18_3
   \   0000002C   0x.... 0x....      BL       appendPrintf
    223          		appendToLog(fileLogger.buffer);
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable18_3
   \   00000034   0x6AC0             LDR      R0,[R0, #+44]
   \   00000036   0x.... 0x....      BL       appendToLog
    224          		logFileLineIndex++;
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable18_9
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x1C40             ADDS     R0,R0,#+1
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable18_9
   \   00000046   0x6008             STR      R0,[R1, #+0]
    225          	}
    226          #endif /* EFI_FILE_LOGGING */
    227          }
   \                     ??writeLogLine_2:
   \                     ??writeLogLine_0:
   \   00000048   0xBD01             POP      {R0,PC}          ;; return
    228          

   \                                 In section .text, align 2, keep-with-next
    229          static void printState(void) {
   \                     _Z10printStatev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
    230          #if EFI_SHAFT_POSITION_INPUT || defined(__DOXYGEN__)
    231          
    232          	// todo: make SWO work
    233          //	char *msg = "hello\r\n";
    234          //	for(int i=0;i<strlen(msg);i++) {
    235          //		ITM_SendChar(msg[i]);
    236          //	}
    237          
    238          	int rpm = getRpmE(engine);
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable18_11
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x.... 0x....      BL       _ZN13RpmCalculator3rpmEv
   \   00000010   0x0004             MOVS     R4,R0
    239          	if (subscription[(int) RO_TOTAL_REVOLUTION_COUNTER])
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \   00000016   0x7A40             LDRB     R0,[R0, #+9]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD008             BEQ.N    ??printState_0
    240          		debugInt(&logger, "ckp_c", getCrankEventCounter());
   \   0000001C   0x.... 0x....      BL       _Z20getCrankEventCounterv
   \   00000020   0x0002             MOVS     R2,R0
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable24_2
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable26_3
   \   0000002A   0x.... 0x....      BL       debugInt
    241          	if (subscription[(int) RO_RUNNING_REVOLUTION_COUNTER])
   \                     ??printState_0:
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \   00000032   0x7A80             LDRB     R0,[R0, #+10]
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD008             BEQ.N    ??printState_1
    242          		debugInt(&logger, "ckp_r", triggerCentral.triggerState.runningRevolutionCounter);
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable24_3
   \   0000003C   0x6D02             LDR      R2,[R0, #+80]
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable24_4
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable26_3
   \   00000046   0x.... 0x....      BL       debugInt
    243          
    244          	if (subscription[(int) RO_RUNNING_TRIGGER_ERROR])
   \                     ??printState_1:
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \   0000004E   0x7B00             LDRB     R0,[R0, #+12]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD008             BEQ.N    ??printState_2
    245          		debugInt(&logger, "trg_r_errors", triggerCentral.triggerState.runningTriggerErrorCounter);
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable24_3
   \   00000058   0x6C02             LDR      R2,[R0, #+64]
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable24_5
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable26_3
   \   00000062   0x.... 0x....      BL       debugInt
    246          
    247          	if (subscription[(int) RO_RUNNING_ORDERING_TRIGGER_ERROR])
   \                     ??printState_2:
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \   0000006A   0x7B40             LDRB     R0,[R0, #+13]
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD008             BEQ.N    ??printState_3
    248          		debugInt(&logger, "trg_r_order_errors", triggerCentral.triggerState.runningOrderingErrorCounter);
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable24_3
   \   00000074   0x6C82             LDR      R2,[R0, #+72]
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable25
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable26_3
   \   0000007E   0x.... 0x....      BL       debugInt
    249          
    250          	if (subscription[(int) RO_WAVE_CHART_CURRENT_SIZE])
   \                     ??printState_3:
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \   00000086   0x7AC0             LDRB     R0,[R0, #+11]
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD006             BEQ.N    ??printState_4
    251          		debugInt(&logger, "wave_chart_current", 0);
   \   0000008C   0x2200             MOVS     R2,#+0
   \   0000008E   0x.... 0x....      LDR.W    R1,??DataTable26_4
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable26_3
   \   00000096   0x.... 0x....      BL       debugInt
    252          
    253          //	debugInt(&logger, "idl", getIdleSwitch());
    254          
    255          //	debugFloat(&logger, "table_spark", getAdvance(rpm, getMaf()), 2);
    256          
    257          	float engineLoad = getEngineLoadT(PASS_ENGINE_PARAMETER_F);
   \                     ??printState_4:
   \   0000009A   0x.... 0x....      BL       _Z14getEngineLoadTv
   \   0000009E   0xEEB0 0x8A40      VMOV.F32 S16,S0
    258          	float baseFuel = getBaseFuel(rpm PASS_ENGINE_PARAMETER);
   \   000000A2   0x0020             MOVS     R0,R4
   \   000000A4   0x.... 0x....      BL       _Z11getBaseFueli
   \   000000A8   0xEEF0 0x8A40      VMOV.F32 S17,S0
    259          	debugFloat(&logger, "fuel_base", baseFuel, 2);
   \   000000AC   0x2202             MOVS     R2,#+2
   \   000000AE   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \   000000B2   0x.... 0x....      LDR.W    R1,??DataTable26_5
   \   000000B6   0x.... 0x....      LDR.W    R0,??DataTable26_3
   \   000000BA   0x.... 0x....      BL       debugFloat
    260          //	debugFloat(&logger, "fuel_iat", getIatCorrection(getIntakeAirTemperature()), 2);
    261          //	debugFloat(&logger, "fuel_clt", getCltCorrection(getCoolantTemperature()), 2);
    262          	debugFloat(&logger, "fuel_lag", engine->injectorLagMs, 2);
   \   000000BE   0x2202             MOVS     R2,#+2
   \   000000C0   0x.... 0x....      LDR.W    R0,??DataTable18_11
   \   000000C4   0x6800             LDR      R0,[R0, #+0]
   \   000000C6   0xF500 0x50F0      ADD      R0,R0,#+7680
   \   000000CA   0x30F0             ADDS     R0,R0,#+240
   \   000000CC   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000000D0   0x.... 0x....      LDR.W    R1,??DataTable26_6
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable26_3
   \   000000D8   0x.... 0x....      BL       debugFloat
    263          	debugFloat(&logger, "fuel", getFuelMs(rpm PASS_ENGINE_PARAMETER), 2);
   \   000000DC   0x0020             MOVS     R0,R4
   \   000000DE   0x.... 0x....      BL       _Z9getFuelMsi
   \   000000E2   0x2202             MOVS     R2,#+2
   \   000000E4   0x.... 0x....      LDR.W    R1,??DataTable26_7
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable26_3
   \   000000EC   0x.... 0x....      BL       debugFloat
    264          
    265          	debugFloat(&logger, "timing", engine->engineState.timingAdvance, 2);
   \   000000F0   0x2202             MOVS     R2,#+2
   \   000000F2   0x.... 0x....      LDR.W    R0,??DataTable18_11
   \   000000F6   0x6800             LDR      R0,[R0, #+0]
   \   000000F8   0xF500 0x50F0      ADD      R0,R0,#+7680
   \   000000FC   0x30B8             ADDS     R0,R0,#+184
   \   000000FE   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000102   0x.... 0x....      LDR.W    R1,??DataTable26_8
   \   00000106   0x.... 0x....      LDR.W    R0,??DataTable26_3
   \   0000010A   0x.... 0x....      BL       debugFloat
    266          
    267          //		float map = getMap();
    268          
    269          #endif /* EFI_SHAFT_POSITION_INPUT */
    270          }
   \   0000010E   0xECBD 0x8B02      VPOP     {D8}
   \   00000112   0xBD10             POP      {R4,PC}          ;; return
    271          
    272          #define INITIAL_FULL_LOG TRUE
    273          //#define INITIAL_FULL_LOG FALSE
    274          

   \                                 In section .bss, align 4
    275          volatile int needToReportStatus = FALSE;
   \                     needToReportStatus:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
    276          static int prevCkpEventCounter = -1;
   \                     prevCkpEventCounter:
   \   00000000   0xFFFFFFFF         DC32 -1
    277          

   \                                 In section .bss, align 4
    278          static LoggingWithStorage logger2("main event handler");
   \                     logger2:
   \   00000000                      DS8 260
    279          

   \                                 In section .text, align 2, keep-with-next
    280          static void printStatus(void) {
    281          	needToReportStatus = TRUE;
   \                     _Z11printStatusv:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable26_9
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x6001             STR      R1,[R0, #+0]
    282          }
   \   00000008   0x4770             BX       LR               ;; return
    283          
    284          /**
    285           * Time when the firmware version was reported last time, in seconds
    286           * TODO: implement a request/response instead of just constantly sending this out
    287           */

   \                                 In section .data, align 4
    288          static systime_t timeOfPreviousPrintVersion = (systime_t) -1;
   \                     timeOfPreviousPrintVersion:
   \   00000000   0xFFFFFFFF         DC32 4294967295
    289          
    290          #if EFI_PROD_CODE || defined(__DOXYGEN__)

   \                                 In section .text, align 2, keep-with-next
    291          static void printOutPin(const char *pinName, brain_pin_e hwPin) {
   \                     _Z11printOutPinPKc11brain_pin_e:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    292          	appendPrintf(&logger, "outpin%s%s@%s%s", DELIMETER, pinName, hwPortname(hwPin), DELIMETER);
   \   00000008   0x0028             MOVS     R0,R5
   \   0000000A   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   0000000E   0x....             ADR.N    R1,??DataTable10_1  ;; ","
   \   00000010   0x9101             STR      R1,[SP, #+4]
   \   00000012   0x9000             STR      R0,[SP, #+0]
   \   00000014   0x0023             MOVS     R3,R4
   \   00000016   0x....             ADR.N    R2,??DataTable10_1  ;; ","
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable26_10
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable26_3
   \   00000020   0x.... 0x....      BL       appendPrintf
    293          }
   \   00000024   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    294          #endif /* EFI_PROD_CODE */
    295          

   \                                 In section .text, align 2, keep-with-next
    296          static void printInfo(systime_t nowSeconds) {
   \                     _Z9printInfoj:
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    297          	/**
    298          	 * we report the version every 4 seconds - this way the console does not need to
    299          	 * request it and we will display it pretty soon
    300          	 */
    301          	if (overflowDiff(nowSeconds, timeOfPreviousPrintVersion) < 4) {
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable26_11
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x1A20             SUBS     R0,R4,R0
   \   0000000C   0x2804             CMP      R0,#+4
   \   0000000E   0xD362             BCC.N    ??printInfo_0
    302          		return;
    303          	}
    304          	timeOfPreviousPrintVersion = nowSeconds;
   \                     ??printInfo_1:
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable26_11
   \   00000014   0x6004             STR      R4,[R0, #+0]
    305          	appendPrintf(&logger, "rusEfiVersion%s%d@%s %s%s", DELIMETER, getRusEfiVersion(), VCS_VERSION,
    306          			getConfigurationName(engineConfiguration->engineType),
    307          			DELIMETER);
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable18_15
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x.... 0x....      BL       _Z20getConfigurationName13engine_type_e
   \   00000022   0x0005             MOVS     R5,R0
   \   00000024   0x.... 0x....      BL       getRusEfiVersion
   \   00000028   0x....             ADR.N    R1,??DataTable10_1  ;; ","
   \   0000002A   0x9102             STR      R1,[SP, #+8]
   \   0000002C   0x9501             STR      R5,[SP, #+4]
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable26_12
   \   00000032   0x9100             STR      R1,[SP, #+0]
   \   00000034   0x0003             MOVS     R3,R0
   \   00000036   0x....             ADR.N    R2,??DataTable10_1  ;; ","
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable26_13
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable26_3
   \   00000040   0x.... 0x....      BL       appendPrintf
    308          #if EFI_PROD_CODE || defined(__DOXYGEN__)
    309          	printOutPin(CRANK1, boardConfiguration->triggerInputPins[0]);
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable26_14
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0xF8D0 0x1128      LDR      R1,[R0, #+296]
   \   0000004E   0x....             ADR.N    R0,??DataTable10_2  ;; 0x74, 0x31, 0x00, 0x00
   \   00000050   0x.... 0x....      BL       _Z11printOutPinPKc11brain_pin_e
    310          	printOutPin(CRANK2, boardConfiguration->triggerInputPins[1]);
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable26_14
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0xF8D0 0x112C      LDR      R1,[R0, #+300]
   \   0000005E   0x....             ADR.N    R0,??DataTable10_3  ;; 0x74, 0x32, 0x00, 0x00
   \   00000060   0x.... 0x....      BL       _Z11printOutPinPKc11brain_pin_e
    311          #if EFI_WAVE_ANALYZER || defined(__DOXYGEN__)
    312          	printOutPin(WA_CHANNEL_1, boardConfiguration->logicAnalyzerPins[0]);
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable26_14
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0xF8D0 0x1184      LDR      R1,[R0, #+388]
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable26_15
   \   00000072   0x.... 0x....      BL       _Z11printOutPinPKc11brain_pin_e
    313          	printOutPin(WA_CHANNEL_2, boardConfiguration->logicAnalyzerPins[1]);
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable26_14
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0xF8D0 0x1188      LDR      R1,[R0, #+392]
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable26_16
   \   00000084   0x.... 0x....      BL       _Z11printOutPinPKc11brain_pin_e
    314          #endif
    315          
    316          	for (int i = 0; i < engineConfiguration->specs.cylindersCount; i++) {
   \   00000088   0x2500             MOVS     R5,#+0
   \                     ??printInfo_2:
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable18_15
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
   \   00000090   0xF8D0 0x0194      LDR      R0,[R0, #+404]
   \   00000094   0x4285             CMP      R5,R0
   \   00000096   0xDA1E             BGE.N    ??printInfo_3
    317          		printOutPin(enginePins.coils[i].name, boardConfiguration->ignitionPins[i]);
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable26_14
   \   0000009C   0x6800             LDR      R0,[R0, #+0]
   \   0000009E   0xEB10 0x0085      ADDS     R0,R0,R5, LSL #+2
   \   000000A2   0x6D41             LDR      R1,[R0, #+84]
   \   000000A4   0x2014             MOVS     R0,#+20
   \   000000A6   0x.... 0x....      LDR.W    R2,??DataTable26_17
   \   000000AA   0xFB00 0x2005      MLA      R0,R0,R5,R2
   \   000000AE   0xF8D0 0x0160      LDR      R0,[R0, #+352]
   \   000000B2   0x.... 0x....      BL       _Z11printOutPinPKc11brain_pin_e
    318          
    319          		printOutPin(enginePins.injectors[i].name, boardConfiguration->injectionPins[i]);
   \   000000B6   0x.... 0x....      LDR.W    R0,??DataTable26_14
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0xEB10 0x0085      ADDS     R0,R0,R5, LSL #+2
   \   000000C0   0x6A01             LDR      R1,[R0, #+32]
   \   000000C2   0x2014             MOVS     R0,#+20
   \   000000C4   0x.... 0x....      LDR.W    R2,??DataTable26_17
   \   000000C8   0xFB00 0x2005      MLA      R0,R0,R5,R2
   \   000000CC   0x6F00             LDR      R0,[R0, #+112]
   \   000000CE   0x.... 0x....      BL       _Z11printOutPinPKc11brain_pin_e
    320          	}
   \   000000D2   0x1C6D             ADDS     R5,R5,#+1
   \   000000D4   0xE7D9             B.N      ??printInfo_2
    321          #endif
    322          
    323          }
   \                     ??printInfo_3:
   \                     ??printInfo_0:
   \   000000D6   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    324          

   \                                 In section .data, align 4
    325          static systime_t timeOfPreviousReport = (systime_t) -1;
   \                     timeOfPreviousReport:
   \   00000000   0xFFFFFFFF         DC32 4294967295
    326          
    327          extern char errorMessageBuffer[200];
    328          
    329          /**
    330           * @brief Sends all pending data to dev console
    331           */

   \                                 In section .text, align 2, keep-with-next
    332          void updateDevConsoleState(Engine *engine) {
   \                     _Z21updateDevConsoleStateP6Engine:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0005             MOVS     R5,R0
    333          	if (!isConsoleReady()) {
   \   00000004   0x.... 0x....      BL       _Z14isConsoleReadyv
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD046             BEQ.N    ??updateDevConsoleState_0
    334          		return;
    335          	}
    336          // looks like this is not needed anymore
    337          //	checkIfShouldHalt();
    338          	printPending();
   \                     ??updateDevConsoleState_1:
   \   0000000C   0x.... 0x....      BL       printPending
    339          
    340          	/**
    341          	 * this should go before the firmware error so that console can detect connection
    342          	 */
    343          	printSensors(&logger, false);
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable26_3
   \   00000016   0x.... 0x....      BL       _Z12printSensorsP7Loggingb
    344          
    345          #if EFI_PROD_CODE || defined(__DOXYGEN__)
    346          	// todo: unify with simulator!
    347          	if (hasFirmwareError()) {
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable26_18
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD010             BEQ.N    ??updateDevConsoleState_2
    348          		scheduleMsg(&logger, "FATAL error: %s", errorMessageBuffer);
   \   00000024   0x.... 0x....      LDR.W    R2,??DataTable26_19
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable26_20
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable26_3
   \   00000030   0x.... 0x....      BL       scheduleMsg
    349          		warningEnabled = false;
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable22
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0x6001             STR      R1,[R0, #+0]
    350          		scheduleLogging(&logger);
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable26_3
   \   00000040   0x.... 0x....      BL       scheduleLogging
    351          		return;
   \   00000044   0xE029             B.N      ??updateDevConsoleState_0
    352          	}
    353          #endif
    354          
    355          #if (EFI_PROD_CODE && HAL_USE_ADC) || defined(__DOXYGEN__)
    356          	pokeAdcInputs();
   \                     ??updateDevConsoleState_2:
   \   00000046   0x.... 0x....      BL       _Z13pokeAdcInputsv
    357          #endif
    358          
    359          	if (!fullLog) {
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable26_21
   \   0000004E   0x7800             LDRB     R0,[R0, #+0]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD022             BEQ.N    ??updateDevConsoleState_0
    360          		return;
    361          	}
    362          
    363          	systime_t nowSeconds = getTimeNowSeconds();
   \                     ??updateDevConsoleState_3:
   \   00000054   0x.... 0x....      BL       getTimeNowSeconds
   \   00000058   0x0006             MOVS     R6,R0
    364          	printInfo(nowSeconds);
   \   0000005A   0x0030             MOVS     R0,R6
   \   0000005C   0x.... 0x....      BL       _Z9printInfoj
    365          
    366          #if EFI_ENGINE_CONTROL || defined(__DOXYGEN__)
    367          	int currentCkpEventCounter = getCrankEventCounter();
   \   00000060   0x.... 0x....      BL       _Z20getCrankEventCounterv
   \   00000064   0x0004             MOVS     R4,R0
    368          	if (prevCkpEventCounter == currentCkpEventCounter && timeOfPreviousReport == nowSeconds) {
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable26_22
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0x42A0             CMP      R0,R4
   \   0000006E   0xD104             BNE.N    ??updateDevConsoleState_4
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable26_23
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x42B0             CMP      R0,R6
   \   00000078   0xD00F             BEQ.N    ??updateDevConsoleState_0
    369          		return;
    370          	}
    371          	timeOfPreviousReport = nowSeconds;
   \                     ??updateDevConsoleState_4:
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable26_23
   \   0000007E   0x6006             STR      R6,[R0, #+0]
    372          
    373          	prevCkpEventCounter = currentCkpEventCounter;
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable26_22
   \   00000084   0x6004             STR      R4,[R0, #+0]
    374          #else
    375          	chThdSleepMilliseconds(200);
    376          #endif
    377          
    378          	printState();
   \   00000086   0x.... 0x....      BL       _Z10printStatev
    379          
    380          #if EFI_WAVE_ANALYZER
    381          	printWave(&logger);
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable26_3
   \   0000008E   0x.... 0x....      BL       _Z9printWaveP7Logging
    382          #endif
    383          
    384          	scheduleLogging(&logger);
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable26_3
   \   00000096   0x.... 0x....      BL       scheduleLogging
    385          }
   \                     ??updateDevConsoleState_0:
   \   0000009A   0xBD70             POP      {R4-R6,PC}       ;; return
    386          
    387          #if EFI_PROD_CODE
    388          
    389          /*
    390           * command example:
    391           * sfm 3500 400
    392           * that would be 'show fuel for rpm 3500 maf 4.0'
    393           */
    394          

   \                                 In section .text, align 4, keep-with-next
    395          static void showFuelInfo2(float rpm, float engineLoad) {
   \                     _Z13showFuelInfo2ff:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B08      VPUSH    {D8-D11}
   \   00000006   0xB084             SUB      SP,SP,#+16
   \   00000008   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   0000000C   0xEEF0 0x8A60      VMOV.F32 S17,S1
    396          
    397          	float baseFuelMs = getBaseTableFuel(engineConfiguration, (int) rpm, engineLoad);
   \   00000010   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \   00000014   0xEEFD 0x0AC8      VCVT.S32.F32 S1,S16
   \   00000018   0xEE10 0x1A90      VMOV     R1,S1
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable18_15
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x.... 0x....      BL       _Z16getBaseTableFuelP22engine_configuration_sif
   \   00000026   0xEEB0 0x9A40      VMOV.F32 S18,S0
    398          
    399          	scheduleMsg(&logger, "SD magic fuel %f", sdMath(engineConfiguration, 100, 100, 14.7, convertCelsiusToKelvin(20)));
   \   0000002A   0xEDDF 0x....      VLDR.W   S3,??DataTable15  ;; 0x43929333
   \   0000002E   0xED9F 0x....      VLDR.W   S2,??DataTable15_1  ;; 0x416b3333
   \   00000032   0xEDDF 0x....      VLDR.W   S1,??DataTable15_2  ;; 0x42c80000
   \   00000036   0xED9F 0x....      VLDR.W   S0,??DataTable15_2  ;; 0x42c80000
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable18_15
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x.... 0x....      BL       _Z6sdMathP22engine_configuration_sffff
   \   00000044   0xEE10 0x0A10      VMOV     R0,S0
   \   00000048   0x.... 0x....      BL       __aeabi_f2d
   \   0000004C   0x0002             MOVS     R2,R0
   \   0000004E   0x000B             MOVS     R3,R1
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable26_24
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000058   0x.... 0x....      BL       scheduleMsg
    400          	scheduleMsg(&logger, "inj flow %fcc/min displacement %fL", engineConfiguration->injector.flow,
    401          			engineConfiguration->specs.displacement);
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable18_15
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0xF8D0 0x0190      LDR      R0,[R0, #+400]
   \   00000066   0x.... 0x....      BL       __aeabi_f2d
   \   0000006A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable18_15
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0x6880             LDR      R0,[R0, #+8]
   \   00000076   0x.... 0x....      BL       __aeabi_f2d
   \   0000007A   0x0002             MOVS     R2,R0
   \   0000007C   0x000B             MOVS     R3,R1
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable26_25
   \   00000082   0x....             LDR.N    R0,??DataTable18_1
   \   00000084   0x.... 0x....      BL       scheduleMsg
    402          
    403          	scheduleMsg(&logger2, "algo=%s/pump=%s", getEngine_load_mode_e(engineConfiguration->algorithm),
    404          			boolToString(enginePins.fuelPumpRelay.getLogicValue()));
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable26_26
   \   0000008C   0x.... 0x....      BL       _ZN9OutputPin13getLogicValueEv
   \   00000090   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000092   0x.... 0x....      BL       _Z12boolToStringb
   \   00000096   0x0004             MOVS     R4,R0
   \   00000098   0x....             LDR.N    R0,??DataTable18_15
   \   0000009A   0x6800             LDR      R0,[R0, #+0]
   \   0000009C   0xF8D0 0x01A8      LDR      R0,[R0, #+424]
   \   000000A0   0x.... 0x....      BL       _Z21getEngine_load_mode_e18engine_load_mode_e
   \   000000A4   0x0023             MOVS     R3,R4
   \   000000A6   0x0002             MOVS     R2,R0
   \   000000A8   0x.... 0x....      LDR.W    R1,??DataTable26_27
   \   000000AC   0x....             LDR.N    R0,??DataTable18_5
   \   000000AE   0x.... 0x....      BL       scheduleMsg
    405          
    406          	scheduleMsg(&logger2, "phase=%f correction=%f", getinjectionOffset(rpm), engineConfiguration->globalFuelCorrection);
   \   000000B2   0xEEBD 0x0AC8      VCVT.S32.F32 S0,S16
   \   000000B6   0xEE10 0x0A10      VMOV     R0,S0
   \   000000BA   0x.... 0x....      BL       _Z18getinjectionOffseti
   \   000000BE   0xEEF0 0x9A40      VMOV.F32 S19,S0
   \   000000C2   0x....             LDR.N    R0,??DataTable18_15
   \   000000C4   0x6800             LDR      R0,[R0, #+0]
   \   000000C6   0xF8D0 0x0238      LDR      R0,[R0, #+568]
   \   000000CA   0x.... 0x....      BL       __aeabi_f2d
   \   000000CE   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000000D2   0xEE19 0x0A90      VMOV     R0,S19
   \   000000D6   0x.... 0x....      BL       __aeabi_f2d
   \   000000DA   0x0002             MOVS     R2,R0
   \   000000DC   0x000B             MOVS     R3,R1
   \   000000DE   0x.... 0x....      LDR.W    R1,??DataTable26_28
   \   000000E2   0x....             LDR.N    R0,??DataTable18_5
   \   000000E4   0x.... 0x....      BL       scheduleMsg
    407          
    408          	scheduleMsg(&logger2, "baro correction=%f", engine->engineState.baroCorrection);
   \   000000E8   0xF641 0x60D0      MOVW     R0,#+7888
   \   000000EC   0x.... 0x....      LDR.W    R1,??DataTable26_29
   \   000000F0   0x6809             LDR      R1,[R1, #+0]
   \   000000F2   0x5840             LDR      R0,[R0, R1]
   \   000000F4   0x.... 0x....      BL       __aeabi_f2d
   \   000000F8   0x0002             MOVS     R2,R0
   \   000000FA   0x000B             MOVS     R3,R1
   \   000000FC   0x.... 0x....      LDR.W    R1,??DataTable26_30
   \   00000100   0x....             LDR.N    R0,??DataTable18_5
   \   00000102   0x.... 0x....      BL       scheduleMsg
    409          
    410          #if EFI_ENGINE_CONTROL
    411          	scheduleMsg(&logger, "base cranking fuel %f", engineConfiguration->cranking.baseFuel);
   \   00000106   0x....             LDR.N    R0,??DataTable18_15
   \   00000108   0x6800             LDR      R0,[R0, #+0]
   \   0000010A   0x6DC0             LDR      R0,[R0, #+92]
   \   0000010C   0x.... 0x....      BL       __aeabi_f2d
   \   00000110   0x0002             MOVS     R2,R0
   \   00000112   0x000B             MOVS     R3,R1
   \   00000114   0x.... 0x....      LDR.W    R1,??DataTable26_31
   \   00000118   0x....             LDR.N    R0,??DataTable18_1
   \   0000011A   0x.... 0x....      BL       scheduleMsg
    412          	scheduleMsg(&logger2, "cranking fuel: %f", getCrankingFuel(PASS_ENGINE_PARAMETER_F));
   \   0000011E   0x.... 0x....      BL       _Z15getCrankingFuelv
   \   00000122   0xEE10 0x0A10      VMOV     R0,S0
   \   00000126   0x.... 0x....      BL       __aeabi_f2d
   \   0000012A   0x0002             MOVS     R2,R0
   \   0000012C   0x000B             MOVS     R3,R1
   \   0000012E   0x.... 0x....      LDR.W    R1,??DataTable26_32
   \   00000132   0x....             LDR.N    R0,??DataTable18_5
   \   00000134   0x.... 0x....      BL       scheduleMsg
    413          
    414          	if (engine->rpmCalculator.isRunning()) {
   \   00000138   0x.... 0x....      LDR.W    R0,??DataTable26_29
   \   0000013C   0x6800             LDR      R0,[R0, #+0]
   \   0000013E   0x.... 0x....      BL       _ZN13RpmCalculator9isRunningEv
   \   00000142   0x2800             CMP      R0,#+0
   \   00000144   0xD05F             BEQ.N    ??showFuelInfo2_0
    415          		float iatCorrection = engine->engineState.iatFuelCorrection;
   \   00000146   0x.... 0x....      LDR.W    R0,??DataTable26_29
   \   0000014A   0x6800             LDR      R0,[R0, #+0]
   \   0000014C   0xF500 0x50F0      ADD      R0,R0,#+7680
   \   00000150   0x30C4             ADDS     R0,R0,#+196
   \   00000152   0xEDD0 0x9A00      VLDR     S19,[R0, #0]
    416          		float cltCorrection = engine->engineState.cltFuelCorrection;
   \   00000156   0x.... 0x....      LDR.W    R0,??DataTable26_29
   \   0000015A   0x6800             LDR      R0,[R0, #+0]
   \   0000015C   0xF500 0x50F0      ADD      R0,R0,#+7680
   \   00000160   0x30C8             ADDS     R0,R0,#+200
   \   00000162   0xED90 0xAA00      VLDR     S20,[R0, #0]
    417          		float injectorLag = engine->injectorLagMs;
   \   00000166   0x.... 0x....      LDR.W    R0,??DataTable26_29
   \   0000016A   0x6800             LDR      R0,[R0, #+0]
   \   0000016C   0xF500 0x50F0      ADD      R0,R0,#+7680
   \   00000170   0x30F0             ADDS     R0,R0,#+240
   \   00000172   0xEDD0 0xAA00      VLDR     S21,[R0, #0]
    418          		scheduleMsg(&logger2, "rpm=%f engineLoad=%f", rpm, engineLoad);
   \   00000176   0xEE18 0x0A90      VMOV     R0,S17
   \   0000017A   0x.... 0x....      BL       __aeabi_f2d
   \   0000017E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000182   0xEE18 0x0A10      VMOV     R0,S16
   \   00000186   0x.... 0x....      BL       __aeabi_f2d
   \   0000018A   0x0002             MOVS     R2,R0
   \   0000018C   0x000B             MOVS     R3,R1
   \   0000018E   0x.... 0x....      LDR.W    R1,??DataTable26_33
   \   00000192   0x....             LDR.N    R0,??DataTable18_5
   \   00000194   0x.... 0x....      BL       scheduleMsg
    419          		scheduleMsg(&logger2, "baseFuel=%f", baseFuelMs);
   \   00000198   0xEE19 0x0A10      VMOV     R0,S18
   \   0000019C   0x.... 0x....      BL       __aeabi_f2d
   \   000001A0   0x0002             MOVS     R2,R0
   \   000001A2   0x000B             MOVS     R3,R1
   \   000001A4   0x.... 0x....      LDR.W    R1,??DataTable26_34
   \   000001A8   0x....             LDR.N    R0,??DataTable18_5
   \   000001AA   0x.... 0x....      BL       scheduleMsg
    420          
    421          		scheduleMsg(&logger2, "iatCorrection=%f cltCorrection=%f injectorLag=%f", iatCorrection, cltCorrection,
    422          				injectorLag);
   \   000001AE   0xEE1A 0x0A90      VMOV     R0,S21
   \   000001B2   0x.... 0x....      BL       __aeabi_f2d
   \   000001B6   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000001BA   0xEE1A 0x0A10      VMOV     R0,S20
   \   000001BE   0x.... 0x....      BL       __aeabi_f2d
   \   000001C2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000001C6   0xEE19 0x0A90      VMOV     R0,S19
   \   000001CA   0x.... 0x....      BL       __aeabi_f2d
   \   000001CE   0x0002             MOVS     R2,R0
   \   000001D0   0x000B             MOVS     R3,R1
   \   000001D2   0x.... 0x....      LDR.W    R1,??DataTable26_35
   \   000001D6   0x....             LDR.N    R0,??DataTable18_5
   \   000001D8   0x.... 0x....      BL       scheduleMsg
    423          
    424          		float value = getRunningFuel(baseFuelMs, (int) rpm PASS_ENGINE_PARAMETER);
   \   000001DC   0xEEBD 0x0AC8      VCVT.S32.F32 S0,S16
   \   000001E0   0xEE10 0x0A10      VMOV     R0,S0
   \   000001E4   0xEEB0 0x0A49      VMOV.F32 S0,S18
   \   000001E8   0x.... 0x....      BL       _Z14getRunningFuelfi
   \   000001EC   0xEEB0 0xBA40      VMOV.F32 S22,S0
    425          		scheduleMsg(&logger2, "injection pulse width: %f", value);
   \   000001F0   0xEE1B 0x0A10      VMOV     R0,S22
   \   000001F4   0x.... 0x....      BL       __aeabi_f2d
   \   000001F8   0x0002             MOVS     R2,R0
   \   000001FA   0x000B             MOVS     R3,R1
   \   000001FC   0x.... 0x....      LDR.W    R1,??DataTable26_36
   \   00000200   0x....             LDR.N    R0,??DataTable18_5
   \   00000202   0x.... 0x....      BL       scheduleMsg
    426          	}
    427          #endif
    428          }
   \                     ??showFuelInfo2_0:
   \   00000206   0xB004             ADD      SP,SP,#+16
   \   00000208   0xECBD 0x8B08      VPOP     {D8-D11}
   \   0000020C   0xBD10             POP      {R4,PC}          ;; return
    429          
    430          #if EFI_ENGINE_CONTROL

   \                                 In section .text, align 2, keep-with-next
    431          static void showFuelInfo(void) {
   \                     _Z12showFuelInfov:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
    432          	showFuelInfo2((float) getRpmE(engine), getEngineLoadT(PASS_ENGINE_PARAMETER_F));
   \   00000006   0x.... 0x....      BL       _Z14getEngineLoadTv
   \   0000000A   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable26_29
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x.... 0x....      BL       _ZN13RpmCalculator3rpmEv
   \   00000018   0xEE00 0x0A10      VMOV     S0,R0
   \   0000001C   0xEEF0 0x0A48      VMOV.F32 S1,S16
   \   00000020   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000024   0x.... 0x....      BL       _Z13showFuelInfo2ff
    433          }
   \   00000028   0xECBD 0x8B02      VPOP     {D8}
   \   0000002C   0xBD01             POP      {R0,PC}          ;; return
    434          #endif
    435          
    436          #endif /* EFI_PROD_CODE */
    437          

   \                                 In section .bss, align 8
    438          static THD_WORKING_AREA(lcdThreadStack, UTILITY_THREAD_STACK_SIZE);
   \                     lcdThreadStack:
   \   00000000                      DS8 712
    439          
    440          /**
    441           * blinking thread to show that we are alive
    442           * that's a trivial task - a smaller stack should work
    443           */

   \                                 In section .bss, align 8
    444          static THD_WORKING_AREA(blinkingStack, 128);
   \                     blinkingStack:
   \   00000000                      DS8 440
    445          

   \                                 In section .bss, align 4
    446          static OutputPin communicationPin;
   \                     communicationPin:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
    447          OutputPin checkEnginePin;
   \                     checkEnginePin:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
    448          OutputPin warningPin;
   \                     warningPin:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
    449          OutputPin runningPin;
   \                     runningPin:
   \   00000000                      DS8 16
    450          extern engine_pins_s enginePins;
    451          

   \                                 In section .data, align 4
    452          static OutputPin *leds[] = { &warningPin, &runningPin, &enginePins.errorLedPin, &communicationPin, &checkEnginePin };
   \                     leds:
   \   00000000   0x........         DC32 warningPin, runningPin, enginePins + 50H, communicationPin
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x........         DC32 checkEnginePin
    453          

   \                                 In section .text, align 2, keep-with-next
    454          static void initStatisLeds() {
   \                     _Z14initStatisLedsv:
   \   00000000   0xB580             PUSH     {R7,LR}
    455          #if EFI_PROD_CODE
    456          	outputPinRegister("communication status 1", &communicationPin,
    457          	LED_COMMUNICATION_PORT, LED_COMMUNICATION_PIN);
   \   00000002   0x230F             MOVS     R3,#+15
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable26_37  ;; 0x40020c00
   \   00000008   0x....             LDR.N    R1,??DataTable18_6
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable26_38
   \   0000000E   0x.... 0x....      BL       _Z17outputPinRegisterPKcP9OutputPinP12GPIO_TypeDefj
    458          #endif
    459          
    460          #if EFI_WARNING_LED
    461          	outputPinRegister("warning", &warningPin, LED_WARNING_PORT,
    462          	LED_WARNING_PIN);
   \   00000012   0x230D             MOVS     R3,#+13
   \   00000014   0x.... 0x....      LDR.W    R2,??DataTable26_37  ;; 0x40020c00
   \   00000018   0x....             LDR.N    R1,??DataTable18_8
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable26_39
   \   0000001E   0x.... 0x....      BL       _Z17outputPinRegisterPKcP9OutputPinP12GPIO_TypeDefj
    463          	outputPinRegister("is running status", &runningPin, LED_RUNNING_STATUS_PORT,
    464          	LED_RUNNING_STATUS_PIN);
   \   00000022   0x230C             MOVS     R3,#+12
   \   00000024   0x.... 0x....      LDR.W    R2,??DataTable26_37  ;; 0x40020c00
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable21
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable26_40
   \   00000030   0x.... 0x....      BL       _Z17outputPinRegisterPKcP9OutputPinP12GPIO_TypeDefj
    465          #endif /* EFI_WARNING_LED */
    466          }
   \   00000034   0xBD01             POP      {R0,PC}          ;; return
    467          
    468          /**
    469           * This method would blink all the LEDs just to test them
    470           */

   \                                 In section .text, align 2, keep-with-next
    471          static void initialLedsBlink(void) {
   \                     _Z16initialLedsBlinkv:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    472          	int size = sizeof(leds) / sizeof(leds[0]);
   \   00000002   0x2405             MOVS     R4,#+5
    473          	for (int i = 0; i < size; i++)
   \   00000004   0x2500             MOVS     R5,#+0
   \                     ??initialLedsBlink_0:
   \   00000006   0x42A5             CMP      R5,R4
   \   00000008   0xDA08             BGE.N    ??initialLedsBlink_1
    474          		leds[i]->setValue(1);
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable26_41
   \   00000010   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   00000014   0x.... 0x....      BL       _ZN9OutputPin8setValueEi
   \   00000018   0x1C6D             ADDS     R5,R5,#+1
   \   0000001A   0xE7F4             B.N      ??initialLedsBlink_0
    475          
    476          	chThdSleepMilliseconds(100);
   \                     ??initialLedsBlink_1:
   \   0000001C   0x2064             MOVS     R0,#+100
   \   0000001E   0x.... 0x....      BL       chThdSleep
    477          
    478          	for (int i = 0; i < size; i++)
   \   00000022   0x2500             MOVS     R5,#+0
   \                     ??initialLedsBlink_2:
   \   00000024   0x42A5             CMP      R5,R4
   \   00000026   0xDA08             BGE.N    ??initialLedsBlink_3
    479          		leds[i]->setValue(0);
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable26_41
   \   0000002E   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   00000032   0x.... 0x....      BL       _ZN9OutputPin8setValueEi
   \   00000036   0x1C6D             ADDS     R5,R5,#+1
   \   00000038   0xE7F4             B.N      ??initialLedsBlink_2
    480          }
   \                     ??initialLedsBlink_3:
   \   0000003A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    481          

   \                                 In section .data, align 4
    482          int blinkingPeriod = 33;
   \                     blinkingPeriod:
   \   00000000   0x00000021         DC32 33
    483          
    484          /**
    485           * this is useful to test connectivity
    486           */

   \                                 In section .text, align 2, keep-with-next
    487          static void setBlinkingPeriod(int value) {
    488          	if (value > 0)
   \                     _Z17setBlinkingPeriodi:
   \   00000000   0x2801             CMP      R0,#+1
   \   00000002   0xDB02             BLT.N    ??setBlinkingPeriod_0
    489          		blinkingPeriod = value;
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable26_42
   \   00000008   0x6008             STR      R0,[R1, #+0]
    490          }
   \                     ??setBlinkingPeriod_0:
   \   0000000A   0x4770             BX       LR               ;; return
    491          
    492          #if EFI_PROD_CODE || defined(__DOXYGEN__)
    493          
    494          extern efitick_t lastDecodingErrorTime;
    495          

   \                                 In section .text, align 2, keep-with-next
    496          static bool_t isTriggerErrorNow() {
   \                     _Z17isTriggerErrorNowv:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    497          	bool_t justHadError = (getTimeNowNt() - lastDecodingErrorTime) < US2NT(2 * 1000 * 3 * blinkingPeriod);
   \   00000002   0x.... 0x....      BL       getTimeNowNt
   \   00000006   0x.... 0x....      LDR.W    R2,??DataTable26_43
   \   0000000A   0xE9D2 0x4500      LDRD     R4,R5,[R2, #+0]
   \   0000000E   0x1B00             SUBS     R0,R0,R4
   \   00000010   0x41A9             SBCS     R1,R1,R5
   \   00000012   0x.... 0x....      LDR.W    R2,??DataTable26_42
   \   00000016   0x6812             LDR      R2,[R2, #+0]
   \   00000018   0xF241 0x7370      MOVW     R3,#+6000
   \   0000001C   0x435A             MULS     R2,R3,R2
   \   0000001E   0x23A8             MOVS     R3,#+168
   \   00000020   0xFB83 0x2302      SMULL    R2,R3,R3,R2
   \   00000024   0x4299             CMP      R1,R3
   \   00000026   0xDC04             BGT.N    ??isTriggerErrorNow_0
   \   00000028   0xDB01             BLT.N    ??isTriggerErrorNow_1
   \   0000002A   0x4290             CMP      R0,R2
   \   0000002C   0xD201             BCS.N    ??isTriggerErrorNow_0
   \                     ??isTriggerErrorNow_1:
   \   0000002E   0x2401             MOVS     R4,#+1
   \   00000030   0xE000             B.N      ??isTriggerErrorNow_2
   \                     ??isTriggerErrorNow_0:
   \   00000032   0x2400             MOVS     R4,#+0
    498          	return justHadError || isTriggerDecoderError();
   \                     ??isTriggerErrorNow_2:
   \   00000034   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000036   0x2C00             CMP      R4,#+0
   \   00000038   0xD102             BNE.N    ??isTriggerErrorNow_3
   \   0000003A   0x.... 0x....      BL       _Z21isTriggerDecoderErrorv
   \   0000003E   0xE000             B.N      ??isTriggerErrorNow_4
   \                     ??isTriggerErrorNow_3:
   \   00000040   0x2001             MOVS     R0,#+1
   \                     ??isTriggerErrorNow_4:
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    499          }
    500          
    501          /**
    502           * this thread has a lower-then-usual stack size so we cannot afford *print* methods here
    503           */

   \                                 In section .text, align 2, keep-with-next
    504          static void blinkingThread(void *arg) {
   \                     _Z14blinkingThreadPv:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    505          	(void) arg;
    506          	chRegSetThreadName("communication blinking");
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable26_44
   \   00000008   0x6980             LDR      R0,[R0, #+24]
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable26_45
   \   0000000E   0x6181             STR      R1,[R0, #+24]
    507          
    508          	initialLedsBlink();
   \   00000010   0x.... 0x....      BL       _Z16initialLedsBlinkv
    509          
    510          	while (true) {
    511          		int delayMs = isConsoleReady() ? 3 * blinkingPeriod : blinkingPeriod;
   \                     ??blinkingThread_0:
   \   00000014   0x.... 0x....      BL       _Z14isConsoleReadyv
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD006             BEQ.N    ??blinkingThread_1
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable26_42
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x2103             MOVS     R1,#+3
   \   00000024   0xFB01 0xF500      MUL      R5,R1,R0
   \   00000028   0xE002             B.N      ??blinkingThread_2
   \                     ??blinkingThread_1:
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable26_42
   \   0000002E   0x6805             LDR      R5,[R0, #+0]
    512          
    513          #if EFI_INTERNAL_FLASH || defined(__DOXYGEN__)
    514          		if (getNeedToWriteConfiguration()) {
   \                     ??blinkingThread_2:
   \   00000030   0x.... 0x....      BL       _Z27getNeedToWriteConfigurationv
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD000             BEQ.N    ??blinkingThread_3
    515          			delayMs = 2 * delayMs;
   \   00000038   0x006D             LSLS     R5,R5,#+1
    516          		}
    517          #endif
    518          
    519          		communicationPin.setValue(0);
   \                     ??blinkingThread_3:
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0x....             LDR.N    R0,??DataTable18_6
   \   0000003E   0x.... 0x....      BL       _ZN9OutputPin8setValueEi
    520          		warningPin.setValue(0);
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x....             LDR.N    R0,??DataTable18_8
   \   00000046   0x.... 0x....      BL       _ZN9OutputPin8setValueEi
    521          		chThdSleepMilliseconds(delayMs);
   \   0000004A   0xF44F 0x707A      MOV      R0,#+1000
   \   0000004E   0xFB00 0xF005      MUL      R0,R0,R5
   \   00000052   0x1E40             SUBS     R0,R0,#+1
   \   00000054   0xF44F 0x717A      MOV      R1,#+1000
   \   00000058   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000005C   0x1C40             ADDS     R0,R0,#+1
   \   0000005E   0x.... 0x....      BL       chThdSleep
    522          
    523          		communicationPin.setValue(1);
   \   00000062   0x2101             MOVS     R1,#+1
   \   00000064   0x....             LDR.N    R0,??DataTable18_6
   \   00000066   0x.... 0x....      BL       _ZN9OutputPin8setValueEi
    524          #if EFI_ENGINE_CONTROL || defined(__DOXYGEN__)
    525          		if (isTriggerErrorNow() || isIgnitionTimingError())
   \   0000006A   0x.... 0x....      BL       _Z17isTriggerErrorNowv
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD103             BNE.N    ??blinkingThread_4
   \   00000072   0x.... 0x....      BL       _Z21isIgnitionTimingErrorv
   \   00000076   0x2800             CMP      R0,#+0
   \   00000078   0xD003             BEQ.N    ??blinkingThread_5
    526          			warningPin.setValue(1);
   \                     ??blinkingThread_4:
   \   0000007A   0x2101             MOVS     R1,#+1
   \   0000007C   0x....             LDR.N    R0,??DataTable18_8
   \   0000007E   0x.... 0x....      BL       _ZN9OutputPin8setValueEi
    527          #endif
    528          		chThdSleepMilliseconds(delayMs);
   \                     ??blinkingThread_5:
   \   00000082   0xF44F 0x707A      MOV      R0,#+1000
   \   00000086   0xFB00 0xF005      MUL      R0,R0,R5
   \   0000008A   0x1E40             SUBS     R0,R0,#+1
   \   0000008C   0xF44F 0x717A      MOV      R1,#+1000
   \   00000090   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000094   0x1C40             ADDS     R0,R0,#+1
   \   00000096   0x.... 0x....      BL       chThdSleep
   \   0000009A   0xE7BB             B.N      ??blinkingThread_0
    529          
    530          	}
    531          }
    532          
    533          #endif /* EFI_PROD_CODE */
    534          

   \                                 In section .text, align 2, keep-with-next
    535          static void lcdThread(void *arg) {
   \                     _Z9lcdThreadPv:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    536          	(void)arg;
    537          	chRegSetThreadName("lcd");
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable26_44
   \   00000008   0x6980             LDR      R0,[R0, #+24]
   \   0000000A   0x....             ADR.N    R1,??DataTable18  ;; "lcd"
   \   0000000C   0x6181             STR      R1,[R0, #+24]
    538          	while (true) {
    539          #if EFI_HD44780_LCD
    540          		updateHD44780lcd(engine);
   \                     ??lcdThread_0:
   \   0000000E   0x....             LDR.N    R0,??DataTable18_11
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       _Z16updateHD44780lcdP6Engine
    541          #endif
    542          		chThdSleepMilliseconds(engineConfiguration->bc.lcdThreadPeriod);
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable26_46
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0xF8D0 0x03B0      LDR      R0,[R0, #+944]
   \   00000020   0xF44F 0x717A      MOV      R1,#+1000
   \   00000024   0x4348             MULS     R0,R1,R0
   \   00000026   0x1E40             SUBS     R0,R0,#+1
   \   00000028   0xF44F 0x717A      MOV      R1,#+1000
   \   0000002C   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000030   0x1C40             ADDS     R0,R0,#+1
   \   00000032   0x.... 0x....      BL       chThdSleep
   \   00000036   0xE7EA             B.N      ??lcdThread_0
    543          	}
    544          }
    545          
    546          #if EFI_TUNER_STUDIO
    547          
    548          extern fuel_Map3D_t veMap;
    549          

   \                                 In section .text, align 4, keep-with-next
    550          void updateTunerStudioState(TunerStudioOutputChannels *tsOutputChannels DECLARE_ENGINE_PARAMETER_S) {
   \                     _Z22updateTunerStudioStateP25TunerStudioOutputChannels:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0xED2D 0x8B08      VPUSH    {D8-D11}
   \   00000006   0x0004             MOVS     R4,R0
    551          #if EFI_SHAFT_POSITION_INPUT || defined(__DOXYGEN__)
    552          	int rpm = getRpmE(engine);
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable26_29
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x.... 0x....      BL       _ZN13RpmCalculator3rpmEv
   \   00000012   0xEE08 0x0A10      VMOV     S16,R0
    553          #else
    554          	int rpm = 0;
    555          #endif
    556          
    557          	float tps = getTPS(PASS_ENGINE_PARAMETER_F);
   \   00000016   0x.... 0x....      BL       _Z6getTPSv
   \   0000001A   0xEEF0 0x8A40      VMOV.F32 S17,S0
    558          	float coolant = getCoolantTemperature(PASS_ENGINE_PARAMETER_F);
   \   0000001E   0x.... 0x....      BL       _Z21getCoolantTemperaturev
   \   00000022   0xEEB0 0x9A40      VMOV.F32 S18,S0
    559          	float intake = getIntakeAirTemperature(PASS_ENGINE_PARAMETER_F);
   \   00000026   0x.... 0x....      BL       _Z23getIntakeAirTemperaturev
   \   0000002A   0xEEF0 0x9A40      VMOV.F32 S19,S0
    560          
    561          	float engineLoad = getEngineLoadT(PASS_ENGINE_PARAMETER_F);
   \   0000002E   0x.... 0x....      BL       _Z14getEngineLoadTv
   \   00000032   0xEEB0 0xAA40      VMOV.F32 S20,S0
    562          	float baseFuelMs = getBaseFuel(rpm PASS_ENGINE_PARAMETER);
   \   00000036   0xEE18 0x0A10      VMOV     R0,S16
   \   0000003A   0x.... 0x....      BL       _Z11getBaseFueli
   \   0000003E   0xEEF0 0xAA40      VMOV.F32 S21,S0
    563          
    564          	// header
    565          	tsOutputChannels->tsConfigVersion = TS_FILE_VERSION;
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable26_47  ;; 0x1337961
   \   00000046   0x6560             STR      R0,[R4, #+84]
    566          
    567          	// engine state
    568          	tsOutputChannels->rpm = rpm;
   \   00000048   0xED84 0x8A00      VSTR     S16,[R4, #0]
    569          	tsOutputChannels->coolant_temperature = coolant;
   \   0000004C   0xED84 0x9A01      VSTR     S18,[R4, #+4]
    570          	tsOutputChannels->intakeAirTemperature = intake;
   \   00000050   0xEDC4 0x9A02      VSTR     S19,[R4, #+8]
    571          	tsOutputChannels->throttlePositon = tps;
   \   00000054   0xEDC4 0x8A03      VSTR     S17,[R4, #+12]
    572          	if (hasMafSensor()) {
   \   00000058   0x.... 0x....      BL       _Z12hasMafSensorv
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD003             BEQ.N    ??updateTunerStudioState_0
    573          		tsOutputChannels->massAirFlowVoltage = getMaf();
   \   00000060   0x.... 0x....      BL       _Z6getMafv
   \   00000064   0xED84 0x0A04      VSTR     S0,[R4, #+16]
    574          	}
    575          	tsOutputChannels->massAirFlowValue = getRealMaf();
   \                     ??updateTunerStudioState_0:
   \   00000068   0x.... 0x....      BL       _Z10getRealMafv
   \   0000006C   0xED84 0x0A1B      VSTR     S0,[R4, #+108]
    576          	tsOutputChannels->veValue = veMap.getValue(getMap(), rpm);
   \   00000070   0x.... 0x....      BL       _Z6getMapv
   \   00000074   0xEEF8 0x0AC8      VCVT.F32.S32 S1,S16
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable26_48
   \   0000007C   0x.... 0x....      BL       _ZN5Map3DILi16ELi16EE8getValueEff
   \   00000080   0xED84 0x0A1C      VSTR     S0,[R4, #+112]
    577          	tsOutputChannels->airFuelRatio = getAfr();
   \   00000084   0x.... 0x....      BL       _Z6getAfrv
   \   00000088   0xED84 0x0A05      VSTR     S0,[R4, #+20]
    578          	if (hasVBatt(PASS_ENGINE_PARAMETER_F)) {
   \   0000008C   0x.... 0x....      BL       _Z8hasVBattv
   \   00000090   0x2800             CMP      R0,#+0
   \   00000092   0xD003             BEQ.N    ??updateTunerStudioState_1
    579          		tsOutputChannels->vBatt = getVBatt(PASS_ENGINE_PARAMETER_F);
   \   00000094   0x.... 0x....      BL       _Z8getVBattv
   \   00000098   0xED84 0x0A07      VSTR     S0,[R4, #+28]
    580          	}
    581          	tsOutputChannels->tpsADC = getTPS10bitAdc(PASS_ENGINE_PARAMETER_F);
   \                     ??updateTunerStudioState_1:
   \   0000009C   0x.... 0x....      BL       _Z14getTPS10bitAdcv
   \   000000A0   0x8420             STRH     R0,[R4, #+32]
    582          #if EFI_ANALOG_SENSORS || defined(__DOXYGEN__)
    583          	tsOutputChannels->baroPressure = getBaroPressure();
   \   000000A2   0x.... 0x....      BL       _Z15getBaroPressurev
   \   000000A6   0xED84 0x0A09      VSTR     S0,[R4, #+36]
    584          #endif /* EFI_ANALOG_SENSORS */
    585          	tsOutputChannels->manifold_air_pressure = getMap();
   \   000000AA   0x.... 0x....      BL       _Z6getMapv
   \   000000AE   0xED84 0x0A0A      VSTR     S0,[R4, #+40]
    586          	tsOutputChannels->engineLoad = engineLoad;
   \   000000B2   0xED84 0xAA06      VSTR     S20,[R4, #+24]
    587          	tsOutputChannels->rpmAcceleration = engine->rpmCalculator.getRpmAcceleration();
   \   000000B6   0x.... 0x....      LDR.W    R0,??DataTable26_29
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0x.... 0x....      BL       _ZN13RpmCalculator18getRpmAccelerationEv
   \   000000C0   0xED84 0x0A1A      VSTR     S0,[R4, #+104]
    588          	tsOutputChannels->currentMapAccelDelta = engine->mapAccelEnrichment.getMapEnrichment(PASS_ENGINE_PARAMETER_F) * 100 / getMap();
   \   000000C4   0x.... 0x....      LDR.W    R0,??DataTable26_29
   \   000000C8   0x6800             LDR      R0,[R0, #+0]
   \   000000CA   0x3038             ADDS     R0,R0,#+56
   \   000000CC   0x.... 0x....      BL       _ZN16AccelEnrichmemnt16getMapEnrichmentEv
   \   000000D0   0xEDDF 0x....      VLDR.W   S1,??DataTable22_1  ;; 0x42c80000
   \   000000D4   0xEE20 0xBA20      VMUL.F32 S22,S0,S1
   \   000000D8   0x.... 0x....      BL       _Z6getMapv
   \   000000DC   0xEE8B 0x0A00      VDIV.F32 S0,S22,S0
   \   000000E0   0xED84 0x0A1F      VSTR     S0,[R4, #+124]
    589          	tsOutputChannels->tpsAccelFuel = engine->tpsAccelEnrichment.getTpsEnrichment(PASS_ENGINE_PARAMETER_F);
   \   000000E4   0x.... 0x....      LDR.W    R0,??DataTable26_29
   \   000000E8   0x6800             LDR      R0,[R0, #+0]
   \   000000EA   0xF510 0x70A6      ADDS     R0,R0,#+332
   \   000000EE   0x.... 0x....      BL       _ZN16AccelEnrichmemnt16getTpsEnrichmentEv
   \   000000F2   0xED84 0x0A20      VSTR     S0,[R4, #+128]
    590          	tsOutputChannels->deltaTps = engine->tpsAccelEnrichment.getDelta();
   \   000000F6   0x.... 0x....      LDR.W    R0,??DataTable26_29
   \   000000FA   0x6800             LDR      R0,[R0, #+0]
   \   000000FC   0xF510 0x70A6      ADDS     R0,R0,#+332
   \   00000100   0x.... 0x....      BL       _ZN16AccelEnrichmemnt8getDeltaEv
   \   00000104   0xED84 0x0A1D      VSTR     S0,[R4, #+116]
    591          	tsOutputChannels->triggerErrorsCounter = triggerCentral.triggerState.totalTriggerErrorCounter;
   \   00000108   0x....             LDR.N    R0,??DataTable24_3
   \   0000010A   0x6BC0             LDR      R0,[R0, #+60]
   \   0000010C   0x67A0             STR      R0,[R4, #+120]
    592          	tsOutputChannels->baroCorrection = engine->engineState.baroCorrection;
   \   0000010E   0xF641 0x60D0      MOVW     R0,#+7888
   \   00000112   0x.... 0x....      LDR.W    R1,??DataTable26_29
   \   00000116   0x6809             LDR      R1,[R1, #+0]
   \   00000118   0x5840             LDR      R0,[R0, R1]
   \   0000011A   0xF8C4 0x0084      STR      R0,[R4, #+132]
    593          	tsOutputChannels->pedalPosition = getPedalPosition(PASS_ENGINE_PARAMETER_F);
   \   0000011E   0x.... 0x....      BL       _Z16getPedalPositionv
   \   00000122   0xED84 0x0A22      VSTR     S0,[R4, #+136]
    594          	tsOutputChannels->knockCount = engine->knockCount;
   \   00000126   0x.... 0x....      LDR.W    R0,??DataTable26_29
   \   0000012A   0x6800             LDR      R0,[R0, #+0]
   \   0000012C   0xF8D0 0x026C      LDR      R0,[R0, #+620]
   \   00000130   0xF8C4 0x0090      STR      R0,[R4, #+144]
    595          	tsOutputChannels->injectorDutyCycle = getInjectorDutyCycle(rpm PASS_ENGINE_PARAMETER);
   \   00000134   0xEE18 0x0A10      VMOV     R0,S16
   \   00000138   0x.... 0x....      BL       _Z20getInjectorDutyCyclei
   \   0000013C   0xED84 0x0A23      VSTR     S0,[R4, #+140]
    596          	tsOutputChannels->fuelLevel = engine->engineState.fuelLevel;
   \   00000140   0xF641 0x6058      MOVW     R0,#+7768
   \   00000144   0x.... 0x....      LDR.W    R1,??DataTable26_29
   \   00000148   0x6809             LDR      R1,[R1, #+0]
   \   0000014A   0x5840             LDR      R0,[R0, R1]
   \   0000014C   0xF8C4 0x0094      STR      R0,[R4, #+148]
    597          	tsOutputChannels->hasFatalError = hasFirmwareError();
   \   00000150   0x....             LDR.N    R0,??DataTable26_18
   \   00000152   0x7800             LDRB     R0,[R0, #+0]
   \   00000154   0x6D21             LDR      R1,[R4, #+80]
   \   00000156   0xF360 0x1186      BFI      R1,R0,#+6,#+1
   \   0000015A   0x6521             STR      R1,[R4, #+80]
    598          
    599          	tsOutputChannels->checkEngine = hasErrorCodes();
   \   0000015C   0x.... 0x....      BL       hasErrorCodes
   \   00000160   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000162   0x6CA1             LDR      R1,[R4, #+72]
   \   00000164   0xF360 0x2108      BFI      R1,R0,#+8,#+1
   \   00000168   0x64A1             STR      R1,[R4, #+72]
    600          #if EFI_PROD_CODE || defined(__DOXYGEN__)
    601          	tsOutputChannels->isTriggerError = isTriggerErrorNow();
   \   0000016A   0x.... 0x....      BL       _Z17isTriggerErrorNowv
   \   0000016E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000170   0x6D21             LDR      R1,[R4, #+80]
   \   00000172   0xF360 0x1145      BFI      R1,R0,#+5,#+1
   \   00000176   0x6521             STR      R1,[R4, #+80]
    602          
    603          #if EFI_MAX_31855 || defined(__DOXYGEN__)
    604          	for (int i = 0; i < EGT_CHANNEL_COUNT; i++)
   \   00000178   0x2500             MOVS     R5,#+0
   \                     ??updateTunerStudioState_2:
   \   0000017A   0x2D08             CMP      R5,#+8
   \   0000017C   0xDA08             BGE.N    ??updateTunerStudioState_3
    605          		tsOutputChannels->egtValues.values[i] = getEgtValue(i);
   \   0000017E   0x0028             MOVS     R0,R5
   \   00000180   0x.... 0x....      BL       _Z11getEgtValuei
   \   00000184   0xEB14 0x0145      ADDS     R1,R4,R5, LSL #+1
   \   00000188   0xF8A1 0x0058      STRH     R0,[R1, #+88]
   \   0000018C   0x1C6D             ADDS     R5,R5,#+1
   \   0000018E   0xE7F4             B.N      ??updateTunerStudioState_2
    606          #endif /* EFI_MAX_31855 */
    607          
    608          #if EFI_INTERNAL_FLASH || defined(__DOXYGEN__)
    609          	tsOutputChannels->needBurn = getNeedToWriteConfiguration();
   \                     ??updateTunerStudioState_3:
   \   00000190   0x.... 0x....      BL       _Z27getNeedToWriteConfigurationv
   \   00000194   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000196   0x6CA1             LDR      R1,[R4, #+72]
   \   00000198   0xF360 0x2149      BFI      R1,R0,#+9,#+1
   \   0000019C   0x64A1             STR      R1,[R4, #+72]
    610          #endif
    611          #if EFI_FILE_LOGGING || defined(__DOXYGEN__)
    612          	tsOutputChannels->hasSdCard = isSdCardAlive();
   \   0000019E   0x.... 0x....      BL       isSdCardAlive
   \   000001A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001A4   0x6CA1             LDR      R1,[R4, #+72]
   \   000001A6   0xF360 0x0100      BFI      R1,R0,#+0,#+1
   \   000001AA   0x64A1             STR      R1,[R4, #+72]
    613          #endif
    614          	tsOutputChannels->isFuelPumpOn = enginePins.fuelPumpRelay.getLogicValue();
   \   000001AC   0x....             LDR.N    R0,??DataTable26_26
   \   000001AE   0x.... 0x....      BL       _ZN9OutputPin13getLogicValueEv
   \   000001B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001B4   0x6CA1             LDR      R1,[R4, #+72]
   \   000001B6   0xF360 0x1145      BFI      R1,R0,#+5,#+1
   \   000001BA   0x64A1             STR      R1,[R4, #+72]
    615          	tsOutputChannels->isFanOn = enginePins.fanRelay.getLogicValue();
   \   000001BC   0x....             LDR.N    R0,??DataTable26_49
   \   000001BE   0x.... 0x....      BL       _ZN9OutputPin13getLogicValueEv
   \   000001C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001C4   0x6CA1             LDR      R1,[R4, #+72]
   \   000001C6   0xF360 0x1186      BFI      R1,R0,#+6,#+1
   \   000001CA   0x64A1             STR      R1,[R4, #+72]
    616          	tsOutputChannels->isO2HeaterOn = enginePins.o2heater.getLogicValue();
   \   000001CC   0x....             LDR.N    R0,??DataTable26_50
   \   000001CE   0x.... 0x....      BL       _ZN9OutputPin13getLogicValueEv
   \   000001D2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001D4   0x6CA1             LDR      R1,[R4, #+72]
   \   000001D6   0xF360 0x11C7      BFI      R1,R0,#+7,#+1
   \   000001DA   0x64A1             STR      R1,[R4, #+72]
    617          	tsOutputChannels->isIgnitionEnabled = engineConfiguration->isIgnitionEnabled;
   \   000001DC   0x....             LDR.N    R0,??DataTable26_46
   \   000001DE   0x6800             LDR      R0,[R0, #+0]
   \   000001E0   0xF890 0x05E4      LDRB     R0,[R0, #+1508]
   \   000001E4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001E6   0x0840             LSRS     R0,R0,#+1
   \   000001E8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001EA   0x6CA1             LDR      R1,[R4, #+72]
   \   000001EC   0xF360 0x0141      BFI      R1,R0,#+1,#+1
   \   000001F0   0x64A1             STR      R1,[R4, #+72]
    618          	tsOutputChannels->injection_enabled = engineConfiguration->isInjectionEnabled;
   \   000001F2   0x....             LDR.N    R0,??DataTable26_46
   \   000001F4   0x6800             LDR      R0,[R0, #+0]
   \   000001F6   0xF890 0x05E4      LDRB     R0,[R0, #+1508]
   \   000001FA   0x6CA1             LDR      R1,[R4, #+72]
   \   000001FC   0xF360 0x0182      BFI      R1,R0,#+2,#+1
   \   00000200   0x64A1             STR      R1,[R4, #+72]
    619          	tsOutputChannels->cylinder_cleanup_enabled = engineConfiguration->isCylinderCleanupEnabled;
   \   00000202   0x....             LDR.N    R0,??DataTable26_46
   \   00000204   0x6800             LDR      R0,[R0, #+0]
   \   00000206   0xF890 0x05E4      LDRB     R0,[R0, #+1508]
   \   0000020A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000020C   0x0880             LSRS     R0,R0,#+2
   \   0000020E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000210   0x6CA1             LDR      R1,[R4, #+72]
   \   00000212   0xF360 0x01C3      BFI      R1,R0,#+3,#+1
   \   00000216   0x64A1             STR      R1,[R4, #+72]
    620          	tsOutputChannels->cylinder_cleanup_activated = engine->isCylinderCleanupMode;
   \   00000218   0xF641 0x60F8      MOVW     R0,#+7928
   \   0000021C   0x....             LDR.N    R1,??DataTable26_29
   \   0000021E   0x6809             LDR      R1,[R1, #+0]
   \   00000220   0x5C40             LDRB     R0,[R0, R1]
   \   00000222   0x6CA1             LDR      R1,[R4, #+72]
   \   00000224   0xF360 0x1104      BFI      R1,R0,#+4,#+1
   \   00000228   0x64A1             STR      R1,[R4, #+72]
    621          	tsOutputChannels->secondTriggerChannelEnabled = engineConfiguration->secondTriggerChannelEnabled;
   \   0000022A   0x....             LDR.N    R0,??DataTable26_46
   \   0000022C   0x6800             LDR      R0,[R0, #+0]
   \   0000022E   0xF890 0x05E4      LDRB     R0,[R0, #+1508]
   \   00000232   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000234   0x08C0             LSRS     R0,R0,#+3
   \   00000236   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000238   0x6CA1             LDR      R1,[R4, #+72]
   \   0000023A   0xF360 0x218A      BFI      R1,R0,#+10,#+1
   \   0000023E   0x64A1             STR      R1,[R4, #+72]
    622          #if EFI_VEHICLE_SPEED || defined(__DOXYGEN__)
    623          	tsOutputChannels->vehicleSpeedKph = getVehicleSpeed();
   \   00000240   0x.... 0x....      BL       _Z15getVehicleSpeedv
   \   00000244   0xED84 0x0A13      VSTR     S0,[R4, #+76]
    624          #endif /* EFI_VEHICLE_SPEED */
    625          	tsOutputChannels->isCltError = !isValidCoolantTemperature(getCoolantTemperature(PASS_ENGINE_PARAMETER_F));
   \   00000248   0x.... 0x....      BL       _Z21getCoolantTemperaturev
   \   0000024C   0x.... 0x....      BL       _Z25isValidCoolantTemperaturef
   \   00000250   0xF090 0x0001      EORS     R0,R0,#0x1
   \   00000254   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000256   0x6D21             LDR      R1,[R4, #+80]
   \   00000258   0xF360 0x0141      BFI      R1,R0,#+1,#+1
   \   0000025C   0x6521             STR      R1,[R4, #+80]
    626          	tsOutputChannels->isIatError = !isValidIntakeAirTemperature(getIntakeAirTemperature(PASS_ENGINE_PARAMETER_F));
   \   0000025E   0x.... 0x....      BL       _Z23getIntakeAirTemperaturev
   \   00000262   0x.... 0x....      BL       _Z27isValidIntakeAirTemperaturef
   \   00000266   0xF090 0x0001      EORS     R0,R0,#0x1
   \   0000026A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000026C   0x6D21             LDR      R1,[R4, #+80]
   \   0000026E   0xF360 0x01C3      BFI      R1,R0,#+3,#+1
   \   00000272   0x6521             STR      R1,[R4, #+80]
    627          #endif /* EFI_PROD_CODE */
    628          
    629          	tsOutputChannels->knockNowIndicator = engine->knockCount > 0;
   \   00000274   0x....             LDR.N    R0,??DataTable26_29
   \   00000276   0x6800             LDR      R0,[R0, #+0]
   \   00000278   0xF8D0 0x026C      LDR      R0,[R0, #+620]
   \   0000027C   0x2801             CMP      R0,#+1
   \   0000027E   0xDB01             BLT.N    ??updateTunerStudioState_4
   \   00000280   0x2001             MOVS     R0,#+1
   \   00000282   0xE000             B.N      ??updateTunerStudioState_5
   \                     ??updateTunerStudioState_4:
   \   00000284   0x2000             MOVS     R0,#+0
   \                     ??updateTunerStudioState_5:
   \   00000286   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000288   0x6CA1             LDR      R1,[R4, #+72]
   \   0000028A   0xF360 0x318E      BFI      R1,R0,#+14,#+1
   \   0000028E   0x64A1             STR      R1,[R4, #+72]
    630          	tsOutputChannels->knockEverIndicator = engine->knockEver;
   \   00000290   0x....             LDR.N    R0,??DataTable26_29
   \   00000292   0x6800             LDR      R0,[R0, #+0]
   \   00000294   0xF890 0x0268      LDRB     R0,[R0, #+616]
   \   00000298   0x6CA1             LDR      R1,[R4, #+72]
   \   0000029A   0xF360 0x314D      BFI      R1,R0,#+13,#+1
   \   0000029E   0x64A1             STR      R1,[R4, #+72]
    631          
    632          	tsOutputChannels->clutchUpState = engine->clutchUpState;
   \   000002A0   0x....             LDR.N    R0,??DataTable26_29
   \   000002A2   0x6800             LDR      R0,[R0, #+0]
   \   000002A4   0xF890 0x0264      LDRB     R0,[R0, #+612]
   \   000002A8   0x6CA1             LDR      R1,[R4, #+72]
   \   000002AA   0xF360 0x21CB      BFI      R1,R0,#+11,#+1
   \   000002AE   0x64A1             STR      R1,[R4, #+72]
    633          	tsOutputChannels->clutchDownState = engine->clutchDownState;
   \   000002B0   0x....             LDR.N    R0,??DataTable26_29
   \   000002B2   0x6800             LDR      R0,[R0, #+0]
   \   000002B4   0xF890 0x0265      LDRB     R0,[R0, #+613]
   \   000002B8   0x6CA1             LDR      R1,[R4, #+72]
   \   000002BA   0xF360 0x310C      BFI      R1,R0,#+12,#+1
   \   000002BE   0x64A1             STR      R1,[R4, #+72]
    634          	tsOutputChannels->tCharge = getTCharge(rpm, tps, coolant, intake);
   \   000002C0   0xEEB0 0x1A69      VMOV.F32 S2,S19
   \   000002C4   0xEEF0 0x0A49      VMOV.F32 S1,S18
   \   000002C8   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \   000002CC   0xEE18 0x0A10      VMOV     R0,S16
   \   000002D0   0x.... 0x....      BL       _Z10getTChargeifff
   \   000002D4   0xED84 0x0A0D      VSTR     S0,[R4, #+52]
    635          	float timing = engine->engineState.timingAdvance;
   \   000002D8   0x....             LDR.N    R0,??DataTable26_29
   \   000002DA   0x6800             LDR      R0,[R0, #+0]
   \   000002DC   0xF500 0x50F0      ADD      R0,R0,#+7680
   \   000002E0   0x30B8             ADDS     R0,R0,#+184
   \   000002E2   0xED90 0xBA00      VLDR     S22,[R0, #0]
    636          	tsOutputChannels->ignitionAdvance = timing > 360 ? timing - 720 : timing;
   \   000002E6   0xED9F 0x....      VLDR.W   S0,??DataTable26  ;; 0x43b40001
   \   000002EA   0xEEB4 0xBA40      VCMP.F32 S22,S0
   \   000002EE   0xEEF1 0xFA10      FMSTAT   
   \   000002F2   0xDB04             BLT.N    ??updateTunerStudioState_6
   \   000002F4   0xED9F 0x....      VLDR.W   S0,??DataTable26_1  ;; 0xc4340000
   \   000002F8   0xEE3B 0x0A00      VADD.F32 S0,S22,S0
   \   000002FC   0xE001             B.N      ??updateTunerStudioState_7
   \                     ??updateTunerStudioState_6:
   \   000002FE   0xEEB0 0x0A4B      VMOV.F32 S0,S22
   \                     ??updateTunerStudioState_7:
   \   00000302   0xED84 0x0A0E      VSTR     S0,[R4, #+56]
    637          	tsOutputChannels->sparkDwell = ENGINE(engineState.sparkDwell);
   \   00000306   0x....             LDR.N    R0,??DataTable26_51
   \   00000308   0x6800             LDR      R0,[R0, #+0]
   \   0000030A   0x63E0             STR      R0,[R4, #+60]
    638          	tsOutputChannels->baseFuel = baseFuelMs;
   \   0000030C   0xEDC4 0xAA0C      VSTR     S21,[R4, #+48]
    639          	tsOutputChannels->pulseWidthMs = getFuelMs(rpm PASS_ENGINE_PARAMETER);
   \   00000310   0xEE18 0x0A10      VMOV     R0,S16
   \   00000314   0x.... 0x....      BL       _Z9getFuelMsi
   \   00000318   0xED84 0x0A10      VSTR     S0,[R4, #+64]
    640          	tsOutputChannels->crankingFuelMs = getCrankingFuel(PASS_ENGINE_PARAMETER_F);
   \   0000031C   0x.... 0x....      BL       _Z15getCrankingFuelv
   \   00000320   0xED84 0x0A0B      VSTR     S0,[R4, #+44]
    641          }
   \   00000324   0xECBD 0x8B08      VPOP     {D8-D11}
   \   00000328   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    642          
    643          extern TunerStudioOutputChannels tsOutputChannels;
    644          

   \                                 In section .text, align 2, keep-with-next
    645          void prepareTunerStudioOutputs(void) {
   \                     _Z25prepareTunerStudioOutputsv:
   \   00000000   0xB580             PUSH     {R7,LR}
    646          	// sensor state for EFI Analytics Tuner Studio
    647          	updateTunerStudioState(&tsOutputChannels PASS_ENGINE_PARAMETER);
   \   00000002   0x....             LDR.N    R0,??DataTable26_52
   \   00000004   0x.... 0x....      BL       _Z22updateTunerStudioStateP25TunerStudioOutputChannels
    648          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    649          
    650          #endif /* EFI_TUNER_STUDIO */
    651          

   \                                 In section .text, align 2, keep-with-next
    652          static void subscribe(int outputOrdinal) {
    653          	subscription[outputOrdinal] = true;
   \                     _Z9subscribei:
   \   00000000   0x....             LDR.N    R1,??DataTable24_1
   \   00000002   0x2201             MOVS     R2,#+1
   \   00000004   0x5442             STRB     R2,[R0, R1]
    654          }
   \   00000006   0x4770             BX       LR               ;; return
    655          

   \                                 In section .text, align 2, keep-with-next
    656          static void unsubscribe(int outputOrdinal) {
    657          	subscription[outputOrdinal] = false;
   \                     _Z11unsubscribei:
   \   00000000   0x....             LDR.N    R1,??DataTable24_1
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x5442             STRB     R2,[R0, R1]
    658          }
   \   00000006   0x4770             BX       LR               ;; return
    659          

   \                                 In section .text, align 2, keep-with-next
    660          void initStatusLoop(Engine *engine) {
   \                     _Z14initStatusLoopP6Engine:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    661          	setFullLog(INITIAL_FULL_LOG);
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       _Z10setFullLogi
    662          	addConsoleActionI(FULL_LOGGING_KEY, setFullLog);
   \   0000000A   0x.... 0x....      ADR.W    R1,_Z10setFullLogi
   \   0000000E   0x....             ADR.N    R0,??DataTable26_2  ;; 0x66, 0x6C, 0x00, 0x00
   \   00000010   0x.... 0x....      BL       addConsoleActionI
    663          	addConsoleActionI("warn", setWarningEnabled);
   \   00000014   0x....             LDR.N    R1,??DataTable26_53
   \   00000016   0x....             LDR.N    R0,??DataTable26_54
   \   00000018   0x.... 0x....      BL       addConsoleActionI
    664          
    665          #if EFI_PROD_CODE
    666          
    667          #if EFI_ENGINE_CONTROL
    668          	addConsoleActionFF("fuelinfo2", (VoidFloatFloat) showFuelInfo2);
   \   0000001C   0x....             LDR.N    R1,??DataTable26_55
   \   0000001E   0x....             LDR.N    R0,??DataTable26_56
   \   00000020   0x.... 0x....      BL       addConsoleActionFF
    669          	addConsoleAction("fuelinfo", showFuelInfo);
   \   00000024   0x....             LDR.N    R1,??DataTable26_57
   \   00000026   0x....             LDR.N    R0,??DataTable26_58
   \   00000028   0x.... 0x....      BL       addConsoleAction
    670          #endif
    671          
    672          	subscription[(int) RO_TRG1_DUTY] = true;
   \   0000002C   0x....             LDR.N    R0,??DataTable24_1
   \   0000002E   0x2101             MOVS     R1,#+1
   \   00000030   0x70C1             STRB     R1,[R0, #+3]
    673          	subscription[(int) RO_TRG2_DUTY] = true;
   \   00000032   0x....             LDR.N    R0,??DataTable24_1
   \   00000034   0x2101             MOVS     R1,#+1
   \   00000036   0x7101             STRB     R1,[R0, #+4]
    674          	subscription[(int) RO_TRG3_DUTY] = false;
   \   00000038   0x....             LDR.N    R0,??DataTable24_1
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0x7141             STRB     R1,[R0, #+5]
    675          	subscription[(int) RO_TRG4_DUTY] = false;
   \   0000003E   0x....             LDR.N    R0,??DataTable24_1
   \   00000040   0x2100             MOVS     R1,#+0
   \   00000042   0x7181             STRB     R1,[R0, #+6]
    676          	subscription[(int) RO_TOTAL_REVOLUTION_COUNTER] = true;
   \   00000044   0x....             LDR.N    R0,??DataTable24_1
   \   00000046   0x2101             MOVS     R1,#+1
   \   00000048   0x7241             STRB     R1,[R0, #+9]
    677          	subscription[(int) RO_RUNNING_REVOLUTION_COUNTER] = false;
   \   0000004A   0x....             LDR.N    R0,??DataTable24_1
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x7281             STRB     R1,[R0, #+10]
    678          
    679          	addConsoleActionI("subscribe", subscribe);
   \   00000050   0x....             LDR.N    R1,??DataTable26_59
   \   00000052   0x....             LDR.N    R0,??DataTable26_60
   \   00000054   0x.... 0x....      BL       addConsoleActionI
    680          	addConsoleActionI("unsubscribe", unsubscribe);
   \   00000058   0x....             LDR.N    R1,??DataTable26_61
   \   0000005A   0x....             LDR.N    R0,??DataTable26_62
   \   0000005C   0x.... 0x....      BL       addConsoleActionI
    681          	addConsoleActionI("set_led_blinking_period", setBlinkingPeriod);
   \   00000060   0x....             LDR.N    R1,??DataTable26_63
   \   00000062   0x....             LDR.N    R0,??DataTable26_64
   \   00000064   0x.... 0x....      BL       addConsoleActionI
    682          
    683          	addConsoleAction("status", printStatus);
   \   00000068   0x....             LDR.N    R1,??DataTable26_65
   \   0000006A   0x....             LDR.N    R0,??DataTable26_66
   \   0000006C   0x.... 0x....      BL       addConsoleAction
    684          #endif /* EFI_PROD_CODE */
    685          }
   \   00000070   0xBD10             POP      {R4,PC}          ;; return
    686          

   \                                 In section .text, align 2, keep-with-next
    687          void startStatusThreads(Engine *engine) {
   \                     _Z18startStatusThreadsP6Engine:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    688          	// todo: refactoring needed, this file should probably be split into pieces
    689          	chThdCreateStatic(lcdThreadStack, sizeof(lcdThreadStack), NORMALPRIO, (tfunc_t) lcdThread, engine);
   \   00000006   0x9400             STR      R4,[SP, #+0]
   \   00000008   0x....             LDR.N    R3,??DataTable26_67
   \   0000000A   0x2240             MOVS     R2,#+64
   \   0000000C   0xF44F 0x7132      MOV      R1,#+712
   \   00000010   0x....             LDR.N    R0,??DataTable26_68
   \   00000012   0x.... 0x....      BL       chThdCreateStatic
    690          #if EFI_PROD_CODE || defined(__DOXYGEN__)
    691          	initStatisLeds();
   \   00000016   0x.... 0x....      BL       _Z14initStatisLedsv
    692          	chThdCreateStatic(blinkingStack, sizeof(blinkingStack), NORMALPRIO, (tfunc_t) blinkingThread, NULL);
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0x....             LDR.N    R3,??DataTable26_69
   \   00000020   0x2240             MOVS     R2,#+64
   \   00000022   0xF44F 0x71DC      MOV      R1,#+440
   \   00000026   0x....             LDR.N    R0,??DataTable26_70
   \   00000028   0x.... 0x....      BL       chThdCreateStatic
    693          #endif /* EFI_PROD_CODE */
    694          }
   \   0000002C   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    695          

   \                                 In section .text, align 4, keep-with-next
    696          void setFullLog(int value) {
   \                     _Z10setFullLogi:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    697          	print("Setting full logging: %s\r\n", boolToString(value));
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD001             BEQ.N    ??setFullLog_0
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xE000             B.N      ??setFullLog_1
   \                     ??setFullLog_0:
   \   0000000C   0x2000             MOVS     R0,#+0
   \                     ??setFullLog_1:
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x.... 0x....      BL       _Z12boolToStringb
   \   00000014   0x0001             MOVS     R1,R0
   \   00000016   0x....             LDR.N    R0,??DataTable26_71
   \   00000018   0x.... 0x....      BL       print
    698          	printMsg(&logger, "%s%d", FULL_LOGGING_KEY, value);
   \   0000001C   0x0023             MOVS     R3,R4
   \   0000001E   0x....             ADR.N    R2,??DataTable26_2  ;; 0x66, 0x6C, 0x00, 0x00
   \   00000020   0x....             LDR.N    R1,??DataTable26_72
   \   00000022   0x....             LDR.N    R0,??DataTable26_3
   \   00000024   0x.... 0x....      BL       printMsg
    699          	fullLog = value;
   \   00000028   0x2C00             CMP      R4,#+0
   \   0000002A   0xD001             BEQ.N    ??setFullLog_2
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0xE000             B.N      ??setFullLog_3
   \                     ??setFullLog_2:
   \   00000030   0x2000             MOVS     R0,#+0
   \                     ??setFullLog_3:
   \   00000032   0x....             LDR.N    R1,??DataTable26_21
   \   00000034   0x7008             STRB     R0,[R1, #+0]
    700          }
   \   00000036   0xBD10             POP      {R4,PC}          ;; return
    701          

   \                                 In section .text, align 2, keep-with-next
    702          bool getFullLog(void) {
    703          	return fullLog;
   \                     _Z10getFullLogv:
   \   00000000   0x....             LDR.N    R0,??DataTable26_21
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    704          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x09 0x00          DC8      "\t",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x447A0000         DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x52 0x50          DC8      "RPM"
   \              0x4D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x72 0x70          DC8      "rpm"
   \              0x6D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x56 0x00          DC8      "V",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x6D 0x61          DC8      "maf"
   \              0x66 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x78 0x00          DC8      "x",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x6B 0x50          DC8      "kPa"
   \              0x61 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x4D 0x41          DC8      "MAP"
   \              0x50 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x41 0x46          DC8      "AFR"
   \              0x52 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x61 0x66          DC8      "afr"
   \              0x72 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x6B 0x70          DC8      "kph"
   \              0x68 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x76 0x73          DC8      "vss"
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x6B 0x73          DC8      0x6B, 0x73, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x25 0x00          DC8      "%",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x54 0x50          DC8      0x54, 0x50, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x6D 0x73          DC8      0x6D, 0x73, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x64 0x65          DC8      "deg"
   \              0x67 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x43 0x00          DC8      "C",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x43 0x4C          DC8      "CLT"
   \              0x54 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x4D 0x41          DC8      "MAT"
   \              0x54 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x2C 0x00          DC8      ",",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x74 0x31          DC8      0x74, 0x31, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x74 0x32          DC8      0x74, 0x32, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x43929333         DC32     0x43929333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   0x416B3333         DC32     0x416b3333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x........         DC32     LOGGING_BUFFER

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x........         DC32     `?<Constant "status loop">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x6C 0x63          DC8      "lcd"
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   0x........         DC32     logger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \   00000000   0x........         DC32     `?<Constant "file logger">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_3:
   \   00000000   0x........         DC32     fileLogger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_4:
   \   00000000   0x........         DC32     `?<Constant "main event handler">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_5:
   \   00000000   0x........         DC32     logger2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_6:
   \   00000000   0x........         DC32     communicationPin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_7:
   \   00000000   0x........         DC32     checkEnginePin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_8:
   \   00000000   0x........         DC32     warningPin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_9:
   \   00000000   0x........         DC32     logFileLineIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_10:
   \   00000000   0x........         DC32     `?<Constant "time">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_11:
   \   00000000   0x........         DC32     engine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_12:
   \   00000000   0x........         DC32     `?<Constant "kg/hr">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_13:
   \   00000000   0x........         DC32     `?<Constant "mafr">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_14:
   \   00000000   0x........         DC32     `?<Constant "ENGINE_LOAD">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_15:
   \   00000000   0x........         DC32     engineConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_16:
   \   00000000   0x........         DC32     `?<Constant "baro">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_17:
   \   00000000   0x........         DC32     `?<Constant "count">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_18:
   \   00000000   0x........         DC32     `?<Constant "vbatt">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   0x........         DC32     runningPin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   0x........         DC32     warningEnabled

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_1:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_2:
   \   00000000   0x........         DC32     `?<Constant "tpsacc">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_3:
   \   00000000   0x........         DC32     `?<Constant "advance">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_4:
   \   00000000   0x........         DC32     main_loop_started

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   0x........         DC32     `?<Constant "%d%s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_1:
   \   00000000   0x........         DC32     subscription

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_2:
   \   00000000   0x........         DC32     `?<Constant "ckp_c">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_3:
   \   00000000   0x........         DC32     triggerCentral

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_4:
   \   00000000   0x........         DC32     `?<Constant "ckp_r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_5:
   \   00000000   0x........         DC32     `?<Constant "trg_r_errors">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   0x........         DC32     `?<Constant "trg_r_order_errors">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   0x43B40001         DC32     0x43b40001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_1:
   \   00000000   0xC4340000         DC32     0xc4340000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_2:
   \   00000000   0x66 0x6C          DC8      0x66, 0x6C, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_3:
   \   00000000   0x........         DC32     logger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_4:
   \   00000000   0x........         DC32     `?<Constant "wave_chart_current">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_5:
   \   00000000   0x........         DC32     `?<Constant "fuel_base">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_6:
   \   00000000   0x........         DC32     `?<Constant "fuel_lag">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_7:
   \   00000000   0x........         DC32     `?<Constant "fuel">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_8:
   \   00000000   0x........         DC32     `?<Constant "timing">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_9:
   \   00000000   0x........         DC32     needToReportStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_10:
   \   00000000   0x........         DC32     `?<Constant "outpin%s%s@%s%s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_11:
   \   00000000   0x........         DC32     timeOfPreviousPrintVersion

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_12:
   \   00000000   0x........         DC32     `?<Constant "8529">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_13:
   \   00000000   0x........         DC32     `?<Constant "rusEfiVersion%s%d@%s ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_14:
   \   00000000   0x........         DC32     boardConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_15:
   \   00000000   0x........         DC32     `?<Constant "input1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_16:
   \   00000000   0x........         DC32     `?<Constant "input2">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_17:
   \   00000000   0x........         DC32     enginePins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_18:
   \   00000000   0x........         DC32     hasFirmwareErrorFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_19:
   \   00000000   0x........         DC32     errorMessageBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_20:
   \   00000000   0x........         DC32     `?<Constant "FATAL error: %s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_21:
   \   00000000   0x........         DC32     fullLog

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_22:
   \   00000000   0x........         DC32     prevCkpEventCounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_23:
   \   00000000   0x........         DC32     timeOfPreviousReport

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_24:
   \   00000000   0x........         DC32     `?<Constant "SD magic fuel %f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_25:
   \   00000000   0x........         DC32     `?<Constant "inj flow %fcc/min dis...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_26:
   \   00000000   0x........         DC32     enginePins+0x30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_27:
   \   00000000   0x........         DC32     `?<Constant "algo=%s/pump=%s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_28:
   \   00000000   0x........         DC32     `?<Constant "phase=%f correction=%f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_29:
   \   00000000   0x........         DC32     engine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_30:
   \   00000000   0x........         DC32     `?<Constant "baro correction=%f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_31:
   \   00000000   0x........         DC32     `?<Constant "base cranking fuel %f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_32:
   \   00000000   0x........         DC32     `?<Constant "cranking fuel: %f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_33:
   \   00000000   0x........         DC32     `?<Constant "rpm=%f engineLoad=%f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_34:
   \   00000000   0x........         DC32     `?<Constant "baseFuel=%f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_35:
   \   00000000   0x........         DC32     `?<Constant "iatCorrection=%f cltC...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_36:
   \   00000000   0x........         DC32     `?<Constant "injection pulse width...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_37:
   \   00000000   0x40020C00         DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_38:
   \   00000000   0x........         DC32     `?<Constant "communication status 1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_39:
   \   00000000   0x........         DC32     `?<Constant "warning">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_40:
   \   00000000   0x........         DC32     `?<Constant "is running status">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_41:
   \   00000000   0x........         DC32     leds

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_42:
   \   00000000   0x........         DC32     blinkingPeriod

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_43:
   \   00000000   0x........         DC32     lastDecodingErrorTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_44:
   \   00000000   0x........         DC32     rlist

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_45:
   \   00000000   0x........         DC32     `?<Constant "communication blinking">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_46:
   \   00000000   0x........         DC32     engineConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_47:
   \   00000000   0x01337961         DC32     0x1337961

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_48:
   \   00000000   0x........         DC32     veMap

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_49:
   \   00000000   0x........         DC32     enginePins+0x10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_50:
   \   00000000   0x........         DC32     enginePins+0x40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_51:
   \   00000000   0x........         DC32     _engine+0x1EB4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_52:
   \   00000000   0x........         DC32     tsOutputChannels

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_53:
   \   00000000   0x........         DC32     _Z17setWarningEnabledi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_54:
   \   00000000   0x........         DC32     `?<Constant "warn">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_55:
   \   00000000   0x........         DC32     _Z13showFuelInfo2ff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_56:
   \   00000000   0x........         DC32     `?<Constant "fuelinfo2">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_57:
   \   00000000   0x........         DC32     _Z12showFuelInfov

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_58:
   \   00000000   0x........         DC32     `?<Constant "fuelinfo">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_59:
   \   00000000   0x........         DC32     _Z9subscribei

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_60:
   \   00000000   0x........         DC32     `?<Constant "subscribe">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_61:
   \   00000000   0x........         DC32     _Z11unsubscribei

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_62:
   \   00000000   0x........         DC32     `?<Constant "unsubscribe">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_63:
   \   00000000   0x........         DC32     _Z17setBlinkingPeriodi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_64:
   \   00000000   0x........         DC32     `?<Constant "set_led_blinking_period">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_65:
   \   00000000   0x........         DC32     _Z11printStatusv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_66:
   \   00000000   0x........         DC32     `?<Constant "status">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_67:
   \   00000000   0x........         DC32     _Z9lcdThreadPv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_68:
   \   00000000   0x........         DC32     lcdThreadStack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_69:
   \   00000000   0x........         DC32     _Z14blinkingThreadPv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_70:
   \   00000000   0x........         DC32     blinkingStack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_71:
   \   00000000   0x........         DC32     `?<Constant "Setting full logging:...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_72:
   \   00000000   0x........         DC32     `?<Constant "%s%d">`

   \                                 In section .init_array, align 4, keep-with-next, root
   \   00000000   0x........         DC32    RELOC_ARM_TARGET1 __sti__routine

   \                                 In section .rodata, align 2
   \   00000000   0x09 0x00          DC8 "\t"

   \                                 In section .rodata, align 4
   \                     `?<Constant "%d%s">`:
   \   00000000   0x25 0x64          DC8 "%d%s"
   \              0x25 0x73    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "time">`:
   \   00000000   0x74 0x69          DC8 "time"
   \              0x6D 0x65    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 1
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \   00000000   0x72 0x70          DC8 "rpm"
   \              0x6D 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x52 0x50          DC8 "RPM"
   \              0x4D 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x6D 0x61          DC8 "maf"
   \              0x66 0x00    

   \                                 In section .rodata, align 2
   \   00000000   0x56 0x00          DC8 "V"

   \                                 In section .rodata, align 4
   \                     `?<Constant "mafr">`:
   \   00000000   0x6D 0x61          DC8 "mafr"
   \              0x66 0x72    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "kg/hr">`:
   \   00000000   0x6B 0x67          DC8 "kg/hr"
   \              0x2F 0x68    
   \              0x72 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "ENGINE_LOAD">`:
   \   00000000   0x45 0x4E          DC8 "ENGINE_LOAD"
   \              0x47 0x49    
   \              0x4E 0x45    
   \              0x5F 0x4C    
   \              0x4F 0x41    
   \              0x44 0x00    

   \                                 In section .rodata, align 2
   \   00000000   0x78 0x00          DC8 "x"

   \                                 In section .rodata, align 4
   \   00000000   0x4D 0x41          DC8 "MAP"
   \              0x50 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x6B 0x50          DC8 "kPa"
   \              0x61 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "baro">`:
   \   00000000   0x62 0x61          DC8 "baro"
   \              0x72 0x6F    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x61 0x66          DC8 "afr"
   \              0x72 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x41 0x46          DC8 "AFR"
   \              0x52 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x76 0x73          DC8 "vss"
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x6B 0x70          DC8 "kph"
   \              0x68 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x6B 0x73          DC8 "ks"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "count">`:
   \   00000000   0x63 0x6F          DC8 "count"
   \              0x75 0x6E    
   \              0x74 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "vbatt">`:
   \   00000000   0x76 0x62          DC8 "vbatt"
   \              0x61 0x74    
   \              0x74 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   0x54 0x50          DC8 "TP"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 2
   \   00000000   0x25 0x00          DC8 "%"

   \                                 In section .rodata, align 4
   \                     `?<Constant "tpsacc">`:
   \   00000000   0x74 0x70          DC8 "tpsacc"
   \              0x73 0x61    
   \              0x63 0x63    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x6D 0x73          DC8 "ms"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "advance">`:
   \   00000000   0x61 0x64          DC8 "advance"
   \              0x76 0x61    
   \              0x6E 0x63    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x64 0x65          DC8 "deg"
   \              0x67 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x43 0x4C          DC8 "CLT"
   \              0x54 0x00    

   \                                 In section .rodata, align 2
   \   00000000   0x43 0x00          DC8 "C"

   \                                 In section .rodata, align 4
   \   00000000   0x4D 0x41          DC8 "MAT"
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "ckp_c">`:
   \   00000000   0x63 0x6B          DC8 "ckp_c"
   \              0x70 0x5F    
   \              0x63 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "ckp_r">`:
   \   00000000   0x63 0x6B          DC8 "ckp_r"
   \              0x70 0x5F    
   \              0x72 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "trg_r_errors">`:
   \   00000000   0x74 0x72          DC8 "trg_r_errors"
   \              0x67 0x5F    
   \              0x72 0x5F    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x73    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "trg_r_order_errors">`:
   \   00000000   0x74 0x72          DC8 "trg_r_order_errors"
   \              0x67 0x5F    
   \              0x72 0x5F    
   \              0x6F 0x72    
   \              0x64 0x65    
   \              0x72 0x5F    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x73    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "wave_chart_current">`:
   \   00000000   0x77 0x61          DC8 "wave_chart_current"
   \              0x76 0x65    
   \              0x5F 0x63    
   \              0x68 0x61    
   \              0x72 0x74    
   \              0x5F 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "fuel_base">`:
   \   00000000   0x66 0x75          DC8 "fuel_base"
   \              0x65 0x6C    
   \              0x5F 0x62    
   \              0x61 0x73    
   \              0x65 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "fuel_lag">`:
   \   00000000   0x66 0x75          DC8 "fuel_lag"
   \              0x65 0x6C    
   \              0x5F 0x6C    
   \              0x61 0x67    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "fuel">`:
   \   00000000   0x66 0x75          DC8 "fuel"
   \              0x65 0x6C    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "timing">`:
   \   00000000   0x74 0x69          DC8 "timing"
   \              0x6D 0x69    
   \              0x6E 0x67    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "outpin%s%s@%s%s">`:
   \   00000000   0x6F 0x75          DC8 "outpin%s%s@%s%s"
   \              0x74 0x70    
   \              0x69 0x6E    
   \              0x25 0x73    
   \              0x25 0x73    
   \              0x40 0x25    
   \              0x73 0x25    
   \              0x73 0x00    

   \                                 In section .rodata, align 2
   \   00000000   0x2C 0x00          DC8 ","

   \                                 In section .rodata, align 4
   \                     `?<Constant "rusEfiVersion%s%d@%s ...">`:
   \   00000000   0x72 0x75          DC8 "rusEfiVersion%s%d@%s %s%s"
   \              0x73 0x45    
   \              0x66 0x69    
   \              0x56 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x25    
   \              0x73 0x25    
   \              0x64 0x40    
   \              0x25 0x73    
   \              0x20 0x25    
   \              0x73 0x25    
   \              0x73 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "8529">`:
   \   00000000   0x38 0x35          DC8 "8529"
   \              0x32 0x39    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x74 0x31          DC8 "t1"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x74 0x32          DC8 "t2"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "input1">`:
   \   00000000   0x69 0x6E          DC8 "input1"
   \              0x70 0x75    
   \              0x74 0x31    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "input2">`:
   \   00000000   0x69 0x6E          DC8 "input2"
   \              0x70 0x75    
   \              0x74 0x32    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "FATAL error: %s">`:
   \   00000000   0x46 0x41          DC8 "FATAL error: %s"
   \              0x54 0x41    
   \              0x4C 0x20    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x25    
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "SD magic fuel %f">`:
   \   00000000   0x53 0x44          DC8 "SD magic fuel %f"
   \              0x20 0x6D    
   \              0x61 0x67    
   \              0x69 0x63    
   \              0x20 0x66    
   \              0x75 0x65    
   \              0x6C 0x20    
   \              0x25 0x66    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "inj flow %fcc/min dis...">`:
   \   00000000   0x69 0x6E          DC8 "inj flow %fcc/min displacement %fL"
   \              0x6A 0x20    
   \              0x66 0x6C    
   \              0x6F 0x77    
   \              0x20 0x25    
   \              0x66 0x63    
   \              0x63 0x2F    
   \              0x6D 0x69    
   \              0x6E 0x20    
   \              0x64 0x69    
   \              0x73 0x70    
   \              0x6C 0x61    
   \              0x63 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x20 0x25    
   \              0x66 0x4C    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "algo=%s/pump=%s">`:
   \   00000000   0x61 0x6C          DC8 "algo=%s/pump=%s"
   \              0x67 0x6F    
   \              0x3D 0x25    
   \              0x73 0x2F    
   \              0x70 0x75    
   \              0x6D 0x70    
   \              0x3D 0x25    
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "phase=%f correction=%f">`:
   \   00000000   0x70 0x68          DC8 "phase=%f correction=%f"
   \              0x61 0x73    
   \              0x65 0x3D    
   \              0x25 0x66    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x3D    
   \              0x25 0x66    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "baro correction=%f">`:
   \   00000000   0x62 0x61          DC8 "baro correction=%f"
   \              0x72 0x6F    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x3D    
   \              0x25 0x66    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "base cranking fuel %f">`:
   \   00000000   0x62 0x61          DC8 "base cranking fuel %f"
   \              0x73 0x65    
   \              0x20 0x63    
   \              0x72 0x61    
   \              0x6E 0x6B    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x66 0x75    
   \              0x65 0x6C    
   \              0x20 0x25    
   \              0x66 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "cranking fuel: %f">`:
   \   00000000   0x63 0x72          DC8 "cranking fuel: %f"
   \              0x61 0x6E    
   \              0x6B 0x69    
   \              0x6E 0x67    
   \              0x20 0x66    
   \              0x75 0x65    
   \              0x6C 0x3A    
   \              0x20 0x25    
   \              0x66 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "rpm=%f engineLoad=%f">`:
   \   00000000   0x72 0x70          DC8 "rpm=%f engineLoad=%f"
   \              0x6D 0x3D    
   \              0x25 0x66    
   \              0x20 0x65    
   \              0x6E 0x67    
   \              0x69 0x6E    
   \              0x65 0x4C    
   \              0x6F 0x61    
   \              0x64 0x3D    
   \              0x25 0x66    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "baseFuel=%f">`:
   \   00000000   0x62 0x61          DC8 "baseFuel=%f"
   \              0x73 0x65    
   \              0x46 0x75    
   \              0x65 0x6C    
   \              0x3D 0x25    
   \              0x66 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "iatCorrection=%f cltC...">`:
   \   00000000   0x69 0x61          DC8 "iatCorrection=%f cltCorrection=%f injectorLag=%f"
   \              0x74 0x43    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x3D    
   \              0x25 0x66    
   \              0x20 0x63    
   \              0x6C 0x74    
   \              0x43 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x3D 0x25    
   \              0x66 0x20    
   \              0x69 0x6E    
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x6F 0x72    
   \              0x4C 0x61    
   \              0x67 0x3D    
   \              0x25 0x66    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "injection pulse width...">`:
   \   00000000   0x69 0x6E          DC8 "injection pulse width: %f"
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x70 0x75    
   \              0x6C 0x73    
   \              0x65 0x20    
   \              0x77 0x69    
   \              0x64 0x74    
   \              0x68 0x3A    
   \              0x20 0x25    
   \              0x66 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "communication status 1">`:
   \   00000000   0x63 0x6F          DC8 "communication status 1"
   \              0x6D 0x6D    
   \              0x75 0x6E    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x20 0x31    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "warning">`:
   \   00000000   0x77 0x61          DC8 "warning"
   \              0x72 0x6E    
   \              0x69 0x6E    
   \              0x67 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "is running status">`:
   \   00000000   0x69 0x73          DC8 "is running status"
   \              0x20 0x72    
   \              0x75 0x6E    
   \              0x6E 0x69    
   \              0x6E 0x67    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "communication blinking">`:
   \   00000000   0x63 0x6F          DC8 "communication blinking"
   \              0x6D 0x6D    
   \              0x75 0x6E    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x62 0x6C    
   \              0x69 0x6E    
   \              0x6B 0x69    
   \              0x6E 0x67    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x6C 0x63          DC8 "lcd"
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x66 0x6C          DC8 "fl"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "warn">`:
   \   00000000   0x77 0x61          DC8 "warn"
   \              0x72 0x6E    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "fuelinfo2">`:
   \   00000000   0x66 0x75          DC8 "fuelinfo2"
   \              0x65 0x6C    
   \              0x69 0x6E    
   \              0x66 0x6F    
   \              0x32 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "fuelinfo">`:
   \   00000000   0x66 0x75          DC8 "fuelinfo"
   \              0x65 0x6C    
   \              0x69 0x6E    
   \              0x66 0x6F    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "subscribe">`:
   \   00000000   0x73 0x75          DC8 "subscribe"
   \              0x62 0x73    
   \              0x63 0x72    
   \              0x69 0x62    
   \              0x65 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "unsubscribe">`:
   \   00000000   0x75 0x6E          DC8 "unsubscribe"
   \              0x73 0x75    
   \              0x62 0x73    
   \              0x63 0x72    
   \              0x69 0x62    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "set_led_blinking_period">`:
   \   00000000   0x73 0x65          DC8 "set_led_blinking_period"
   \              0x74 0x5F    
   \              0x6C 0x65    
   \              0x64 0x5F    
   \              0x62 0x6C    
   \              0x69 0x6E    
   \              0x6B 0x69    
   \              0x6E 0x67    
   \              0x5F 0x70    
   \              0x65 0x72    
   \              0x69 0x6F    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "status">`:
   \   00000000   0x73 0x74          DC8 "status"
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Setting full logging:...">`:
   \   00000000   0x53 0x65          DC8 "Setting full logging: %s\015\012"
   \              0x74 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x66 0x75    
   \              0x6C 0x6C    
   \              0x20 0x6C    
   \              0x6F 0x67    
   \              0x67 0x69    
   \              0x6E 0x67    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "%s%d">`:
   \   00000000   0x25 0x73          DC8 "%s%d"
   \              0x25 0x64    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "status loop">`:
   \   00000000   0x73 0x74          DC8 "status loop"
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x20 0x6C    
   \              0x6F 0x6F    
   \              0x70 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "file logger">`:
   \   00000000   0x66 0x69          DC8 "file logger"
   \              0x6C 0x65    
   \              0x20 0x6C    
   \              0x6F 0x67    
   \              0x67 0x65    
   \              0x72 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "main event handler">`:
   \   00000000   0x6D 0x61          DC8 "main event handler"
   \              0x69 0x6E    
   \              0x20 0x65    
   \              0x76 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x61 0x6E    
   \              0x64 0x6C    
   \              0x65 0x72    
   \              0x00         
   \   00000013   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   Map3D<16, 16>::getValue(float, float)
        24   -> firmwareError
        24   -> interpolate3d(float, float *, int, float, float *, int, float **)
       8   __sti__routine()
         8   -> Logging::Logging(char const *, char *, int)
         8   -> LoggingWithStorage::LoggingWithStorage(char const *)
         8   -> OutputPin::OutputPin()
      16   blinkingThread(void *)
        16   -> OutputPin::setValue(int)
        16   -> chThdSleep
        16   -> getNeedToWriteConfiguration()
        16   -> initialLedsBlink()
        16   -> isConsoleReady()
        16   -> isIgnitionTimingError()
        16   -> isTriggerErrorNow()
       0   getFullLog()
       8   initStatisLeds()
         8   -> outputPinRegister(char const *, OutputPin *, GPIO_TypeDef *, uint32_t)
       8   initStatusLoop(Engine *)
         8   -> addConsoleAction
         8   -> addConsoleActionFF
         8   -> addConsoleActionI
         8   -> setFullLog(int)
      16   initialLedsBlink()
        16   -> OutputPin::setValue(int)
        16   -> chThdSleep
      16   isTriggerErrorNow()
        16   -> getTimeNowNt
        16   -> isTriggerDecoderError()
       8   lcdThread(void *)
         8   -> chThdSleep
         8   -> updateHD44780lcd(Engine *)
       8   prepareTunerStudioOutputs()
         8   -> updateTunerStudioState(TunerStudioOutputChannels *)
      24   printInfo(uint32_t)
        24   -> appendPrintf
        24   -> getConfigurationName(engine_type_e)
        24   -> getRusEfiVersion
        24   -> printOutPin(char const *, brain_pin_e)
      24   printOutPin(char const *, brain_pin_e)
        24   -> appendPrintf
        24   -> hwPortname(brain_pin_e)
      32   printSensors(Logging *, bool)
        32   -> AccelEnrichmemnt::getTpsEnrichment()
        32   -> RpmCalculator::rpm()
        32   -> currentTimeMillis
        32   -> getAfr()
        32   -> getBaroPressure()
        32   -> getCoolantTemperature()
        32   -> getEngineLoadT()
        32   -> getFuelMs(int)
        32   -> getIntakeAirTemperature()
        32   -> getMaf()
        32   -> getMap()
        32   -> getRealMaf()
        32   -> getTPS()
        32   -> getVBatt()
        32   -> getVehicleSpeed()
        32   -> hasBaroSensor()
        32   -> hasMafSensor()
        32   -> hasVBatt()
        32   -> reportSensorF(Logging *, bool, char const *, char const *, float, int)
        32   -> reportSensorI(Logging *, bool, char const *, char const *, int)
      16   printState()
        16   -> RpmCalculator::rpm()
        16   -> debugFloat
        16   -> debugInt
        16   -> getBaseFuel(int)
        16   -> getCrankEventCounter()
        16   -> getEngineLoadT()
        16   -> getFuelMs(int)
       0   printStatus()
      32   reportSensorF(Logging *, bool, char const *, char const *, float, int)
        32   -> append
        32   -> appendFloat
        32   -> debugFloat
      24   reportSensorI(Logging *, bool, char const *, char const *, int)
        24   -> append
        24   -> appendPrintf
        24   -> debugInt
       0   setBlinkingPeriod(int)
       8   setFullLog(int)
         8   -> boolToString(bool)
         8   -> print
         8   -> printMsg
       0   setWarningEnabled(int)
      16   showFuelInfo()
        16   -> RpmCalculator::rpm()
        16   -> getEngineLoadT()
        16   -> showFuelInfo2(float, float)
      56   showFuelInfo2(float, float)
        56   -> OutputPin::getLogicValue()
        56   -> RpmCalculator::isRunning()
        56   -> __aeabi_f2d
        56   -> boolToString(bool)
        56   -> getBaseTableFuel(engine_configuration_s *, int, float)
        56   -> getCrankingFuel()
        56   -> getEngine_load_mode_e(engine_load_mode_e)
        56   -> getRunningFuel(float, int)
        56   -> getinjectionOffset(int)
        56   -> scheduleMsg
        56   -> sdMath(engine_configuration_s *, float, float, float, float)
      16   startStatusThreads(Engine *)
        16   -> chThdCreateStatic
        16   -> initStatisLeds()
       0   subscribe(int)
       0   unsubscribe(int)
      16   updateDevConsoleState(Engine *)
        16   -> getCrankEventCounter()
        16   -> getTimeNowSeconds
        16   -> isConsoleReady()
        16   -> pokeAdcInputs()
        16   -> printInfo(uint32_t)
        16   -> printPending
        16   -> printSensors(Logging *, bool)
        16   -> printState()
        16   -> printWave(Logging *)
        16   -> scheduleLogging
        16   -> scheduleMsg
      48   updateTunerStudioState(TunerStudioOutputChannels *)
        48   -> AccelEnrichmemnt::getDelta()
        48   -> AccelEnrichmemnt::getMapEnrichment()
        48   -> AccelEnrichmemnt::getTpsEnrichment()
        48   -> Map3D<16, 16>::getValue(float, float)
        48   -> OutputPin::getLogicValue()
        48   -> RpmCalculator::getRpmAcceleration()
        48   -> RpmCalculator::rpm()
        48   -> getAfr()
        48   -> getBaroPressure()
        48   -> getBaseFuel(int)
        48   -> getCoolantTemperature()
        48   -> getCrankingFuel()
        48   -> getEgtValue(int)
        48   -> getEngineLoadT()
        48   -> getFuelMs(int)
        48   -> getInjectorDutyCycle(int)
        48   -> getIntakeAirTemperature()
        48   -> getMaf()
        48   -> getMap()
        48   -> getNeedToWriteConfiguration()
        48   -> getPedalPosition()
        48   -> getRealMaf()
        48   -> getTCharge(int, float, float, float)
        48   -> getTPS()
        48   -> getTPS10bitAdc()
        48   -> getVBatt()
        48   -> getVehicleSpeed()
        48   -> hasErrorCodes
        48   -> hasMafSensor()
        48   -> hasVBatt()
        48   -> isSdCardAlive
        48   -> isTriggerErrorNow()
        48   -> isValidCoolantTemperature(float)
        48   -> isValidIntakeAirTemperature(float)
       8   writeLogLine()
         8   -> appendPrintf
         8   -> appendToLog
         8   -> isSdCardAlive
         8   -> printSensors(Logging *, bool)
         8   -> resetLogging


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Constant "">
       2  ?<Constant "%">
       8  ?<Constant "%d%s">
       8  ?<Constant "%s%d">
       2  ?<Constant ",">
       8  ?<Constant "8529">
       4  ?<Constant "AFR">
       2  ?<Constant "C">
       4  ?<Constant "CLT">
      12  ?<Constant "ENGINE_LOAD">
      16  ?<Constant "FATAL error: %s">
       4  ?<Constant "MAP">
       4  ?<Constant "MAT">
       4  ?<Constant "RPM">
      20  ?<Constant "SD magic fuel %f">
      28  ?<Constant "Setting full logging:...">
       4  ?<Constant "TP">
       2  ?<Constant "V">
       4  ?<Constant "\r\n">
       2  ?<Constant "\t">
       8  ?<Constant "advance">
       4  ?<Constant "afr">
      16  ?<Constant "algo=%s/pump=%s">
      20  ?<Constant "baro correction=%f">
       8  ?<Constant "baro">
      24  ?<Constant "base cranking fuel %f">
      12  ?<Constant "baseFuel=%f">
       8  ?<Constant "ckp_c">
       8  ?<Constant "ckp_r">
      24  ?<Constant "communication blinking">
      24  ?<Constant "communication status 1">
       8  ?<Constant "count">
      20  ?<Constant "cranking fuel: %f">
       4  ?<Constant "deg">
      12  ?<Constant "file logger">
       4  ?<Constant "fl">
       8  ?<Constant "fuel">
      12  ?<Constant "fuel_base">
      12  ?<Constant "fuel_lag">
      12  ?<Constant "fuelinfo">
      12  ?<Constant "fuelinfo2">
      52  ?<Constant "iatCorrection=%f cltC...">
      36  ?<Constant "inj flow %fcc/min dis...">
      28  ?<Constant "injection pulse width...">
       8  ?<Constant "input1">
       8  ?<Constant "input2">
      20  ?<Constant "is running status">
       4  ?<Constant "kPa">
       8  ?<Constant "kg/hr">
       4  ?<Constant "kph">
       4  ?<Constant "ks">
       4  ?<Constant "lcd">
       4  ?<Constant "maf">
       8  ?<Constant "mafr">
      20  ?<Constant "main event handler">
       4  ?<Constant "ms">
      16  ?<Constant "outpin%s%s@%s%s">
      24  ?<Constant "phase=%f correction=%f">
       4  ?<Constant "rpm">
      24  ?<Constant "rpm=%f engineLoad=%f">
      28  ?<Constant "rusEfiVersion%s%d@%s ...">
      24  ?<Constant "set_led_blinking_period">
      12  ?<Constant "status loop">
       8  ?<Constant "status">
      12  ?<Constant "subscribe">
       4  ?<Constant "t1">
       4  ?<Constant "t2">
       8  ?<Constant "time">
       8  ?<Constant "timing">
       8  ?<Constant "tpsacc">
      16  ?<Constant "trg_r_errors">
      20  ?<Constant "trg_r_order_errors">
      12  ?<Constant "unsubscribe">
       8  ?<Constant "vbatt">
       4  ?<Constant "vss">
       8  ?<Constant "warn">
       8  ?<Constant "warning">
      20  ?<Constant "wave_chart_current">
       2  ?<Constant "x">
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_2
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable18_10
       4  ??DataTable18_11
       4  ??DataTable18_12
       4  ??DataTable18_13
       4  ??DataTable18_14
       4  ??DataTable18_15
       4  ??DataTable18_16
       4  ??DataTable18_17
       4  ??DataTable18_18
       4  ??DataTable18_2
       4  ??DataTable18_3
       4  ??DataTable18_4
       4  ??DataTable18_5
       4  ??DataTable18_6
       4  ??DataTable18_7
       4  ??DataTable18_8
       4  ??DataTable18_9
       4  ??DataTable21
       4  ??DataTable22
       4  ??DataTable22_1
       4  ??DataTable22_2
       4  ??DataTable22_3
       4  ??DataTable22_4
       4  ??DataTable24
       4  ??DataTable24_1
       4  ??DataTable24_2
       4  ??DataTable24_3
       4  ??DataTable24_4
       4  ??DataTable24_5
       4  ??DataTable25
       4  ??DataTable26
       4  ??DataTable26_1
       4  ??DataTable26_10
       4  ??DataTable26_11
       4  ??DataTable26_12
       4  ??DataTable26_13
       4  ??DataTable26_14
       4  ??DataTable26_15
       4  ??DataTable26_16
       4  ??DataTable26_17
       4  ??DataTable26_18
       4  ??DataTable26_19
       4  ??DataTable26_2
       4  ??DataTable26_20
       4  ??DataTable26_21
       4  ??DataTable26_22
       4  ??DataTable26_23
       4  ??DataTable26_24
       4  ??DataTable26_25
       4  ??DataTable26_26
       4  ??DataTable26_27
       4  ??DataTable26_28
       4  ??DataTable26_29
       4  ??DataTable26_3
       4  ??DataTable26_30
       4  ??DataTable26_31
       4  ??DataTable26_32
       4  ??DataTable26_33
       4  ??DataTable26_34
       4  ??DataTable26_35
       4  ??DataTable26_36
       4  ??DataTable26_37
       4  ??DataTable26_38
       4  ??DataTable26_39
       4  ??DataTable26_4
       4  ??DataTable26_40
       4  ??DataTable26_41
       4  ??DataTable26_42
       4  ??DataTable26_43
       4  ??DataTable26_44
       4  ??DataTable26_45
       4  ??DataTable26_46
       4  ??DataTable26_47
       4  ??DataTable26_48
       4  ??DataTable26_49
       4  ??DataTable26_5
       4  ??DataTable26_50
       4  ??DataTable26_51
       4  ??DataTable26_52
       4  ??DataTable26_53
       4  ??DataTable26_54
       4  ??DataTable26_55
       4  ??DataTable26_56
       4  ??DataTable26_57
       4  ??DataTable26_58
       4  ??DataTable26_59
       4  ??DataTable26_6
       4  ??DataTable26_60
       4  ??DataTable26_61
       4  ??DataTable26_62
       4  ??DataTable26_63
       4  ??DataTable26_64
       4  ??DataTable26_65
       4  ??DataTable26_66
       4  ??DataTable26_67
       4  ??DataTable26_68
       4  ??DataTable26_69
       4  ??DataTable26_7
       4  ??DataTable26_70
       4  ??DataTable26_71
       4  ??DataTable26_72
       4  ??DataTable26_8
       4  ??DataTable26_9
       4  ??DataTable3
       4  ??DataTable4
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
       4  ??DataTable7
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable9
    1400  LOGGING_BUFFER
      80  Map3D<16, 16>::getValue(float, float)
      80  __sti__routine()
       4  blinkingPeriod
     440  blinkingStack
     156  blinkingThread(void *)
      16  checkEnginePin
      16  communicationPin
     260  fileLogger
       1  fullLog
       6  getFullLog()
      54  initStatisLeds()
     114  initStatusLoop(Engine *)
      60  initialLedsBlink()
      70  isTriggerErrorNow()
      56  lcdThread(void *)
     712  lcdThreadStack
      20  leds
       4  logFileLineIndex
      60  logger
     260  logger2
       4  needToReportStatus
      10  prepareTunerStudioOutputs()
       4  prevCkpEventCounter
     216  printInfo(uint32_t)
      38  printOutPin(char const *, brain_pin_e)
     586  printSensors(Logging *, bool)
     276  printState()
      10  printStatus()
     130  reportSensorF(Logging *, bool, char const *, char const *, float, int)
     108  reportSensorI(Logging *, bool, char const *, char const *, int)
      16  runningPin
      12  setBlinkingPeriod(int)
      56  setFullLog(int)
       8  setWarningEnabled(int)
      46  showFuelInfo()
     526  showFuelInfo2(float, float)
      46  startStatusThreads(Engine *)
       8  subscribe(int)
      16  subscription
       4  timeOfPreviousPrintVersion
       4  timeOfPreviousReport
       8  unsubscribe(int)
     156  updateDevConsoleState(Engine *)
     810  updateTunerStudioState(TunerStudioOutputChannels *)
       4  warningEnabled
      16  warningPin
      74  writeLogLine()
      24  -- Other

 
 3 220 bytes in section .bss
    41 bytes in section .data
     4 bytes in section .init_array
   913 bytes in section .rodata
 4 344 bytes in section .text
 
 4 268 bytes of CODE  memory (+ 80 bytes shared)
   893 bytes of CONST memory (+ 20 bytes shared)
 3 261 bytes of DATA  memory

Errors: none
Warnings: 2
