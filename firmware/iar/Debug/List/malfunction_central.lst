###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:27 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\algo #
#                       \malfunction_central.c                                #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\algo #
#                       \malfunction_central.c -lCN                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\  #
#                       -lA F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Li #
#                       st\ -o F:\stuff\rusefi_sourceforge\firmware\iar\Debug #
#                       \Obj\ --no_cse --no_unroll --no_inline                #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\ -On #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\m #
#                       alfunction_central.lst                                #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\ma #
#                       lfunction_central.o                                   #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\algo\malfunction_central.c
      1          /**
      2           * @file malfunction_central.c
      3           * @brief This data structure holds current malfunction codes
      4           *
      5           * @date Dec 20, 2013
      6           * @author Andrey Belomutskiy, (c) 2012-2015
      7           */
      8          
      9          #include "malfunction_central.h"
     10          

   \                                 In section .bss, align 4
     11          static error_codes_set_s error_codes_set;
   \                     error_codes_set:
   \   00000000                      DS8 44
     12          
     13          /**
     14           * @return -1 if code not found
     15           */

   \                                 In section .text, align 2, keep-with-next
     16          static int find_position(obd_code_e e_code)							// Search if code is present 
     17          {
   \                     find_position:
   \   00000000   0x0001             MOVS     R1,R0
     18          	// cycle for searching element equal seaching code
     19          	for (int t = 0; t < error_codes_set.count; t++)
   \   00000002   0x2000             MOVS     R0,#+0
   \                     ??find_position_0:
   \   00000004   0x....             LDR.N    R2,??DataTable5
   \   00000006   0x6812             LDR      R2,[R2, #+0]
   \   00000008   0x4290             CMP      R0,R2
   \   0000000A   0xDA07             BGE.N    ??find_position_1
     20          		if (error_codes_set.error_codes[t] == e_code)
   \   0000000C   0x....             LDR.N    R2,??DataTable5
   \   0000000E   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   00000012   0x6852             LDR      R2,[R2, #+4]
   \   00000014   0x428A             CMP      R2,R1
   \   00000016   0xD003             BEQ.N    ??find_position_2
     21          			return t;			// we found position where this code is present
   \                     ??find_position_3:
   \   00000018   0x1C40             ADDS     R0,R0,#+1
   \   0000001A   0xE7F3             B.N      ??find_position_0
     22          	return -1;														// -1 if code not found
   \                     ??find_position_1:
   \   0000001C   0xF05F 0x30FF      MOVS     R0,#-1
   \                     ??find_position_2:
   \   00000020   0x4770             BX       LR               ;; return
     23          }
     24          

   \                                 In section .text, align 2, keep-with-next
     25          void initMalfunctionCentral(void) {
     26          	error_codes_set.count = 0;
   \                     initMalfunctionCentral:
   \   00000000   0x....             LDR.N    R0,??DataTable5
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x6001             STR      R1,[R0, #+0]
     27          }
   \   00000006   0x4770             BX       LR               ;; return
     28          

   \                                 In section .text, align 2, keep-with-next
     29          void addError(obd_code_e errorCode) {
   \                     addError:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     30          	if (error_codes_set.count < MAX_ERROR_CODES_COUNT && find_position(errorCode) == -1) {
   \   00000004   0x....             LDR.N    R0,??DataTable5
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x280A             CMP      R0,#+10
   \   0000000A   0xDA10             BGE.N    ??addError_0
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       find_position
   \   00000012   0xF110 0x0F01      CMN      R0,#+1
   \   00000016   0xD10A             BNE.N    ??addError_0
     31          		error_codes_set.error_codes[error_codes_set.count] = errorCode;
   \   00000018   0x....             LDR.N    R0,??DataTable5
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x....             LDR.N    R1,??DataTable5
   \   0000001E   0xEB11 0x0080      ADDS     R0,R1,R0, LSL #+2
   \   00000022   0x6044             STR      R4,[R0, #+4]
     32          		error_codes_set.count++;
   \   00000024   0x....             LDR.N    R0,??DataTable5
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x1C40             ADDS     R0,R0,#+1
   \   0000002A   0x....             LDR.N    R1,??DataTable5
   \   0000002C   0x6008             STR      R0,[R1, #+0]
     33          	}
     34          }
   \                     ??addError_0:
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
     35          

   \                                 In section .text, align 2, keep-with-next
     36          void removeError(obd_code_e errorCode) {
   \                     removeError:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     37          	int pos = find_position(errorCode);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       find_position
     38          	if (pos >= 0) {
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD418             BMI.N    ??removeError_0
     39          		for (int t = pos; t < error_codes_set.count; t++) 					// shift all right elements to one pos left
   \   0000000E   0x0001             MOVS     R1,R0
   \                     ??removeError_1:
   \   00000010   0x....             LDR.N    R2,??DataTable5
   \   00000012   0x6812             LDR      R2,[R2, #+0]
   \   00000014   0x4291             CMP      R1,R2
   \   00000016   0xDA09             BGE.N    ??removeError_2
     40          			error_codes_set.error_codes[t] = error_codes_set.error_codes[t + 1];
   \   00000018   0x....             LDR.N    R2,??DataTable5
   \   0000001A   0xEB12 0x0281      ADDS     R2,R2,R1, LSL #+2
   \   0000001E   0x....             LDR.N    R3,??DataTable5
   \   00000020   0xEB13 0x0381      ADDS     R3,R3,R1, LSL #+2
   \   00000024   0x689B             LDR      R3,[R3, #+8]
   \   00000026   0x6053             STR      R3,[R2, #+4]
   \   00000028   0x1C49             ADDS     R1,R1,#+1
   \   0000002A   0xE7F1             B.N      ??removeError_1
     41          	error_codes_set.error_codes[--error_codes_set.count] = (obd_code_e)0;				// place 0
   \                     ??removeError_2:
   \   0000002C   0x....             LDR.N    R1,??DataTable5
   \   0000002E   0x6809             LDR      R1,[R1, #+0]
   \   00000030   0x1E49             SUBS     R1,R1,#+1
   \   00000032   0x....             LDR.N    R2,??DataTable5
   \   00000034   0x6011             STR      R1,[R2, #+0]
   \   00000036   0x....             LDR.N    R2,??DataTable5
   \   00000038   0xEB12 0x0181      ADDS     R1,R2,R1, LSL #+2
   \   0000003C   0x2200             MOVS     R2,#+0
   \   0000003E   0x604A             STR      R2,[R1, #+4]
     42          	}
     43          }
   \                     ??removeError_0:
   \   00000040   0xBD10             POP      {R4,PC}          ;; return
     44          

   \                                 In section .text, align 2, keep-with-next
     45          void setError(bool_t isError, obd_code_e errorCode) {
   \                     setError:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     46          	if (isError)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD003             BEQ.N    ??setError_0
     47          		addError(errorCode);
   \   0000000C   0x0028             MOVS     R0,R5
   \   0000000E   0x.... 0x....      BL       addError
   \   00000012   0xE002             B.N      ??setError_1
     48          	else
     49          		removeError(errorCode);
   \                     ??setError_0:
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0x.... 0x....      BL       removeError
     50          }
   \                     ??setError_1:
   \   0000001A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     51          

   \                                 In section .text, align 2, keep-with-next
     52          void getErrorCodes(error_codes_set_s * copy) {
     53          	copy->count = error_codes_set.count;
   \                     getErrorCodes:
   \   00000000   0x....             LDR.N    R1,??DataTable5
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x6001             STR      R1,[R0, #+0]
     54          	for (int i = 0; i < copy->count; i++)
   \   00000006   0x2100             MOVS     R1,#+0
   \                     ??getErrorCodes_0:
   \   00000008   0x6802             LDR      R2,[R0, #+0]
   \   0000000A   0x4291             CMP      R1,R2
   \   0000000C   0xDA08             BGE.N    ??getErrorCodes_1
     55          		copy->error_codes[i] = error_codes_set.error_codes[i];
   \   0000000E   0xEB10 0x0281      ADDS     R2,R0,R1, LSL #+2
   \   00000012   0x....             LDR.N    R3,??DataTable5
   \   00000014   0xEB13 0x0381      ADDS     R3,R3,R1, LSL #+2
   \   00000018   0x685B             LDR      R3,[R3, #+4]
   \   0000001A   0x6053             STR      R3,[R2, #+4]
   \   0000001C   0x1C49             ADDS     R1,R1,#+1
   \   0000001E   0xE7F3             B.N      ??getErrorCodes_0
     56          }
   \                     ??getErrorCodes_1:
   \   00000020   0x4770             BX       LR               ;; return
     57          

   \                                 In section .text, align 2, keep-with-next
     58          bool hasErrorCodes(void) {
     59          	return error_codes_set.count > 0;
   \                     hasErrorCodes:
   \   00000000   0x....             LDR.N    R0,??DataTable5
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x2801             CMP      R0,#+1
   \   00000006   0xDB01             BLT.N    ??hasErrorCodes_0
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xE000             B.N      ??hasErrorCodes_1
   \                     ??hasErrorCodes_0:
   \   0000000C   0x2000             MOVS     R0,#+0
   \                     ??hasErrorCodes_1:
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x4770             BX       LR               ;; return
     60          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     error_codes_set

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   addError
         8   -> find_position
       0   find_position
       0   getErrorCodes
       0   hasErrorCodes
       0   initMalfunctionCentral
       8   removeError
         8   -> find_position
      16   setError
        16   -> addError
        16   -> removeError


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
      48  addError
      44  error_codes_set
      34  find_position
      34  getErrorCodes
      18  hasErrorCodes
       8  initMalfunctionCentral
      66  removeError
      28  setError

 
  44 bytes in section .bss
 240 bytes in section .text
 
 240 bytes of CODE memory
  44 bytes of DATA memory

Errors: none
Warnings: none
