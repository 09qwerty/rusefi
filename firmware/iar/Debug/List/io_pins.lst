###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:08:50 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\hw_layer\io_pins #
#                       .cpp                                                  #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\hw_layer\io_pins #
#                       .cpp -lCN F:\stuff\rusefi_sourceforge\firmware\iar\De #
#                       bug\List\ -lA F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\Debug\List\ -o F:\stuff\rusefi_sourceforge\firmware #
#                       \iar\Debug\Obj\ --no_cse --no_unroll --no_inline      #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\i #
#                       o_pins.lst                                            #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\io #
#                       _pins.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\hw_layer\io_pins.cpp
      1          /**
      2           * @file	io_pins.cpp
      3           * @brief	It could be that the main purpose of this file is the status LED blinking
      4           *
      5           * @date Jan 24, 2013
      6           * @author Andrey Belomutskiy, (c) 2012-2015
      7           */
      8          
      9          #include <board.h>
     10          #include "main.h"
     11          #include "io_pins.h"
     12          #include "efiGpio.h"
     13          
     14          #include "pin_repository.h"
     15          #include "gpio_helper.h"
     16          #include "status_loop.h"
     17          #include "engine_configuration.h"
     18          #include "console_io.h"
     19          
     20          #if EFI_ENGINE_CONTROL || defined(__DOXYGEN__)
     21          #include "main_trigger_callback.h"
     22          #endif /* EFI_ENGINE_CONTROL */
     23          
     24          extern board_configuration_s *boardConfiguration;
     25          

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine:
   \   00000000   0xB580             PUSH     {R7,LR}
     26          static LoggingWithStorage logger("io_pins");
   \   00000002   0x....             LDR.N    R1,??DataTable7
   \   00000004   0x....             LDR.N    R0,??DataTable7_1
   \   00000006   0x.... 0x....      BL       _ZN18LoggingWithStorageC1EPKc
     27          
     28          static OutputPin sdCsPin;
   \   0000000A   0x....             LDR.N    R0,??DataTable7_2
   \   0000000C   0x.... 0x....      BL       _ZN9OutputPinC1Ev
   \   00000010   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     logger:
   \   00000000                      DS8 260

   \                                 In section .bss, align 4
   \                     sdCsPin:
   \   00000000                      DS8 16
     29          
     30          extern engine_pins_s enginePins;
     31          
     32          #if defined(STM32F4XX)

   \                                 In section .data, align 4
     33          static GPIO_TypeDef *PORTS[] = { GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, GPIOF, GPIOG, GPIOH };
   \                     PORTS:
   \   00000000   0x40020000         DC32 40020000H, 40020400H, 40020800H, 40020C00H, 40021000H, 40021400H
   \              0x40020400   
   \              0x40020800   
   \              0x40020C00   
   \              0x40021000   
   \              0x40021400   
   \   00000018   0x40021800         DC32 40021800H, 40021C00H
   \              0x40021C00   
     34          #else
     35          static GPIO_TypeDef *PORTS[] = { GPIOA, GPIOB, GPIOC, GPIOD, GPIOF};
     36          #endif
     37          

   \                                 In section .bss, align 4
     38          pin_output_mode_e DEFAULT_OUTPUT = OM_DEFAULT;
   \                     DEFAULT_OUTPUT:
   \   00000000                      DS8 4
     39          

   \                                 In section .text, align 2, keep-with-next
     40          static void outputPinRegisterExt(const char *msg, OutputPin *output, GPIO_TypeDef *port, uint32_t pin,
     41          		pin_output_mode_e *outputMode) {
   \                     _Z20outputPinRegisterExtPKcP9OutputPinP12GPIO_TypeDefjP17pin_output_mode_e:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0xF8DD 0x8020      LDR      R8,[SP, #+32]
     42          #if EFI_GPIO
     43          	if (port == GPIO_NULL) {
   \   00000010   0x2E00             CMP      R6,#+0
   \   00000012   0xD101             BNE.N    ??outputPinRegisterExt_0
     44          		// that's for GRIO_NONE
     45          		output->port = port;
   \   00000014   0x602E             STR      R6,[R5, #+0]
     46          		return;
   \   00000016   0xE020             B.N      ??outputPinRegisterExt_1
     47          	}
     48          
     49          	assertOMode(*outputMode);
   \                     ??outputPinRegisterExt_0:
   \   00000018   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   0000001C   0x2804             CMP      R0,#+4
   \   0000001E   0xDB03             BLT.N    ??outputPinRegisterExt_2
   \   00000020   0x....             LDR.N    R0,??DataTable7_3
   \   00000022   0x.... 0x....      BL       firmwareError
   \   00000026   0xE018             B.N      ??outputPinRegisterExt_1
     50          	iomode_t mode = (*outputMode == OM_DEFAULT || *outputMode == OM_INVERTED) ?
     51          	PAL_MODE_OUTPUT_PUSHPULL :
     52          																				PAL_MODE_OUTPUT_OPENDRAIN;
   \                     ??outputPinRegisterExt_2:
   \   00000028   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD003             BEQ.N    ??outputPinRegisterExt_3
   \   00000030   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   00000034   0x2801             CMP      R0,#+1
   \   00000036   0xD102             BNE.N    ??outputPinRegisterExt_4
   \                     ??outputPinRegisterExt_3:
   \   00000038   0xF05F 0x0901      MOVS     R9,#+1
   \   0000003C   0xE001             B.N      ??outputPinRegisterExt_5
   \                     ??outputPinRegisterExt_4:
   \   0000003E   0xF05F 0x0905      MOVS     R9,#+5
     53          
     54          	initOutputPinExt(msg, output, port, pin, mode);
   \                     ??outputPinRegisterExt_5:
   \   00000042   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \   00000046   0x003B             MOVS     R3,R7
   \   00000048   0x0032             MOVS     R2,R6
   \   0000004A   0x0029             MOVS     R1,R5
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0x.... 0x....      BL       _Z16initOutputPinExtPKcP9OutputPinP12GPIO_TypeDefjj
     55          
     56          	output->setDefaultPinState(outputMode);
   \   00000052   0x4641             MOV      R1,R8
   \   00000054   0x0028             MOVS     R0,R5
   \   00000056   0x.... 0x....      BL       _ZN9OutputPin18setDefaultPinStateEP17pin_output_mode_e
     57          #endif
     58          }
   \                     ??outputPinRegisterExt_1:
   \   0000005A   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
     59          

   \                                 In section .text, align 2, keep-with-next
     60          GPIO_TypeDef * getHwPort(brain_pin_e brainPin) {
   \                     _Z9getHwPort11brain_pin_e:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     61          	if (brainPin == GPIO_UNASSIGNED)
   \   00000004   0x2C50             CMP      R4,#+80
   \   00000006   0xD101             BNE.N    ??getHwPort_0
     62          		return GPIO_NULL;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xE00F             B.N      ??getHwPort_1
     63          	if (brainPin > GPIO_UNASSIGNED || brainPin < 0) {
   \                     ??getHwPort_0:
   \   0000000C   0x2C51             CMP      R4,#+81
   \   0000000E   0xDA01             BGE.N    ??getHwPort_2
   \   00000010   0x2C00             CMP      R4,#+0
   \   00000012   0xD505             BPL.N    ??getHwPort_3
     64          		firmwareError("Invalid brain_pin_e: %d", brainPin);
   \                     ??getHwPort_2:
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0x....             LDR.N    R0,??DataTable7_4
   \   00000018   0x.... 0x....      BL       firmwareError
     65          		return GPIO_NULL;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE005             B.N      ??getHwPort_1
     66          	}
     67          	return PORTS[brainPin / PORT_SIZE];
   \                     ??getHwPort_3:
   \   00000020   0x2010             MOVS     R0,#+16
   \   00000022   0xFB94 0xF0F0      SDIV     R0,R4,R0
   \   00000026   0x....             LDR.N    R1,??DataTable7_5
   \   00000028   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \                     ??getHwPort_1:
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
     68          }
     69          

   \                                 In section .text, align 2, keep-with-next
     70          ioportmask_t getHwPin(brain_pin_e brainPin) {
   \                     _Z8getHwPin11brain_pin_e:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     71          	if (brainPin == GPIO_UNASSIGNED)
   \   00000004   0x2C50             CMP      R4,#+80
   \   00000006   0xD102             BNE.N    ??getHwPin_0
     72          		return EFI_ERROR_CODE;
   \   00000008   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000000C   0xE00F             B.N      ??getHwPin_1
     73          	if (brainPin > GPIO_UNASSIGNED || brainPin < 0) {
   \                     ??getHwPin_0:
   \   0000000E   0x2C51             CMP      R4,#+81
   \   00000010   0xDA01             BGE.N    ??getHwPin_2
   \   00000012   0x2C00             CMP      R4,#+0
   \   00000014   0xD506             BPL.N    ??getHwPin_3
     74          		firmwareError("Invalid brain_pin_e: %d", brainPin);
   \                     ??getHwPin_2:
   \   00000016   0x0021             MOVS     R1,R4
   \   00000018   0x....             LDR.N    R0,??DataTable7_4
   \   0000001A   0x.... 0x....      BL       firmwareError
     75          		return EFI_ERROR_CODE;
   \   0000001E   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000022   0xE004             B.N      ??getHwPin_1
     76          	}
     77          	return brainPin % PORT_SIZE;
   \                     ??getHwPin_3:
   \   00000024   0x2110             MOVS     R1,#+16
   \   00000026   0xFB94 0xF0F1      SDIV     R0,R4,R1
   \   0000002A   0xFB00 0x4011      MLS      R0,R0,R1,R4
   \                     ??getHwPin_1:
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
     78          }
     79          

   \                                 In section .text, align 2, keep-with-next
     80          void outputPinRegisterExt2(const char *msg, OutputPin *output, brain_pin_e brainPin, pin_output_mode_e *outputMode) {
   \                     _Z21outputPinRegisterExt2PKcP9OutputPin11brain_pin_eP17pin_output_mode_e:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
     81          	if (brainPin == GPIO_UNASSIGNED)
   \   0000000C   0x2E50             CMP      R6,#+80
   \   0000000E   0xD00E             BEQ.N    ??outputPinRegisterExt2_0
     82          		return;
     83          	GPIO_TypeDef *hwPort = getHwPort(brainPin);
   \                     ??outputPinRegisterExt2_1:
   \   00000010   0x0030             MOVS     R0,R6
   \   00000012   0x.... 0x....      BL       _Z9getHwPort11brain_pin_e
   \   00000016   0x4680             MOV      R8,R0
     84          	int hwPin = getHwPin(brainPin);
   \   00000018   0x0030             MOVS     R0,R6
   \   0000001A   0x.... 0x....      BL       _Z8getHwPin11brain_pin_e
   \   0000001E   0x4681             MOV      R9,R0
     85          
     86          	outputPinRegisterExt(msg, output, hwPort, hwPin, outputMode);
   \   00000020   0x9700             STR      R7,[SP, #+0]
   \   00000022   0x464B             MOV      R3,R9
   \   00000024   0x4642             MOV      R2,R8
   \   00000026   0x0029             MOVS     R1,R5
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x.... 0x....      BL       _Z20outputPinRegisterExtPKcP9OutputPinP12GPIO_TypeDefjP17pin_output_mode_e
     87          }
   \                     ??outputPinRegisterExt2_0:
   \   0000002E   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
     88          

   \                                 In section .text, align 2, keep-with-next
     89          void outputPinRegister(const char *msg, OutputPin *output, GPIO_TypeDef *port, uint32_t pin) {
   \                     _Z17outputPinRegisterPKcP9OutputPinP12GPIO_TypeDefj:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
     90          	outputPinRegisterExt(msg, output, port, pin, &DEFAULT_OUTPUT);
   \   0000000A   0x....             LDR.N    R0,??DataTable7_6
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   \   0000000E   0x003B             MOVS     R3,R7
   \   00000010   0x0032             MOVS     R2,R6
   \   00000012   0x0029             MOVS     R1,R5
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x.... 0x....      BL       _Z20outputPinRegisterExtPKcP9OutputPinP12GPIO_TypeDefjP17pin_output_mode_e
     91          }
   \   0000001A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     92          
     93          extern OutputPin checkEnginePin;
     94          

   \                                 In section .text, align 2, keep-with-next
     95          void initPrimaryPins(void) {
   \                     _Z15initPrimaryPinsv:
   \   00000000   0xB580             PUSH     {R7,LR}
     96          	outputPinRegister("LED_ERROR", &enginePins.errorLedPin, LED_ERROR_PORT, LED_ERROR_PIN);
   \   00000002   0x230E             MOVS     R3,#+14
   \   00000004   0x....             LDR.N    R2,??DataTable7_7  ;; 0x40020c00
   \   00000006   0x....             LDR.N    R1,??DataTable7_8
   \   00000008   0x....             LDR.N    R0,??DataTable7_9
   \   0000000A   0x.... 0x....      BL       _Z17outputPinRegisterPKcP9OutputPinP12GPIO_TypeDefj
     97          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
     98          

   \                                 In section .text, align 2, keep-with-next
     99          void initOutputPins(void) {
   \                     _Z14initOutputPinsv:
   \   00000000   0xB580             PUSH     {R7,LR}
    100          	/**
    101          	 * want to make sure it's all zeros so that we can compare in initOutputPinExt() method
    102          	 */
    103          // todo: it's too late to clear now? this breaks default status LEDs
    104          // todo: fix this?
    105          //	memset(&outputs, 0, sizeof(outputs));
    106          //	outputPinRegister("ext led 1", LED_EXT_1, EXTRA_LED_1_PORT, EXTRA_LED_1_PIN);
    107          //	outputPinRegister("ext led 2", LED_EXT_2, EXTRA_LED_2_PORT, EXTRA_LED_2_PIN);
    108          //	outputPinRegister("ext led 3", LED_EXT_3, EXTRA_LED_2_PORT, EXTRA_LED_3_PIN);
    109          //	outputPinRegister("alive1", LED_DEBUG, GPIOD, 6);
    110          	outputPinRegisterExt2("MalfunctionIndicator", &checkEnginePin, boardConfiguration->malfunctionIndicatorPin, &DEFAULT_OUTPUT);
   \   00000002   0x....             LDR.N    R3,??DataTable7_6
   \   00000004   0x....             LDR.N    R0,??DataTable7_10
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF8D0 0x2088      LDR      R2,[R0, #+136]
   \   0000000C   0x....             LDR.N    R1,??DataTable7_11
   \   0000000E   0x....             LDR.N    R0,??DataTable7_12
   \   00000010   0x.... 0x....      BL       _Z21outputPinRegisterExt2PKcP9OutputPin11brain_pin_eP17pin_output_mode_e
    111          
    112          // todo: are these needed here? todo: make configurable
    113          //	outputPinRegister("spi CS1", SPI_CS_1, SPI_CS1_PORT, SPI_CS1_PIN);
    114          //	outputPinRegister("spi CS2", SPI_CS_2, SPI_CS2_PORT, SPI_CS2_PIN);
    115          //	outputPinRegister("spi CS3", SPI_CS_3, SPI_CS3_PORT, SPI_CS3_PIN);
    116          //	outputPinRegister("spi CS4", SPI_CS_4, SPI_CS4_PORT, SPI_CS4_PIN);
    117          #if HAL_USE_SPI || defined(__DOXYGEN__)
    118          	outputPinRegisterExt2("spi CS5", &sdCsPin, boardConfiguration->sdCardCsPin, &DEFAULT_OUTPUT);
   \   00000014   0x....             LDR.N    R3,??DataTable7_6
   \   00000016   0x....             LDR.N    R0,??DataTable7_10
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF8D0 0x2144      LDR      R2,[R0, #+324]
   \   0000001E   0x....             LDR.N    R1,??DataTable7_2
   \   00000020   0x....             LDR.N    R0,??DataTable7_13
   \   00000022   0x.... 0x....      BL       _Z21outputPinRegisterExt2PKcP9OutputPin11brain_pin_eP17pin_output_mode_e
    119          #endif
    120          
    121          	// todo: should we move this code closer to the fuel pump logic?
    122          	outputPinRegisterExt2("fuel pump relay", &enginePins.fuelPumpRelay, boardConfiguration->fuelPumpPin, &DEFAULT_OUTPUT);
   \   00000026   0x....             LDR.N    R3,??DataTable7_6
   \   00000028   0x....             LDR.N    R0,??DataTable7_10
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x6982             LDR      R2,[R0, #+24]
   \   0000002E   0x....             LDR.N    R1,??DataTable7_14
   \   00000030   0x....             LDR.N    R0,??DataTable7_15
   \   00000032   0x.... 0x....      BL       _Z21outputPinRegisterExt2PKcP9OutputPin11brain_pin_eP17pin_output_mode_e
    123          
    124          	outputPinRegisterExt2("main relay", &enginePins.mainRelay, boardConfiguration->mainRelayPin, &boardConfiguration->mainRelayPinMode);
   \   00000036   0x....             LDR.N    R0,??DataTable7_10
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xF510 0x73CE      ADDS     R3,R0,#+412
   \   0000003E   0x....             LDR.N    R0,??DataTable7_10
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0xF8D0 0x2134      LDR      R2,[R0, #+308]
   \   00000046   0x....             LDR.N    R1,??DataTable7_16
   \   00000048   0x....             LDR.N    R0,??DataTable7_17
   \   0000004A   0x.... 0x....      BL       _Z21outputPinRegisterExt2PKcP9OutputPin11brain_pin_eP17pin_output_mode_e
    125          
    126          	outputPinRegisterExt2("fan relay", &enginePins.fanRelay, boardConfiguration->fanPin, &DEFAULT_OUTPUT);
   \   0000004E   0x....             LDR.N    R3,??DataTable7_6
   \   00000050   0x....             LDR.N    R0,??DataTable7_10
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0xF8D0 0x2090      LDR      R2,[R0, #+144]
   \   00000058   0x....             LDR.N    R1,??DataTable7_18
   \   0000005A   0x....             LDR.N    R0,??DataTable7_19
   \   0000005C   0x.... 0x....      BL       _Z21outputPinRegisterExt2PKcP9OutputPin11brain_pin_eP17pin_output_mode_e
    127          	outputPinRegisterExt2("o2 heater", &enginePins.o2heater, boardConfiguration->o2heaterPin, &DEFAULT_OUTPUT);
   \   00000060   0x....             LDR.N    R3,??DataTable7_6
   \   00000062   0x....             LDR.N    R0,??DataTable7_10
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0xF8D0 0x2178      LDR      R2,[R0, #+376]
   \   0000006A   0x....             LDR.N    R1,??DataTable7_20
   \   0000006C   0x....             LDR.N    R0,??DataTable7_21
   \   0000006E   0x.... 0x....      BL       _Z21outputPinRegisterExt2PKcP9OutputPin11brain_pin_eP17pin_output_mode_e
    128          	outputPinRegisterExt2("A/C relay", &enginePins.acRelay, boardConfiguration->acRelayPin, &boardConfiguration->acRelayPinMode);
   \   00000072   0x....             LDR.N    R0,??DataTable7_10
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0xF510 0x7319      ADDS     R3,R0,#+612
   \   0000007A   0x....             LDR.N    R0,??DataTable7_10
   \   0000007C   0x6800             LDR      R0,[R0, #+0]
   \   0000007E   0xF8D0 0x2260      LDR      R2,[R0, #+608]
   \   00000082   0x....             LDR.N    R1,??DataTable7_22
   \   00000084   0x....             LDR.N    R0,??DataTable7_23
   \   00000086   0x.... 0x....      BL       _Z21outputPinRegisterExt2PKcP9OutputPin11brain_pin_eP17pin_output_mode_e
    129          
    130          	// digit 1
    131          	/*
    132          	 ledRegister(LED_HUGE_0, GPIOB, 2);
    133          	 ledRegister(LED_HUGE_1, GPIOE, 7);
    134          	 ledRegister(LED_HUGE_2, GPIOE, 8);
    135          	 ledRegister(LED_HUGE_3, GPIOE, 9);
    136          	 ledRegister(LED_HUGE_4, GPIOE, 10);
    137          	 ledRegister(LED_HUGE_5, GPIOE, 11);
    138          	 ledRegister(LED_HUGE_6, GPIOE, 12);
    139          
    140          	 // digit 2
    141          	 ledRegister(LED_HUGE_7, GPIOE, 13);
    142          	 ledRegister(LED_HUGE_8, GPIOE, 14);
    143          	 ledRegister(LED_HUGE_9, GPIOE, 15);
    144          	 ledRegister(LED_HUGE_10, GPIOB, 10);
    145          	 ledRegister(LED_HUGE_11, GPIOB, 11);
    146          	 ledRegister(LED_HUGE_12, GPIOB, 12);
    147          	 ledRegister(LED_HUGE_13, GPIOB, 13);
    148          
    149          	 // digit 3
    150          	 ledRegister(LED_HUGE_14, GPIOE, 0);
    151          	 ledRegister(LED_HUGE_15, GPIOE, 2);
    152          	 ledRegister(LED_HUGE_16, GPIOE, 4);
    153          	 ledRegister(LED_HUGE_17, GPIOE, 6);
    154          	 ledRegister(LED_HUGE_18, GPIOE, 5);
    155          	 ledRegister(LED_HUGE_19, GPIOE, 3);
    156          	 ledRegister(LED_HUGE_20, GPIOE, 1);
    157          	 */
    158          }
   \   0000008A   0xBD01             POP      {R0,PC}          ;; return
    159          
    160          #if EFI_GPIO
    161          
    162          /**
    163           * This method is part of fatal error handling.
    164           * Please note that worst case scenario the pins might get re-enabled by some other code :(
    165           * The whole method is pretty naive, but that's at least something.
    166           */

   \                                 In section .text, align 2, keep-with-next
    167          void turnAllPinsOff(void) {
   \                     _Z14turnAllPinsOffv:
   \   00000000   0xB510             PUSH     {R4,LR}
    168          	for (int i = 0; i < INJECTION_PIN_COUNT; i++) {
   \   00000002   0x2400             MOVS     R4,#+0
   \                     ??turnAllPinsOff_0:
   \   00000004   0x2C0C             CMP      R4,#+12
   \   00000006   0xDA09             BGE.N    ??turnAllPinsOff_1
    169          		enginePins.injectors[i].setValue(false);
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x2014             MOVS     R0,#+20
   \   0000000C   0x....             LDR.N    R2,??DataTable7_16
   \   0000000E   0xFB00 0x2004      MLA      R0,R0,R4,R2
   \   00000012   0x3060             ADDS     R0,R0,#+96
   \   00000014   0x.... 0x....      BL       _ZN9OutputPin8setValueEi
    170          	}
   \   00000018   0x1C64             ADDS     R4,R4,#+1
   \   0000001A   0xE7F3             B.N      ??turnAllPinsOff_0
    171          	for (int i = 0; i < IGNITION_PIN_COUNT; i++) {
   \                     ??turnAllPinsOff_1:
   \   0000001C   0x2400             MOVS     R4,#+0
   \                     ??turnAllPinsOff_2:
   \   0000001E   0x2C0C             CMP      R4,#+12
   \   00000020   0xDA0A             BGE.N    ??turnAllPinsOff_3
    172          		enginePins.coils[i].setValue(false);
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x2014             MOVS     R0,#+20
   \   00000026   0x....             LDR.N    R2,??DataTable7_16
   \   00000028   0xFB00 0x2004      MLA      R0,R0,R4,R2
   \   0000002C   0xF510 0x70A8      ADDS     R0,R0,#+336
   \   00000030   0x.... 0x....      BL       _ZN9OutputPin8setValueEi
    173          	}
   \   00000034   0x1C64             ADDS     R4,R4,#+1
   \   00000036   0xE7F2             B.N      ??turnAllPinsOff_2
    174          }
   \                     ??turnAllPinsOff_3:
   \   00000038   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     `?<Constant "io_pins">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     logger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     sdCsPin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     `?<Constant "invalid pin_output_mo...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     `?<Constant "Invalid brain_pin_e: %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     PORTS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     DEFAULT_OUTPUT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x40020C00         DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     enginePins+0x50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     `?<Constant "LED_ERROR">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x........         DC32     boardConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x........         DC32     checkEnginePin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x........         DC32     `?<Constant "MalfunctionIndicator">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0x........         DC32     `?<Constant "spi CS5">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \   00000000   0x........         DC32     enginePins+0x30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \   00000000   0x........         DC32     `?<Constant "fuel pump relay">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \   00000000   0x........         DC32     enginePins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_17:
   \   00000000   0x........         DC32     `?<Constant "main relay">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_18:
   \   00000000   0x........         DC32     enginePins+0x10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_19:
   \   00000000   0x........         DC32     `?<Constant "fan relay">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_20:
   \   00000000   0x........         DC32     enginePins+0x40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_21:
   \   00000000   0x........         DC32     `?<Constant "o2 heater">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_22:
   \   00000000   0x........         DC32     enginePins+0x20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_23:
   \   00000000   0x........         DC32     `?<Constant "A/C relay">`

   \                                 In section .init_array, align 4, keep-with-next, root
   \   00000000   0x........         DC32    RELOC_ARM_TARGET1 __sti__routine

   \                                 In section .rodata, align 4
   \                     `?<Constant "invalid pin_output_mo...">`:
   \   00000000   0x69 0x6E          DC8 "invalid pin_output_mode_e"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x70 0x69    
   \              0x6E 0x5F    
   \              0x6F 0x75    
   \              0x74 0x70    
   \              0x75 0x74    
   \              0x5F 0x6D    
   \              0x6F 0x64    
   \              0x65 0x5F    
   \              0x65 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Invalid brain_pin_e: %d">`:
   \   00000000   0x49 0x6E          DC8 "Invalid brain_pin_e: %d"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x62 0x72    
   \              0x61 0x69    
   \              0x6E 0x5F    
   \              0x70 0x69    
   \              0x6E 0x5F    
   \              0x65 0x3A    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "LED_ERROR">`:
   \   00000000   0x4C 0x45          DC8 "LED_ERROR"
   \              0x44 0x5F    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MalfunctionIndicator">`:
   \   00000000   0x4D 0x61          DC8 "MalfunctionIndicator"
   \              0x6C 0x66    
   \              0x75 0x6E    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x49    
   \              0x6E 0x64    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x6F 0x72    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "spi CS5">`:
   \   00000000   0x73 0x70          DC8 "spi CS5"
   \              0x69 0x20    
   \              0x43 0x53    
   \              0x35 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "fuel pump relay">`:
   \   00000000   0x66 0x75          DC8 "fuel pump relay"
   \              0x65 0x6C    
   \              0x20 0x70    
   \              0x75 0x6D    
   \              0x70 0x20    
   \              0x72 0x65    
   \              0x6C 0x61    
   \              0x79 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "main relay">`:
   \   00000000   0x6D 0x61          DC8 "main relay"
   \              0x69 0x6E    
   \              0x20 0x72    
   \              0x65 0x6C    
   \              0x61 0x79    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "fan relay">`:
   \   00000000   0x66 0x61          DC8 "fan relay"
   \              0x6E 0x20    
   \              0x72 0x65    
   \              0x6C 0x61    
   \              0x79 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "o2 heater">`:
   \   00000000   0x6F 0x32          DC8 "o2 heater"
   \              0x20 0x68    
   \              0x65 0x61    
   \              0x74 0x65    
   \              0x72 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "A/C relay">`:
   \   00000000   0x41 0x2F          DC8 "A/C relay"
   \              0x43 0x20    
   \              0x72 0x65    
   \              0x6C 0x61    
   \              0x79 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "io_pins">`:
   \   00000000   0x69 0x6F          DC8 "io_pins"
   \              0x5F 0x70    
   \              0x69 0x6E    
   \              0x73 0x00    
    175          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   __sti__routine()
         8   -> LoggingWithStorage::LoggingWithStorage(char const *)
         8   -> OutputPin::OutputPin()
       8   getHwPin(brain_pin_e)
         8   -> firmwareError
       8   getHwPort(brain_pin_e)
         8   -> firmwareError
       8   initOutputPins()
         8   -> outputPinRegisterExt2(char const *, OutputPin *, brain_pin_e, pin_output_mode_e *)
       8   initPrimaryPins()
         8   -> outputPinRegister(char const *, OutputPin *, GPIO_TypeDef *, uint32_t)
      24   outputPinRegister(char const *, OutputPin *, GPIO_TypeDef *, uint32_t)
        24   -> outputPinRegisterExt(char const *, OutputPin *, GPIO_TypeDef *, uint32_t, pin_output_mode_e *)
      32   outputPinRegisterExt(char const *, OutputPin *, GPIO_TypeDef *, uint32_t, pin_output_mode_e *)
        32   -> OutputPin::setDefaultPinState(pin_output_mode_e *)
        32   -> firmwareError
        32   -> initOutputPinExt(char const *, OutputPin *, GPIO_TypeDef *, uint32_t, iomode_t)
      32   outputPinRegisterExt2(char const *, OutputPin *, brain_pin_e, pin_output_mode_e *)
        32   -> getHwPin(brain_pin_e)
        32   -> getHwPort(brain_pin_e)
        32   -> outputPinRegisterExt(char const *, OutputPin *, GPIO_TypeDef *, uint32_t, pin_output_mode_e *)
       8   turnAllPinsOff()
         8   -> OutputPin::setValue(int)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "A/C relay">
      24  ?<Constant "Invalid brain_pin_e: %d">
      12  ?<Constant "LED_ERROR">
      24  ?<Constant "MalfunctionIndicator">
      12  ?<Constant "fan relay">
      16  ?<Constant "fuel pump relay">
      28  ?<Constant "invalid pin_output_mo...">
       8  ?<Constant "io_pins">
      12  ?<Constant "main relay">
      12  ?<Constant "o2 heater">
       8  ?<Constant "spi CS5">
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_19
       4  ??DataTable7_2
       4  ??DataTable7_20
       4  ??DataTable7_21
       4  ??DataTable7_22
       4  ??DataTable7_23
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
       4  DEFAULT_OUTPUT
      32  PORTS
      18  __sti__routine()
      48  getHwPin(brain_pin_e)
      46  getHwPort(brain_pin_e)
     140  initOutputPins()
      16  initPrimaryPins()
     260  logger
      28  outputPinRegister(char const *, OutputPin *, GPIO_TypeDef *, uint32_t)
      94  outputPinRegisterExt(char const *, OutputPin *, GPIO_TypeDef *, uint32_t, pin_output_mode_e *)
      50  outputPinRegisterExt2(char const *, OutputPin *, brain_pin_e, pin_output_mode_e *)
      16  sdCsPin
      58  turnAllPinsOff()
       4  -- Other

 
 280 bytes in section .bss
  32 bytes in section .data
   4 bytes in section .init_array
 168 bytes in section .rodata
 594 bytes in section .text
 
 598 bytes of CODE  memory
 168 bytes of CONST memory
 312 bytes of DATA  memory

Errors: none
Warnings: 1
