###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:51 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\algo #
#                       \idle_controller.cpp                                  #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\algo #
#                       \idle_controller.cpp -lCN                             #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\  #
#                       -lA F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Li #
#                       st\ -o F:\stuff\rusefi_sourceforge\firmware\iar\Debug #
#                       \Obj\ --no_cse --no_unroll --no_inline                #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\i #
#                       dle_controller.lst                                    #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\id #
#                       le_controller.o                                       #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\algo\idle_controller.cpp
      1          /**
      2           * @file	idle_controller.cpp
      3           * @brief	Simple Idle Air Valve control algorithm
      4           *
      5           *			This algorithm is trying to get current RPM to the desired 'target' value
      6           *			by changing Idle Air Valve solenoid duty cycle. Depending on how far current RPM
      7           *			is from the target RPM, the incremental change would be smaller or bigger.
      8           *
      9           *
     10           * todo: DEFAULT_IDLE_DUTY should be a field on the IdleValveState, not a constant
     11           *
     12           * @date May 22, 2013
     13           * @author Andrey Belomutskiy, (c) 2012-2015
     14           */
     15          
     16          #include "main.h"
     17          #include "idle_controller.h"
     18          #include "efilib.h"
     19          #include "rpm_calculator.h"
     20          #include "tps.h"
     21          

   \                                 In section .data, align 4
     22          static int lastGoodValue = DEFAULT_IDLE_DUTY;
   \                     lastGoodValue:
   \   00000000   0x0000003C         DC32 60
     23          
     24          EXTERN_ENGINE
     25          ;
     26          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp IdleValveState::subobject IdleValveState()
   \                     _ZN14IdleValveStateC2Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN14IdleValveStateC1Ev
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     27          IdleValveState::IdleValveState() {
     28          	value = DEFAULT_IDLE_DUTY;
   \                     _ZN14IdleValveStateC1Ev:
   \   00000000   0x....             LDR.N    R1,??DataTable5_2  ;; 0x42700000
   \   00000002   0x6041             STR      R1,[R0, #+4]
     29          	timeOfLastIdleChange = 0;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6081             STR      R1,[R0, #+8]
     30          	time = 0;
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x6001             STR      R1,[R0, #+0]
     31          	targetRpmRangeLeft = targetRpmRangeRight = 0;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x6101             STR      R1,[R0, #+16]
   \   00000010   0x60C1             STR      R1,[R0, #+12]
     32          }
   \   00000012   0x4770             BX       LR               ;; return
     33          

   \                                 In section .text, align 2, keep-with-next
     34          void IdleValveState::init(DECLARE_ENGINE_PARAMETER_F) {
   \                     _ZN14IdleValveState4initEv:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     35          	setTargetRpm(engineConfiguration->targetIdleRpm);
   \   00000004   0x....             LDR.N    R0,??DataTable5_5
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF8D0 0x15EC      LDR      R1,[R0, #+1516]
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       _ZN14IdleValveState12setTargetRpmEi
     36          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
     37          

   \                                 In section .text, align 2, keep-with-next
     38          void IdleValveState::setTargetRpm(int targetRpm) {
   \                     _ZN14IdleValveState12setTargetRpmEi:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
     39          	targetRpmRangeLeft = (int) (targetRpm * 0.93);
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       __aeabi_i2d
   \   0000000C   0x....             LDR.N    R2,??DataTable5_6  ;; 0x5c28f5c3
   \   0000000E   0x....             LDR.N    R3,??DataTable5_7  ;; 0x3fedc28f
   \   00000010   0x.... 0x....      BL       __aeabi_dmul
   \   00000014   0x.... 0x....      BL       __aeabi_d2iz
   \   00000018   0x60E8             STR      R0,[R5, #+12]
     40          	targetRpmRangeRight = (int) (targetRpm * 1.07);
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       __aeabi_i2d
   \   00000020   0x....             LDR.N    R2,??DataTable5_8  ;; 0x51eb851f
   \   00000022   0x....             LDR.N    R3,??DataTable5_9  ;; 0x3ff11eb8
   \   00000024   0x.... 0x....      BL       __aeabi_dmul
   \   00000028   0x.... 0x....      BL       __aeabi_d2iz
   \   0000002C   0x6128             STR      R0,[R5, #+16]
     41          }
   \   0000002E   0xBD30             POP      {R4,R5,PC}       ;; return
     42          
     43          /**
     44           * @brief	sets new idle valve duty cycle: checks the bounds and reports new value
     45           */

   \                                 In section .text, align 4, keep-with-next
     46          static percent_t setNewValue(IdleValveState *idle, int currentRpm, efitimems_t now, const char * msg, percent_t newValue) {
   \                     _Z11setNewValueP14IdleValveStateijPKcf:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0xEE08 0x1A10      VMOV     S16,R1
   \   0000000C   0x0015             MOVS     R5,R2
   \   0000000E   0x001E             MOVS     R6,R3
   \   00000010   0xEEF0 0x8A40      VMOV.F32 S17,S0
     47          	newValue = maxF(newValue, MIN_IDLE);
   \   00000014   0xEEF2 0x0A04      VMOV.F32 S1,#10.0
   \   00000018   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \   0000001C   0x.... 0x....      BL       maxF
   \   00000020   0xEEF0 0x8A40      VMOV.F32 S17,S0
     48          	newValue = minF(newValue, MAX_IDLE);
   \   00000024   0xEDDF 0x....      VLDR.W   S1,??DataTable5  ;; 0x42b40000
   \   00000028   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \   0000002C   0x.... 0x....      BL       minF
   \   00000030   0xEEF0 0x8A40      VMOV.F32 S17,S0
     49          
     50          	if (idle->value != newValue) {
   \   00000034   0xED94 0x0A01      VLDR     S0,[R4, #+4]
   \   00000038   0xEEB4 0x0A68      VCMP.F32 S0,S17
   \   0000003C   0xEEF1 0xFA10      FMSTAT   
   \   00000040   0xD005             BEQ.N    ??setNewValue_0
     51          		idleDebug(msg, currentRpm);
   \   00000042   0xEEB8 0x0AC8      VCVT.F32.S32 S0,S16
   \   00000046   0x0030             MOVS     R0,R6
   \   00000048   0x.... 0x....      BL       _Z9idleDebugPKcf
     52          		idle->timeOfLastIdleChange = now;
   \   0000004C   0x60A5             STR      R5,[R4, #+8]
     53          	}
     54          
     55          	idle->value = newValue;
   \                     ??setNewValue_0:
   \   0000004E   0xEDC4 0x8A01      VSTR     S17,[R4, #+4]
     56          	return newValue;
   \   00000052   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \   00000056   0xECBD 0x8B02      VPOP     {D8}
   \   0000005A   0xBD70             POP      {R4-R6,PC}       ;; return
     57          }
     58          

   \                                 In section .text, align 4, keep-with-next
     59          static percent_t changeValue(IdleValveState *idle, int currentRpm, int now, const char * msg, percent_t delta DECLARE_ENGINE_PARAMETER_S) {
   \                     _Z11changeValueP14IdleValveStateiiPKcf:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   \   0000000E   0xEEB0 0x8A40      VMOV.F32 S16,S0
     60          	if (getTPS(PASS_ENGINE_PARAMETER_F) > 5.0) {
   \   00000012   0x.... 0x....      BL       _Z6getTPSv
   \   00000016   0xEDDF 0x....      VLDR.W   S1,??DataTable5_1  ;; 0x40a00001
   \   0000001A   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   0000001E   0xEEF1 0xFA10      FMSTAT   
   \   00000022   0xDB07             BLT.N    ??changeValue_0
     61          		// We are not supposed to be in idle mode. Don't touch anything
     62          		idleDebug("TPS Lockout, TPS=", getTPS(PASS_ENGINE_PARAMETER_F));
   \   00000024   0x.... 0x....      BL       _Z6getTPSv
   \   00000028   0x....             LDR.N    R0,??DataTable5_10
   \   0000002A   0x.... 0x....      BL       _Z9idleDebugPKcf
     63          		return idle->value;
   \   0000002E   0xED94 0x0A01      VLDR     S0,[R4, #+4]
   \   00000032   0xE00B             B.N      ??changeValue_1
     64          	}
     65          	percent_t newValue = idle->value + delta;
   \                     ??changeValue_0:
   \   00000034   0xED94 0x0A01      VLDR     S0,[R4, #+4]
   \   00000038   0xEE70 0x8A08      VADD.F32 S17,S0,S16
     66          	return setNewValue(idle, currentRpm, now, msg, newValue);
   \   0000003C   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \   00000040   0x003B             MOVS     R3,R7
   \   00000042   0x0032             MOVS     R2,R6
   \   00000044   0x0029             MOVS     R1,R5
   \   00000046   0x0020             MOVS     R0,R4
   \   00000048   0x.... 0x....      BL       _Z11setNewValueP14IdleValveStateijPKcf
   \                     ??changeValue_1:
   \   0000004C   0xECBD 0x8B02      VPOP     {D8}
   \   00000050   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     67          }
     68          
     69          /**
     70           * now - current time in milliseconds
     71           */

   \                                 In section .text, align 4, keep-with-next
     72          percent_t IdleValveState::getIdle(int currentRpm, efitimems_t now DECLARE_ENGINE_PARAMETER_S) {
   \                     _ZN14IdleValveState7getIdleEij:
   \   00000000   0xE92D 0x4370      PUSH     {R4-R6,R8,R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
     73          	if (currentRpm == 0 || isCranking()) {
   \   0000000A   0x2D00             CMP      R5,#+0
   \   0000000C   0xD003             BEQ.N    ??getIdle_0
   \   0000000E   0x.... 0x....      BL       _Z10isCrankingv
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD008             BEQ.N    ??getIdle_1
     74          		return setNewValue(this, currentRpm, now, "cranking value: ", DEFAULT_IDLE_DUTY);
   \                     ??getIdle_0:
   \   00000016   0xED9F 0x....      VLDR.W   S0,??DataTable5_2  ;; 0x42700000
   \   0000001A   0x....             LDR.N    R3,??DataTable5_11
   \   0000001C   0x0032             MOVS     R2,R6
   \   0000001E   0x0029             MOVS     R1,R5
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       _Z11setNewValueP14IdleValveStateijPKcf
   \   00000026   0xE05E             B.N      ??getIdle_2
     75          	}
     76          
     77          	if (currentRpm < 0.7 * targetRpmRangeLeft) {
   \                     ??getIdle_1:
   \   00000028   0x68E0             LDR      R0,[R4, #+12]
   \   0000002A   0x.... 0x....      BL       __aeabi_i2d
   \   0000002E   0xF05F 0x3266      MOVS     R2,#+1717986918
   \   00000032   0x....             LDR.N    R3,??DataTable5_12  ;; 0x3fe66666
   \   00000034   0x.... 0x....      BL       __aeabi_dmul
   \   00000038   0x0002             MOVS     R2,R0
   \   0000003A   0x000B             MOVS     R3,R1
   \   0000003C   0x4690             MOV      R8,R2
   \   0000003E   0x4699             MOV      R9,R3
   \   00000040   0x0028             MOVS     R0,R5
   \   00000042   0x.... 0x....      BL       __aeabi_i2d
   \   00000046   0x4642             MOV      R2,R8
   \   00000048   0x464B             MOV      R3,R9
   \   0000004A   0x.... 0x....      BL       __aeabi_cdcmple
   \   0000004E   0xD20B             BCS.N    ??getIdle_3
     78          		return setNewValue(this, currentRpm, now, "RPMs are seriously low: ", lastGoodValue);
   \   00000050   0x....             LDR.N    R0,??DataTable5_13
   \   00000052   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000056   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000005A   0x....             LDR.N    R3,??DataTable5_14
   \   0000005C   0x0032             MOVS     R2,R6
   \   0000005E   0x0029             MOVS     R1,R5
   \   00000060   0x0020             MOVS     R0,R4
   \   00000062   0x.... 0x....      BL       _Z11setNewValueP14IdleValveStateijPKcf
   \   00000066   0xE03E             B.N      ??getIdle_2
     79          	}
     80          
     81          	if (now - timeOfLastIdleChange < IDLE_PERIOD) {
   \                     ??getIdle_3:
   \   00000068   0x68A0             LDR      R0,[R4, #+8]
   \   0000006A   0x1A30             SUBS     R0,R6,R0
   \   0000006C   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   00000070   0xD202             BCS.N    ??getIdle_4
     82          		// too soon to adjust anything - exiting
     83          		return value;
   \   00000072   0xED94 0x0A01      VLDR     S0,[R4, #+4]
   \   00000076   0xE036             B.N      ??getIdle_2
     84          	}
     85          
     86          	if (currentRpm > targetRpmRangeLeft && currentRpm < targetRpmRangeRight) {
   \                     ??getIdle_4:
   \   00000078   0x68E0             LDR      R0,[R4, #+12]
   \   0000007A   0x42A8             CMP      R0,R5
   \   0000007C   0xDA05             BGE.N    ??getIdle_5
   \   0000007E   0x6920             LDR      R0,[R4, #+16]
   \   00000080   0x4285             CMP      R5,R0
   \   00000082   0xDA02             BGE.N    ??getIdle_5
     87          		// current RPM is good enough
     88          		// todo: need idle signal input
     89          		//lastGoodValue = idle->value;
     90          		return value;
   \   00000084   0xED94 0x0A01      VLDR     S0,[R4, #+4]
   \   00000088   0xE02D             B.N      ??getIdle_2
     91          	}
     92          
     93          	if (currentRpm >= targetRpmRangeRight + 100)
   \                     ??getIdle_5:
   \   0000008A   0x6920             LDR      R0,[R4, #+16]
   \   0000008C   0x3064             ADDS     R0,R0,#+100
   \   0000008E   0x4285             CMP      R5,R0
   \   00000090   0xDB08             BLT.N    ??getIdle_6
     94          		return changeValue(this, currentRpm, now, "idle control: rpm is too high: ", -IDLE_DECREASE_STEP PASS_ENGINE_PARAMETER);
   \   00000092   0xEEBE 0x0A00      VMOV.F32 S0,#-0.5
   \   00000096   0x....             LDR.N    R3,??DataTable5_15
   \   00000098   0x0032             MOVS     R2,R6
   \   0000009A   0x0029             MOVS     R1,R5
   \   0000009C   0x0020             MOVS     R0,R4
   \   0000009E   0x.... 0x....      BL       _Z11changeValueP14IdleValveStateiiPKcf
   \   000000A2   0xE020             B.N      ??getIdle_2
     95          
     96          	if (currentRpm >= targetRpmRangeRight)
   \                     ??getIdle_6:
   \   000000A4   0x6920             LDR      R0,[R4, #+16]
   \   000000A6   0x4285             CMP      R5,R0
   \   000000A8   0xDB08             BLT.N    ??getIdle_7
     97          		return changeValue(this, currentRpm, now, "idle control: rpm is a bit too high: ", -IDLE_DECREASE_SMALL_STEP PASS_ENGINE_PARAMETER);
   \   000000AA   0xED9F 0x....      VLDR.W   S0,??DataTable5_3  ;; 0xbdcccccd
   \   000000AE   0x....             LDR.N    R3,??DataTable5_16
   \   000000B0   0x0032             MOVS     R2,R6
   \   000000B2   0x0029             MOVS     R1,R5
   \   000000B4   0x0020             MOVS     R0,R4
   \   000000B6   0x.... 0x....      BL       _Z11changeValueP14IdleValveStateiiPKcf
   \   000000BA   0xE014             B.N      ??getIdle_2
     98          
     99          	// we are here if RPM is low, let's see how low
    100          	if (currentRpm < targetRpmRangeLeft - 100) {
   \                     ??getIdle_7:
   \   000000BC   0x68E0             LDR      R0,[R4, #+12]
   \   000000BE   0x3864             SUBS     R0,R0,#+100
   \   000000C0   0x4285             CMP      R5,R0
   \   000000C2   0xDA08             BGE.N    ??getIdle_8
    101          		return changeValue(this, currentRpm, now, "idle control: RPMs are low: ", IDLE_INCREASE_STEP PASS_ENGINE_PARAMETER);
   \   000000C4   0xEEB6 0x0A00      VMOV.F32 S0,#0.5
   \   000000C8   0x....             LDR.N    R3,??DataTable5_17
   \   000000CA   0x0032             MOVS     R2,R6
   \   000000CC   0x0029             MOVS     R1,R5
   \   000000CE   0x0020             MOVS     R0,R4
   \   000000D0   0x.... 0x....      BL       _Z11changeValueP14IdleValveStateiiPKcf
   \   000000D4   0xE007             B.N      ??getIdle_2
    102          	}
    103          	return changeValue(this, currentRpm, now, "idle control: RPMs are a bit low: ", IDLE_INCREASE_SMALL_STEP PASS_ENGINE_PARAMETER);
   \                     ??getIdle_8:
   \   000000D6   0xED9F 0x....      VLDR.W   S0,??DataTable5_4  ;; 0x3dcccccd
   \   000000DA   0x....             LDR.N    R3,??DataTable5_18
   \   000000DC   0x0032             MOVS     R2,R6
   \   000000DE   0x0029             MOVS     R1,R5
   \   000000E0   0x0020             MOVS     R0,R4
   \   000000E2   0x.... 0x....      BL       _Z11changeValueP14IdleValveStateiiPKcf
   \                     ??getIdle_2:
   \   000000E6   0xE8BD 0x8370      POP      {R4-R6,R8,R9,PC}  ;; return
    104          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x42B40000         DC32     0x42b40000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x40A00001         DC32     0x40a00001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x42700000         DC32     0x42700000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0xBDCCCCCD         DC32     0xbdcccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x3DCCCCCD         DC32     0x3dcccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     engineConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x5C28F5C3         DC32     0x5c28f5c3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x3FEDC28F         DC32     0x3fedc28f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x51EB851F         DC32     0x51eb851f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x3FF11EB8         DC32     0x3ff11eb8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     `?<Constant "TPS Lockout, TPS=">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     `?<Constant "cranking value: ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x3FE66666         DC32     0x3fe66666

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x........         DC32     lastGoodValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x........         DC32     `?<Constant "RPMs are seriously low: ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \   00000000   0x........         DC32     `?<Constant "idle control: rpm is ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_16:
   \   00000000   0x........         DC32     `?<Constant "idle control: rpm is ...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_17:
   \   00000000   0x........         DC32     `?<Constant "idle control: RPMs ar...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_18:
   \   00000000   0x........         DC32     `?<Constant "idle control: RPMs ar...">_1`

   \                                 In section .rodata, align 4
   \                     `?<Constant "TPS Lockout, TPS=">`:
   \   00000000   0x54 0x50          DC8 "TPS Lockout, TPS="
   \              0x53 0x20    
   \              0x4C 0x6F    
   \              0x63 0x6B    
   \              0x6F 0x75    
   \              0x74 0x2C    
   \              0x20 0x54    
   \              0x50 0x53    
   \              0x3D 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "cranking value: ">`:
   \   00000000   0x63 0x72          DC8 "cranking value: "
   \              0x61 0x6E    
   \              0x6B 0x69    
   \              0x6E 0x67    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x3A 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "RPMs are seriously low: ">`:
   \   00000000   0x52 0x50          DC8 "RPMs are seriously low: "
   \              0x4D 0x73    
   \              0x20 0x61    
   \              0x72 0x65    
   \              0x20 0x73    
   \              0x65 0x72    
   \              0x69 0x6F    
   \              0x75 0x73    
   \              0x6C 0x79    
   \              0x20 0x6C    
   \              0x6F 0x77    
   \              0x3A 0x20    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "idle control: rpm is ...">`:
   \   00000000   0x69 0x64          DC8 "idle control: rpm is too high: "
   \              0x6C 0x65    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x3A 0x20    
   \              0x72 0x70    
   \              0x6D 0x20    
   \              0x69 0x73    
   \              0x20 0x74    
   \              0x6F 0x6F    
   \              0x20 0x68    
   \              0x69 0x67    
   \              0x68 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "idle control: rpm is ...">_1`:
   \   00000000   0x69 0x64          DC8 "idle control: rpm is a bit too high: "
   \              0x6C 0x65    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x3A 0x20    
   \              0x72 0x70    
   \              0x6D 0x20    
   \              0x69 0x73    
   \              0x20 0x61    
   \              0x20 0x62    
   \              0x69 0x74    
   \              0x20 0x74    
   \              0x6F 0x6F    
   \              0x20 0x68    
   \              0x69 0x67    
   \              0x68 0x3A    
   \              0x20 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "idle control: RPMs ar...">`:
   \   00000000   0x69 0x64          DC8 "idle control: RPMs are low: "
   \              0x6C 0x65    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x3A 0x20    
   \              0x52 0x50    
   \              0x4D 0x73    
   \              0x20 0x61    
   \              0x72 0x65    
   \              0x20 0x6C    
   \              0x6F 0x77    
   \              0x3A 0x20    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "idle control: RPMs ar...">_1`:
   \   00000000   0x69 0x64          DC8 "idle control: RPMs are a bit low: "
   \              0x6C 0x65    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x3A 0x20    
   \              0x52 0x50    
   \              0x4D 0x73    
   \              0x20 0x61    
   \              0x72 0x65    
   \              0x20 0x61    
   \              0x20 0x62    
   \              0x69 0x74    
   \              0x20 0x6C    
   \              0x6F 0x77    
   \              0x3A 0x20    
   \              0x00         
   \   00000023   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   IdleValveState::IdleValveState()
      24   IdleValveState::getIdle(int, uint32_t)
        24   -> __aeabi_cdcmple
        24   -> __aeabi_dmul
        24   -> __aeabi_i2d
        24   -> changeValue(IdleValveState *, int, int, char const *, float)
        24   -> isCranking()
        24   -> setNewValue(IdleValveState *, int, uint32_t, char const *, float)
       8   IdleValveState::init()
         8   -> IdleValveState::setTargetRpm(int)
      12   IdleValveState::setTargetRpm(int)
        12   -> __aeabi_d2iz
        12   -> __aeabi_dmul
        12   -> __aeabi_i2d
       8   IdleValveState::subobject IdleValveState()
         8   -> IdleValveState::IdleValveState()
      32   changeValue(IdleValveState *, int, int, char const *, float)
        32   -> getTPS()
        32   -> idleDebug(char const *, float)
        32   -> setNewValue(IdleValveState *, int, uint32_t, char const *, float)
      24   setNewValue(IdleValveState *, int, uint32_t, char const *, float)
        24   -> idleDebug(char const *, float)
        24   -> maxF
        24   -> minF


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      28  ?<Constant "RPMs are seriously low: ">
      20  ?<Constant "TPS Lockout, TPS=">
      20  ?<Constant "cranking value: ">
      32  ?<Constant "idle control: RPMs ar...">
      36  ?<Constant "idle control: RPMs ar...">_1
      32  ?<Constant "idle control: rpm is ...">
      40  ?<Constant "idle control: rpm is ...">_1
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_16
       4  ??DataTable5_17
       4  ??DataTable5_18
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      20  IdleValveState::IdleValveState()
     234  IdleValveState::getIdle(int, uint32_t)
      20  IdleValveState::init()
      48  IdleValveState::setTargetRpm(int)
      12  IdleValveState::subobject IdleValveState()
      82  changeValue(IdleValveState *, int, int, char const *, float)
       4  lastGoodValue
      92  setNewValue(IdleValveState *, int, uint32_t, char const *, float)

 
   4 bytes in section .data
 208 bytes in section .rodata
 584 bytes in section .text
 
 584 bytes of CODE  memory
 208 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: 1
