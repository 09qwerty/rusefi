###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:08:55 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\sens #
#                       ors\map.cpp                                           #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\sens #
#                       ors\map.cpp -lCN F:\stuff\rusefi_sourceforge\firmware #
#                       \iar\Debug\List\ -lA F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\Debug\List\ -o F:\stuff\rusefi_sourceforge\f #
#                       irmware\iar\Debug\Obj\ --no_cse --no_unroll           #
#                       --no_inline --no_code_motion --no_tbaa                #
#                       --no_clustering --no_scheduling --debug               #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\m #
#                       ap.lst                                                #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\ma #
#                       p.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\sensors\map.cpp
      1          #include "main.h"
      2          #include "engine_configuration.h"
      3          #include "engine_math.h"
      4          #include "adc_inputs.h"
      5          #include "interpolation.h"
      6          #include "error_handling.h"
      7          #include "map.h"
      8          
      9          #if EFI_PROD_CODE || defined(__DOXYGEN__)
     10          #include "digital_input_hw.h"
     11          #include "pin_repository.h"
     12          #endif
     13          
     14          #if EFI_ANALOG_SENSORS || defined(__DOXYGEN__)
     15          
     16          EXTERN_ENGINE;
     17          

   \                                 In section .bss, align 4
     18          static Logging *logger;
   \                     logger:
   \   00000000                      DS8 4
     19          

   \                                 In section .text, align 4, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine:
   \   00000000   0xB580             PUSH     {R7,LR}
     20          static FastInterpolation customMap;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   00000006   0x.... 0x....      BL       _ZN17FastInterpolationC1Ev
     21          static efitick_t prevWidthTimeNt = 0;
     22          
     23          static float mapFreq = 0;
     24          
     25          /**
     26           * @brief	MAP value decoded for a 1.83 Honda sensor
     27           * -6.64kPa at zero volts
     28           * 182.78kPa at 5 volts
     29           *
     30           * about 3 volts at 100kPa
     31           *
     32           * @returns kPa value
     33           */
     34          static FastInterpolation denso183(0, -6.64, 5, 182.78);
   \   0000000A   0xEDDF 0x....      VLDR.W   S3,??DataTable5  ;; 0x4336c7ae
   \   0000000E   0xEEB1 0x1A04      VMOV.F32 S2,#5.0
   \   00000012   0xEDDF 0x....      VLDR.W   S1,??DataTable5_1  ;; 0xc0d47ae1
   \   00000016   0xED9F 0x....      VLDR.W   S0,??DataTable5_2  ;; 0x0
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   0000001E   0x.... 0x....      BL       _ZN17FastInterpolationC1Effff
     35          
     36          /**
     37           * MAP sensor output voltage of 3.0v = a gauge reading of 0 in. Hg
     38           * MAP sensor output voltage of 0.5v = a gauge reading of 27 in. Hg
     39           */
     40          static FastInterpolation honda3bar(0.5, 91.422, 3.0, 0);
   \   00000022   0xEDDF 0x....      VLDR.W   S3,??DataTable5_2  ;; 0x0
   \   00000026   0xEEB0 0x1A08      VMOV.F32 S2,#3.0
   \   0000002A   0xEDDF 0x....      VLDR.W   S1,??DataTable5_3  ;; 0x42b6d810
   \   0000002E   0xEEB6 0x0A00      VMOV.F32 S0,#0.5
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   00000036   0x.... 0x....      BL       _ZN17FastInterpolationC1Effff
     41          
     42          static FastInterpolation subyDenso(0, 0, 5, 200);
   \   0000003A   0xEDDF 0x....      VLDR.W   S3,??DataTable5_4  ;; 0x43480000
   \   0000003E   0xEEB1 0x1A04      VMOV.F32 S2,#5.0
   \   00000042   0xEDDF 0x....      VLDR.W   S1,??DataTable5_2  ;; 0x0
   \   00000046   0xED9F 0x....      VLDR.W   S0,??DataTable5_2  ;; 0x0
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   0000004E   0x.... 0x....      BL       _ZN17FastInterpolationC1Effff
     43          
     44          static FastInterpolation gm3bar(0.631, 40, 4.914, 304);
   \   00000052   0xEDDF 0x....      VLDR.W   S3,??DataTable5_5  ;; 0x43980000
   \   00000056   0xED9F 0x....      VLDR.W   S2,??DataTable5_6  ;; 0x409d3f7d
   \   0000005A   0xEDDF 0x....      VLDR.W   S1,??DataTable6  ;; 0x42200000
   \   0000005E   0xED9F 0x....      VLDR.W   S0,??DataTable6_1  ;; 0x3f218937
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable10_5
   \   00000066   0x.... 0x....      BL       _ZN17FastInterpolationC1Effff
     45          
     46          static FastInterpolation mpx4250(0, 8, 5, 260);
   \   0000006A   0xEDDF 0x....      VLDR.W   S3,??DataTable6_2  ;; 0x43820000
   \   0000006E   0xEEB1 0x1A04      VMOV.F32 S2,#5.0
   \   00000072   0xEEF2 0x0A00      VMOV.F32 S1,#8.0
   \   00000076   0xED9F 0x....      VLDR.W   S0,??DataTable5_2  ;; 0x0
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable10_6
   \   0000007E   0x.... 0x....      BL       _ZN17FastInterpolationC1Effff
     47          
     48          static FastInterpolation dodgeNeon2003(0.5, 0, 4.5, 100);
   \   00000082   0xEDDF 0x....      VLDR.W   S3,??DataTable6_3  ;; 0x42c80000
   \   00000086   0xEEB1 0x1A02      VMOV.F32 S2,#4.5
   \   0000008A   0xEDDF 0x....      VLDR.W   S1,??DataTable5_2  ;; 0x0
   \   0000008E   0xEEB6 0x0A00      VMOV.F32 S0,#0.5
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable10_7
   \   00000096   0x.... 0x....      BL       _ZN17FastInterpolationC1Effff
   \   0000009A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     customMap:
   \   00000000                      DS8 8

   \                                 In section .bss, align 8
   \                     prevWidthTimeNt:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
   \                     mapFreq:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     denso183:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
   \                     honda3bar:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
   \                     subyDenso:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
   \                     gm3bar:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
   \                     mpx4250:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
   \                     dodgeNeon2003:
   \   00000000                      DS8 8
     49          
     50          /**
     51           * We hold a reference to current decoder to reduce code branching
     52           * to lookup decoder each time we need to decode
     53           */

   \                                 In section .bss, align 4
     54          static FastInterpolation *mapDecoder;
   \                     mapDecoder:
   \   00000000                      DS8 4
     55          

   \                                 In section .text, align 4, keep-with-next
     56          float decodePressure(float voltage, air_pressure_sensor_config_s * config) {
   \                     _Z14decodePressurefP28air_pressure_sensor_config_s:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   0000000A   0x0004             MOVS     R4,R0
     57          	switch (config->type) {
   \   0000000C   0x68A0             LDR      R0,[R4, #+8]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD009             BEQ.N    ??decodePressure_0
   \   00000012   0x2802             CMP      R0,#+2
   \   00000014   0xD01B             BEQ.N    ??decodePressure_1
   \   00000016   0xD313             BCC.N    ??decodePressure_2
   \   00000018   0x2804             CMP      R0,#+4
   \   0000001A   0xD026             BEQ.N    ??decodePressure_3
   \   0000001C   0xD31E             BCC.N    ??decodePressure_4
   \   0000001E   0x2806             CMP      R0,#+6
   \   00000020   0xD031             BEQ.N    ??decodePressure_5
   \   00000022   0xD329             BCC.N    ??decodePressure_6
   \   00000024   0xE036             B.N      ??decodePressure_7
     58          	case MT_CUSTOM:
     59          		// todo: migrate to 'FastInterpolation customMap'
     60          		return interpolate(0, config->valueAt0, 5, config->valueAt5, voltage);
   \                     ??decodePressure_0:
   \   00000026   0xEEB0 0x2A48      VMOV.F32 S4,S16
   \   0000002A   0xEDD4 0x1A01      VLDR     S3,[R4, #+4]
   \   0000002E   0xEEB1 0x1A04      VMOV.F32 S2,#5.0
   \   00000032   0xEDD4 0x0A00      VLDR     S1,[R4, #0]
   \   00000036   0xED9F 0x....      VLDR.W   S0,??DataTable5_2  ;; 0x0
   \   0000003A   0x.... 0x....      BL       _Z11interpolatefffff
   \   0000003E   0xE030             B.N      ??decodePressure_8
     61          	case MT_DENSO183:
     62          		return denso183.getValue(voltage);
   \                     ??decodePressure_2:
   \   00000040   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   00000048   0x.... 0x....      BL       _ZN17FastInterpolation8getValueEf
   \   0000004C   0xE029             B.N      ??decodePressure_8
     63          	case MT_MPX4250:
     64          		return mpx4250.getValue(voltage);
   \                     ??decodePressure_1:
   \   0000004E   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable10_6
   \   00000056   0x.... 0x....      BL       _ZN17FastInterpolation8getValueEf
   \   0000005A   0xE022             B.N      ??decodePressure_8
     65          	case MT_HONDA3BAR:
     66          		return honda3bar.getValue(voltage);
   \                     ??decodePressure_4:
   \   0000005C   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   00000064   0x.... 0x....      BL       _ZN17FastInterpolation8getValueEf
   \   00000068   0xE01B             B.N      ??decodePressure_8
     67          	case MT_DODGE_NEON_2003:
     68          		return dodgeNeon2003.getValue(voltage);
   \                     ??decodePressure_3:
   \   0000006A   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable10_7
   \   00000072   0x.... 0x....      BL       _ZN17FastInterpolation8getValueEf
   \   00000076   0xE014             B.N      ??decodePressure_8
     69          	case MT_SUBY_DENSO:
     70          		return subyDenso.getValue(voltage);
   \                     ??decodePressure_6:
   \   00000078   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   00000080   0x.... 0x....      BL       _ZN17FastInterpolation8getValueEf
   \   00000084   0xE00D             B.N      ??decodePressure_8
     71          	case MT_GM_3_BAR:
     72          		return gm3bar.getValue(voltage);
   \                     ??decodePressure_5:
   \   00000086   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable10_5
   \   0000008E   0x.... 0x....      BL       _ZN17FastInterpolation8getValueEf
   \   00000092   0xE006             B.N      ??decodePressure_8
     73          	default:
     74          		firmwareError("Unknown MAP type: %d", config->type);
   \                     ??decodePressure_7:
   \   00000094   0x68A1             LDR      R1,[R4, #+8]
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable10_8
   \   0000009A   0x.... 0x....      BL       firmwareError
     75          		return NAN;
   \   0000009E   0xED9F 0x....      VLDR.W   S0,??DataTable8  ;; 0x7fffffff
   \                     ??decodePressure_8:
   \   000000A2   0xECBD 0x8B02      VPOP     {D8}
   \   000000A6   0xBD10             POP      {R4,PC}          ;; return
     76          	}
     77          }
     78          
     79          /**
     80           * @brief	MAP value decoded according to current settings
     81           * @returns kPa value
     82           */

   \                                 In section .text, align 2, keep-with-next
     83          float getMapByVoltage(float voltage DECLARE_ENGINE_PARAMETER_S) {
   \                     _Z15getMapByVoltagef:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xEEB0 0x8A40      VMOV.F32 S16,S0
     84          	// todo: migrate to mapDecoder once parameter listeners are ready
     85          	air_pressure_sensor_config_s * apConfig = &engineConfiguration->map.sensor;
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable10_9
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF110 0x04F0      ADDS     R4,R0,#+240
     86          	return decodePressure(voltage, apConfig);
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   0000001A   0x.... 0x....      BL       _Z14decodePressurefP28air_pressure_sensor_config_s
   \   0000001E   0xECBD 0x8B02      VPOP     {D8}
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
     87          }
     88          
     89          /**
     90           * @return Manifold Absolute Pressure, in kPa
     91           */

   \                                 In section .text, align 4, keep-with-next
     92          float getRawMap(DECLARE_ENGINE_PARAMETER_F) {
   \                     _Z9getRawMapv:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
     93          	if (engineConfiguration->hasFrequencyReportingMapSensor) {
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable10_9
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF890 0x05DA      LDRB     R0,[R0, #+1498]
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x0880             LSRS     R0,R0,#+2
   \   00000014   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD014             BEQ.N    ??getRawMap_0
     94          		return interpolate(boardConfiguration->mapFrequency0Kpa, 0, boardConfiguration->mapFrequency100Kpa, 100, mapFreq);
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable10_10
   \   00000020   0xED90 0x2A00      VLDR     S4,[R0, #0]
   \   00000024   0xEDDF 0x....      VLDR.W   S3,??DataTable6_3  ;; 0x42c80000
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable10_11
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0xED90 0x1A27      VLDR     S2,[R0, #+156]
   \   00000032   0xEDDF 0x....      VLDR.W   S1,??DataTable5_2  ;; 0x0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable10_11
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0xED90 0x0A26      VLDR     S0,[R0, #+152]
   \   00000040   0x.... 0x....      BL       _Z11interpolatefffff
   \   00000044   0xE018             B.N      ??getRawMap_1
     95          	}
     96          
     97          	float voltage = getVoltageDivided("map", engineConfiguration->map.sensor.hwChannel);
   \                     ??getRawMap_0:
   \   00000046   0x....             LDR.N    R0,??DataTable10_9
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0xF8D0 0x10FC      LDR      R1,[R0, #+252]
   \   0000004E   0x....             ADR.N    R0,??DataTable8_1  ;; "map"
   \   00000050   0x.... 0x....      BL       _Z19getInternalAdcValuePKc13adc_channel_e
   \   00000054   0xEE00 0x0A10      VMOV     S0,R0
   \   00000058   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000005C   0xEDDF 0x....      VLDR.W   S1,??DataTable8_2  ;; 0x3a400c01
   \   00000060   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000064   0x....             LDR.N    R0,??DataTable10_9
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xEDD0 0x0A74      VLDR     S1,[R0, #+464]
   \   0000006C   0xEE20 0x8A20      VMUL.F32 S16,S0,S1
     98          	return getMapByVoltage(voltage PASS_ENGINE_PARAMETER);
   \   00000070   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000074   0x.... 0x....      BL       _Z15getMapByVoltagef
   \                     ??getRawMap_1:
   \   00000078   0xECBD 0x8B02      VPOP     {D8}
   \   0000007C   0xBD01             POP      {R0,PC}          ;; return
     99          }
    100          

   \                                 In section .text, align 2, keep-with-next
    101          bool_t hasBaroSensor(DECLARE_ENGINE_PARAMETER_F) {
    102          	return engineConfiguration->hasBaroSensor && engineConfiguration->baroSensor.hwChannel != EFI_ADC_NONE;
   \                     _Z13hasBaroSensorv:
   \   00000000   0x....             LDR.N    R0,??DataTable10_9
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF890 0x05D8      LDRB     R0,[R0, #+1496]
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x0880             LSRS     R0,R0,#+2
   \   0000000C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD007             BEQ.N    ??hasBaroSensor_0
   \   00000014   0x....             LDR.N    R0,??DataTable10_9
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF8D0 0x026C      LDR      R0,[R0, #+620]
   \   0000001C   0x2810             CMP      R0,#+16
   \   0000001E   0xD001             BEQ.N    ??hasBaroSensor_0
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0xE000             B.N      ??hasBaroSensor_1
   \                     ??hasBaroSensor_0:
   \   00000024   0x2000             MOVS     R0,#+0
   \                     ??hasBaroSensor_1:
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x4770             BX       LR               ;; return
    103          }
    104          

   \                                 In section .text, align 4, keep-with-next
    105          float getBaroPressure(DECLARE_ENGINE_PARAMETER_F) {
   \                     _Z15getBaroPressurev:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
    106          	float voltage = getVoltageDivided("baro", engineConfiguration->baroSensor.hwChannel);
   \   00000006   0x....             LDR.N    R0,??DataTable10_9
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF8D0 0x126C      LDR      R1,[R0, #+620]
   \   0000000E   0x....             LDR.N    R0,??DataTable10_12
   \   00000010   0x.... 0x....      BL       _Z19getInternalAdcValuePKc13adc_channel_e
   \   00000014   0xEE00 0x0A10      VMOV     S0,R0
   \   00000018   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000001C   0xEDDF 0x....      VLDR.W   S1,??DataTable8_2  ;; 0x3a400c01
   \   00000020   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000024   0x....             LDR.N    R0,??DataTable10_9
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xEDD0 0x0A74      VLDR     S1,[R0, #+464]
   \   0000002C   0xEE20 0x8A20      VMUL.F32 S16,S0,S1
    107          	return decodePressure(voltage, &engineConfiguration->baroSensor);
   \   00000030   0x....             LDR.N    R0,??DataTable10_9
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xF510 0x7018      ADDS     R0,R0,#+608
   \   00000038   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   0000003C   0x.... 0x....      BL       _Z14decodePressurefP28air_pressure_sensor_config_s
   \   00000040   0xECBD 0x8B02      VPOP     {D8}
   \   00000044   0xBD01             POP      {R0,PC}          ;; return
    108          }
    109          

   \                                 In section .text, align 2, keep-with-next
    110          static FastInterpolation *getDecoder(air_pressure_sensor_type_e type) {
   \                     _Z10getDecoder26air_pressure_sensor_type_e:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    111          	switch (type) {
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD009             BEQ.N    ??getDecoder_0
   \   00000008   0x2C02             CMP      R4,#+2
   \   0000000A   0xD00B             BEQ.N    ??getDecoder_1
   \   0000000C   0xD308             BCC.N    ??getDecoder_2
   \   0000000E   0x2C04             CMP      R4,#+4
   \   00000010   0xD00C             BEQ.N    ??getDecoder_3
   \   00000012   0xD309             BCC.N    ??getDecoder_4
   \   00000014   0x2C06             CMP      R4,#+6
   \   00000016   0xD00D             BEQ.N    ??getDecoder_5
   \   00000018   0xD30A             BCC.N    ??getDecoder_6
   \   0000001A   0xE00D             B.N      ??getDecoder_7
    112          	case MT_CUSTOM:
    113          		return &customMap;
   \                     ??getDecoder_0:
   \   0000001C   0x....             LDR.N    R0,??DataTable10_1
   \   0000001E   0xE010             B.N      ??getDecoder_8
    114          	case MT_DENSO183:
    115          		return &denso183;
   \                     ??getDecoder_2:
   \   00000020   0x....             LDR.N    R0,??DataTable10_2
   \   00000022   0xE00E             B.N      ??getDecoder_8
    116          	case MT_MPX4250:
    117          		return &mpx4250;
   \                     ??getDecoder_1:
   \   00000024   0x....             LDR.N    R0,??DataTable10_6
   \   00000026   0xE00C             B.N      ??getDecoder_8
    118          	case MT_HONDA3BAR:
    119          		return &honda3bar;
   \                     ??getDecoder_4:
   \   00000028   0x....             LDR.N    R0,??DataTable10_3
   \   0000002A   0xE00A             B.N      ??getDecoder_8
    120          	case MT_DODGE_NEON_2003:
    121          		return &dodgeNeon2003;
   \                     ??getDecoder_3:
   \   0000002C   0x....             LDR.N    R0,??DataTable10_7
   \   0000002E   0xE008             B.N      ??getDecoder_8
    122          	case MT_SUBY_DENSO:
    123          		return &subyDenso;
   \                     ??getDecoder_6:
   \   00000030   0x....             LDR.N    R0,??DataTable10_4
   \   00000032   0xE006             B.N      ??getDecoder_8
    124          	case MT_GM_3_BAR:
    125          		return &gm3bar;
   \                     ??getDecoder_5:
   \   00000034   0x....             LDR.N    R0,??DataTable10_5
   \   00000036   0xE004             B.N      ??getDecoder_8
    126          	default:
    127          		firmwareError("Unknown MAP type: %d", type);
   \                     ??getDecoder_7:
   \   00000038   0x0021             MOVS     R1,R4
   \   0000003A   0x....             LDR.N    R0,??DataTable10_8
   \   0000003C   0x.... 0x....      BL       firmwareError
    128          		return &customMap;
   \   00000040   0x....             LDR.N    R0,??DataTable10_1
   \                     ??getDecoder_8:
   \   00000042   0xBD10             POP      {R4,PC}          ;; return
    129          	}
    130          }
    131          

   \                                 In section .text, align 4, keep-with-next
    132          static void applyConfiguration(DECLARE_ENGINE_PARAMETER_F) {
   \                     _Z18applyConfigurationv:
   \   00000000   0xB510             PUSH     {R4,LR}
    133          	air_pressure_sensor_config_s * apConfig = &engineConfiguration->map.sensor;
   \   00000002   0x....             LDR.N    R0,??DataTable10_9
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF110 0x04F0      ADDS     R4,R0,#+240
    134          	customMap.init(0, apConfig->valueAt0, 5, apConfig->valueAt5);
   \   0000000A   0xEDD4 0x1A01      VLDR     S3,[R4, #+4]
   \   0000000E   0xEEB1 0x1A04      VMOV.F32 S2,#5.0
   \   00000012   0xEDD4 0x0A00      VLDR     S1,[R4, #0]
   \   00000016   0xED9F 0x....      VLDR.W   S0,??DataTable10  ;; 0x0
   \   0000001A   0x....             LDR.N    R0,??DataTable10_1
   \   0000001C   0x.... 0x....      BL       _ZN17FastInterpolation4initEffff
    135          	mapDecoder = getDecoder(engineConfiguration->map.sensor.type);
   \   00000020   0x....             LDR.N    R0,??DataTable10_9
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF8D0 0x00F8      LDR      R0,[R0, #+248]
   \   00000028   0x.... 0x....      BL       _Z10getDecoder26air_pressure_sensor_type_e
   \   0000002C   0x....             LDR.N    R1,??DataTable10_13
   \   0000002E   0x6008             STR      R0,[R1, #+0]
    136          }
   \   00000030   0xBD10             POP      {R4,PC}          ;; return
    137          

   \                                 In section .text, align 2, keep-with-next
    138          static void digitalMapWidthCallback(void) {
   \                     _Z23digitalMapWidthCallbackv:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    139          	efitick_t nowNt = getTimeNowNt();
   \   00000002   0x.... 0x....      BL       getTimeNowNt
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
    140          
    141          	mapFreq = 1000000.0 / NT2US(nowNt - prevWidthTimeNt);
   \   0000000A   0x....             LDR.N    R0,??DataTable10_14
   \   0000000C   0xE9D0 0x2300      LDRD     R2,R3,[R0, #+0]
   \   00000010   0x1AA0             SUBS     R0,R4,R2
   \   00000012   0xEB75 0x0103      SBCS     R1,R5,R3
   \   00000016   0x22A8             MOVS     R2,#+168
   \   00000018   0x2300             MOVS     R3,#+0
   \   0000001A   0x.... 0x....      BL       __aeabi_ldivmod
   \   0000001E   0x.... 0x....      BL       __aeabi_l2d
   \   00000022   0x0002             MOVS     R2,R0
   \   00000024   0x000B             MOVS     R3,R1
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x....             LDR.N    R1,??DataTable10_15  ;; 0x412e8480
   \   0000002A   0x.... 0x....      BL       __aeabi_ddiv
   \   0000002E   0x.... 0x....      BL       __aeabi_d2f
   \   00000032   0x....             LDR.N    R1,??DataTable10_10
   \   00000034   0x6008             STR      R0,[R1, #+0]
    142          
    143          	prevWidthTimeNt = nowNt;
   \   00000036   0x....             LDR.N    R0,??DataTable10_14
   \   00000038   0xE9C0 0x4500      STRD     R4,R5,[R0, #+0]
    144          }
   \   0000003C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    145          
    146          #if EFI_PROD_CODE || defined(__DOXYGEN__)

   \                                 In section .text, align 2, keep-with-next
    147          static void printMAPInfo(void) {
   \                     _Z12printMAPInfov:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xB082             SUB      SP,SP,#+8
    148          #if EFI_ANALOG_SENSORS || defined(__DOXYGEN__)
    149          	scheduleMsg(logger, "instant value=%fkPa", getRawMap());
   \   00000008   0x.... 0x....      BL       _Z9getRawMapv
   \   0000000C   0xEE10 0x0A10      VMOV     R0,S0
   \   00000010   0x.... 0x....      BL       __aeabi_f2d
   \   00000014   0x0002             MOVS     R2,R0
   \   00000016   0x000B             MOVS     R3,R1
   \   00000018   0x....             LDR.N    R1,??DataTable10_16
   \   0000001A   0x....             LDR.N    R0,??DataTable10_17
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x.... 0x....      BL       scheduleMsg
    150          
    151          	if (engineConfiguration->hasFrequencyReportingMapSensor) {
   \   00000022   0x....             LDR.N    R0,??DataTable10_9
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF890 0x05DA      LDRB     R0,[R0, #+1498]
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x0880             LSRS     R0,R0,#+2
   \   0000002E   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD012             BEQ.N    ??printMAPInfo_0
    152          		scheduleMsg(logger, "instant value=%fHz @ %s", mapFreq, hwPortname(boardConfiguration->frequencyReportingMapInputPin));
   \   00000036   0x....             LDR.N    R0,??DataTable10_11
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xF8D0 0x0364      LDR      R0,[R0, #+868]
   \   0000003E   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   00000042   0x9000             STR      R0,[SP, #+0]
   \   00000044   0x....             LDR.N    R0,??DataTable10_10
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0x.... 0x....      BL       __aeabi_f2d
   \   0000004C   0x0002             MOVS     R2,R0
   \   0000004E   0x000B             MOVS     R3,R1
   \   00000050   0x....             LDR.N    R1,??DataTable10_18
   \   00000052   0x....             LDR.N    R0,??DataTable10_17
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0x.... 0x....      BL       scheduleMsg
   \   0000005A   0xE035             B.N      ??printMAPInfo_1
    153          	} else {
    154          		scheduleMsg(logger, "map type=%d/%s MAP=%fkPa", engineConfiguration->map.sensor.type,
    155          				getAir_pressure_sensor_type_e(engineConfiguration->map.sensor.type),
    156          				getMap());
   \                     ??printMAPInfo_0:
   \   0000005C   0x.... 0x....      BL       _Z6getMapv
   \   00000060   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   00000064   0x....             LDR.N    R0,??DataTable10_9
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF8D0 0x00F8      LDR      R0,[R0, #+248]
   \   0000006C   0x.... 0x....      BL       _Z29getAir_pressure_sensor_type_e26air_pressure_sensor_type_e
   \   00000070   0x0004             MOVS     R4,R0
   \   00000072   0xEE18 0x0A10      VMOV     R0,S16
   \   00000076   0x.... 0x....      BL       __aeabi_f2d
   \   0000007A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000007E   0x0023             MOVS     R3,R4
   \   00000080   0x....             LDR.N    R0,??DataTable10_9
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0xF8D0 0x20F8      LDR      R2,[R0, #+248]
   \   00000088   0x....             LDR.N    R1,??DataTable10_19
   \   0000008A   0x....             LDR.N    R0,??DataTable10_17
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0x.... 0x....      BL       scheduleMsg
    157          
    158          		if (engineConfiguration->map.sensor.type == MT_CUSTOM) {
   \   00000092   0x....             LDR.N    R0,??DataTable10_9
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0xF8D0 0x00F8      LDR      R0,[R0, #+248]
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD114             BNE.N    ??printMAPInfo_1
    159          			scheduleMsg(logger, "at0=%f at5=%f", engineConfiguration->map.sensor.valueAt0,
    160          					engineConfiguration->map.sensor.valueAt5);
   \   0000009E   0x....             LDR.N    R0,??DataTable10_9
   \   000000A0   0x6800             LDR      R0,[R0, #+0]
   \   000000A2   0xF8D0 0x00F4      LDR      R0,[R0, #+244]
   \   000000A6   0x.... 0x....      BL       __aeabi_f2d
   \   000000AA   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000000AE   0x....             LDR.N    R0,??DataTable10_9
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0xF8D0 0x00F0      LDR      R0,[R0, #+240]
   \   000000B6   0x.... 0x....      BL       __aeabi_f2d
   \   000000BA   0x0002             MOVS     R2,R0
   \   000000BC   0x000B             MOVS     R3,R1
   \   000000BE   0x....             LDR.N    R1,??DataTable10_20
   \   000000C0   0x....             LDR.N    R0,??DataTable10_17
   \   000000C2   0x6800             LDR      R0,[R0, #+0]
   \   000000C4   0x.... 0x....      BL       scheduleMsg
    161          		}
    162          	}
    163          
    164          	scheduleMsg(logger, "baro type=%d value=%f", engineConfiguration->baroSensor.type, getBaroPressure());
   \                     ??printMAPInfo_1:
   \   000000C8   0x.... 0x....      BL       _Z15getBaroPressurev
   \   000000CC   0xEE10 0x0A10      VMOV     R0,S0
   \   000000D0   0x.... 0x....      BL       __aeabi_f2d
   \   000000D4   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000000D8   0x....             LDR.N    R0,??DataTable10_9
   \   000000DA   0x6800             LDR      R0,[R0, #+0]
   \   000000DC   0xF8D0 0x2268      LDR      R2,[R0, #+616]
   \   000000E0   0x....             LDR.N    R1,??DataTable10_21
   \   000000E2   0x....             LDR.N    R0,??DataTable10_17
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0x.... 0x....      BL       scheduleMsg
    165          	if (engineConfiguration->baroSensor.type == MT_CUSTOM) {
   \   000000EA   0x....             LDR.N    R0,??DataTable10_9
   \   000000EC   0x6800             LDR      R0,[R0, #+0]
   \   000000EE   0xF8D0 0x0268      LDR      R0,[R0, #+616]
   \   000000F2   0x2800             CMP      R0,#+0
   \   000000F4   0xD114             BNE.N    ??printMAPInfo_2
    166          		scheduleMsg(logger, "min=%f max=%f", engineConfiguration->baroSensor.valueAt0,
    167          				engineConfiguration->baroSensor.valueAt5);
   \   000000F6   0x....             LDR.N    R0,??DataTable10_9
   \   000000F8   0x6800             LDR      R0,[R0, #+0]
   \   000000FA   0xF8D0 0x0264      LDR      R0,[R0, #+612]
   \   000000FE   0x.... 0x....      BL       __aeabi_f2d
   \   00000102   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000106   0x....             LDR.N    R0,??DataTable10_9
   \   00000108   0x6800             LDR      R0,[R0, #+0]
   \   0000010A   0xF8D0 0x0260      LDR      R0,[R0, #+608]
   \   0000010E   0x.... 0x....      BL       __aeabi_f2d
   \   00000112   0x0002             MOVS     R2,R0
   \   00000114   0x000B             MOVS     R3,R1
   \   00000116   0x....             LDR.N    R1,??DataTable10_22
   \   00000118   0x....             LDR.N    R0,??DataTable10_17
   \   0000011A   0x6800             LDR      R0,[R0, #+0]
   \   0000011C   0x.... 0x....      BL       scheduleMsg
    168          	}
    169          #endif /* EFI_ANALOG_SENSORS */
    170          }
   \                     ??printMAPInfo_2:
   \   00000120   0xB002             ADD      SP,SP,#+8
   \   00000122   0xECBD 0x8B02      VPOP     {D8}
   \   00000126   0xBD10             POP      {R4,PC}          ;; return
    171          #endif /* EFI_PROD_CODE */
    172          
    173          

   \                                 In section .text, align 2, keep-with-next
    174          void initMapDecoder(Logging *sharedLogger DECLARE_ENGINE_PARAMETER_S) {
   \                     _Z14initMapDecoderP7Logging:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    175          	logger = sharedLogger;
   \   00000004   0x....             LDR.N    R0,??DataTable10_17
   \   00000006   0x6004             STR      R4,[R0, #+0]
    176          	applyConfiguration(PASS_ENGINE_PARAMETER_F);
   \   00000008   0x.... 0x....      BL       _Z18applyConfigurationv
    177          	//engine->configurationListeners.registerCallback(applyConfiguration);
    178          
    179          #if EFI_PROD_CODE || defined(__DOXYGEN__)
    180          	if (engineConfiguration->hasFrequencyReportingMapSensor) {
   \   0000000C   0x....             LDR.N    R0,??DataTable10_9
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF890 0x05DA      LDRB     R0,[R0, #+1498]
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x0880             LSRS     R0,R0,#+2
   \   00000018   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD011             BEQ.N    ??initMapDecoder_0
    181          		digital_input_s* digitalMapInput = initWaveAnalyzerDriver("map freq", boardConfiguration->frequencyReportingMapInputPin);
   \   00000020   0x....             LDR.N    R0,??DataTable10_11
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF8D0 0x1364      LDR      R1,[R0, #+868]
   \   00000028   0x....             LDR.N    R0,??DataTable10_23
   \   0000002A   0x.... 0x....      BL       _Z22initWaveAnalyzerDriverPKc11brain_pin_e
   \   0000002E   0x0005             MOVS     R5,R0
    182          		startInputDriver(digitalMapInput, true);
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0x0028             MOVS     R0,R5
   \   00000034   0x.... 0x....      BL       _Z16startInputDriverP15digital_input_sb
    183          
    184          		digitalMapInput->widthListeners.registerCallback((VoidInt) digitalMapWidthCallback, NULL);
   \   00000038   0x2200             MOVS     R2,#+0
   \   0000003A   0x....             LDR.N    R1,??DataTable10_24
   \   0000003C   0xF115 0x0008      ADDS     R0,R5,#+8
   \   00000040   0x.... 0x....      BL       _ZN16IntListenerArray16registerCallbackEPFviEPv
    185          	}
    186          
    187          	addConsoleAction("mapinfo", printMAPInfo);
   \                     ??initMapDecoder_0:
   \   00000044   0x....             LDR.N    R1,??DataTable10_25
   \   00000046   0x....             LDR.N    R0,??DataTable10_26
   \   00000048   0x.... 0x....      BL       addConsoleAction
    188          #endif
    189          }
   \   0000004C   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x4336C7AE         DC32     0x4336c7ae

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0xC0D47AE1         DC32     0xc0d47ae1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x42B6D810         DC32     0x42b6d810

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x43480000         DC32     0x43480000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x43980000         DC32     0x43980000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x409D3F7D         DC32     0x409d3f7d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x42200000         DC32     0x42200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x3F218937         DC32     0x3f218937

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x43820000         DC32     0x43820000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x7FFFFFFF         DC32     0x7fffffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x6D 0x61          DC8      "map"
   \              0x70 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x3A400C01         DC32     0x3a400c01

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x........         DC32     customMap

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x........         DC32     denso183

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x........         DC32     honda3bar

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x........         DC32     subyDenso

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x........         DC32     gm3bar

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x........         DC32     mpx4250

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x........         DC32     dodgeNeon2003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x........         DC32     `?<Constant "Unknown MAP type: %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x........         DC32     engineConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x........         DC32     mapFreq

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \   00000000   0x........         DC32     boardConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \   00000000   0x........         DC32     `?<Constant "baro">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \   00000000   0x........         DC32     mapDecoder

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \   00000000   0x........         DC32     prevWidthTimeNt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_15:
   \   00000000   0x412E8480         DC32     0x412e8480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_16:
   \   00000000   0x........         DC32     `?<Constant "instant value=%fkPa">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_17:
   \   00000000   0x........         DC32     logger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_18:
   \   00000000   0x........         DC32     `?<Constant "instant value=%fHz @ %s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_19:
   \   00000000   0x........         DC32     `?<Constant "map type=%d/%s MAP=%fkPa">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_20:
   \   00000000   0x........         DC32     `?<Constant "at0=%f at5=%f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_21:
   \   00000000   0x........         DC32     `?<Constant "baro type=%d value=%f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_22:
   \   00000000   0x........         DC32     `?<Constant "min=%f max=%f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_23:
   \   00000000   0x........         DC32     `?<Constant "map freq">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_24:
   \   00000000   0x........         DC32     _Z23digitalMapWidthCallbackv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_25:
   \   00000000   0x........         DC32     _Z12printMAPInfov

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_26:
   \   00000000   0x........         DC32     `?<Constant "mapinfo">`

   \                                 In section .init_array, align 4, keep-with-next, root
   \   00000000   0x........         DC32    RELOC_ARM_TARGET1 __sti__routine

   \                                 In section .rodata, align 4
   \                     `?<Constant "Unknown MAP type: %d">`:
   \   00000000   0x55 0x6E          DC8 "Unknown MAP type: %d"
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x4D 0x41    
   \              0x50 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x6D 0x61          DC8 "map"
   \              0x70 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "baro">`:
   \   00000000   0x62 0x61          DC8 "baro"
   \              0x72 0x6F    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "instant value=%fkPa">`:
   \   00000000   0x69 0x6E          DC8 "instant value=%fkPa"
   \              0x73 0x74    
   \              0x61 0x6E    
   \              0x74 0x20    
   \              0x76 0x61    
   \              0x6C 0x75    
   \              0x65 0x3D    
   \              0x25 0x66    
   \              0x6B 0x50    
   \              0x61 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "instant value=%fHz @ %s">`:
   \   00000000   0x69 0x6E          DC8 "instant value=%fHz @ %s"
   \              0x73 0x74    
   \              0x61 0x6E    
   \              0x74 0x20    
   \              0x76 0x61    
   \              0x6C 0x75    
   \              0x65 0x3D    
   \              0x25 0x66    
   \              0x48 0x7A    
   \              0x20 0x40    
   \              0x20 0x25    
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "map type=%d/%s MAP=%fkPa">`:
   \   00000000   0x6D 0x61          DC8 "map type=%d/%s MAP=%fkPa"
   \              0x70 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x3D 0x25    
   \              0x64 0x2F    
   \              0x25 0x73    
   \              0x20 0x4D    
   \              0x41 0x50    
   \              0x3D 0x25    
   \              0x66 0x6B    
   \              0x50 0x61    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "at0=%f at5=%f">`:
   \   00000000   0x61 0x74          DC8 "at0=%f at5=%f"
   \              0x30 0x3D    
   \              0x25 0x66    
   \              0x20 0x61    
   \              0x74 0x35    
   \              0x3D 0x25    
   \              0x66 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "baro type=%d value=%f">`:
   \   00000000   0x62 0x61          DC8 "baro type=%d value=%f"
   \              0x72 0x6F    
   \              0x20 0x74    
   \              0x79 0x70    
   \              0x65 0x3D    
   \              0x25 0x64    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x3D 0x25    
   \              0x66 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "min=%f max=%f">`:
   \   00000000   0x6D 0x69          DC8 "min=%f max=%f"
   \              0x6E 0x3D    
   \              0x25 0x66    
   \              0x20 0x6D    
   \              0x61 0x78    
   \              0x3D 0x25    
   \              0x66 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "map freq">`:
   \   00000000   0x6D 0x61          DC8 "map freq"
   \              0x70 0x20    
   \              0x66 0x72    
   \              0x65 0x71    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "mapinfo">`:
   \   00000000   0x6D 0x61          DC8 "mapinfo"
   \              0x70 0x69    
   \              0x6E 0x66    
   \              0x6F 0x00    
    190          
    191          #else /* EFI_ANALOG_SENSORS */
    192          
    193          void initMapDecoder(Logging *sharedLogger DECLARE_ENGINE_PARAMETER_S) {
    194          }
    195          
    196          #endif /* EFI_ANALOG_SENSORS */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   __sti__routine()
         8   -> FastInterpolation::FastInterpolation()
         8   -> FastInterpolation::FastInterpolation(float, float, float, float)
       8   applyConfiguration()
         8   -> FastInterpolation::init(float, float, float, float)
         8   -> getDecoder(air_pressure_sensor_type_e)
      16   decodePressure(float, air_pressure_sensor_config_s *)
        16   -> FastInterpolation::getValue(float)
        16   -> firmwareError
        16   -> interpolate(float, float, float, float, float)
      16   digitalMapWidthCallback()
        16   -> __aeabi_d2f
        16   -> __aeabi_ddiv
        16   -> __aeabi_l2d
        16   -> __aeabi_ldivmod
        16   -> getTimeNowNt
      16   getBaroPressure()
        16   -> decodePressure(float, air_pressure_sensor_config_s *)
        16   -> getInternalAdcValue(char const *, adc_channel_e)
       8   getDecoder(air_pressure_sensor_type_e)
         8   -> firmwareError
      16   getMapByVoltage(float)
        16   -> decodePressure(float, air_pressure_sensor_config_s *)
      16   getRawMap()
        16   -> getInternalAdcValue(char const *, adc_channel_e)
        16   -> getMapByVoltage(float)
        16   -> interpolate(float, float, float, float, float)
       0   hasBaroSensor()
      16   initMapDecoder(Logging *)
        16   -> IntListenerArray::registerCallback(VoidInt, void *)
        16   -> addConsoleAction
        16   -> applyConfiguration()
        16   -> initWaveAnalyzerDriver(char const *, brain_pin_e)
        16   -> startInputDriver(digital_input_s *, bool)
      24   printMAPInfo()
        24   -> __aeabi_f2d
        24   -> getAir_pressure_sensor_type_e(air_pressure_sensor_type_e)
        24   -> getBaroPressure()
        24   -> getMap()
        24   -> getRawMap()
        24   -> hwPortname(brain_pin_e)
        24   -> scheduleMsg


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant "Unknown MAP type: %d">
      16  ?<Constant "at0=%f at5=%f">
      24  ?<Constant "baro type=%d value=%f">
       8  ?<Constant "baro">
      24  ?<Constant "instant value=%fHz @ %s">
      20  ?<Constant "instant value=%fkPa">
      12  ?<Constant "map freq">
      28  ?<Constant "map type=%d/%s MAP=%fkPa">
       4  ?<Constant "map">
       8  ?<Constant "mapinfo">
      16  ?<Constant "min=%f max=%f">
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_13
       4  ??DataTable10_14
       4  ??DataTable10_15
       4  ??DataTable10_16
       4  ??DataTable10_17
       4  ??DataTable10_18
       4  ??DataTable10_19
       4  ??DataTable10_2
       4  ??DataTable10_20
       4  ??DataTable10_21
       4  ??DataTable10_22
       4  ??DataTable10_23
       4  ??DataTable10_24
       4  ??DataTable10_25
       4  ??DataTable10_26
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
     156  __sti__routine()
      50  applyConfiguration()
       8  customMap
     168  decodePressure(float, air_pressure_sensor_config_s *)
       8  denso183
      62  digitalMapWidthCallback()
       8  dodgeNeon2003
      70  getBaroPressure()
      68  getDecoder(air_pressure_sensor_type_e)
      36  getMapByVoltage(float)
     126  getRawMap()
       8  gm3bar
      42  hasBaroSensor()
       8  honda3bar
      78  initMapDecoder(Logging *)
       4  logger
       4  mapDecoder
       4  mapFreq
       8  mpx4250
       8  prevWidthTimeNt
     296  printMAPInfo()
       8  subyDenso
       4  -- Other

 
    76 bytes in section .bss
     4 bytes in section .init_array
   184 bytes in section .rodata
 1 316 bytes in section .text
 
 1 320 bytes of CODE  memory
   184 bytes of CONST memory
    76 bytes of DATA  memory

Errors: none
Warnings: 2
