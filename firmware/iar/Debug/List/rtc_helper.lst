###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:33 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\hw_layer\rtc_hel #
#                       per.cpp                                               #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\hw_layer\rtc_hel #
#                       per.cpp -lCN F:\stuff\rusefi_sourceforge\firmware\iar #
#                       \Debug\List\ -lA F:\stuff\rusefi_sourceforge\firmware #
#                       \iar\Debug\List\ -o F:\stuff\rusefi_sourceforge\firmw #
#                       are\iar\Debug\Obj\ --no_cse --no_unroll --no_inline   #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\r #
#                       tc_helper.lst                                         #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\rt #
#                       c_helper.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\hw_layer\rtc_helper.cpp
      1          /**
      2           * @file rtc_helper.cpp
      3           * @brief Real Time Clock helper
      4           *
      5           * @date Feb 5, 2014
      6           * @author Andrey Belomutskiy, (c) 2012-2015
      7           */
      8          
      9          #include <string.h> 
     10          #include <time.h>
     11          #include "main.h"
     12          #include "rfiutil.h"
     13          #include "chrtclib.h"
     14          #include "rtc_helper.h"
     15          
     16          #if EFI_RTC || defined(__DOXYGEN__)

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine:
   \   00000000   0xB580             PUSH     {R7,LR}
     17          static LoggingWithStorage logger("RTC");
   \   00000002   0x....             ADR.N    R1,??DataTable6  ;; "RTC"
   \   00000004   0x....             LDR.N    R0,??DataTable6_1
   \   00000006   0x.... 0x....      BL       _ZN18LoggingWithStorageC1EPKc
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     logger:
   \   00000000                      DS8 260
     18          
     19          #endif /* EFI_RTC */
     20          

   \                                 In section .text, align 2, keep-with-next
     21          void date_set_tm(struct tm *timp) {
   \                     _Z11date_set_tmP2tm:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     22          	(void)timp;
     23          #if EFI_RTC || defined(__DOXYGEN__)
     24          	rtcSetTimeTm(&RTCD1, timp);
   \   00000004   0x0021             MOVS     R1,R4
   \   00000006   0x....             LDR.N    R0,??DataTable6_2
   \   00000008   0x.... 0x....      BL       rtcSetTimeTm
     25          #endif /* EFI_RTC */
     26          }
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return
     27          

   \                                 In section .text, align 2, keep-with-next
     28          void date_get_tm(struct tm *timp) {
   \                     _Z11date_get_tmP2tm:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     29          	(void)timp;
     30          #if EFI_RTC || defined(__DOXYGEN__)
     31          	rtcGetTimeTm(&RTCD1, timp);
   \   00000004   0x0021             MOVS     R1,R4
   \   00000006   0x....             LDR.N    R0,??DataTable6_2
   \   00000008   0x.... 0x....      BL       rtcGetTimeTm
     32          #endif /* EFI_RTC */
     33          }
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return
     34          

   \                                 In section .text, align 2, keep-with-next
     35          void dateToString(char *lcd_str) {
   \                     _Z12dateToStringPc:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
   \   00000004   0x0004             MOVS     R4,R0
     36          #if EFI_RTC || defined(__DOXYGEN__)
     37          	// todo:
     38          	// re-implement this along the lines of 	chvprintf("%04u-%02u-%02u %02u:%02u:%02u\r\n", timp.tm_year + 1900, timp.tm_mon + 1, timp.tm_mday, timp.tm_hour,
     39          	// timp.tm_min, timp.tm_sec);
     40          	// this would require a temporary mem stream - see datalogging and other existing usages
     41          
     42          	strcpy(lcd_str, "00/00 00:00:00\0");
   \   00000006   0x....             LDR.N    R1,??DataTable6_3
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       strcpy
     43          	static char buff[4];
     44          	struct tm timp;
     45          	rtcGetTimeTm(&RTCD1, &timp);			// get RTC date/time
   \   0000000E   0xA900             ADD      R1,SP,#+0
   \   00000010   0x....             LDR.N    R0,??DataTable6_2
   \   00000012   0x.... 0x....      BL       rtcGetTimeTm
     46          	
     47          	itoa10(buff, timp.tm_mon + 1);
   \   00000016   0x9804             LDR      R0,[SP, #+16]
   \   00000018   0x1C41             ADDS     R1,R0,#+1
   \   0000001A   0x....             LDR.N    R0,??DataTable6_4
   \   0000001C   0x.... 0x....      BL       itoa10
     48          	if(timp.tm_mon < 9) { 
   \   00000020   0x9804             LDR      R0,[SP, #+16]
   \   00000022   0x2809             CMP      R0,#+9
   \   00000024   0xDA05             BGE.N    ??dateToString_0
     49          		lcd_str[0] = '0';
   \   00000026   0x2030             MOVS     R0,#+48
   \   00000028   0x7020             STRB     R0,[R4, #+0]
     50          		lcd_str[1] = buff[0];
   \   0000002A   0x....             LDR.N    R0,??DataTable6_4
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x7060             STRB     R0,[R4, #+1]
   \   00000030   0xE005             B.N      ??dateToString_1
     51          	} else {
     52          		lcd_str[0] = buff[0];
   \                     ??dateToString_0:
   \   00000032   0x....             LDR.N    R0,??DataTable6_4
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x7020             STRB     R0,[R4, #+0]
     53          		lcd_str[1] = buff[1];
   \   00000038   0x....             LDR.N    R0,??DataTable6_4
   \   0000003A   0x7840             LDRB     R0,[R0, #+1]
   \   0000003C   0x7060             STRB     R0,[R4, #+1]
     54          	}
     55          	itoa10(buff, timp.tm_mday);
   \                     ??dateToString_1:
   \   0000003E   0x9903             LDR      R1,[SP, #+12]
   \   00000040   0x....             LDR.N    R0,??DataTable6_4
   \   00000042   0x.... 0x....      BL       itoa10
     56          	if(timp.tm_mday < 10) { 
   \   00000046   0x9803             LDR      R0,[SP, #+12]
   \   00000048   0x280A             CMP      R0,#+10
   \   0000004A   0xDA05             BGE.N    ??dateToString_2
     57          		lcd_str[3] = '0';
   \   0000004C   0x2030             MOVS     R0,#+48
   \   0000004E   0x70E0             STRB     R0,[R4, #+3]
     58          		lcd_str[4] = buff[0];
   \   00000050   0x....             LDR.N    R0,??DataTable6_4
   \   00000052   0x7800             LDRB     R0,[R0, #+0]
   \   00000054   0x7120             STRB     R0,[R4, #+4]
   \   00000056   0xE005             B.N      ??dateToString_3
     59          	} else {
     60          		lcd_str[3] = buff[0];
   \                     ??dateToString_2:
   \   00000058   0x....             LDR.N    R0,??DataTable6_4
   \   0000005A   0x7800             LDRB     R0,[R0, #+0]
   \   0000005C   0x70E0             STRB     R0,[R4, #+3]
     61          		lcd_str[4] = buff[1];
   \   0000005E   0x....             LDR.N    R0,??DataTable6_4
   \   00000060   0x7840             LDRB     R0,[R0, #+1]
   \   00000062   0x7120             STRB     R0,[R4, #+4]
     62          	}
     63          	itoa10(buff, timp.tm_hour);
   \                     ??dateToString_3:
   \   00000064   0x9902             LDR      R1,[SP, #+8]
   \   00000066   0x....             LDR.N    R0,??DataTable6_4
   \   00000068   0x.... 0x....      BL       itoa10
     64          	if(timp.tm_hour < 10) { 
   \   0000006C   0x9802             LDR      R0,[SP, #+8]
   \   0000006E   0x280A             CMP      R0,#+10
   \   00000070   0xDA05             BGE.N    ??dateToString_4
     65          		lcd_str[6] = '0';
   \   00000072   0x2030             MOVS     R0,#+48
   \   00000074   0x71A0             STRB     R0,[R4, #+6]
     66          		lcd_str[7] = buff[0];
   \   00000076   0x....             LDR.N    R0,??DataTable6_4
   \   00000078   0x7800             LDRB     R0,[R0, #+0]
   \   0000007A   0x71E0             STRB     R0,[R4, #+7]
   \   0000007C   0xE005             B.N      ??dateToString_5
     67          	} else {
     68          		lcd_str[6] = buff[0];
   \                     ??dateToString_4:
   \   0000007E   0x....             LDR.N    R0,??DataTable6_4
   \   00000080   0x7800             LDRB     R0,[R0, #+0]
   \   00000082   0x71A0             STRB     R0,[R4, #+6]
     69          		lcd_str[7] = buff[1];
   \   00000084   0x....             LDR.N    R0,??DataTable6_4
   \   00000086   0x7840             LDRB     R0,[R0, #+1]
   \   00000088   0x71E0             STRB     R0,[R4, #+7]
     70          	}
     71          	itoa10(buff, timp.tm_min);
   \                     ??dateToString_5:
   \   0000008A   0x9901             LDR      R1,[SP, #+4]
   \   0000008C   0x....             LDR.N    R0,??DataTable6_4
   \   0000008E   0x.... 0x....      BL       itoa10
     72          	if(timp.tm_min < 10) { 
   \   00000092   0x9801             LDR      R0,[SP, #+4]
   \   00000094   0x280A             CMP      R0,#+10
   \   00000096   0xDA05             BGE.N    ??dateToString_6
     73          		lcd_str[9] = '0';
   \   00000098   0x2030             MOVS     R0,#+48
   \   0000009A   0x7260             STRB     R0,[R4, #+9]
     74          		lcd_str[10] = buff[0];
   \   0000009C   0x....             LDR.N    R0,??DataTable6_4
   \   0000009E   0x7800             LDRB     R0,[R0, #+0]
   \   000000A0   0x72A0             STRB     R0,[R4, #+10]
   \   000000A2   0xE005             B.N      ??dateToString_7
     75          	} else {
     76          		lcd_str[9] = buff[0];
   \                     ??dateToString_6:
   \   000000A4   0x....             LDR.N    R0,??DataTable6_4
   \   000000A6   0x7800             LDRB     R0,[R0, #+0]
   \   000000A8   0x7260             STRB     R0,[R4, #+9]
     77          		lcd_str[10] = buff[1];
   \   000000AA   0x....             LDR.N    R0,??DataTable6_4
   \   000000AC   0x7840             LDRB     R0,[R0, #+1]
   \   000000AE   0x72A0             STRB     R0,[R4, #+10]
     78          	}
     79          	itoa10(buff, timp.tm_sec);
   \                     ??dateToString_7:
   \   000000B0   0x9900             LDR      R1,[SP, #+0]
   \   000000B2   0x....             LDR.N    R0,??DataTable6_4
   \   000000B4   0x.... 0x....      BL       itoa10
     80          	if(timp.tm_sec < 10) { 
   \   000000B8   0x9800             LDR      R0,[SP, #+0]
   \   000000BA   0x280A             CMP      R0,#+10
   \   000000BC   0xDA05             BGE.N    ??dateToString_8
     81          		lcd_str[12] = '0';
   \   000000BE   0x2030             MOVS     R0,#+48
   \   000000C0   0x7320             STRB     R0,[R4, #+12]
     82          		lcd_str[13] = buff[0];
   \   000000C2   0x....             LDR.N    R0,??DataTable6_4
   \   000000C4   0x7800             LDRB     R0,[R0, #+0]
   \   000000C6   0x7360             STRB     R0,[R4, #+13]
   \   000000C8   0xE005             B.N      ??dateToString_9
     83          	} else {
     84          		lcd_str[12] = buff[0];
   \                     ??dateToString_8:
   \   000000CA   0x....             LDR.N    R0,??DataTable6_4
   \   000000CC   0x7800             LDRB     R0,[R0, #+0]
   \   000000CE   0x7320             STRB     R0,[R4, #+12]
     85          		lcd_str[13] = buff[1];
   \   000000D0   0x....             LDR.N    R0,??DataTable6_4
   \   000000D2   0x7840             LDRB     R0,[R0, #+1]
   \   000000D4   0x7360             STRB     R0,[R4, #+13]
     86          	}
     87          #else
     88          	lcd_str[0] = 0;
     89          #endif /* EFI_RTC */
     90          }
   \                     ??dateToString_9:
   \   000000D6   0xB00C             ADD      SP,SP,#+48
   \   000000D8   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .bss, align 4
   \                     ??buff:
   \   00000000                      DS8 4
     91          
     92          #if EFI_RTC || defined(__DOXYGEN__)

   \                                 In section .text, align 2, keep-with-next
     93          void printDateTime(void) {
   \                     _Z13printDateTimev:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08F             SUB      SP,SP,#+60
     94          	static time_t unix_time;
     95          	struct tm timp;
     96          	
     97          	unix_time = rtcGetTimeUnixSec(&RTCD1);
   \   00000004   0x....             LDR.N    R0,??DataTable6_2
   \   00000006   0x.... 0x....      BL       rtcGetTimeUnixSec
   \   0000000A   0x....             LDR.N    R1,??DataTable6_5
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     98          	if (unix_time == -1) {
   \   0000000E   0x....             LDR.N    R0,??DataTable6_5
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF110 0x0F01      CMN      R0,#+1
   \   00000016   0xD104             BNE.N    ??printDateTime_0
     99          		scheduleMsg(&logger, "incorrect time in RTC cell");
   \   00000018   0x....             LDR.N    R1,??DataTable6_6
   \   0000001A   0x....             LDR.N    R0,??DataTable6_1
   \   0000001C   0x.... 0x....      BL       scheduleMsg
   \   00000020   0xE023             B.N      ??printDateTime_1
    100          	} else {
    101          		scheduleMsg(&logger, "%D - unix time", unix_time);
   \                     ??printDateTime_0:
   \   00000022   0x....             LDR.N    R0,??DataTable6_5
   \   00000024   0x6802             LDR      R2,[R0, #+0]
   \   00000026   0x....             LDR.N    R1,??DataTable6_7
   \   00000028   0x....             LDR.N    R0,??DataTable6_1
   \   0000002A   0x.... 0x....      BL       scheduleMsg
    102          		rtcGetTimeTm(&RTCD1, &timp);
   \   0000002E   0xA904             ADD      R1,SP,#+16
   \   00000030   0x....             LDR.N    R0,??DataTable6_2
   \   00000032   0x.... 0x....      BL       rtcGetTimeTm
    103          
    104          		appendMsgPrefix(&logger);
   \   00000036   0x....             LDR.N    R0,??DataTable6_1
   \   00000038   0x.... 0x....      BL       appendMsgPrefix
    105          		appendPrintf(&logger, "Current RTC time in GMT is: %04u-%02u-%02u %02u:%02u:%02u", timp.tm_year + 1900, timp.tm_mon + 1, timp.tm_mday, timp.tm_hour,
    106          				timp.tm_min, timp.tm_sec);
   \   0000003C   0x9804             LDR      R0,[SP, #+16]
   \   0000003E   0x9003             STR      R0,[SP, #+12]
   \   00000040   0x9805             LDR      R0,[SP, #+20]
   \   00000042   0x9002             STR      R0,[SP, #+8]
   \   00000044   0x9806             LDR      R0,[SP, #+24]
   \   00000046   0x9001             STR      R0,[SP, #+4]
   \   00000048   0x9807             LDR      R0,[SP, #+28]
   \   0000004A   0x9000             STR      R0,[SP, #+0]
   \   0000004C   0x9808             LDR      R0,[SP, #+32]
   \   0000004E   0x1C43             ADDS     R3,R0,#+1
   \   00000050   0x9809             LDR      R0,[SP, #+36]
   \   00000052   0xF200 0x726C      ADDW     R2,R0,#+1900
   \   00000056   0x....             LDR.N    R1,??DataTable6_8
   \   00000058   0x....             LDR.N    R0,??DataTable6_1
   \   0000005A   0x.... 0x....      BL       appendPrintf
    107          		appendMsgPostfix(&logger);
   \   0000005E   0x....             LDR.N    R0,??DataTable6_1
   \   00000060   0x.... 0x....      BL       appendMsgPostfix
    108          		scheduleLogging(&logger);
   \   00000064   0x....             LDR.N    R0,??DataTable6_1
   \   00000066   0x.... 0x....      BL       scheduleLogging
    109          	}
    110          }
   \                     ??printDateTime_1:
   \   0000006A   0xB00F             ADD      SP,SP,#+60
   \   0000006C   0xBD00             POP      {PC}             ;; return

   \                                 In section .bss, align 4
   \                     ??unix_time:
   \   00000000                      DS8 4
    111          

   \                                 In section .text, align 2, keep-with-next
    112          void setDateTime(const char *strDate) {
   \                     _Z11setDateTimePKc:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    113          	if (strlen(strDate) > 0) {
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       strlen
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD012             BEQ.N    ??setDateTime_0
    114          		time_t unix_time = (double) atoff(strDate);
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       atoff
   \   00000014   0xEE10 0x0A10      VMOV     R0,S0
   \   00000018   0x.... 0x....      BL       __aeabi_f2d
   \   0000001C   0x.... 0x....      BL       __aeabi_d2uiz
   \   00000020   0x0005             MOVS     R5,R0
    115          		if (unix_time > 0) {
   \   00000022   0x2D00             CMP      R5,#+0
   \   00000024   0xD006             BEQ.N    ??setDateTime_0
    116          			rtcSetTimeUnixSec(&RTCD1, unix_time);
   \   00000026   0x0029             MOVS     R1,R5
   \   00000028   0x....             LDR.N    R0,??DataTable6_2
   \   0000002A   0x.... 0x....      BL       rtcSetTimeUnixSec
    117          			printDateTime();
   \   0000002E   0x.... 0x....      BL       _Z13printDateTimev
    118          			return;
   \   00000032   0xE004             B.N      ??setDateTime_1
    119          		}
    120          	}
    121          	scheduleMsg(&logger, "date_set Date parameter %s is wrong\r\n", strDate);
   \                     ??setDateTime_0:
   \   00000034   0x0022             MOVS     R2,R4
   \   00000036   0x....             LDR.N    R1,??DataTable6_9
   \   00000038   0x....             LDR.N    R0,??DataTable6_1
   \   0000003A   0x.... 0x....      BL       scheduleMsg
    122          }
   \                     ??setDateTime_1:
   \   0000003E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    123          #endif /* EFI_RTC */
    124          

   \                                 In section .text, align 2, keep-with-next
    125          void initRtc(void) {
   \                     _Z7initRtcv:
   \   00000000   0xB580             PUSH     {R7,LR}
    126          #if EFI_RTC || defined(__DOXYGEN__)
    127          	printMsg(&logger, "initRtc()");
   \   00000002   0x....             LDR.N    R1,??DataTable6_10
   \   00000004   0x....             LDR.N    R0,??DataTable6_1
   \   00000006   0x.... 0x....      BL       printMsg
    128          
    129          	// yes, it's my begin time  and we always start from this one 1391894433 - 2014-02-08 21:20:03
    130          //	rtcSetTimeUnixSec(&RTCD1, 1391894433);
    131          #endif
    132          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x52 0x54          DC8      "RTC"
   \              0x43 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     logger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     RTCD1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     `?<Constant "00/00 00:00:00\\000">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     ??buff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     ??unix_time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     `?<Constant "incorrect time in RTC...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     `?<Constant "%D - unix time">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x........         DC32     `?<Constant "Current RTC time in G...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x........         DC32     `?<Constant "date_set Date paramet...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x........         DC32     `?<Constant "initRtc()">`

   \                                 In section .init_array, align 4, keep-with-next, root
   \   00000000   0x........         DC32    RELOC_ARM_TARGET1 __sti__routine

   \                                 In section .rodata, align 4
   \                     `?<Constant "00/00 00:00:00\\000">`:
   \   00000000   0x30 0x30          DC8 30H, 30H, 2FH, 30H, 30H, 20H, 30H, 30H
   \              0x2F 0x30    
   \              0x30 0x20    
   \              0x30 0x30    
   \   00000008   0x3A 0x30          DC8 3AH, 30H, 30H, 3AH, 30H, 30H, 0, 0
   \              0x30 0x3A    
   \              0x30 0x30    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "incorrect time in RTC...">`:
   \   00000000   0x69 0x6E          DC8 "incorrect time in RTC cell"
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x52 0x54    
   \              0x43 0x20    
   \              0x63 0x65    
   \              0x6C 0x6C    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "%D - unix time">`:
   \   00000000   0x25 0x44          DC8 "%D - unix time"
   \              0x20 0x2D    
   \              0x20 0x75    
   \              0x6E 0x69    
   \              0x78 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Current RTC time in G...">`:
   \   00000000   0x43 0x75          DC8 43H, 75H, 72H, 72H, 65H, 6EH, 74H, 20H
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \   00000008   0x52 0x54          DC8 52H, 54H, 43H, 20H, 74H, 69H, 6DH, 65H
   \              0x43 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \   00000010   0x20 0x69          DC8 20H, 69H, 6EH, 20H, 47H, 4DH, 54H, 20H
   \              0x6E 0x20    
   \              0x47 0x4D    
   \              0x54 0x20    
   \   00000018   0x69 0x73          DC8 69H, 73H, 3AH, 20H, 25H, 30H, 34H, 75H
   \              0x3A 0x20    
   \              0x25 0x30    
   \              0x34 0x75    
   \   00000020   0x2D 0x25          DC8 2DH, 25H, 30H, 32H, 75H, 2DH, 25H, 30H
   \              0x30 0x32    
   \              0x75 0x2D    
   \              0x25 0x30    
   \   00000028   0x32 0x75          DC8 32H, 75H, 20H, 25H, 30H, 32H, 75H, 3AH
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x75 0x3A    
   \   00000030   0x25 0x30          DC8 25H, 30H, 32H, 75H, 3AH, 25H, 30H, 32H
   \              0x32 0x75    
   \              0x3A 0x25    
   \              0x30 0x32    
   \   00000038   0x75 0x00          DC8 75H, 0
   \   0000003A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "date_set Date paramet...">`:
   \   00000000   0x64 0x61          DC8 "date_set Date parameter %s is wrong\015\012"
   \              0x74 0x65    
   \              0x5F 0x73    
   \              0x65 0x74    
   \              0x20 0x44    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x70 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x25 0x73    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x77 0x72    
   \              0x6F 0x6E    
   \              0x67 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "initRtc()">`:
   \   00000000   0x69 0x6E          DC8 "initRtc()"
   \              0x69 0x74    
   \              0x52 0x74    
   \              0x63 0x28    
   \              0x29 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   0x52 0x54          DC8 "RTC"
   \              0x43 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   __sti__routine()
         8   -> LoggingWithStorage::LoggingWithStorage(char const *)
      56   dateToString(char *)
        56   -> itoa10
        56   -> rtcGetTimeTm
        56   -> strcpy
       8   date_get_tm(tm *)
         8   -> rtcGetTimeTm
       8   date_set_tm(tm *)
         8   -> rtcSetTimeTm
       8   initRtc()
         8   -> printMsg
      64   printDateTime()
        64   -> appendMsgPostfix
        64   -> appendMsgPrefix
        64   -> appendPrintf
        64   -> rtcGetTimeTm
        64   -> rtcGetTimeUnixSec
        64   -> scheduleLogging
        64   -> scheduleMsg
      16   setDateTime(char const *)
        16   -> __aeabi_d2uiz
        16   -> __aeabi_f2d
        16   -> atoff
        16   -> printDateTime()
        16   -> rtcSetTimeUnixSec
        16   -> scheduleMsg
        16   -> strlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "%D - unix time">
      16  ?<Constant "00/00 00:00:00\000">
      60  ?<Constant "Current RTC time in G...">
       4  ?<Constant "RTC">
      40  ?<Constant "date_set Date paramet...">
      28  ?<Constant "incorrect time in RTC...">
      12  ?<Constant "initRtc()">
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
      12  __sti__routine()
       4  buff
     218  dateToString(char *)
      14  date_get_tm(tm *)
      14  date_set_tm(tm *)
      12  initRtc()
     260  logger
     110  printDateTime()
      64  setDateTime(char const *)
       4  unix_time
       4  -- Other

 
 268 bytes in section .bss
   4 bytes in section .init_array
 176 bytes in section .rodata
 488 bytes in section .text
 
 492 bytes of CODE  memory
 176 bytes of CONST memory
 268 bytes of DATA  memory

Errors: none
Warnings: 1
