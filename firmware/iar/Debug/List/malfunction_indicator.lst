###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:24 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\malf #
#                       unction_indicator.cpp                                 #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\malf #
#                       unction_indicator.cpp -lCN                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\  #
#                       -lA F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Li #
#                       st\ -o F:\stuff\rusefi_sourceforge\firmware\iar\Debug #
#                       \Obj\ --no_cse --no_unroll --no_inline                #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\m #
#                       alfunction_indicator.lst                              #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\ma #
#                       lfunction_indicator.o                                 #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\malfunction_indicator.cpp
      1          /**
      2           * @file malfunction_indicator.cpp
      3           * @brief We can blink out OBD-II error codes using Malfunction Indicator Light (MIL)
      4           *
      5           *
      6           * @date Dec 20, 2013
      7           * @author Konstantin Nikonenko
      8           * @author Andrey Belomutskiy, (c) 2012-2015
      9           * we show 4 digit error code - 1,5sec * (4xxx+1) digit + 0,4sec * (x3xxx+1) + ....
     10           * ATTENTION!!! 0 = 1 blink, 1 = 2 blinks, ...., 9 = 10 blinks
     11           * sequence is the constant!!!
     12           *
     13           *
     14           * This file is part of rusEfi - see http://rusefi.com
     15           *
     16           * rusEfi is free software; you can redistribute it and/or modify it under the terms of
     17           * the GNU General Public License as published by the Free Software Foundation; either
     18           * version 3 of the License, or (at your option) any later version.
     19           *
     20           * rusEfi is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
     21           * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     22           * GNU General Public License for more details.
     23           *
     24           * You should have received a copy of the GNU General Public License along with this program.
     25           * If not, see <http://www.gnu.org/licenses/>.
     26           */
     27          
     28          #include "main.h"
     29          #include "io_pins.h"
     30          #include "malfunction_central.h"
     31          #include "malfunction_indicator.h"
     32          #include "efiGpio.h"
     33          
     34          #if EFI_MALFUNCTION_INDICATOR || defined(__DOXYGEN__)
     35          
     36          #define MFI_LONG_BLINK	1500
     37          #define MFI_SHORT_BLINK	400
     38          #define MFI_BLINK_SEPARATOR 400
     39          #define MFI_CHECKENGINE_LIGHT 10000
     40          

   \                                 In section .bss, align 8
     41          static THD_WORKING_AREA(mfiThreadStack, UTILITY_THREAD_STACK_SIZE);	// declare thread
   \                     mfiThreadStack:
   \   00000000                      DS8 712
     42          
     43          extern OutputPin checkEnginePin;
     44          

   \                                 In section .text, align 2, keep-with-next
     45          static void blink_digits(int digit, int duration) {
   \                     _Z12blink_digitsii:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     46          	for (int iter = 0; iter < digit; iter++) {
   \   00000006   0x2600             MOVS     R6,#+0
   \                     ??blink_digits_0:
   \   00000008   0x42A6             CMP      R6,R4
   \   0000000A   0xDA19             BGE.N    ??blink_digits_1
     47          		checkEnginePin.setValue(0);
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x....             LDR.N    R0,??DataTable2
   \   00000010   0x.... 0x....      BL       _ZN9OutputPin8setValueEi
     48          		chThdSleepMilliseconds(duration);
   \   00000014   0xF44F 0x707A      MOV      R0,#+1000
   \   00000018   0xFB00 0xF005      MUL      R0,R0,R5
   \   0000001C   0x1E40             SUBS     R0,R0,#+1
   \   0000001E   0xF44F 0x717A      MOV      R1,#+1000
   \   00000022   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000026   0x1C40             ADDS     R0,R0,#+1
   \   00000028   0x.... 0x....      BL       chThdSleep
     49          		checkEnginePin.setValue(1);
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0x....             LDR.N    R0,??DataTable2
   \   00000030   0x.... 0x....      BL       _ZN9OutputPin8setValueEi
     50          		chThdSleepMilliseconds(MFI_BLINK_SEPARATOR);
   \   00000034   0xF44F 0x70C8      MOV      R0,#+400
   \   00000038   0x.... 0x....      BL       chThdSleep
     51          	}
   \   0000003C   0x1C76             ADDS     R6,R6,#+1
   \   0000003E   0xE7E3             B.N      ??blink_digits_0
     52          }
   \                     ??blink_digits_1:
   \   00000040   0xBD70             POP      {R4-R6,PC}       ;; return
     53          
     54          // calculate how many digits our code have

   \                                 In section .text, align 2, keep-with-next
     55          static int DigitLength(int digit) {
   \                     _Z11DigitLengthi:
   \   00000000   0x0001             MOVS     R1,R0
     56          	int i = 0;
   \   00000002   0x2000             MOVS     R0,#+0
     57          	while (digit > 0) {
   \                     ??DigitLength_0:
   \   00000004   0x2901             CMP      R1,#+1
   \   00000006   0xDB04             BLT.N    ??DigitLength_1
     58          		digit = digit / 10;
   \   00000008   0x220A             MOVS     R2,#+10
   \   0000000A   0xFB91 0xF1F2      SDIV     R1,R1,R2
     59          		++i;
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \   00000010   0xE7F8             B.N      ??DigitLength_0
     60          	}
     61          	return i;
   \                     ??DigitLength_1:
   \   00000012   0x4770             BX       LR               ;; return
     62          }
     63          
     64          // display code

   \                                 In section .text, align 2, keep-with-next
     65          static void DisplayErrorCode(int length, int code) {
   \                     _Z16DisplayErrorCodeii:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     66          	// todo: I suggest we use 'itoa' method to simplify this logic
     67          	for (int iter = length - 1; iter >= 0; iter--) {
   \   00000008   0x1E66             SUBS     R6,R4,#+1
   \                     ??DisplayErrorCode_0:
   \   0000000A   0x2E00             CMP      R6,#+0
   \   0000000C   0xD41F             BMI.N    ??DisplayErrorCode_1
     68          		int ourDigit = (int) efiPow10(iter);		// 10^0 = 1, 10^1 = 10, 10^2=100, 10^3 = 1000, ....
   \   0000000E   0x0030             MOVS     R0,R6
   \   00000010   0x.... 0x....      BL       efiPow10
   \   00000014   0x0007             MOVS     R7,R0
     69          		int digit = 1;						// as we remember "0" we show as one blink
   \   00000016   0xF05F 0x0801      MOVS     R8,#+1
     70          		while (code >= ourDigit) {
   \                     ??DisplayErrorCode_2:
   \   0000001A   0x42BD             CMP      R5,R7
   \   0000001C   0xDB03             BLT.N    ??DisplayErrorCode_3
     71          			code = code - ourDigit;
   \   0000001E   0x1BED             SUBS     R5,R5,R7
     72          			digit++;
   \   00000020   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000024   0xE7F9             B.N      ??DisplayErrorCode_2
     73          		}
     74          		if (iter % 2 == 0)
   \                     ??DisplayErrorCode_3:
   \   00000026   0x2002             MOVS     R0,#+2
   \   00000028   0xFB96 0xF1F0      SDIV     R1,R6,R0
   \   0000002C   0xFB01 0x6110      MLS      R1,R1,R0,R6
   \   00000030   0x2900             CMP      R1,#+0
   \   00000032   0xD105             BNE.N    ??DisplayErrorCode_4
     75          			blink_digits(digit, MFI_SHORT_BLINK);		// even 2,0 - long blink
   \   00000034   0xF44F 0x71C8      MOV      R1,#+400
   \   00000038   0x4640             MOV      R0,R8
   \   0000003A   0x.... 0x....      BL       _Z12blink_digitsii
   \   0000003E   0xE004             B.N      ??DisplayErrorCode_5
     76          		else
     77          			blink_digits(digit, MFI_LONG_BLINK); 		// odd  3,1 - short blink
   \                     ??DisplayErrorCode_4:
   \   00000040   0xF240 0x51DC      MOVW     R1,#+1500
   \   00000044   0x4640             MOV      R0,R8
   \   00000046   0x.... 0x....      BL       _Z12blink_digitsii
     78          	}
   \                     ??DisplayErrorCode_5:
   \   0000004A   0x1E76             SUBS     R6,R6,#+1
   \   0000004C   0xE7DD             B.N      ??DisplayErrorCode_0
     79          }
   \                     ??DisplayErrorCode_1:
   \   0000004E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
     80          
     81          //  our main thread for show check engine error
     82          #if defined __GNUC__
     83          __attribute__((noreturn))    static msg_t mfiThread(void)
     84          #else

   \                                 In section .text, align 2, keep-with-next
     85          		static msg_t mfiThread(void)
     86          #endif
     87          		{
   \                     _Z9mfiThreadv:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
     88          	chRegSetThreadName("MFIndicator");
   \   00000004   0x....             LDR.N    R0,??DataTable2_1
   \   00000006   0x6980             LDR      R0,[R0, #+24]
   \   00000008   0x....             LDR.N    R1,??DataTable2_2
   \   0000000A   0x6181             STR      R1,[R0, #+24]
     89          	error_codes_set_s localErrorCopy;
     90          
     91          	while (TRUE) {
     92          		chThdSleepSeconds(10);
   \                     ??mfiThread_0:
   \   0000000C   0xF242 0x7010      MOVW     R0,#+10000
   \   00000010   0x.... 0x....      BL       chThdSleep
     93          
     94          		getErrorCodes(&localErrorCopy);
   \   00000014   0xA800             ADD      R0,SP,#+0
   \   00000016   0x.... 0x....      BL       getErrorCodes
     95          		for (int p = 0; p < localErrorCopy.count; p++) {
   \   0000001A   0x2400             MOVS     R4,#+0
   \                     ??mfiThread_1:
   \   0000001C   0x9800             LDR      R0,[SP, #+0]
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xDAF4             BGE.N    ??mfiThread_0
     96          			// Calculate how many digits in this integer and display error code from start to end
     97          			int code = localErrorCopy.error_codes[p];
   \   00000022   0xA800             ADD      R0,SP,#+0
   \   00000024   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000028   0x6845             LDR      R5,[R0, #+4]
     98          			DisplayErrorCode(DigitLength(code), code);
   \   0000002A   0x0028             MOVS     R0,R5
   \   0000002C   0x.... 0x....      BL       _Z11DigitLengthi
   \   00000030   0x0029             MOVS     R1,R5
   \   00000032   0x.... 0x....      BL       _Z16DisplayErrorCodeii
     99          		}
   \   00000036   0x1C64             ADDS     R4,R4,#+1
   \   00000038   0xE7F0             B.N      ??mfiThread_1
    100          	}
    101          }
    102          

   \                                 In section .text, align 2, keep-with-next
    103          static void testMil(void) {
   \                     _Z7testMilv:
   \   00000000   0xB580             PUSH     {R7,LR}
    104          	addError(OBD_Engine_Coolant_Temperature_Circuit_Malfunction);
   \   00000002   0x2073             MOVS     R0,#+115
   \   00000004   0x.... 0x....      BL       addError
    105          	addError(OBD_Intake_Air_Temperature_Circuit_Malfunction);
   \   00000008   0x206E             MOVS     R0,#+110
   \   0000000A   0x.... 0x....      BL       addError
    106          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
    107          

   \                                 In section .text, align 2, keep-with-next
    108          void initMalfunctionIndicator(void) {
   \                     _Z24initMalfunctionIndicatorv:
   \   00000000   0xB580             PUSH     {R7,LR}
    109          	// create static thread
    110          	chThdCreateStatic(mfiThreadStack, sizeof(mfiThreadStack), LOWPRIO, (tfunc_t) mfiThread, NULL);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x9000             STR      R0,[SP, #+0]
   \   00000006   0x....             LDR.N    R3,??DataTable2_3
   \   00000008   0x2202             MOVS     R2,#+2
   \   0000000A   0xF44F 0x7132      MOV      R1,#+712
   \   0000000E   0x....             LDR.N    R0,??DataTable2_4
   \   00000010   0x.... 0x....      BL       chThdCreateStatic
    111          
    112          	addConsoleAction("testmil", testMil);
   \   00000014   0x....             LDR.N    R1,??DataTable2_5
   \   00000016   0x....             LDR.N    R0,??DataTable2_6
   \   00000018   0x.... 0x....      BL       addConsoleAction
    113          }
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     checkEnginePin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     rlist

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     `?<Constant "MFIndicator">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     _Z9mfiThreadv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     mfiThreadStack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     _Z7testMilv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     `?<Constant "testmil">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "MFIndicator">`:
   \   00000000   0x4D 0x46          DC8 "MFIndicator"
   \              0x49 0x6E    
   \              0x64 0x69    
   \              0x63 0x61    
   \              0x74 0x6F    
   \              0x72 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "testmil">`:
   \   00000000   0x74 0x65          DC8 "testmil"
   \              0x73 0x74    
   \              0x6D 0x69    
   \              0x6C 0x00    
    114          
    115          #endif /* EFI_MALFUNCTION_INDICATOR */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DigitLength(int)
      24   DisplayErrorCode(int, int)
        24   -> blink_digits(int, int)
        24   -> efiPow10
      16   blink_digits(int, int)
        16   -> OutputPin::setValue(int)
        16   -> chThdSleep
       8   initMalfunctionIndicator()
         8   -> addConsoleAction
         8   -> chThdCreateStatic
      56   mfiThread()
        56   -> DigitLength(int)
        56   -> DisplayErrorCode(int, int)
        56   -> chThdSleep
        56   -> getErrorCodes
       8   testMil()
         8   -> addError


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "MFIndicator">
       8  ?<Constant "testmil">
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
      20  DigitLength(int)
      82  DisplayErrorCode(int, int)
      66  blink_digits(int, int)
      30  initMalfunctionIndicator()
      58  mfiThread()
     712  mfiThreadStack
      16  testMil()

 
 712 bytes in section .bss
  20 bytes in section .rodata
 300 bytes in section .text
 
 300 bytes of CODE  memory
  20 bytes of CONST memory
 712 bytes of DATA  memory

Errors: none
Warnings: 1
