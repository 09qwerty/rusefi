###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:01 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\console\binary\t #
#                       unerstudio_io.cpp                                     #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\console\binary\t #
#                       unerstudio_io.cpp -lCN F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\Debug\List\ -lA                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\  #
#                       -o F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj #
#                       \ --no_cse --no_unroll --no_inline --no_code_motion   #
#                       --no_tbaa --no_clustering --no_scheduling --debug     #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\t #
#                       unerstudio_io.lst                                     #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\tu #
#                       nerstudio_io.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\console\binary\tunerstudio_io.cpp
      1          /**
      2           * @file	tunerstudio_io.cpp
      3           *
      4           * @date Mar 8, 2015
      5           * @author Andrey Belomutskiy, (c) 2012-2014
      6           */
      7          
      8          #include "main.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x0032             MOVS     R2,R6
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memcpy
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
      9          #include "tunerstudio_io.h"
     10          #include "console_io.h"
     11          #include "engine.h"
     12          
     13          EXTERN_ENGINE;
     14          
     15          extern LoggingWithStorage tsLogger;
     16          
     17          #if EFI_PROD_CODE || defined(__DOXYGEN__)
     18          #include "pin_repository.h"
     19          #include "usbconsole.h"
     20          #include "map_averaging.h"
     21          extern SerialUSBDriver SDU1;
     22          #define CONSOLE_DEVICE &SDU1
     23          
     24          #define TS_SERIAL_UART_DEVICE &SD3
     25          

   \                                 In section .data, align 4
     26          static SerialConfig tsSerialConfig = { 0, 0, USART_CR2_STOP1_BITS | USART_CR2_LINEN, 0 };
   \                     tsSerialConfig:
   \   00000000   0x00000000         DC32 0
   \   00000004   0x0000 0x4000      DC16 0, 16384, 0
   \              0x0000       
   \   0000000A   0x00 0x00          DC8 0, 0
     27          

   \                                 In section .text, align 2, keep-with-next
     28          void startTsPort(void) {
   \                     _Z11startTsPortv:
   \   00000000   0xB580             PUSH     {R7,LR}
     29          	if (isSerialOverUart()) {
   \   00000002   0x.... 0x....      BL       _Z16isSerialOverUartv
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD005             BEQ.N    ??startTsPort_0
     30          		print("TunerStudio over USB serial");
   \   0000000A   0x....             LDR.N    R0,??DataTable2
   \   0000000C   0x.... 0x....      BL       print
     31          		/**
     32          		 * This method contains a long delay, that's the reason why this is not done on the main thread
     33          		 */
     34          		usb_serial_start();
   \   00000010   0x.... 0x....      BL       usb_serial_start
   \   00000014   0xE022             B.N      ??startTsPort_1
     35          	} else if (boardConfiguration->useSerialPort) {
   \                     ??startTsPort_0:
   \   00000016   0x....             LDR.N    R0,??DataTable2_1
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF890 0x0181      LDRB     R0,[R0, #+385]
   \   0000001E   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD01A             BEQ.N    ??startTsPort_1
     36          
     37          		print("TunerStudio over USART");
   \   00000026   0x....             LDR.N    R0,??DataTable2_2
   \   00000028   0x.... 0x....      BL       print
     38          		mySetPadMode("tunerstudio rx", TS_SERIAL_RX_PORT, TS_SERIAL_RX_PIN, PAL_MODE_ALTERNATE(TS_SERIAL_AF));
   \   0000002C   0xF240 0x3382      MOVW     R3,#+898
   \   00000030   0x220B             MOVS     R2,#+11
   \   00000032   0x....             LDR.N    R1,??DataTable2_3  ;; 0x40020800
   \   00000034   0x....             LDR.N    R0,??DataTable2_4
   \   00000036   0x.... 0x....      BL       _Z12mySetPadModePKcP12GPIO_TypeDefjj
     39          		mySetPadMode("tunerstudio tx", TS_SERIAL_TX_PORT, TS_SERIAL_TX_PIN, PAL_MODE_ALTERNATE(TS_SERIAL_AF));
   \   0000003A   0xF240 0x3382      MOVW     R3,#+898
   \   0000003E   0x220A             MOVS     R2,#+10
   \   00000040   0x....             LDR.N    R1,??DataTable2_3  ;; 0x40020800
   \   00000042   0x....             LDR.N    R0,??DataTable2_5
   \   00000044   0x.... 0x....      BL       _Z12mySetPadModePKcP12GPIO_TypeDefjj
     40          
     41          		tsSerialConfig.speed = boardConfiguration->tunerStudioSerialSpeed;
   \   00000048   0x....             LDR.N    R0,??DataTable2_1
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF8D0 0x014C      LDR      R0,[R0, #+332]
   \   00000050   0x....             LDR.N    R1,??DataTable2_6
   \   00000052   0x6008             STR      R0,[R1, #+0]
     42          
     43          		sdStart(TS_SERIAL_UART_DEVICE, &tsSerialConfig);
   \   00000054   0x....             LDR.N    R1,??DataTable2_6
   \   00000056   0x....             LDR.N    R0,??DataTable2_7
   \   00000058   0x.... 0x....      BL       sdStart
     44          	}
     45          }
   \                     ??startTsPort_1:
   \   0000005C   0xBD01             POP      {R0,PC}          ;; return
     46          
     47          #endif /* EFI_PROD_CODE */
     48          

   \                                 In section .text, align 2, keep-with-next
     49          BaseChannel * getTsSerialDevice(void) {
   \                     _Z17getTsSerialDevicev:
   \   00000000   0xB580             PUSH     {R7,LR}
     50          #if EFI_PROD_CODE || defined(__DOXYGEN__)
     51          	if (isSerialOverUart()) {
   \   00000002   0x.... 0x....      BL       _Z16isSerialOverUartv
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD001             BEQ.N    ??getTsSerialDevice_0
     52          		// if console uses UART then TS uses USB
     53          		return (BaseChannel *) &SDU1;
   \   0000000A   0x....             LDR.N    R0,??DataTable2_8
   \   0000000C   0xE000             B.N      ??getTsSerialDevice_1
     54          	} else {
     55          		return (BaseChannel *) TS_SERIAL_UART_DEVICE;
   \                     ??getTsSerialDevice_0:
   \   0000000E   0x....             LDR.N    R0,??DataTable2_7
   \                     ??getTsSerialDevice_1:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return
     56          	}
     57          #else
     58          	return (BaseChannel *) TS_SIMULATOR_PORT;
     59          #endif
     60          }
     61          

   \                                 In section .text, align 2, keep-with-next
     62          void tunerStudioWriteData(ts_channel_s *tsChannel, const uint8_t * buffer, int size) {
   \                     _Z20tunerStudioWriteDataP12ts_channel_sPKhi:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     63                  efiAssertVoid(getRemainingStack(chThdSelf()) > 64, "tunerStudioWriteData");
   \   00000008   0x....             LDR.N    R0,??DataTable2_9
   \   0000000A   0x6980             LDR      R0,[R0, #+24]
   \   0000000C   0x.... 0x....      BL       getRemainingStack
   \   00000010   0x2841             CMP      R0,#+65
   \   00000012   0xDA03             BGE.N    ??tunerStudioWriteData_0
   \   00000014   0x....             LDR.N    R0,??DataTable2_10
   \   00000016   0x.... 0x....      BL       firmwareError
   \   0000001A   0xE00F             B.N      ??tunerStudioWriteData_1
     64          	int transferred = chSequentialStreamWrite(tsChannel->channel, buffer, size);
   \                     ??tunerStudioWriteData_0:
   \   0000001C   0x0032             MOVS     R2,R6
   \   0000001E   0x0029             MOVS     R1,R5
   \   00000020   0x6820             LDR      R0,[R4, #+0]
   \   00000022   0x6823             LDR      R3,[R4, #+0]
   \   00000024   0x681B             LDR      R3,[R3, #+0]
   \   00000026   0x681B             LDR      R3,[R3, #+0]
   \   00000028   0x4798             BLX      R3
   \   0000002A   0x0007             MOVS     R7,R0
     65          	if (transferred != size) {
   \   0000002C   0x42B7             CMP      R7,R6
   \   0000002E   0xD005             BEQ.N    ??tunerStudioWriteData_2
     66          		scheduleMsg(&tsLogger, "!!! NOT ACCEPTED %d out of %d !!!", transferred, size);
   \   00000030   0x0033             MOVS     R3,R6
   \   00000032   0x003A             MOVS     R2,R7
   \   00000034   0x....             LDR.N    R1,??DataTable2_11
   \   00000036   0x....             LDR.N    R0,??DataTable2_12
   \   00000038   0x.... 0x....      BL       scheduleMsg
     67          	}
     68          }
   \                     ??tunerStudioWriteData_2:
   \                     ??tunerStudioWriteData_1:
   \   0000003C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     69          
     70          /**
     71           * Adds size to the beginning of a packet and a crc32 at the end. Then send the packet.
     72           */

   \                                 In section .text, align 2, keep-with-next
     73          void tunerStudioWriteCrcPacket(ts_channel_s *tsChannel, const uint8_t command, const void *buf, const uint16_t size) {
   \                     _Z25tunerStudioWriteCrcPacketP12ts_channel_shPKvt:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
     74          
     75          	uint8_t *writeBuffer = tsChannel->writeBuffer;
   \   0000000C   0xF8D4 0x8004      LDR      R8,[R4, #+4]
     76          
     77          	// todo: max size validation
     78          	*(uint16_t *) writeBuffer = SWAP_UINT16(size + 1);   // packet size including command
   \   00000010   0x1C78             ADDS     R0,R7,#+1
   \   00000012   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000014   0x1C79             ADDS     R1,R7,#+1
   \   00000016   0x1209             ASRS     R1,R1,#+8
   \   00000018   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   0000001C   0xF8A8 0x0000      STRH     R0,[R8, #+0]
     79          	*(uint8_t *) (writeBuffer + 2) = command;
   \   00000020   0xF888 0x5002      STRB     R5,[R8, #+2]
     80          	if (size != 0)
   \   00000024   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000026   0x2F00             CMP      R7,#+0
   \   00000028   0xD006             BEQ.N    ??tunerStudioWriteCrcPacket_0
     81          		memcpy(writeBuffer + 3, buf, size);
   \   0000002A   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000002C   0x003A             MOVS     R2,R7
   \   0000002E   0x0031             MOVS     R1,R6
   \   00000030   0xF118 0x0003      ADDS     R0,R8,#+3
   \   00000034   0x.... 0x....      BL       memcpy
     82          	// CRC on whole packet
     83          	uint32_t crc = crc32((void *) (writeBuffer + 2), (uint32_t) (size + 1));
   \                     ??tunerStudioWriteCrcPacket_0:
   \   00000038   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000003A   0x1C79             ADDS     R1,R7,#+1
   \   0000003C   0xF118 0x0002      ADDS     R0,R8,#+2
   \   00000040   0x.... 0x....      BL       crc32
   \   00000044   0x4681             MOV      R9,R0
     84          	*(uint32_t *) (writeBuffer + 2 + 1 + size) = SWAP_UINT32(crc);
   \   00000046   0xEA5F 0x2009      LSLS     R0,R9,#+8
   \   0000004A   0xF410 0x007F      ANDS     R0,R0,#0xFF0000
   \   0000004E   0xEA50 0x6019      ORRS     R0,R0,R9, LSR #+24
   \   00000052   0xEA5F 0x2119      LSRS     R1,R9,#+8
   \   00000056   0xF411 0x417F      ANDS     R1,R1,#0xFF00
   \   0000005A   0x4308             ORRS     R0,R1,R0
   \   0000005C   0xEA50 0x6009      ORRS     R0,R0,R9, LSL #+24
   \   00000060   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000062   0xEB17 0x0108      ADDS     R1,R7,R8
   \   00000066   0xF8C1 0x0003      STR      R0,[R1, #+3]
     85          
     86          //	scheduleMsg(logger, "TunerStudio: CRC command %x size %d", command, size);
     87          
     88          	tunerStudioWriteData(tsChannel, writeBuffer, size + 2 + 1 + 4);      // with size, command and CRC
   \   0000006A   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000006C   0x1DFA             ADDS     R2,R7,#+7
   \   0000006E   0x4641             MOV      R1,R8
   \   00000070   0x0020             MOVS     R0,R4
   \   00000072   0x.... 0x....      BL       _Z20tunerStudioWriteDataP12ts_channel_sPKhi
     89          }
   \   00000076   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
     90          

   \                                 In section .text, align 2, keep-with-next
     91          void tsSendResponse(ts_channel_s *tsChannel, ts_response_format_e mode, const uint8_t * buffer, int size) {
   \                     _Z14tsSendResponseP12ts_channel_s20ts_response_format_ePKhi:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
     92          	if (mode == TS_CRC) {
   \   0000000A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000C   0x2D01             CMP      R5,#+1
   \   0000000E   0xD107             BNE.N    ??tsSendResponse_0
     93          		tunerStudioWriteCrcPacket(tsChannel, TS_RESPONSE_OK, buffer, size);
   \   00000010   0x003B             MOVS     R3,R7
   \   00000012   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000014   0x0032             MOVS     R2,R6
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x.... 0x....      BL       _Z25tunerStudioWriteCrcPacketP12ts_channel_shPKvt
   \   0000001E   0xE006             B.N      ??tsSendResponse_1
     94          	} else {
     95          		if (size > 0)
   \                     ??tsSendResponse_0:
   \   00000020   0x2F01             CMP      R7,#+1
   \   00000022   0xDB04             BLT.N    ??tsSendResponse_1
     96          			tunerStudioWriteData(tsChannel, buffer, size);
   \   00000024   0x003A             MOVS     R2,R7
   \   00000026   0x0031             MOVS     R1,R6
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x.... 0x....      BL       _Z20tunerStudioWriteDataP12ts_channel_sPKhi
     97          	}
     98          }
   \                     ??tsSendResponse_1:
   \   0000002E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     `?<Constant "TunerStudio over USB ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     boardConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     `?<Constant "TunerStudio over USART">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     `?<Constant "tunerstudio rx">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     `?<Constant "tunerstudio tx">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     tsSerialConfig

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     SD3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x........         DC32     SDU1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x........         DC32     rlist

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x........         DC32     `?<Constant "tunerStudioWriteData">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x........         DC32     `?<Constant "!!! NOT ACCEPTED %d o...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x........         DC32     tsLogger

   \                                 In section .rodata, align 4
   \                     `?<Constant "TunerStudio over USB ...">`:
   \   00000000   0x54 0x75          DC8 "TunerStudio over USB serial"
   \              0x6E 0x65    
   \              0x72 0x53    
   \              0x74 0x75    
   \              0x64 0x69    
   \              0x6F 0x20    
   \              0x6F 0x76    
   \              0x65 0x72    
   \              0x20 0x55    
   \              0x53 0x42    
   \              0x20 0x73    
   \              0x65 0x72    
   \              0x69 0x61    
   \              0x6C 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "TunerStudio over USART">`:
   \   00000000   0x54 0x75          DC8 "TunerStudio over USART"
   \              0x6E 0x65    
   \              0x72 0x53    
   \              0x74 0x75    
   \              0x64 0x69    
   \              0x6F 0x20    
   \              0x6F 0x76    
   \              0x65 0x72    
   \              0x20 0x55    
   \              0x53 0x41    
   \              0x52 0x54    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "tunerstudio rx">`:
   \   00000000   0x74 0x75          DC8 "tunerstudio rx"
   \              0x6E 0x65    
   \              0x72 0x73    
   \              0x74 0x75    
   \              0x64 0x69    
   \              0x6F 0x20    
   \              0x72 0x78    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "tunerstudio tx">`:
   \   00000000   0x74 0x75          DC8 "tunerstudio tx"
   \              0x6E 0x65    
   \              0x72 0x73    
   \              0x74 0x75    
   \              0x64 0x69    
   \              0x6F 0x20    
   \              0x74 0x78    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "tunerStudioWriteData">`:
   \   00000000   0x74 0x75          DC8 "tunerStudioWriteData"
   \              0x6E 0x65    
   \              0x72 0x53    
   \              0x74 0x75    
   \              0x64 0x69    
   \              0x6F 0x57    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "!!! NOT ACCEPTED %d o...">`:
   \   00000000   0x21 0x21          DC8 "!!! NOT ACCEPTED %d out of %d !!!"
   \              0x21 0x20    
   \              0x4E 0x4F    
   \              0x54 0x20    
   \              0x41 0x43    
   \              0x43 0x45    
   \              0x50 0x54    
   \              0x45 0x44    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x6F 0x75    
   \              0x74 0x20    
   \              0x6F 0x66    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x21 0x21    
   \              0x21 0x00    
   \   00000022   0x00 0x00          DC8 0, 0
     99          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   getTsSerialDevice()
         8   -> isSerialOverUart()
      16   memcpy
        16   -> __aeabi_memcpy
       8   startTsPort()
         8   -> isSerialOverUart()
         8   -> mySetPadMode(char const *, ioportid_t, uint32_t, iomode_t)
         8   -> print
         8   -> sdStart
         8   -> usb_serial_start
      24   tsSendResponse(ts_channel_s *, ts_response_format_e, uint8_t const *, int)
        24   -> tunerStudioWriteCrcPacket(ts_channel_s *, uint8_t, void const *, uint16_t)
        24   -> tunerStudioWriteData(ts_channel_s *, uint8_t const *, int)
      32   tunerStudioWriteCrcPacket(ts_channel_s *, uint8_t, void const *, uint16_t)
        32   -> crc32
        32   -> memcpy
        32   -> tunerStudioWriteData(ts_channel_s *, uint8_t const *, int)
      24   tunerStudioWriteData(ts_channel_s *, uint8_t const *, int)
        24   -- Indirect call
        24   -> firmwareError
        24   -> getRemainingStack
        24   -> scheduleMsg


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      36  ?<Constant "!!! NOT ACCEPTED %d o...">
      24  ?<Constant "TunerStudio over USART">
      28  ?<Constant "TunerStudio over USB ...">
      24  ?<Constant "tunerStudioWriteData">
      16  ?<Constant "tunerstudio rx">
      16  ?<Constant "tunerstudio tx">
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      18  getTsSerialDevice()
      22  memcpy
      94  startTsPort()
      48  tsSendResponse(ts_channel_s *, ts_response_format_e, uint8_t const *, int)
      12  tsSerialConfig
     122  tunerStudioWriteCrcPacket(ts_channel_s *, uint8_t, void const *, uint16_t)
      62  tunerStudioWriteData(ts_channel_s *, uint8_t const *, int)

 
  12 bytes in section .data
 144 bytes in section .rodata
 418 bytes in section .text
 
 396 bytes of CODE  memory (+ 22 bytes shared)
 144 bytes of CONST memory
  12 bytes of DATA  memory

Errors: none
Warnings: 1
