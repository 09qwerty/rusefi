###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:21 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\vario #
#                       us\chprintf.c                                         #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\vario #
#                       us\chprintf.c -lCN F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\Debug\List\ -lA F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\Debug\List\ -o                             #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\   #
#                       --no_cse --no_unroll --no_inline --no_code_motion     #
#                       --no_tbaa --no_clustering --no_scheduling --debug     #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\ -On #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\c #
#                       hprintf.lst                                           #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\ch #
#                       printf.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\chibios\os\various\chprintf.c
      1          /*
      2              ChibiOS/RT - Copyright (C) 2006-2013 Giovanni Di Sirio
      3          
      4              Licensed under the Apache License, Version 2.0 (the "License");
      5              you may not use this file except in compliance with the License.
      6              You may obtain a copy of the License at
      7          
      8                  http://www.apache.org/licenses/LICENSE-2.0
      9          
     10              Unless required by applicable law or agreed to in writing, software
     11              distributed under the License is distributed on an "AS IS" BASIS,
     12              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     13              See the License for the specific language governing permissions and
     14              limitations under the License.
     15          */
     16          
     17          /*
     18             Concepts and parts of this file have been contributed by Fabio Utzig,
     19             chvprintf() added by Brent Roman.
     20           */
     21          
     22          /**
     23           * @file    chprintf.c
     24           * @brief   Mini printf-like functionality.
     25           *
     26           * @addtogroup chprintf
     27           * @{
     28           */
     29          
     30          #include "ch.h"
     31          #include "chprintf.h"
     32          
     33          #define MAX_FILLER 11
     34          /**
     35           * That's out default %f precision here. Two digits should be fine?
     36           * That's important on the lcd screen
     37           */
     38          #define FLOAT_PRECISION 100

   \                                 In section .text, align 2, keep-with-next
     39          static char *long_to_string_with_divisor(char *p,
     40                                                   long num,
     41                                                   unsigned radix,
     42                                                   long divisor) {
   \                     long_to_string_with_divisor:
   \   00000000   0xB4F0             PUSH     {R4-R7}
     43            int i;
     44            char *q;
     45            long l, ll;
     46          
     47            l = num;
   \   00000002   0x000E             MOVS     R6,R1
     48            if (divisor == 0) {
   \   00000004   0x2B00             CMP      R3,#+0
   \   00000006   0xD101             BNE.N    ??long_to_string_with_divisor_0
     49              ll = num;
   \   00000008   0x000F             MOVS     R7,R1
   \   0000000A   0xE000             B.N      ??long_to_string_with_divisor_1
     50            } else {
     51              ll = divisor;
   \                     ??long_to_string_with_divisor_0:
   \   0000000C   0x001F             MOVS     R7,R3
     52            }
     53          
     54            q = p + MAX_FILLER;
   \                     ??long_to_string_with_divisor_1:
   \   0000000E   0xF200 0x0C0B      ADDW     R12,R0,#+11
   \   00000012   0x4665             MOV      R5,R12
     55            do {
     56              i = (int)(l % radix);
   \                     ??long_to_string_with_divisor_2:
   \   00000014   0xFBB6 0xFCF2      UDIV     R12,R6,R2
   \   00000018   0xFB02 0x6C1C      MLS      R12,R2,R12,R6
   \   0000001C   0x4664             MOV      R4,R12
     57              i += '0';
   \   0000001E   0x3430             ADDS     R4,R4,#+48
     58              if (i > '9')
   \   00000020   0x2C3A             CMP      R4,#+58
   \   00000022   0xDB00             BLT.N    ??long_to_string_with_divisor_3
     59                i += 'A' - '0' - 10;
   \   00000024   0x1DE4             ADDS     R4,R4,#+7
     60              *--q = i;
   \                     ??long_to_string_with_divisor_3:
   \   00000026   0x1E6D             SUBS     R5,R5,#+1
   \   00000028   0x702C             STRB     R4,[R5, #+0]
     61              l /= radix;
   \   0000002A   0xFBB6 0xF6F2      UDIV     R6,R6,R2
     62            } while ((ll /= radix) != 0);
   \   0000002E   0xFBB7 0xF7F2      UDIV     R7,R7,R2
   \   00000032   0x2F00             CMP      R7,#+0
   \   00000034   0xD1EE             BNE.N    ??long_to_string_with_divisor_2
     63          
     64            i = (int)(p + MAX_FILLER - q);
   \   00000036   0xF110 0x0C0B      ADDS     R12,R0,#+11
   \   0000003A   0xEBBC 0x0C05      SUBS     R12,R12,R5
   \   0000003E   0x4664             MOV      R4,R12
     65            do
     66              *p++ = *q++;
   \                     ??long_to_string_with_divisor_4:
   \   00000040   0xF895 0xC000      LDRB     R12,[R5, #+0]
   \   00000044   0xF880 0xC000      STRB     R12,[R0, #+0]
   \   00000048   0x1C6D             ADDS     R5,R5,#+1
   \   0000004A   0x1C40             ADDS     R0,R0,#+1
     67            while (--i);
   \   0000004C   0x1E64             SUBS     R4,R4,#+1
   \   0000004E   0x2C00             CMP      R4,#+0
   \   00000050   0xD1F6             BNE.N    ??long_to_string_with_divisor_4
     68          
     69            return p;
   \   00000052   0xBCF0             POP      {R4-R7}
   \   00000054   0x4770             BX       LR               ;; return
     70          }
     71          

   \                                 In section .text, align 2, keep-with-next
     72          static char *ltoa(char *p, long num, unsigned radix) {
   \                     ltoa:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     73          
     74            return long_to_string_with_divisor(p, num, radix, 0);
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x0032             MOVS     R2,R6
   \   0000000C   0x0029             MOVS     R1,R5
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       long_to_string_with_divisor
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
     75          }
     76          
     77          #if CHPRINTF_USE_FLOAT

   \                                 In section .text, align 2, keep-with-next
     78          char *ftoa(char *p, double num, unsigned long precision) {
   \                     ftoa:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0x0007             MOVS     R7,R0
   \   00000008   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   0000000C   0xEEF0 0x8A60      VMOV.F32 S17,S1
   \   00000010   0x000E             MOVS     R6,R1
     79              if (num < 0) {
   \   00000012   0xEC51 0x0B18      VMOV     R0,R1,D8
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0x2300             MOVS     R3,#+0
   \   0000001A   0x.... 0x....      BL       __aeabi_cdcmple
   \   0000001E   0xD20D             BCS.N    ??ftoa_0
     80                *p++ = '-';
   \   00000020   0x202D             MOVS     R0,#+45
   \   00000022   0x7038             STRB     R0,[R7, #+0]
   \   00000024   0x1C7F             ADDS     R7,R7,#+1
     81                return ftoa(p, -num, precision);
   \   00000026   0x0031             MOVS     R1,R6
   \   00000028   0xEC53 0x2B18      VMOV     R2,R3,D8
   \   0000002C   0xF093 0x4300      EORS     R3,R3,#0x80000000
   \   00000030   0xEC43 0x2B10      VMOV     D0,R2,R3
   \   00000034   0x0038             MOVS     R0,R7
   \   00000036   0xF7FF 0xFFE3      BL       ftoa
   \   0000003A   0xE042             B.N      ??ftoa_1
     82              }
     83            long l;
     84            if (isnan(num)) {
   \                     ??ftoa_0:
   \   0000003C   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000040   0xEEF0 0x0A68      VMOV.F32 S1,S17
   \   00000044   0x.... 0x....      BL       __iar_Dtest
   \   00000048   0x2802             CMP      R0,#+2
   \   0000004A   0xD10A             BNE.N    ??ftoa_2
     85              *p++ = 'N';
   \   0000004C   0x204E             MOVS     R0,#+78
   \   0000004E   0x7038             STRB     R0,[R7, #+0]
   \   00000050   0x1C7F             ADDS     R7,R7,#+1
     86              *p++ = 'a';
   \   00000052   0x2061             MOVS     R0,#+97
   \   00000054   0x7038             STRB     R0,[R7, #+0]
   \   00000056   0x1C7F             ADDS     R7,R7,#+1
     87              *p++ = 'N';
   \   00000058   0x204E             MOVS     R0,#+78
   \   0000005A   0x7038             STRB     R0,[R7, #+0]
   \   0000005C   0x1C7F             ADDS     R7,R7,#+1
     88              return p;
   \   0000005E   0x0038             MOVS     R0,R7
   \   00000060   0xE02F             B.N      ??ftoa_1
     89            }
     90          
     91            if (precision == 0)
   \                     ??ftoa_2:
   \   00000062   0x2E00             CMP      R6,#+0
   \   00000064   0xD101             BNE.N    ??ftoa_3
     92              precision = FLOAT_PRECISION;
   \   00000066   0x2064             MOVS     R0,#+100
   \   00000068   0x0006             MOVS     R6,R0
     93          
     94            l = (long)num;
   \                     ??ftoa_3:
   \   0000006A   0xEC51 0x0B18      VMOV     R0,R1,D8
   \   0000006E   0x.... 0x....      BL       __aeabi_d2iz
   \   00000072   0x0004             MOVS     R4,R0
     95            p = long_to_string_with_divisor(p, l, 10, 0);
   \   00000074   0x2300             MOVS     R3,#+0
   \   00000076   0x220A             MOVS     R2,#+10
   \   00000078   0x0021             MOVS     R1,R4
   \   0000007A   0x0038             MOVS     R0,R7
   \   0000007C   0x.... 0x....      BL       long_to_string_with_divisor
   \   00000080   0x0007             MOVS     R7,R0
     96            *p++ = '.';
   \   00000082   0x202E             MOVS     R0,#+46
   \   00000084   0x7038             STRB     R0,[R7, #+0]
   \   00000086   0x1C7F             ADDS     R7,R7,#+1
     97            l = (long)((num - l) * precision);
   \   00000088   0x0020             MOVS     R0,R4
   \   0000008A   0x.... 0x....      BL       __aeabi_i2d
   \   0000008E   0x0002             MOVS     R2,R0
   \   00000090   0x000B             MOVS     R3,R1
   \   00000092   0xEC51 0x0B18      VMOV     R0,R1,D8
   \   00000096   0x.... 0x....      BL       __aeabi_dsub
   \   0000009A   0x0004             MOVS     R4,R0
   \   0000009C   0x000D             MOVS     R5,R1
   \   0000009E   0x0030             MOVS     R0,R6
   \   000000A0   0x.... 0x....      BL       __aeabi_ui2d
   \   000000A4   0x0022             MOVS     R2,R4
   \   000000A6   0x002B             MOVS     R3,R5
   \   000000A8   0x.... 0x....      BL       __aeabi_dmul
   \   000000AC   0x.... 0x....      BL       __aeabi_d2iz
   \   000000B0   0x0004             MOVS     R4,R0
     98            return long_to_string_with_divisor(p, l, 10, precision / 10);
   \   000000B2   0x200A             MOVS     R0,#+10
   \   000000B4   0xFBB6 0xF3F0      UDIV     R3,R6,R0
   \   000000B8   0x220A             MOVS     R2,#+10
   \   000000BA   0x0021             MOVS     R1,R4
   \   000000BC   0x0038             MOVS     R0,R7
   \   000000BE   0x.... 0x....      BL       long_to_string_with_divisor
   \                     ??ftoa_1:
   \   000000C2   0xECBD 0x8B02      VPOP     {D8}
   \   000000C6   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     99          }
    100          #endif
    101          
    102          #include "error_handling.h"
    103          int getRemainingStack(Thread *otp);
    104          
    105          /**
    106           * @brief   System formatted output function.
    107           * @details This function implements a minimal @p vprintf()-like functionality
    108           *          with output on a @p BaseSequentialStream.
    109           *          The general parameters format is: %[-][width|*][.precision|*][l|L]p.
    110           *          The following parameter types (p) are supported:
    111           *          - <b>x</b> hexadecimal integer.
    112           *          - <b>X</b> hexadecimal long.
    113           *          - <b>o</b> octal integer.
    114           *          - <b>O</b> octal long.
    115           *          - <b>d</b> decimal signed integer.
    116           *          - <b>D</b> decimal signed long.
    117           *          - <b>u</b> decimal unsigned integer.
    118           *          - <b>U</b> decimal unsigned long.
    119           *          - <b>c</b> character.
    120           *          - <b>s</b> string.
    121           *          .
    122           *
    123           * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
    124           * @param[in] fmt       formatting string
    125           * @param[in] ap        list of parameters
    126           *
    127           * @api
    128           */

   \                                 In section .text, align 2, keep-with-next
    129          void chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
   \                     chvprintf:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0xED2D 0x8B02      VPUSH    {D8}
   \   00000008   0xB08A             SUB      SP,SP,#+40
   \   0000000A   0x4683             MOV      R11,R0
   \   0000000C   0x000C             MOVS     R4,R1
   \   0000000E   0x0015             MOVS     R5,R2
    130            char *p, *s, c, filler;
    131            int i, precision, width;
    132            bool_t is_long, left_align;
    133            long l;
    134          #if CHPRINTF_USE_FLOAT
    135            float f;
    136            char tmpbuf[2*MAX_FILLER + 1];
    137          #else
    138            char tmpbuf[MAX_FILLER + 1];
    139          #endif
    140          
    141            efiAssertVoid(getRemainingStack(chThdSelf()) > 64, "lowstck#1c");
   \   00000010   0x....             LDR.N    R0,??DataTable0
   \   00000012   0x6980             LDR      R0,[R0, #+24]
   \   00000014   0x.... 0x....      BL       getRemainingStack
   \   00000018   0x2841             CMP      R0,#+65
   \   0000001A   0xDA03             BGE.N    ??chvprintf_0
   \   0000001C   0x....             LDR.N    R0,??DataTable0_1
   \   0000001E   0x.... 0x....      BL       firmwareError
   \   00000022   0xE169             B.N      ??chvprintf_1
    142          
    143          
    144            while (TRUE) {
    145              c = *fmt++;
   \                     ??chvprintf_0:
   \   00000024   0x7820             LDRB     R0,[R4, #+0]
   \   00000026   0x0007             MOVS     R7,R0
   \   00000028   0x1C64             ADDS     R4,R4,#+1
    146              if (c == 0)
   \   0000002A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000002C   0x2F00             CMP      R7,#+0
   \   0000002E   0xF000 0x8163      BEQ.W    ??chvprintf_1
    147                return;
    148              if (c != '%') {
   \                     ??chvprintf_2:
   \   00000032   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000034   0x2F25             CMP      R7,#+37
   \   00000036   0xD007             BEQ.N    ??chvprintf_3
    149                chSequentialStreamPut(chp, (uint8_t)c);
   \   00000038   0x0039             MOVS     R1,R7
   \   0000003A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003C   0x4658             MOV      R0,R11
   \   0000003E   0xF8DB 0x2000      LDR      R2,[R11, #+0]
   \   00000042   0x6892             LDR      R2,[R2, #+8]
   \   00000044   0x4790             BLX      R2
    150                continue;
   \   00000046   0xE7ED             B.N      ??chvprintf_0
    151              }
    152              // we are here if c == '%' meaning we have a control sequence
    153              p = tmpbuf;
   \                     ??chvprintf_3:
   \   00000048   0xA803             ADD      R0,SP,#+12
   \   0000004A   0x0006             MOVS     R6,R0
    154              s = tmpbuf;
   \   0000004C   0xA803             ADD      R0,SP,#+12
   \   0000004E   0x4682             MOV      R10,R0
    155              left_align = FALSE;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0xF88D 0x0002      STRB     R0,[SP, #+2]
    156              if (*fmt == '-') {
   \   00000056   0x7820             LDRB     R0,[R4, #+0]
   \   00000058   0x282D             CMP      R0,#+45
   \   0000005A   0xD103             BNE.N    ??chvprintf_4
    157                fmt++;
   \   0000005C   0x1C64             ADDS     R4,R4,#+1
    158                left_align = TRUE;
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0xF88D 0x0002      STRB     R0,[SP, #+2]
    159              }
    160              filler = ' ';
   \                     ??chvprintf_4:
   \   00000064   0x2020             MOVS     R0,#+32
   \   00000066   0xF88D 0x0000      STRB     R0,[SP, #+0]
    161              if ((*fmt == '.') || (*fmt == '0')) {
   \   0000006A   0x7820             LDRB     R0,[R4, #+0]
   \   0000006C   0x282E             CMP      R0,#+46
   \   0000006E   0xD002             BEQ.N    ??chvprintf_5
   \   00000070   0x7820             LDRB     R0,[R4, #+0]
   \   00000072   0x2830             CMP      R0,#+48
   \   00000074   0xD103             BNE.N    ??chvprintf_6
    162                fmt++;
   \                     ??chvprintf_5:
   \   00000076   0x1C64             ADDS     R4,R4,#+1
    163                filler = '0';
   \   00000078   0x2030             MOVS     R0,#+48
   \   0000007A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    164              }
    165              width = 0;
   \                     ??chvprintf_6:
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x4681             MOV      R9,R0
    166              while (TRUE) {
    167                c = *fmt++;
   \                     ??chvprintf_7:
   \   00000082   0x7820             LDRB     R0,[R4, #+0]
   \   00000084   0x0007             MOVS     R7,R0
   \   00000086   0x1C64             ADDS     R4,R4,#+1
    168                if (c >= '0' && c <= '9')
   \   00000088   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000008A   0x2F30             CMP      R7,#+48
   \   0000008C   0xDB04             BLT.N    ??chvprintf_8
   \   0000008E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000090   0x2F3A             CMP      R7,#+58
   \   00000092   0xDA01             BGE.N    ??chvprintf_8
    169                  c -= '0';
   \   00000094   0x3F30             SUBS     R7,R7,#+48
   \   00000096   0xE00C             B.N      ??chvprintf_9
    170                else if (c == '*')
   \                     ??chvprintf_8:
   \   00000098   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000009A   0x2F2A             CMP      R7,#+42
   \   0000009C   0xD103             BNE.N    ??chvprintf_10
    171                  c = va_arg(ap, int);
   \   0000009E   0x6828             LDR      R0,[R5, #+0]
   \   000000A0   0x0007             MOVS     R7,R0
   \   000000A2   0x1D2D             ADDS     R5,R5,#+4
   \   000000A4   0xE005             B.N      ??chvprintf_9
    172                else
    173                  break;
    174                width = width * 10 + c;
    175              }
    176              precision = 0;
   \                     ??chvprintf_10:
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0x4680             MOV      R8,R0
    177              if (c == '.') {
   \   000000AA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000AC   0x2F2E             CMP      R7,#+46
   \   000000AE   0xD11E             BNE.N    ??chvprintf_11
   \   000000B0   0xE004             B.N      ??chvprintf_12
   \                     ??chvprintf_9:
   \   000000B2   0x200A             MOVS     R0,#+10
   \   000000B4   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000B6   0xFB00 0x7909      MLA      R9,R0,R9,R7
   \   000000BA   0xE7E2             B.N      ??chvprintf_7
    178                while (TRUE) {
    179                  c = *fmt++;
   \                     ??chvprintf_12:
   \   000000BC   0x7820             LDRB     R0,[R4, #+0]
   \   000000BE   0x0007             MOVS     R7,R0
   \   000000C0   0x1C64             ADDS     R4,R4,#+1
    180                  if (c >= '0' && c <= '9')
   \   000000C2   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000C4   0x2F30             CMP      R7,#+48
   \   000000C6   0xDB04             BLT.N    ??chvprintf_13
   \   000000C8   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000CA   0x2F3A             CMP      R7,#+58
   \   000000CC   0xDA01             BGE.N    ??chvprintf_13
    181                    c -= '0';
   \   000000CE   0x3F30             SUBS     R7,R7,#+48
   \   000000D0   0xE007             B.N      ??chvprintf_14
    182                  else if (c == '*')
   \                     ??chvprintf_13:
   \   000000D2   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000D4   0x2F2A             CMP      R7,#+42
   \   000000D6   0xD103             BNE.N    ??chvprintf_15
    183                    c = va_arg(ap, int);
   \   000000D8   0x6828             LDR      R0,[R5, #+0]
   \   000000DA   0x0007             MOVS     R7,R0
   \   000000DC   0x1D2D             ADDS     R5,R5,#+4
   \   000000DE   0xE000             B.N      ??chvprintf_14
    184                  else
    185                    break;
   \                     ??chvprintf_15:
   \   000000E0   0xE005             B.N      ??chvprintf_11
    186                  precision *= 10;
   \                     ??chvprintf_14:
   \   000000E2   0x200A             MOVS     R0,#+10
   \   000000E4   0xFB00 0xF808      MUL      R8,R0,R8
    187                  precision += c;
   \   000000E8   0xFA58 0xF887      UXTAB    R8,R8,R7
   \   000000EC   0xE7E6             B.N      ??chvprintf_12
    188                }
    189              }
    190              /* Long modifier.*/
    191              if (c == 'l' || c == 'L') {
   \                     ??chvprintf_11:
   \   000000EE   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000F0   0x2F6C             CMP      R7,#+108
   \   000000F2   0xD002             BEQ.N    ??chvprintf_16
   \   000000F4   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000F6   0x2F4C             CMP      R7,#+76
   \   000000F8   0xD109             BNE.N    ??chvprintf_17
    192                is_long = TRUE;
   \                     ??chvprintf_16:
   \   000000FA   0x2001             MOVS     R0,#+1
   \   000000FC   0xF88D 0x0001      STRB     R0,[SP, #+1]
    193                if (*fmt)
   \   00000100   0x7820             LDRB     R0,[R4, #+0]
   \   00000102   0x2800             CMP      R0,#+0
   \   00000104   0xD00E             BEQ.N    ??chvprintf_18
    194                  c = *fmt++;
   \   00000106   0x7820             LDRB     R0,[R4, #+0]
   \   00000108   0x0007             MOVS     R7,R0
   \   0000010A   0x1C64             ADDS     R4,R4,#+1
   \   0000010C   0xE00A             B.N      ??chvprintf_18
    195              }
    196              else
    197                is_long = (c >= 'A') && (c <= 'Z');
   \                     ??chvprintf_17:
   \   0000010E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000110   0x2F41             CMP      R7,#+65
   \   00000112   0xDB04             BLT.N    ??chvprintf_19
   \   00000114   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000116   0x2F5B             CMP      R7,#+91
   \   00000118   0xDA01             BGE.N    ??chvprintf_19
   \   0000011A   0x2001             MOVS     R0,#+1
   \   0000011C   0xE000             B.N      ??chvprintf_20
   \                     ??chvprintf_19:
   \   0000011E   0x2000             MOVS     R0,#+0
   \                     ??chvprintf_20:
   \   00000120   0xF88D 0x0001      STRB     R0,[SP, #+1]
    198          
    199              /* Command decoding.*/
    200              switch (c) {
   \                     ??chvprintf_18:
   \   00000124   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000126   0x0038             MOVS     R0,R7
   \   00000128   0x2844             CMP      R0,#+68
   \   0000012A   0xD03C             BEQ.N    ??chvprintf_21
   \   0000012C   0x2849             CMP      R0,#+73
   \   0000012E   0xD03A             BEQ.N    ??chvprintf_21
   \   00000130   0x284F             CMP      R0,#+79
   \   00000132   0xD07B             BEQ.N    ??chvprintf_22
   \   00000134   0x2855             CMP      R0,#+85
   \   00000136   0xD076             BEQ.N    ??chvprintf_23
   \   00000138   0x2858             CMP      R0,#+88
   \   0000013A   0xD071             BEQ.N    ??chvprintf_24
   \   0000013C   0x2863             CMP      R0,#+99
   \   0000013E   0xD00E             BEQ.N    ??chvprintf_25
   \   00000140   0x2864             CMP      R0,#+100
   \   00000142   0xD030             BEQ.N    ??chvprintf_21
   \   00000144   0x2866             CMP      R0,#+102
   \   00000146   0xD049             BEQ.N    ??chvprintf_26
   \   00000148   0x2869             CMP      R0,#+105
   \   0000014A   0xD02C             BEQ.N    ??chvprintf_21
   \   0000014C   0x286F             CMP      R0,#+111
   \   0000014E   0xD06D             BEQ.N    ??chvprintf_22
   \   00000150   0x2873             CMP      R0,#+115
   \   00000152   0xD00C             BEQ.N    ??chvprintf_27
   \   00000154   0x2875             CMP      R0,#+117
   \   00000156   0xD066             BEQ.N    ??chvprintf_23
   \   00000158   0x2878             CMP      R0,#+120
   \   0000015A   0xD061             BEQ.N    ??chvprintf_24
   \   0000015C   0xE07B             B.N      ??chvprintf_28
    201              case 'c':
    202                filler = ' ';
   \                     ??chvprintf_25:
   \   0000015E   0x2020             MOVS     R0,#+32
   \   00000160   0xF88D 0x0000      STRB     R0,[SP, #+0]
    203                *p++ = va_arg(ap, int);
   \   00000164   0x6828             LDR      R0,[R5, #+0]
   \   00000166   0x7030             STRB     R0,[R6, #+0]
   \   00000168   0x1D2D             ADDS     R5,R5,#+4
   \   0000016A   0x1C76             ADDS     R6,R6,#+1
    204                break;
   \   0000016C   0xE075             B.N      ??chvprintf_29
    205              case 's':
    206                filler = ' ';
   \                     ??chvprintf_27:
   \   0000016E   0x2020             MOVS     R0,#+32
   \   00000170   0xF88D 0x0000      STRB     R0,[SP, #+0]
    207                if ((s = va_arg(ap, char *)) == 0)
   \   00000174   0x6828             LDR      R0,[R5, #+0]
   \   00000176   0x1D2D             ADDS     R5,R5,#+4
   \   00000178   0x4682             MOV      R10,R0
   \   0000017A   0x2800             CMP      R0,#+0
   \   0000017C   0xD101             BNE.N    ??chvprintf_30
    208                  s = "(null)";
   \   0000017E   0x....             LDR.N    R0,??DataTable0_2
   \   00000180   0x4682             MOV      R10,R0
    209                if (precision == 0)
   \                     ??chvprintf_30:
   \   00000182   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000186   0xD102             BNE.N    ??chvprintf_31
    210                  precision = 32767;
   \   00000188   0xF647 0x70FF      MOVW     R0,#+32767
   \   0000018C   0x4680             MOV      R8,R0
    211                for (p = s; *p && (--precision >= 0); p++)
   \                     ??chvprintf_31:
   \   0000018E   0x4656             MOV      R6,R10
   \                     ??chvprintf_32:
   \   00000190   0x7830             LDRB     R0,[R6, #+0]
   \   00000192   0x2800             CMP      R0,#+0
   \   00000194   0xD006             BEQ.N    ??chvprintf_33
   \   00000196   0xF1B8 0x0801      SUBS     R8,R8,#+1
   \   0000019A   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000019E   0xD401             BMI.N    ??chvprintf_33
   \   000001A0   0x1C76             ADDS     R6,R6,#+1
   \   000001A2   0xE7F5             B.N      ??chvprintf_32
    212                  ;
    213                break;
   \                     ??chvprintf_33:
   \   000001A4   0xE059             B.N      ??chvprintf_29
    214              case 'D':
    215              case 'd':
    216              case 'I':
    217              case 'i':
    218                if (is_long)
   \                     ??chvprintf_21:
   \   000001A6   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000001AA   0x2800             CMP      R0,#+0
   \   000001AC   0xD003             BEQ.N    ??chvprintf_34
    219                  l = va_arg(ap, long);
   \   000001AE   0x6828             LDR      R0,[R5, #+0]
   \   000001B0   0x9001             STR      R0,[SP, #+4]
   \   000001B2   0x1D2D             ADDS     R5,R5,#+4
   \   000001B4   0xE002             B.N      ??chvprintf_35
    220                else
    221                  l = va_arg(ap, int);
   \                     ??chvprintf_34:
   \   000001B6   0x6828             LDR      R0,[R5, #+0]
   \   000001B8   0x9001             STR      R0,[SP, #+4]
   \   000001BA   0x1D2D             ADDS     R5,R5,#+4
    222                if (l < 0) {
   \                     ??chvprintf_35:
   \   000001BC   0x9801             LDR      R0,[SP, #+4]
   \   000001BE   0x2800             CMP      R0,#+0
   \   000001C0   0xD505             BPL.N    ??chvprintf_36
    223                  *p++ = '-';
   \   000001C2   0x202D             MOVS     R0,#+45
   \   000001C4   0x7030             STRB     R0,[R6, #+0]
   \   000001C6   0x1C76             ADDS     R6,R6,#+1
    224                  l = -l;
   \   000001C8   0x9801             LDR      R0,[SP, #+4]
   \   000001CA   0x4240             RSBS     R0,R0,#+0
   \   000001CC   0x9001             STR      R0,[SP, #+4]
    225                }
    226                p = ltoa(p, l, 10);
   \                     ??chvprintf_36:
   \   000001CE   0x220A             MOVS     R2,#+10
   \   000001D0   0x9901             LDR      R1,[SP, #+4]
   \   000001D2   0x0030             MOVS     R0,R6
   \   000001D4   0x.... 0x....      BL       ltoa
   \   000001D8   0x0006             MOVS     R6,R0
    227                break;
   \   000001DA   0xE03E             B.N      ??chvprintf_29
    228          #if CHPRINTF_USE_FLOAT
    229              case 'f':
    230                f = (float) va_arg(ap, double);
   \                     ??chvprintf_26:
   \   000001DC   0x1DED             ADDS     R5,R5,#+7
   \   000001DE   0xF035 0x0507      BICS     R5,R5,#0x7
   \   000001E2   0xE9D5 0x0100      LDRD     R0,R1,[R5, #+0]
   \   000001E6   0x.... 0x....      BL       __aeabi_d2f
   \   000001EA   0xEE08 0x0A10      VMOV     S16,R0
   \   000001EE   0x3508             ADDS     R5,R5,#+8
    231                if (f < 0) {
   \   000001F0   0xEEB5 0x8A40      VCMP.F32 S16,#0.0
   \   000001F4   0xEEF1 0xFA10      FMSTAT   
   \   000001F8   0xD504             BPL.N    ??chvprintf_37
    232                  *p++ = '-';
   \   000001FA   0x202D             MOVS     R0,#+45
   \   000001FC   0x7030             STRB     R0,[R6, #+0]
   \   000001FE   0x1C76             ADDS     R6,R6,#+1
    233                  f = -f;
   \   00000200   0xEEB1 0x8A48      VNEG.F32 S16,S16
    234                }
    235                p = ftoa(p, f, precision);
   \                     ??chvprintf_37:
   \   00000204   0x4641             MOV      R1,R8
   \   00000206   0x4688             MOV      R8,R1
   \   00000208   0xEE18 0x0A10      VMOV     R0,S16
   \   0000020C   0x.... 0x....      BL       __aeabi_f2d
   \   00000210   0xEC41 0x0B10      VMOV     D0,R0,R1
   \   00000214   0x4641             MOV      R1,R8
   \   00000216   0x0030             MOVS     R0,R6
   \   00000218   0x.... 0x....      BL       ftoa
   \   0000021C   0x0006             MOVS     R6,R0
    236                break;
   \   0000021E   0xE01C             B.N      ??chvprintf_29
    237          #endif
    238              case 'X':
    239              case 'x':
    240                c = 16;
   \                     ??chvprintf_24:
   \   00000220   0x2010             MOVS     R0,#+16
   \   00000222   0x0007             MOVS     R7,R0
    241                goto unsigned_common;
   \   00000224   0xE004             B.N      ??chvprintf_38
    242              case 'U':
    243              case 'u':
    244                c = 10;
   \                     ??chvprintf_23:
   \   00000226   0x200A             MOVS     R0,#+10
   \   00000228   0x0007             MOVS     R7,R0
    245                goto unsigned_common;
   \   0000022A   0xE001             B.N      ??chvprintf_38
    246              case 'O':
    247              case 'o':
    248                c = 8;
   \                     ??chvprintf_22:
   \   0000022C   0x2008             MOVS     R0,#+8
   \   0000022E   0x0007             MOVS     R7,R0
    249          unsigned_common:
    250                if (is_long)
   \                     ??chvprintf_38:
   \   00000230   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000234   0x2800             CMP      R0,#+0
   \   00000236   0xD003             BEQ.N    ??chvprintf_39
    251                  l = va_arg(ap, unsigned long);
   \   00000238   0x6828             LDR      R0,[R5, #+0]
   \   0000023A   0x9001             STR      R0,[SP, #+4]
   \   0000023C   0x1D2D             ADDS     R5,R5,#+4
   \   0000023E   0xE002             B.N      ??chvprintf_40
    252                else
    253                  l = va_arg(ap, unsigned int);
   \                     ??chvprintf_39:
   \   00000240   0x6828             LDR      R0,[R5, #+0]
   \   00000242   0x9001             STR      R0,[SP, #+4]
   \   00000244   0x1D2D             ADDS     R5,R5,#+4
    254                p = ltoa(p, l, c);
   \                     ??chvprintf_40:
   \   00000246   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000248   0x003A             MOVS     R2,R7
   \   0000024A   0x9901             LDR      R1,[SP, #+4]
   \   0000024C   0x0030             MOVS     R0,R6
   \   0000024E   0x.... 0x....      BL       ltoa
   \   00000252   0x0006             MOVS     R6,R0
    255                break;
   \   00000254   0xE001             B.N      ??chvprintf_29
    256              default:
    257                *p++ = c;
   \                     ??chvprintf_28:
   \   00000256   0x7037             STRB     R7,[R6, #+0]
   \   00000258   0x1C76             ADDS     R6,R6,#+1
    258                break;
    259              }
    260              i = (int)(p - s);
   \                     ??chvprintf_29:
   \   0000025A   0xEBB6 0x000A      SUBS     R0,R6,R10
   \   0000025E   0x9002             STR      R0,[SP, #+8]
    261              if ((width -= i) < 0)
   \   00000260   0x9802             LDR      R0,[SP, #+8]
   \   00000262   0xEBB9 0x0900      SUBS     R9,R9,R0
   \   00000266   0xF1B9 0x0F00      CMP      R9,#+0
   \   0000026A   0xD501             BPL.N    ??chvprintf_41
    262                width = 0;
   \   0000026C   0x2000             MOVS     R0,#+0
   \   0000026E   0x4681             MOV      R9,R0
    263              if (left_align == FALSE)
   \                     ??chvprintf_41:
   \   00000270   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000274   0x2800             CMP      R0,#+0
   \   00000276   0xD101             BNE.N    ??chvprintf_42
    264                width = -width;
   \   00000278   0xF1D9 0x0900      RSBS     R9,R9,#+0
    265              if (width < 0) {
   \                     ??chvprintf_42:
   \   0000027C   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000280   0xD51F             BPL.N    ??chvprintf_43
    266                if (*s == '-' && filler == '0') {
   \   00000282   0xF89A 0x0000      LDRB     R0,[R10, #+0]
   \   00000286   0x282D             CMP      R0,#+45
   \   00000288   0xD10F             BNE.N    ??chvprintf_44
   \   0000028A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000028E   0x2830             CMP      R0,#+48
   \   00000290   0xD10B             BNE.N    ??chvprintf_44
    267                  chSequentialStreamPut(chp, (uint8_t)*s++);
   \   00000292   0xF89A 0x1000      LDRB     R1,[R10, #+0]
   \   00000296   0x4658             MOV      R0,R11
   \   00000298   0xF8DB 0x2000      LDR      R2,[R11, #+0]
   \   0000029C   0x6892             LDR      R2,[R2, #+8]
   \   0000029E   0x4790             BLX      R2
   \   000002A0   0xF11A 0x0A01      ADDS     R10,R10,#+1
    268                  i--;
   \   000002A4   0x9802             LDR      R0,[SP, #+8]
   \   000002A6   0x1E40             SUBS     R0,R0,#+1
   \   000002A8   0x9002             STR      R0,[SP, #+8]
    269                }
    270                do {
    271                  chSequentialStreamPut(chp, (uint8_t)filler);
   \                     ??chvprintf_44:
   \   000002AA   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000002AE   0x4658             MOV      R0,R11
   \   000002B0   0xF8DB 0x2000      LDR      R2,[R11, #+0]
   \   000002B4   0x6892             LDR      R2,[R2, #+8]
   \   000002B6   0x4790             BLX      R2
    272                } while (++width != 0);
   \   000002B8   0xF119 0x0901      ADDS     R9,R9,#+1
   \   000002BC   0xF1B9 0x0F00      CMP      R9,#+0
   \   000002C0   0xD1F3             BNE.N    ??chvprintf_44
    273              }
    274              if (i > 0) {
   \                     ??chvprintf_43:
   \   000002C2   0x9802             LDR      R0,[SP, #+8]
   \   000002C4   0x2801             CMP      R0,#+1
   \   000002C6   0xDB06             BLT.N    ??chvprintf_45
    275              	chSequentialStreamWrite(chp, (uint8_t*)s, i);
   \   000002C8   0x9A02             LDR      R2,[SP, #+8]
   \   000002CA   0x4651             MOV      R1,R10
   \   000002CC   0x4658             MOV      R0,R11
   \   000002CE   0xF8DB 0x3000      LDR      R3,[R11, #+0]
   \   000002D2   0x681B             LDR      R3,[R3, #+0]
   \   000002D4   0x4798             BLX      R3
    276              }
    277              s += i;
   \                     ??chvprintf_45:
   \   000002D6   0x9802             LDR      R0,[SP, #+8]
   \   000002D8   0xEB10 0x0A0A      ADDS     R10,R0,R10
    278          
    279              while (width) {
   \                     ??chvprintf_46:
   \   000002DC   0xF1B9 0x0F00      CMP      R9,#+0
   \   000002E0   0xF43F 0xAEA0      BEQ.W    ??chvprintf_0
    280                chSequentialStreamPut(chp, (uint8_t)filler);
   \   000002E4   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000002E8   0x4658             MOV      R0,R11
   \   000002EA   0xF8DB 0x2000      LDR      R2,[R11, #+0]
   \   000002EE   0x6892             LDR      R2,[R2, #+8]
   \   000002F0   0x4790             BLX      R2
    281                width--;
   \   000002F2   0xF1B9 0x0901      SUBS     R9,R9,#+1
   \   000002F6   0xE7F1             B.N      ??chvprintf_46
    282              }
    283            }
   \                     ??chvprintf_1:
   \   000002F8   0xB00A             ADD      SP,SP,#+40
   \   000002FA   0xECBD 0x8B02      VPOP     {D8}
   \   000002FE   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    284          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     rlist

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x........         DC32     `?<Constant "lowstck#1c">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0x........         DC32     `?<Constant "(null)">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "lowstck#1c">`:
   \   00000000   0x6C 0x6F          DC8 "lowstck#1c"
   \              0x77 0x73    
   \              0x74 0x63    
   \              0x6B 0x23    
   \              0x31 0x63    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "(null)">`:
   \   00000000   0x28 0x6E          DC8 "(null)"
   \              0x75 0x6C    
   \              0x6C 0x29    
   \              0x00         
   \   00000007   0x00               DC8 0
    285          
    286          /** @} */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      88   chvprintf
        88   -- Indirect call
        88   -> __aeabi_d2f
        88   -> __aeabi_f2d
        88   -> firmwareError
        88   -> ftoa
        88   -> getRemainingStack
        88   -> ltoa
      32   ftoa
        32   -> __aeabi_cdcmple
        32   -> __aeabi_d2iz
        32   -> __aeabi_dmul
        32   -> __aeabi_dsub
        32   -> __aeabi_i2d
        32   -> __aeabi_ui2d
        32   -> __iar_Dtest
        32   -> ftoa
        32   -> long_to_string_with_divisor
      16   long_to_string_with_divisor
      16   ltoa
        16   -> long_to_string_with_divisor


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "(null)">
      12  ?<Constant "lowstck#1c">
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
     770  chvprintf
     200  ftoa
      86  long_to_string_with_divisor
      22  ltoa

 
    20 bytes in section .rodata
 1 090 bytes in section .text
 
 1 090 bytes of CODE  memory
    20 bytes of CONST memory

Errors: none
Warnings: none
