###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:31 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\kerne #
#                       l\src\chvt.c                                          #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\kerne #
#                       l\src\chvt.c -lCN F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\Debug\List\ -lA F:\stuff\rusefi_sourceforge\fir #
#                       mware\iar\Debug\List\ -o F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\Debug\Obj\ --no_cse --no_unroll          #
#                       --no_inline --no_code_motion --no_tbaa                #
#                       --no_clustering --no_scheduling --debug               #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\ -On #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\c #
#                       hvt.lst                                               #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\ch #
#                       vt.o                                                  #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\chibios\os\kernel\src\chvt.c
      1          /*
      2              ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
      3                           2011,2012,2013 Giovanni Di Sirio.
      4          
      5              This file is part of ChibiOS/RT.
      6          
      7              ChibiOS/RT is free software; you can redistribute it and/or modify
      8              it under the terms of the GNU General Public License as published by
      9              the Free Software Foundation; either version 3 of the License, or
     10              (at your option) any later version.
     11          
     12              ChibiOS/RT is distributed in the hope that it will be useful,
     13              but WITHOUT ANY WARRANTY; without even the implied warranty of
     14              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     15              GNU General Public License for more details.
     16          
     17              You should have received a copy of the GNU General Public License
     18              along with this program.  If not, see <http://www.gnu.org/licenses/>.
     19          
     20                                                ---
     21          
     22              A special exception to the GPL can be applied should you wish to distribute
     23              a combined work that includes ChibiOS/RT, without being obliged to provide
     24              the source code for any proprietary components. See the file exception.txt
     25              for full details of how and when the exception can be applied.
     26          */
     27          
     28          /**
     29           * @file    chvt.c
     30           * @brief   Time and Virtual Timers related code.
     31           *
     32           * @addtogroup time
     33           * @details Time and Virtual Timers related APIs and services.
     34           * @{
     35           */
     36          
     37          #include "ch.h"
     38          
     39          /**
     40           * @brief   Virtual timers delta list header.
     41           */

   \                                 In section .bss, align 4
     42          VTList vtlist;
   \                     vtlist:
   \   00000000                      DS8 16
     43          
     44          /**
     45           * @brief   Virtual Timers initialization.
     46           * @note    Internal use only.
     47           *
     48           * @notapi
     49           */

   \                                 In section .text, align 2, keep-with-next
     50          void _vt_init(void) {
     51          
     52            vtlist.vt_next = vtlist.vt_prev = (void *)&vtlist;
   \                     _vt_init:
   \   00000000   0x....             LDR.N    R0,??DataTable2
   \   00000002   0x....             LDR.N    R1,??DataTable2
   \   00000004   0x6048             STR      R0,[R1, #+4]
   \   00000006   0x....             LDR.N    R1,??DataTable2
   \   00000008   0x6008             STR      R0,[R1, #+0]
     53            vtlist.vt_time = (systime_t)-1;
   \   0000000A   0x....             LDR.N    R0,??DataTable2
   \   0000000C   0xF05F 0x31FF      MOVS     R1,#-1
   \   00000010   0x6081             STR      R1,[R0, #+8]
     54            vtlist.vt_systime = 0;
   \   00000012   0x....             LDR.N    R0,??DataTable2
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x60C1             STR      R1,[R0, #+12]
     55          }
   \   00000018   0x4770             BX       LR               ;; return
     56          
     57          /**
     58           * @brief   Enables a virtual timer.
     59           * @note    The associated function is invoked from interrupt context.
     60           *
     61           * @param[out] vtp      the @p VirtualTimer structure pointer
     62           * @param[in] time      the number of ticks before the operation timeouts, the
     63           *                      special values are handled as follow:
     64           *                      - @a TIME_INFINITE is allowed but interpreted as a
     65           *                        normal time specification.
     66           *                      - @a TIME_IMMEDIATE this value is not allowed.
     67           *                      .
     68           * @param[in] vtfunc    the timer callback function. After invoking the
     69           *                      callback the timer is disabled and the structure can
     70           *                      be disposed or reused.
     71           * @param[in] par       a parameter that will be passed to the callback
     72           *                      function
     73           *
     74           * @iclass
     75           */

   \                                 In section .text, align 2, keep-with-next
     76          void chVTSetI(VirtualTimer *vtp, systime_t time, vtfunc_t vtfunc, void *par) {
   \                     chVTSetI:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
     77            VirtualTimer *p;
     78          
     79            chDbgCheckClassI();
   \   0000000C   0x.... 0x....      BL       chDbgCheckClassI
     80            chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (time != TIME_IMMEDIATE),
     81                       "chVTSetI");
   \   00000010   0x2C00             CMP      R4,#+0
   \   00000012   0xD004             BEQ.N    ??chVTSetI_0
   \   00000014   0x0030             MOVS     R0,R6
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD001             BEQ.N    ??chVTSetI_0
   \   0000001A   0x2D00             CMP      R5,#+0
   \   0000001C   0xD104             BNE.N    ??chVTSetI_1
   \                     ??chVTSetI_0:
   \   0000001E   0x2251             MOVS     R2,#+81
   \   00000020   0x....             LDR.N    R1,??DataTable2_1
   \   00000022   0x....             LDR.N    R0,??DataTable2_2
   \   00000024   0x.... 0x....      BL       chDbgPanic3
     82          
     83            vtp->vt_par = par;
   \                     ??chVTSetI_1:
   \   00000028   0x6127             STR      R7,[R4, #+16]
     84            vtp->vt_func = vtfunc;
   \   0000002A   0x60E6             STR      R6,[R4, #+12]
     85            p = vtlist.vt_next;
   \   0000002C   0x....             LDR.N    R0,??DataTable2
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x4680             MOV      R8,R0
     86            while (p->vt_time < time) {
   \                     ??chVTSetI_2:
   \   00000032   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \   00000036   0x42A8             CMP      R0,R5
   \   00000038   0xD205             BCS.N    ??chVTSetI_3
     87              time -= p->vt_time;
   \   0000003A   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \   0000003E   0x1A2D             SUBS     R5,R5,R0
     88              p = p->vt_next;
   \   00000040   0xF8D8 0x8000      LDR      R8,[R8, #+0]
   \   00000044   0xE7F5             B.N      ??chVTSetI_2
     89            }
     90          
     91            vtp->vt_prev = (vtp->vt_next = p)->vt_prev;
   \                     ??chVTSetI_3:
   \   00000046   0xF8C4 0x8000      STR      R8,[R4, #+0]
   \   0000004A   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \   0000004E   0x6060             STR      R0,[R4, #+4]
     92            vtp->vt_prev->vt_next = p->vt_prev = vtp;
   \   00000050   0xF8C8 0x4004      STR      R4,[R8, #+4]
   \   00000054   0x6860             LDR      R0,[R4, #+4]
   \   00000056   0x6004             STR      R4,[R0, #+0]
     93            vtp->vt_time = time;
   \   00000058   0x60A5             STR      R5,[R4, #+8]
     94            if (p != (void *)&vtlist)
   \   0000005A   0x....             LDR.N    R0,??DataTable2
   \   0000005C   0x4580             CMP      R8,R0
   \   0000005E   0xD004             BEQ.N    ??chVTSetI_4
     95              p->vt_time -= time;
   \   00000060   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \   00000064   0x1B40             SUBS     R0,R0,R5
   \   00000066   0xF8C8 0x0008      STR      R0,[R8, #+8]
     96          }
   \                     ??chVTSetI_4:
   \   0000006A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
     97          
     98          /**
     99           * @brief   Disables a Virtual Timer.
    100           * @note    The timer MUST be active when this function is invoked.
    101           *
    102           * @param[in] vtp       the @p VirtualTimer structure pointer
    103           *
    104           * @iclass
    105           */

   \                                 In section .text, align 2, keep-with-next
    106          void chVTResetI(VirtualTimer *vtp) {
   \                     chVTResetI:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    107          
    108            chDbgCheckClassI();
   \   00000004   0x.... 0x....      BL       chDbgCheckClassI
    109            chDbgCheck(vtp != NULL, "chVTResetI");
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD104             BNE.N    ??chVTResetI_0
   \   0000000C   0x226D             MOVS     R2,#+109
   \   0000000E   0x....             LDR.N    R1,??DataTable2_1
   \   00000010   0x....             LDR.N    R0,??DataTable2_3
   \   00000012   0x.... 0x....      BL       chDbgPanic3
    110            chDbgAssert(vtp->vt_func != NULL,
    111                        "chVTResetI(), #1",
    112                        "timer not set or already triggered");
   \                     ??chVTResetI_0:
   \   00000016   0x68E0             LDR      R0,[R4, #+12]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD102             BNE.N    ??chVTResetI_1
   \   0000001C   0x....             LDR.N    R0,??DataTable2_4
   \   0000001E   0x.... 0x....      BL       chDbgPanic
    113          
    114            if (vtp->vt_next != (void *)&vtlist)
   \                     ??chVTResetI_1:
   \   00000022   0x6820             LDR      R0,[R4, #+0]
   \   00000024   0x....             LDR.N    R1,??DataTable2
   \   00000026   0x4288             CMP      R0,R1
   \   00000028   0xD005             BEQ.N    ??chVTResetI_2
    115              vtp->vt_next->vt_time += vtp->vt_time;
   \   0000002A   0x6820             LDR      R0,[R4, #+0]
   \   0000002C   0x6880             LDR      R0,[R0, #+8]
   \   0000002E   0x68A1             LDR      R1,[R4, #+8]
   \   00000030   0x1808             ADDS     R0,R1,R0
   \   00000032   0x6821             LDR      R1,[R4, #+0]
   \   00000034   0x6088             STR      R0,[R1, #+8]
    116            vtp->vt_prev->vt_next = vtp->vt_next;
   \                     ??chVTResetI_2:
   \   00000036   0x6860             LDR      R0,[R4, #+4]
   \   00000038   0x6821             LDR      R1,[R4, #+0]
   \   0000003A   0x6001             STR      R1,[R0, #+0]
    117            vtp->vt_next->vt_prev = vtp->vt_prev;
   \   0000003C   0x6820             LDR      R0,[R4, #+0]
   \   0000003E   0x6861             LDR      R1,[R4, #+4]
   \   00000040   0x6041             STR      R1,[R0, #+4]
    118            vtp->vt_func = (vtfunc_t)NULL;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x60E0             STR      R0,[R4, #+12]
    119          }
   \   00000046   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     vtlist

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     `?<Constant "F:\\\\stuff\\\\rusefi_sourc...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     `?<Constant "\\"chVTSetI\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     `?<Constant "\\"chVTResetI\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     `?<Constant "chVTResetI(), #1">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"chVTSetI\\"()">`:
   \   00000000   0x22 0x63          DC8 "\"chVTSetI\"()"
   \              0x68 0x56    
   \              0x54 0x53    
   \              0x65 0x74    
   \              0x49 0x22    
   \              0x28 0x29    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "F:\\\\stuff\\\\rusefi_sourc...">`:
   \   00000000   0x46 0x3A          DC8 46H, 3AH, 5CH, 73H, 74H, 75H, 66H, 66H
   \              0x5C 0x73    
   \              0x74 0x75    
   \              0x66 0x66    
   \   00000008   0x5C 0x72          DC8 5CH, 72H, 75H, 73H, 65H, 66H, 69H, 5FH
   \              0x75 0x73    
   \              0x65 0x66    
   \              0x69 0x5F    
   \   00000010   0x73 0x6F          DC8 73H, 6FH, 75H, 72H, 63H, 65H, 66H, 6FH
   \              0x75 0x72    
   \              0x63 0x65    
   \              0x66 0x6F    
   \   00000018   0x72 0x67          DC8 72H, 67H, 65H, 5CH, 66H, 69H, 72H, 6DH
   \              0x65 0x5C    
   \              0x66 0x69    
   \              0x72 0x6D    
   \   00000020   0x77 0x61          DC8 77H, 61H, 72H, 65H, 5CH, 63H, 68H, 69H
   \              0x72 0x65    
   \              0x5C 0x63    
   \              0x68 0x69    
   \   00000028   0x62 0x69          DC8 62H, 69H, 6FH, 73H, 5CH, 6FH, 73H, 5CH
   \              0x6F 0x73    
   \              0x5C 0x6F    
   \              0x73 0x5C    
   \   00000030   0x6B 0x65          DC8 6BH, 65H, 72H, 6EH, 65H, 6CH, 5CH, 73H
   \              0x72 0x6E    
   \              0x65 0x6C    
   \              0x5C 0x73    
   \   00000038   0x72 0x63          DC8 72H, 63H, 5CH, 63H, 68H, 76H, 74H, 2EH
   \              0x5C 0x63    
   \              0x68 0x76    
   \              0x74 0x2E    
   \   00000040   0x63 0x00          DC8 63H, 0
   \   00000042   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"chVTResetI\\"()">`:
   \   00000000   0x22 0x63          DC8 "\"chVTResetI\"()"
   \              0x68 0x56    
   \              0x54 0x52    
   \              0x65 0x73    
   \              0x65 0x74    
   \              0x49 0x22    
   \              0x28 0x29    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "chVTResetI(), #1">`:
   \   00000000   0x63 0x68          DC8 "chVTResetI(), #1"
   \              0x56 0x54    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x49    
   \              0x28 0x29    
   \              0x2C 0x20    
   \              0x23 0x31    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    120          
    121          /** @} */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   _vt_init
       8   chVTResetI
         8   -> chDbgCheckClassI
         8   -> chDbgPanic
         8   -> chDbgPanic3
      24   chVTSetI
        24   -> chDbgCheckClassI
        24   -> chDbgPanic3


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      68  ?<Constant "F:\\stuff\\rusefi_sourc...">
      16  ?<Constant "\"chVTResetI\"()">
      16  ?<Constant "\"chVTSetI\"()">
      20  ?<Constant "chVTResetI(), #1">
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
      26  _vt_init
      72  chVTResetI
     110  chVTSetI
      16  vtlist

 
  16 bytes in section .bss
 120 bytes in section .rodata
 228 bytes in section .text
 
 228 bytes of CODE  memory
 120 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: none
