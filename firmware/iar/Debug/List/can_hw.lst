###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:40 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\hw_layer\can_hw. #
#                       cpp                                                   #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\hw_layer\can_hw. #
#                       cpp -lCN F:\stuff\rusefi_sourceforge\firmware\iar\Deb #
#                       ug\List\ -lA F:\stuff\rusefi_sourceforge\firmware\iar #
#                       \Debug\List\ -o F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\Debug\Obj\ --no_cse --no_unroll --no_inline       #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\c #
#                       an_hw.lst                                             #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\ca #
#                       n_hw.o                                                #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\hw_layer\can_hw.cpp
      1          /**
      2           * @file	can_hw.cpp
      3           * @brief	CAN bus low level code
      4           *
      5           * todo: this file should be split into two - one for CAN transport level ONLY and
      6           * another one with actual messages
      7           *
      8           * @date Dec 11, 2013
      9           * @author Andrey Belomutskiy, (c) 2012-2015
     10           */
     11          
     12          #include "main.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x002A             MOVS     R2,R5
   \   0000000A   0x0031             MOVS     R1,R6
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memset
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
     13          #include "can_hw.h"
     14          #include "string.h"
     15          #include "obd2.h"
     16          
     17          #if EFI_PROD_CODE || defined(__DOXYGEN__)
     18          
     19          #include "pin_repository.h"
     20          #include "engine_state.h"
     21          #include "can_header.h"
     22          #include "engine_configuration.h"
     23          #include "vehicle_speed.h"
     24          #endif /* EFI_PROD_CODE */
     25          
     26          #if EFI_CAN_SUPPORT || defined(__DOXYGEN__)
     27          
     28          EXTERN_ENGINE
     29          ;
     30          

   \                                 In section .bss, align 4
     31          static int canReadCounter = 0;
   \                     canReadCounter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     32          static int canWriteOk = 0;
   \                     canWriteOk:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     33          static int canWriteNotOk = 0;
   \                     canWriteNotOk:
   \   00000000                      DS8 4

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine:
   \   00000000   0xB580             PUSH     {R7,LR}
     34          static LoggingWithStorage logger("CAN driver");
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   0000000A   0x.... 0x....      BL       _ZN18LoggingWithStorageC1EPKc
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     logger:
   \   00000000                      DS8 260

   \                                 In section .bss, align 8
     35          static THD_WORKING_AREA(canTreadStack, UTILITY_THREAD_STACK_SIZE);
   \                     canTreadStack:
   \   00000000                      DS8 712
     36          
     37          /*
     38           * 500KBaud
     39           * automatic wakeup
     40           * automatic recover from abort mode
     41           * See section 22.7.7 on the STM32 reference manual.
     42           *
     43           * speed = 42000000 / (BRP + 1) / (1 + TS1 + 1 + TS2 + 1)
     44           * 42000000 / 7 / 12 = 500000
     45           *
     46           *
     47           */

   \                                 In section .rodata, align 4
     48          static const CANConfig canConfig = {
   \                     canConfig:
   \   00000000   0x00000064         DC32 100, 1572870
   \              0x00180006   
     49          CAN_MCR_ABOM | CAN_MCR_AWUM | CAN_MCR_TXFP,
     50          CAN_BTR_SJW(0) | CAN_BTR_TS2(1) | CAN_BTR_TS1(8) | CAN_BTR_BRP(6) };
     51          

   \                                 In section .bss, align 4
     52          static CANRxFrame rxBuffer;
   \                     rxBuffer:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     53          CANTxFrame txmsg;
   \                     txmsg:
   \   00000000                      DS8 16
     54          
     55          // todo: we would need a data structure here

   \                                 In section .bss, align 4
     56          static int engine_rpm = 0;
   \                     engine_rpm:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     57          static float engine_clt = 0;
   \                     engine_clt:
   \   00000000                      DS8 4
     58          

   \                                 In section .data, align 4
     59          static int rand = 1212321311;
   \                     rand:
   \   00000000   0x48428E1F         DC32 1212321311
     60          
     61          //static CANDriver *getCanDevice() {
     62          //	if(board)
     63          //}
     64          

   \                                 In section .text, align 2, keep-with-next
     65          static void printPacket(CANRxFrame *rx) {
   \                     _Z11printPacketP10CANRxFrame:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   \   00000004   0x0004             MOVS     R4,R0
     66          //	scheduleMsg(&logger, "CAN FMI %x", rx->FMI);
     67          //	scheduleMsg(&logger, "TIME %x", rx->TIME);
     68          	scheduleMsg(&logger, "SID %x/%x %x %x %x %x %x %x %x %x", rx->SID, rx->DLC, rx->data8[0], rx->data8[1],
     69          			rx->data8[2], rx->data8[3], rx->data8[4], rx->data8[5], rx->data8[6], rx->data8[7]);
   \   00000006   0x7CE0             LDRB     R0,[R4, #+19]
   \   00000008   0x9007             STR      R0,[SP, #+28]
   \   0000000A   0x7CA0             LDRB     R0,[R4, #+18]
   \   0000000C   0x9006             STR      R0,[SP, #+24]
   \   0000000E   0x7C60             LDRB     R0,[R4, #+17]
   \   00000010   0x9005             STR      R0,[SP, #+20]
   \   00000012   0x7C20             LDRB     R0,[R4, #+16]
   \   00000014   0x9004             STR      R0,[SP, #+16]
   \   00000016   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000018   0x9003             STR      R0,[SP, #+12]
   \   0000001A   0x7BA0             LDRB     R0,[R4, #+14]
   \   0000001C   0x9002             STR      R0,[SP, #+8]
   \   0000001E   0x7B60             LDRB     R0,[R4, #+13]
   \   00000020   0x9001             STR      R0,[SP, #+4]
   \   00000022   0x7B20             LDRB     R0,[R4, #+12]
   \   00000024   0x9000             STR      R0,[SP, #+0]
   \   00000026   0x7920             LDRB     R0,[R4, #+4]
   \   00000028   0xF010 0x030F      ANDS     R3,R0,#0xF
   \   0000002C   0x68A0             LDR      R0,[R4, #+8]
   \   0000002E   0x0542             LSLS     R2,R0,#+21       ;; ZeroExtS R2,R0,#+21,#+21
   \   00000030   0x0D52             LSRS     R2,R2,#+21
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable13_3
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   0000003A   0x.... 0x....      BL       scheduleMsg
     70          
     71          	if (rx->SID == CAN_BMW_E46_CLUSTER_STATUS) {
   \   0000003E   0x68A0             LDR      R0,[R4, #+8]
   \   00000040   0x0540             LSLS     R0,R0,#+21       ;; ZeroExtS R0,R0,#+21,#+21
   \   00000042   0x0D40             LSRS     R0,R0,#+21
   \   00000044   0xF240 0x6113      MOVW     R1,#+1555
   \   00000048   0x4288             CMP      R0,R1
   \   0000004A   0xD12A             BNE.N    ??printPacket_0
     72          		int odometerKm = 10 * (rx->data8[1] << 8) + rx->data8[0];
   \   0000004C   0x7B60             LDRB     R0,[R4, #+13]
   \   0000004E   0x0200             LSLS     R0,R0,#+8
   \   00000050   0x210A             MOVS     R1,#+10
   \   00000052   0x7B22             LDRB     R2,[R4, #+12]
   \   00000054   0xFB01 0x2500      MLA      R5,R1,R0,R2
     73          		int odometerMi = (int) (odometerKm * 0.621371);
   \   00000058   0x0028             MOVS     R0,R5
   \   0000005A   0x.... 0x....      BL       __aeabi_i2d
   \   0000005E   0x.... 0x....      LDR.W    R2,??DataTable13_4  ;; 0x6f75d9a1
   \   00000062   0x.... 0x....      LDR.W    R3,??DataTable13_5  ;; 0x3fe3e245
   \   00000066   0x.... 0x....      BL       __aeabi_dmul
   \   0000006A   0x.... 0x....      BL       __aeabi_d2iz
   \   0000006E   0x0006             MOVS     R6,R0
     74          		scheduleMsg(&logger, "GOT odometerKm %d", odometerKm);
   \   00000070   0x002A             MOVS     R2,R5
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable13_6
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   0000007A   0x.... 0x....      BL       scheduleMsg
     75          		scheduleMsg(&logger, "GOT odometerMi %d", odometerMi);
   \   0000007E   0x0032             MOVS     R2,R6
   \   00000080   0x.... 0x....      LDR.W    R1,??DataTable13_7
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   00000088   0x.... 0x....      BL       scheduleMsg
     76          		int timeValue = (rx->data8[4] << 8) + rx->data8[3];
   \   0000008C   0x7C20             LDRB     R0,[R4, #+16]
   \   0000008E   0x0200             LSLS     R0,R0,#+8
   \   00000090   0x7BE1             LDRB     R1,[R4, #+15]
   \   00000092   0x1847             ADDS     R7,R0,R1
     77          		scheduleMsg(&logger, "GOT time %d", timeValue);
   \   00000094   0x003A             MOVS     R2,R7
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable13_8
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   0000009E   0x.... 0x....      BL       scheduleMsg
     78          	}
     79          }
   \                     ??printPacket_0:
   \   000000A2   0xB009             ADD      SP,SP,#+36
   \   000000A4   0xBDF0             POP      {R4-R7,PC}       ;; return
     80          

   \                                 In section .text, align 2, keep-with-next
     81          static void setShortValue(CANTxFrame *txmsg, int value, int offset) {
   \                     _Z13setShortValueP10CANTxFrameii:
   \   00000000   0xB410             PUSH     {R4}
     82          	txmsg->data8[offset] = value;
   \   00000002   0x1813             ADDS     R3,R2,R0
   \   00000004   0x7219             STRB     R1,[R3, #+8]
     83          	txmsg->data8[offset + 1] = value >> 8;
   \   00000006   0x1813             ADDS     R3,R2,R0
   \   00000008   0x120C             ASRS     R4,R1,#+8
   \   0000000A   0x725C             STRB     R4,[R3, #+9]
     84          }
   \   0000000C   0xBC10             POP      {R4}
   \   0000000E   0x4770             BX       LR               ;; return
     85          

   \                                 In section .text, align 2, keep-with-next
     86          void setTxBit(int offset, int index) {
     87          	txmsg.data8[offset] = txmsg.data8[offset] | (1 << index);
   \                     _Z8setTxBitii:
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable13_9
   \   00000004   0x1882             ADDS     R2,R0,R2
   \   00000006   0x7A12             LDRB     R2,[R2, #+8]
   \   00000008   0x2301             MOVS     R3,#+1
   \   0000000A   0x408B             LSLS     R3,R3,R1
   \   0000000C   0x431A             ORRS     R2,R3,R2
   \   0000000E   0x.... 0x....      LDR.W    R3,??DataTable13_9
   \   00000012   0x18C3             ADDS     R3,R0,R3
   \   00000014   0x721A             STRB     R2,[R3, #+8]
     88          }
   \   00000016   0x4770             BX       LR               ;; return
     89          

   \                                 In section .text, align 2, keep-with-next
     90          void commonTxInit(int eid) {
   \                     _Z12commonTxIniti:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     91          	memset(&txmsg, 0, sizeof(txmsg));
   \   00000004   0x2210             MOVS     R2,#+16
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable13_9
   \   0000000C   0x.... 0x....      BL       memset
     92          	txmsg.IDE = CAN_IDE_STD;
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable13_9
   \   00000014   0x7800             LDRB     R0,[R0, #+0]
   \   00000016   0xF010 0x00DF      ANDS     R0,R0,#0xDF
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable13_9
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
     93          	txmsg.EID = eid;
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable13_9
   \   00000024   0x6840             LDR      R0,[R0, #+4]
   \   00000026   0xF364 0x001C      BFI      R0,R4,#+0,#+29
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable13_9
   \   0000002E   0x6048             STR      R0,[R1, #+4]
     94          	txmsg.RTR = CAN_RTR_DATA;
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable13_9
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0xF010 0x00EF      ANDS     R0,R0,#0xEF
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable13_9
   \   0000003E   0x7008             STRB     R0,[R1, #+0]
     95          	txmsg.DLC = 8;
   \   00000040   0x2008             MOVS     R0,#+8
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable13_9
   \   00000046   0x7809             LDRB     R1,[R1, #+0]
   \   00000048   0xF360 0x0103      BFI      R1,R0,#+0,#+4
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable13_9
   \   00000050   0x7001             STRB     R1,[R0, #+0]
     96          }
   \   00000052   0xBD10             POP      {R4,PC}          ;; return
     97          

   \                                 In section .text, align 2, keep-with-next
     98          void sendMessage2(int size) {
   \                     _Z12sendMessage2i:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     99          	txmsg.DLC = size;
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable13_9
   \   0000000A   0x7809             LDRB     R1,[R1, #+0]
   \   0000000C   0xF360 0x0103      BFI      R1,R0,#+0,#+4
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable13_9
   \   00000014   0x7001             STRB     R1,[R0, #+0]
    100          	msg_t result = canTransmit(&EFI_CAN_DEVICE, CAN_ANY_MAILBOX, &txmsg, TIME_INFINITE);
   \   00000016   0xF05F 0x33FF      MOVS     R3,#-1
   \   0000001A   0x.... 0x....      LDR.W    R2,??DataTable13_9
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable13_10
   \   00000024   0x.... 0x....      BL       canTransmit
    101          	if (result == RDY_OK) {
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD107             BNE.N    ??sendMessage2_0
    102          		canWriteOk++;
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable13_11
   \   00000030   0x6809             LDR      R1,[R1, #+0]
   \   00000032   0x1C49             ADDS     R1,R1,#+1
   \   00000034   0x.... 0x....      LDR.W    R2,??DataTable13_11
   \   00000038   0x6011             STR      R1,[R2, #+0]
   \   0000003A   0xE006             B.N      ??sendMessage2_1
    103          	} else {
    104          		canWriteNotOk++;
   \                     ??sendMessage2_0:
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable13_12
   \   00000040   0x6809             LDR      R1,[R1, #+0]
   \   00000042   0x1C49             ADDS     R1,R1,#+1
   \   00000044   0x.... 0x....      LDR.W    R2,??DataTable13_12
   \   00000048   0x6011             STR      R1,[R2, #+0]
    105          	}
    106          }
   \                     ??sendMessage2_1:
   \   0000004A   0xBD10             POP      {R4,PC}          ;; return
    107          

   \                                 In section .text, align 2, keep-with-next
    108          void sendMessage() {
   \                     _Z11sendMessagev:
   \   00000000   0xB580             PUSH     {R7,LR}
    109          	sendMessage2(8);
   \   00000002   0x2008             MOVS     R0,#+8
   \   00000004   0x.... 0x....      BL       _Z12sendMessage2i
    110          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    111          
    112          #if EFI_PROD_CODE
    113          

   \                                 In section .text, align 2, keep-with-next
    114          static void canDashboardBMW(void) {
   \                     _Z15canDashboardBMWv:
   \   00000000   0xB510             PUSH     {R4,LR}
    115          	//BMW Dashboard
    116          	commonTxInit(CAN_BMW_E46_SPEED);
   \   00000002   0xF240 0x1053      MOVW     R0,#+339
   \   00000006   0x.... 0x....      BL       _Z12commonTxIniti
    117          	setShortValue(&txmsg, 10 * 8, 1);
   \   0000000A   0x2201             MOVS     R2,#+1
   \   0000000C   0x2150             MOVS     R1,#+80
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable13_9
   \   00000012   0x.... 0x....      BL       _Z13setShortValueP10CANTxFrameii
    118          	sendMessage();
   \   00000016   0x.... 0x....      BL       _Z11sendMessagev
    119          
    120          	commonTxInit(CAN_BMW_E46_RPM);
   \   0000001A   0xF240 0x3016      MOVW     R0,#+790
   \   0000001E   0x.... 0x....      BL       _Z12commonTxIniti
    121          	setShortValue(&txmsg, (int) (engine_rpm * 6.4), 2);
   \   00000022   0x2202             MOVS     R2,#+2
   \   00000024   0x0014             MOVS     R4,R2
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable13_13
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x.... 0x....      BL       __aeabi_i2d
   \   00000030   0x.... 0x....      LDR.W    R2,??DataTable13_14  ;; 0x9999999a
   \   00000034   0x.... 0x....      LDR.W    R3,??DataTable13_15  ;; 0x40199999
   \   00000038   0x.... 0x....      BL       __aeabi_dmul
   \   0000003C   0x.... 0x....      BL       __aeabi_d2iz
   \   00000040   0x0001             MOVS     R1,R0
   \   00000042   0x0022             MOVS     R2,R4
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable13_9
   \   00000048   0x.... 0x....      BL       _Z13setShortValueP10CANTxFrameii
    122          	sendMessage();
   \   0000004C   0x.... 0x....      BL       _Z11sendMessagev
    123          
    124          	commonTxInit(CAN_BMW_E46_DME2);
   \   00000050   0xF240 0x3029      MOVW     R0,#+809
   \   00000054   0x.... 0x....      BL       _Z12commonTxIniti
    125          	setShortValue(&txmsg, (int) ((engine_clt + 48.373) / 0.75), 1);
   \   00000058   0x2201             MOVS     R2,#+1
   \   0000005A   0x0014             MOVS     R4,R2
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable13_16
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0x.... 0x....      BL       __aeabi_f2d
   \   00000066   0x.... 0x....      LDR.W    R2,??DataTable13_17  ;; 0x76c8b439
   \   0000006A   0x.... 0x....      LDR.W    R3,??DataTable13_18  ;; 0x40482fbe
   \   0000006E   0x.... 0x....      BL       __aeabi_dadd
   \   00000072   0x2200             MOVS     R2,#+0
   \   00000074   0x.... 0x....      LDR.W    R3,??DataTable13_19  ;; 0x3fe80000
   \   00000078   0x.... 0x....      BL       __aeabi_ddiv
   \   0000007C   0x.... 0x....      BL       __aeabi_d2iz
   \   00000080   0x0001             MOVS     R1,R0
   \   00000082   0x0022             MOVS     R2,R4
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable13_9
   \   00000088   0x.... 0x....      BL       _Z13setShortValueP10CANTxFrameii
    126          	sendMessage();
   \   0000008C   0x.... 0x....      BL       _Z11sendMessagev
    127          }
   \   00000090   0xBD10             POP      {R4,PC}          ;; return
    128          

   \                                 In section .text, align 4, keep-with-next
    129          static void canMazdaRX8(void) {
   \                     _Z11canMazdaRX8v:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
    130          	rand = rand * 17;
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable13_20
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x2111             MOVS     R1,#+17
   \   0000000E   0x4348             MULS     R0,R1,R0
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable13_20
   \   00000014   0x6008             STR      R0,[R1, #+0]
    131          
    132          //	commonTxInit(0x300);
    133          //	sendMessage2(0);
    134          
    135          	commonTxInit(CAN_MAZDA_RX_RPM_SPEED);
   \   00000016   0xF240 0x2001      MOVW     R0,#+513
   \   0000001A   0x.... 0x....      BL       _Z12commonTxIniti
    136          
    137          #if EFI_VEHICLE_SPEED || defined(__DOXYGEN__)
    138          	float kph = getVehicleSpeed();
   \   0000001E   0x.... 0x....      BL       _Z15getVehicleSpeedv
   \   00000022   0xEEB0 0x8A40      VMOV.F32 S16,S0
    139          
    140          	setShortValue(&txmsg, SWAP_UINT16(engine_rpm * 4), 0);
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable13_13
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x0080             LSLS     R0,R0,#+2
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable13_13
   \   00000034   0x6809             LDR      R1,[R1, #+0]
   \   00000036   0x0089             LSLS     R1,R1,#+2
   \   00000038   0x1209             ASRS     R1,R1,#+8
   \   0000003A   0xEA51 0x2100      ORRS     R1,R1,R0, LSL #+8
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable13_9
   \   00000042   0x.... 0x....      BL       _Z13setShortValueP10CANTxFrameii
    141          	setShortValue(&txmsg, 0xFFFF, 2);
   \   00000046   0x2202             MOVS     R2,#+2
   \   00000048   0xF64F 0x71FF      MOVW     R1,#+65535
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable13_9
   \   00000050   0x.... 0x....      BL       _Z13setShortValueP10CANTxFrameii
    142          	setShortValue(&txmsg, SWAP_UINT16((int )(100 * kph + 10000)), 4);
   \   00000054   0x2204             MOVS     R2,#+4
   \   00000056   0xED9F 0x....      VLDR.W   S0,??DataTable11  ;; 0x42c80000
   \   0000005A   0xEDDF 0x....      VLDR.W   S1,??DataTable11_1  ;; 0x461c4000
   \   0000005E   0xEE48 0x0A00      VMLA.F32 S1,S16,S0
   \   00000062   0xEEBD 0x0AE0      VCVT.S32.F32 S0,S1
   \   00000066   0xEE10 0x0A10      VMOV     R0,S0
   \   0000006A   0xED9F 0x....      VLDR.W   S0,??DataTable11  ;; 0x42c80000
   \   0000006E   0xEDDF 0x....      VLDR.W   S1,??DataTable11_1  ;; 0x461c4000
   \   00000072   0xEE48 0x0A00      VMLA.F32 S1,S16,S0
   \   00000076   0xEEBD 0x0AE0      VCVT.S32.F32 S0,S1
   \   0000007A   0xEE10 0x1A10      VMOV     R1,S0
   \   0000007E   0x1209             ASRS     R1,R1,#+8
   \   00000080   0xEA51 0x2100      ORRS     R1,R1,R0, LSL #+8
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable13_9
   \   00000088   0x.... 0x....      BL       _Z13setShortValueP10CANTxFrameii
    143          	setShortValue(&txmsg, 0, 6);
   \   0000008C   0x2206             MOVS     R2,#+6
   \   0000008E   0x2100             MOVS     R1,#+0
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable13_9
   \   00000094   0x.... 0x....      BL       _Z13setShortValueP10CANTxFrameii
    144          	sendMessage();
   \   00000098   0x.... 0x....      BL       _Z11sendMessagev
    145          #endif /* EFI_VEHICLE_SPEED */
    146          
    147          	commonTxInit(CAN_MAZDA_RX_STATUS_2);
   \   0000009C   0xF44F 0x6084      MOV      R0,#+1056
   \   000000A0   0x.... 0x....      BL       _Z12commonTxIniti
    148          	txmsg.data8[0] = 0xFE; //Unknown
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable13_9
   \   000000A8   0x21FE             MOVS     R1,#+254
   \   000000AA   0x7201             STRB     R1,[R0, #+8]
    149          	txmsg.data8[1] = 0xFE; //Unknown
   \   000000AC   0x....             LDR.N    R0,??DataTable13_9
   \   000000AE   0x21FE             MOVS     R1,#+254
   \   000000B0   0x7241             STRB     R1,[R0, #+9]
    150          	txmsg.data8[2] = 0xFE; //Unknown
   \   000000B2   0x....             LDR.N    R0,??DataTable13_9
   \   000000B4   0x21FE             MOVS     R1,#+254
   \   000000B6   0x7281             STRB     R1,[R0, #+10]
    151          	txmsg.data8[3] = 0x34; //DSC OFF in combo with byte 5 Live data only seen 0x34
   \   000000B8   0x....             LDR.N    R0,??DataTable13_9
   \   000000BA   0x2134             MOVS     R1,#+52
   \   000000BC   0x72C1             STRB     R1,[R0, #+11]
    152          	txmsg.data8[4] = 0x00; // B01000000; // Brake warning B00001000;  //ABS warning
   \   000000BE   0x....             LDR.N    R0,??DataTable13_9
   \   000000C0   0x2100             MOVS     R1,#+0
   \   000000C2   0x7301             STRB     R1,[R0, #+12]
    153          	txmsg.data8[5] = 0x40; // TCS in combo with byte 3
   \   000000C4   0x....             LDR.N    R0,??DataTable13_9
   \   000000C6   0x2140             MOVS     R1,#+64
   \   000000C8   0x7341             STRB     R1,[R0, #+13]
    154          	txmsg.data8[6] = 0x00; // Unknown
   \   000000CA   0x....             LDR.N    R0,??DataTable13_9
   \   000000CC   0x2100             MOVS     R1,#+0
   \   000000CE   0x7381             STRB     R1,[R0, #+14]
    155          	txmsg.data8[7] = 0x00; // Unused
   \   000000D0   0x....             LDR.N    R0,??DataTable13_9
   \   000000D2   0x2100             MOVS     R1,#+0
   \   000000D4   0x73C1             STRB     R1,[R0, #+15]
    156          
    157          	commonTxInit(CAN_MAZDA_RX_STATUS_2);
   \   000000D6   0xF44F 0x6084      MOV      R0,#+1056
   \   000000DA   0x.... 0x....      BL       _Z12commonTxIniti
    158          	txmsg.data8[0] = 0x98; //temp gauge //~170 is red, ~165 last bar, 152 centre, 90 first bar, 92 second bar
   \   000000DE   0x....             LDR.N    R0,??DataTable13_9
   \   000000E0   0x2198             MOVS     R1,#+152
   \   000000E2   0x7201             STRB     R1,[R0, #+8]
    159          	txmsg.data8[1] = 0x00; // something to do with trip meter 0x10, 0x11, 0x17 increments by 0.1 miles
   \   000000E4   0x....             LDR.N    R0,??DataTable13_9
   \   000000E6   0x2100             MOVS     R1,#+0
   \   000000E8   0x7241             STRB     R1,[R0, #+9]
    160          	txmsg.data8[2] = 0x00; // unknown
   \   000000EA   0x....             LDR.N    R0,??DataTable13_9
   \   000000EC   0x2100             MOVS     R1,#+0
   \   000000EE   0x7281             STRB     R1,[R0, #+10]
    161          	txmsg.data8[3] = 0x00; //unknown
   \   000000F0   0x....             LDR.N    R0,??DataTable13_9
   \   000000F2   0x2100             MOVS     R1,#+0
   \   000000F4   0x72C1             STRB     R1,[R0, #+11]
    162          	txmsg.data8[4] = 0x01; //Oil Pressure (not really a gauge)
   \   000000F6   0x....             LDR.N    R0,??DataTable13_9
   \   000000F8   0x2101             MOVS     R1,#+1
   \   000000FA   0x7301             STRB     R1,[R0, #+12]
    163          	txmsg.data8[5] = 0x00; //check engine light
   \   000000FC   0x....             LDR.N    R0,??DataTable13_9
   \   000000FE   0x2100             MOVS     R1,#+0
   \   00000100   0x7341             STRB     R1,[R0, #+13]
    164          	txmsg.data8[6] = 0x00; //Coolant, oil and battery
   \   00000102   0x....             LDR.N    R0,??DataTable13_9
   \   00000104   0x2100             MOVS     R1,#+0
   \   00000106   0x7381             STRB     R1,[R0, #+14]
    165          	txmsg.data8[7] = 0x00; //unused
   \   00000108   0x....             LDR.N    R0,??DataTable13_9
   \   0000010A   0x2100             MOVS     R1,#+0
   \   0000010C   0x73C1             STRB     R1,[R0, #+15]
    166          	sendMessage();
   \   0000010E   0x.... 0x....      BL       _Z11sendMessagev
    167          }
   \   00000112   0xECBD 0x8B02      VPOP     {D8}
   \   00000116   0xBD01             POP      {R0,PC}          ;; return
    168          

   \                                 In section .text, align 4, keep-with-next
    169          static void canDashboardFiat(void) {
   \                     _Z16canDashboardFiatv:
   \   00000000   0xB580             PUSH     {R7,LR}
    170          	//Fiat Dashboard
    171          	commonTxInit(CAN_FIAT_MOTOR_INFO);
   \   00000002   0xF240 0x5061      MOVW     R0,#+1377
   \   00000006   0x.... 0x....      BL       _Z12commonTxIniti
    172          	setShortValue(&txmsg, (int) (engine_clt - 40), 3); //Coolant Temp
   \   0000000A   0x2203             MOVS     R2,#+3
   \   0000000C   0x....             LDR.N    R0,??DataTable13_16
   \   0000000E   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000012   0xEDDF 0x....      VLDR.W   S1,??DataTable12  ;; 0xc2200000
   \   00000016   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   0000001A   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   0000001E   0xEE10 0x1A10      VMOV     R1,S0
   \   00000022   0x....             LDR.N    R0,??DataTable13_9
   \   00000024   0x.... 0x....      BL       _Z13setShortValueP10CANTxFrameii
    173          	setShortValue(&txmsg, engine_rpm / 32, 6); //RPM
   \   00000028   0x2206             MOVS     R2,#+6
   \   0000002A   0x....             LDR.N    R0,??DataTable13_13
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x2120             MOVS     R1,#+32
   \   00000030   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \   00000034   0x....             LDR.N    R0,??DataTable13_9
   \   00000036   0x.... 0x....      BL       _Z13setShortValueP10CANTxFrameii
    174          	sendMessage();
   \   0000003A   0x.... 0x....      BL       _Z11sendMessagev
    175          }
   \   0000003E   0xBD01             POP      {R0,PC}          ;; return
    176          

   \                                 In section .text, align 2, keep-with-next
    177          static void canDashboardVAG(void) {
   \                     _Z15canDashboardVAGv:
   \   00000000   0xB510             PUSH     {R4,LR}
    178          	//VAG Dashboard
    179          	commonTxInit(CAN_VAG_RPM);
   \   00000002   0xF44F 0x7020      MOV      R0,#+640
   \   00000006   0x.... 0x....      BL       _Z12commonTxIniti
    180          	setShortValue(&txmsg, engine_rpm * 4, 2); //RPM
   \   0000000A   0x2202             MOVS     R2,#+2
   \   0000000C   0x....             LDR.N    R0,??DataTable13_13
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x0081             LSLS     R1,R0,#+2
   \   00000012   0x....             LDR.N    R0,??DataTable13_9
   \   00000014   0x.... 0x....      BL       _Z13setShortValueP10CANTxFrameii
    181          	sendMessage();
   \   00000018   0x.... 0x....      BL       _Z11sendMessagev
    182          
    183          	commonTxInit(CAN_VAG_CLT);
   \   0000001C   0xF240 0x2089      MOVW     R0,#+649
   \   00000020   0x.... 0x....      BL       _Z12commonTxIniti
    184          	setShortValue(&txmsg, (int) ((engine_clt + 48.373) / 0.75), 1); //Coolant Temp
   \   00000024   0x2201             MOVS     R2,#+1
   \   00000026   0x0014             MOVS     R4,R2
   \   00000028   0x....             LDR.N    R0,??DataTable13_16
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x.... 0x....      BL       __aeabi_f2d
   \   00000030   0x....             LDR.N    R2,??DataTable13_17  ;; 0x76c8b439
   \   00000032   0x....             LDR.N    R3,??DataTable13_18  ;; 0x40482fbe
   \   00000034   0x.... 0x....      BL       __aeabi_dadd
   \   00000038   0x2200             MOVS     R2,#+0
   \   0000003A   0x....             LDR.N    R3,??DataTable13_19  ;; 0x3fe80000
   \   0000003C   0x.... 0x....      BL       __aeabi_ddiv
   \   00000040   0x.... 0x....      BL       __aeabi_d2iz
   \   00000044   0x0001             MOVS     R1,R0
   \   00000046   0x0022             MOVS     R2,R4
   \   00000048   0x....             LDR.N    R0,??DataTable13_9
   \   0000004A   0x.... 0x....      BL       _Z13setShortValueP10CANTxFrameii
    185          	sendMessage();
   \   0000004E   0x.... 0x....      BL       _Z11sendMessagev
    186          }
   \   00000052   0xBD10             POP      {R4,PC}          ;; return
    187          

   \                                 In section .text, align 2, keep-with-next
    188          static void canInfoNBCBroadcast(can_nbc_e typeOfNBC) {
   \                     _Z19canInfoNBCBroadcast9can_nbc_e:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    189          	switch (typeOfNBC) {
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD005             BEQ.N    ??canInfoNBCBroadcast_0
   \   00000008   0x2C02             CMP      R4,#+2
   \   0000000A   0xD009             BEQ.N    ??canInfoNBCBroadcast_1
   \   0000000C   0xD305             BCC.N    ??canInfoNBCBroadcast_2
   \   0000000E   0x2C03             CMP      R4,#+3
   \   00000010   0xD009             BEQ.N    ??canInfoNBCBroadcast_3
   \   00000012   0xE00B             B.N      ??canInfoNBCBroadcast_4
    190          	case CAN_BUS_NBC_BMW:
    191          		canDashboardBMW();
   \                     ??canInfoNBCBroadcast_0:
   \   00000014   0x.... 0x....      BL       _Z15canDashboardBMWv
    192          		break;
   \   00000018   0xE008             B.N      ??canInfoNBCBroadcast_5
    193          	case CAN_BUS_NBC_FIAT:
    194          		canDashboardFiat();
   \                     ??canInfoNBCBroadcast_2:
   \   0000001A   0x.... 0x....      BL       _Z16canDashboardFiatv
    195          		break;
   \   0000001E   0xE005             B.N      ??canInfoNBCBroadcast_5
    196          	case CAN_BUS_NBC_VAG:
    197          		canDashboardVAG();
   \                     ??canInfoNBCBroadcast_1:
   \   00000020   0x.... 0x....      BL       _Z15canDashboardVAGv
    198          		break;
   \   00000024   0xE002             B.N      ??canInfoNBCBroadcast_5
    199          	case CAN_BUS_MAZDA_RX8:
    200          		canMazdaRX8();
   \                     ??canInfoNBCBroadcast_3:
   \   00000026   0x.... 0x....      BL       _Z11canMazdaRX8v
    201          		break;
   \   0000002A   0xE7FF             B.N      ??canInfoNBCBroadcast_5
    202          	default:
    203          		break;
    204          	}
    205          }
   \                     ??canInfoNBCBroadcast_4:
   \                     ??canInfoNBCBroadcast_5:
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
    206          

   \                                 In section .text, align 2, keep-with-next
    207          static void canRead(void) {
   \                     _Z7canReadv:
   \   00000000   0xB580             PUSH     {R7,LR}
    208          	scheduleMsg(&logger, "waiting for CAN");
   \   00000002   0x....             LDR.N    R1,??DataTable13_21
   \   00000004   0x....             LDR.N    R0,??DataTable13_2
   \   00000006   0x.... 0x....      BL       scheduleMsg
    209          	canReceive(&EFI_CAN_DEVICE, CAN_ANY_MAILBOX, &rxBuffer, TIME_INFINITE);
   \   0000000A   0xF05F 0x33FF      MOVS     R3,#-1
   \   0000000E   0x....             LDR.N    R2,??DataTable13_22
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x....             LDR.N    R0,??DataTable13_10
   \   00000014   0x.... 0x....      BL       canReceive
    210          
    211          	canReadCounter++;
   \   00000018   0x....             LDR.N    R0,??DataTable13_23
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0x....             LDR.N    R1,??DataTable13_23
   \   00000020   0x6008             STR      R0,[R1, #+0]
    212          	printPacket(&rxBuffer);
   \   00000022   0x....             LDR.N    R0,??DataTable13_22
   \   00000024   0x.... 0x....      BL       _Z11printPacketP10CANRxFrame
    213          	obdOnCanPacketRx(&rxBuffer);
   \   00000028   0x....             LDR.N    R0,??DataTable13_22
   \   0000002A   0x.... 0x....      BL       _Z16obdOnCanPacketRxP10CANRxFrame
    214          }
   \   0000002E   0xBD01             POP      {R0,PC}          ;; return
    215          

   \                                 In section .text, align 2, keep-with-next
    216          static void writeStateToCan(void) {
   \                     _Z15writeStateToCanv:
   \   00000000   0xB580             PUSH     {R7,LR}
    217          	engine_rpm = getRpm();
   \   00000002   0x....             LDR.N    R0,??DataTable13_24
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x.... 0x....      BL       _ZN13RpmCalculator3rpmEv
   \   0000000A   0x....             LDR.N    R1,??DataTable13_13
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    218          	engine_clt = 123; //getCoolantTemperature(engine);
   \   0000000E   0x....             LDR.N    R0,??DataTable13_16
   \   00000010   0x....             LDR.N    R1,??DataTable13_25  ;; 0x42f60000
   \   00000012   0x6001             STR      R1,[R0, #+0]
    219          
    220          	canInfoNBCBroadcast(engineConfiguration->canNbcType);
   \   00000014   0x....             LDR.N    R0,??DataTable13_26
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF8D0 0x01EC      LDR      R0,[R0, #+492]
   \   0000001C   0x.... 0x....      BL       _Z19canInfoNBCBroadcast9can_nbc_e
    221          }
   \   00000020   0xBD01             POP      {R0,PC}          ;; return
    222          

   \                                 In section .text, align 2, keep-with-next
    223          static msg_t canThread(void *arg) {
   \                     _Z9canThreadPv:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    224          	chRegSetThreadName("CAN");
   \   00000004   0x....             LDR.N    R0,??DataTable13_27
   \   00000006   0x6980             LDR      R0,[R0, #+24]
   \   00000008   0x....             ADR.N    R1,??DataTable13  ;; "CAN"
   \   0000000A   0x6181             STR      R1,[R0, #+24]
    225          	while (true) {
    226          		if (engineConfiguration->canWriteEnabled)
   \                     ??canThread_0:
   \   0000000C   0x....             LDR.N    R0,??DataTable13_26
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF890 0x05D9      LDRB     R0,[R0, #+1497]
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x0840             LSRS     R0,R0,#+1
   \   00000018   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD001             BEQ.N    ??canThread_1
    227          			writeStateToCan();
   \   00000020   0x.... 0x....      BL       _Z15writeStateToCanv
    228          
    229          		if (engineConfiguration->canReadEnabled)
   \                     ??canThread_1:
   \   00000024   0x....             LDR.N    R0,??DataTable13_26
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xF890 0x05D9      LDRB     R0,[R0, #+1497]
   \   0000002C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD001             BEQ.N    ??canThread_2
    230          			canRead(); // todo: since this is a blocking operation, do we need a separate thread for 'write'?
   \   00000034   0x.... 0x....      BL       _Z7canReadv
    231          
    232          		if (engineConfiguration->canSleepPeriod < 10) {
   \                     ??canThread_2:
   \   00000038   0x....             LDR.N    R0,??DataTable13_26
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0xF8D0 0x01F0      LDR      R0,[R0, #+496]
   \   00000040   0x280A             CMP      R0,#+10
   \   00000042   0xDA0D             BGE.N    ??canThread_3
    233          			warning(OBD_PCM_Processor_Fault, "%d too low CAN", engineConfiguration->canSleepPeriod);
   \   00000044   0x....             LDR.N    R0,??DataTable13_26
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0xF8D0 0x21F0      LDR      R2,[R0, #+496]
   \   0000004C   0x....             LDR.N    R1,??DataTable13_28
   \   0000004E   0xF240 0x205E      MOVW     R0,#+606
   \   00000052   0x.... 0x....      BL       warning
    234          			engineConfiguration->canSleepPeriod = 50;
   \   00000056   0x....             LDR.N    R0,??DataTable13_26
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x2132             MOVS     R1,#+50
   \   0000005C   0xF8C0 0x11F0      STR      R1,[R0, #+496]
    235          		}
    236          
    237          		chThdSleepMilliseconds(engineConfiguration->canSleepPeriod);
   \                     ??canThread_3:
   \   00000060   0x....             LDR.N    R0,??DataTable13_26
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0xF8D0 0x01F0      LDR      R0,[R0, #+496]
   \   00000068   0xF44F 0x717A      MOV      R1,#+1000
   \   0000006C   0x4348             MULS     R0,R1,R0
   \   0000006E   0x1E40             SUBS     R0,R0,#+1
   \   00000070   0xF44F 0x717A      MOV      R1,#+1000
   \   00000074   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000078   0x1C40             ADDS     R0,R0,#+1
   \   0000007A   0x.... 0x....      BL       chThdSleep
   \   0000007E   0xE7C5             B.N      ??canThread_0
    238          	}
    239          #if defined __GNUC__
    240          	return -1;
    241          #endif
    242          }
    243          

   \                                 In section .text, align 2, keep-with-next
    244          static void canInfo(void) {
   \                     _Z7canInfov:
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    245          	scheduleMsg(&logger, "CAN TX %s", hwPortname(boardConfiguration->canTxPin));
   \   00000002   0x....             LDR.N    R0,??DataTable13_29
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF8D0 0x0158      LDR      R0,[R0, #+344]
   \   0000000A   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   0000000E   0x0002             MOVS     R2,R0
   \   00000010   0x....             LDR.N    R1,??DataTable13_30
   \   00000012   0x....             LDR.N    R0,??DataTable13_2
   \   00000014   0x.... 0x....      BL       scheduleMsg
    246          	scheduleMsg(&logger, "CAN RX %s", hwPortname(boardConfiguration->canRxPin));
   \   00000018   0x....             LDR.N    R0,??DataTable13_29
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0xF8D0 0x015C      LDR      R0,[R0, #+348]
   \   00000020   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   00000024   0x0002             MOVS     R2,R0
   \   00000026   0x....             LDR.N    R1,??DataTable13_31
   \   00000028   0x....             LDR.N    R0,??DataTable13_2
   \   0000002A   0x.... 0x....      BL       scheduleMsg
    247          	scheduleMsg(&logger, "type=%d canReadEnabled=%s canWriteEnabled=%s period=%d", engineConfiguration->canNbcType,
    248          			boolToString(engineConfiguration->canReadEnabled), boolToString(engineConfiguration->canWriteEnabled),
    249          			engineConfiguration->canSleepPeriod);
   \   0000002E   0x....             LDR.N    R0,??DataTable13_26
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0xF890 0x05D9      LDRB     R0,[R0, #+1497]
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x0840             LSRS     R0,R0,#+1
   \   0000003A   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000003E   0x.... 0x....      BL       _Z12boolToStringb
   \   00000042   0x0004             MOVS     R4,R0
   \   00000044   0x....             LDR.N    R0,??DataTable13_26
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0xF890 0x05D9      LDRB     R0,[R0, #+1497]
   \   0000004C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000050   0x.... 0x....      BL       _Z12boolToStringb
   \   00000054   0x....             LDR.N    R1,??DataTable13_26
   \   00000056   0x6809             LDR      R1,[R1, #+0]
   \   00000058   0xF8D1 0x11F0      LDR      R1,[R1, #+496]
   \   0000005C   0x9101             STR      R1,[SP, #+4]
   \   0000005E   0x9400             STR      R4,[SP, #+0]
   \   00000060   0x0003             MOVS     R3,R0
   \   00000062   0x....             LDR.N    R0,??DataTable13_26
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0xF8D0 0x21EC      LDR      R2,[R0, #+492]
   \   0000006A   0x....             LDR.N    R1,??DataTable13_32
   \   0000006C   0x....             LDR.N    R0,??DataTable13_2
   \   0000006E   0x.... 0x....      BL       scheduleMsg
    250          
    251          	scheduleMsg(&logger, "CAN rx count %d/tx ok %d/tx not ok %d", canReadCounter, canWriteOk, canWriteNotOk);
   \   00000072   0x....             LDR.N    R0,??DataTable13_12
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x9000             STR      R0,[SP, #+0]
   \   00000078   0x....             LDR.N    R0,??DataTable13_11
   \   0000007A   0x6803             LDR      R3,[R0, #+0]
   \   0000007C   0x....             LDR.N    R0,??DataTable13_23
   \   0000007E   0x6802             LDR      R2,[R0, #+0]
   \   00000080   0x....             LDR.N    R1,??DataTable13_33
   \   00000082   0x....             LDR.N    R0,??DataTable13_2
   \   00000084   0x.... 0x....      BL       scheduleMsg
    252          }
   \   00000088   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    253          
    254          #endif /* EFI_PROD_CODE */
    255          
    256          

   \                                 In section .text, align 2, keep-with-next
    257          void initCan(void) {
   \                     _Z7initCanv:
   \   00000000   0xB580             PUSH     {R7,LR}
    258          #if EFI_PROD_CODE
    259          	if (!engineConfiguration->isCanEnabled)
   \   00000002   0x....             LDR.N    R0,??DataTable13_26
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF890 0x05D8      LDRB     R0,[R0, #+1496]
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x0980             LSRS     R0,R0,#+6
   \   0000000E   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD02A             BEQ.N    ??initCan_0
    260          		return;
    261          #endif /* EFI_PROD_CODE */
    262          
    263          #if STM32_CAN_USE_CAN2
    264          	// CAN1 is required for CAN2
    265          	canStart(&CAND1, &canConfig);
   \                     ??initCan_1:
   \   00000016   0x....             LDR.N    R1,??DataTable13_34
   \   00000018   0x....             LDR.N    R0,??DataTable13_35
   \   0000001A   0x.... 0x....      BL       canStart
    266          	canStart(&CAND2, &canConfig);
   \   0000001E   0x....             LDR.N    R1,??DataTable13_34
   \   00000020   0x....             LDR.N    R0,??DataTable13_10
   \   00000022   0x.... 0x....      BL       canStart
    267          #else
    268          	canStart(&CAND1, &canConfig);
    269          #endif
    270          
    271          	canStart(&EFI_CAN_DEVICE, &canConfig);
   \   00000026   0x....             LDR.N    R1,??DataTable13_34
   \   00000028   0x....             LDR.N    R0,??DataTable13_10
   \   0000002A   0x.... 0x....      BL       canStart
    272          #if EFI_PROD_CODE
    273          
    274          	chThdCreateStatic(canTreadStack, sizeof(canTreadStack), NORMALPRIO, (tfunc_t) canThread, NULL);
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x9000             STR      R0,[SP, #+0]
   \   00000032   0x....             LDR.N    R3,??DataTable13_36
   \   00000034   0x2240             MOVS     R2,#+64
   \   00000036   0xF44F 0x7132      MOV      R1,#+712
   \   0000003A   0x....             LDR.N    R0,??DataTable13_37
   \   0000003C   0x.... 0x....      BL       chThdCreateStatic
    275          
    276          	mySetPadMode2("CAN TX", boardConfiguration->canTxPin, PAL_MODE_ALTERNATE(EFI_CAN_TX_AF));
   \   00000040   0xF240 0x4282      MOVW     R2,#+1154
   \   00000044   0x....             LDR.N    R0,??DataTable13_29
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0xF8D0 0x1158      LDR      R1,[R0, #+344]
   \   0000004C   0x....             LDR.N    R0,??DataTable13_38
   \   0000004E   0x.... 0x....      BL       _Z13mySetPadMode2PKc11brain_pin_ej
    277          	mySetPadMode2("CAN RX", boardConfiguration->canRxPin, PAL_MODE_ALTERNATE(EFI_CAN_RX_AF));
   \   00000052   0xF240 0x4282      MOVW     R2,#+1154
   \   00000056   0x....             LDR.N    R0,??DataTable13_29
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0xF8D0 0x115C      LDR      R1,[R0, #+348]
   \   0000005E   0x....             LDR.N    R0,??DataTable13_39
   \   00000060   0x.... 0x....      BL       _Z13mySetPadMode2PKc11brain_pin_ej
    278          
    279          	addConsoleAction("caninfo", canInfo);
   \   00000064   0x....             LDR.N    R1,??DataTable13_40
   \   00000066   0x....             LDR.N    R0,??DataTable13_41
   \   00000068   0x.... 0x....      BL       addConsoleAction
    280          #endif /* EFI_PROD_CODE */
    281          }
   \                     ??initCan_0:
   \   0000006C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x461C4000         DC32     0x461c4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0xC2200000         DC32     0xc2200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x43 0x41          DC8      "CAN"
   \              0x4E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x........         DC32     `?<Constant "CAN driver">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x........         DC32     logger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0x........         DC32     `?<Constant "SID %x/%x %x %x %x %x...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   0x6F75D9A1         DC32     0x6f75d9a1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \   00000000   0x3FE3E245         DC32     0x3fe3e245

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \   00000000   0x........         DC32     `?<Constant "GOT odometerKm %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_7:
   \   00000000   0x........         DC32     `?<Constant "GOT odometerMi %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_8:
   \   00000000   0x........         DC32     `?<Constant "GOT time %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_9:
   \   00000000   0x........         DC32     txmsg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_10:
   \   00000000   0x........         DC32     CAND2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_11:
   \   00000000   0x........         DC32     canWriteOk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_12:
   \   00000000   0x........         DC32     canWriteNotOk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_13:
   \   00000000   0x........         DC32     engine_rpm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_14:
   \   00000000   0x9999999A         DC32     0x9999999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_15:
   \   00000000   0x40199999         DC32     0x40199999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_16:
   \   00000000   0x........         DC32     engine_clt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_17:
   \   00000000   0x76C8B439         DC32     0x76c8b439

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_18:
   \   00000000   0x40482FBE         DC32     0x40482fbe

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_19:
   \   00000000   0x3FE80000         DC32     0x3fe80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_20:
   \   00000000   0x........         DC32     rand

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_21:
   \   00000000   0x........         DC32     `?<Constant "waiting for CAN">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_22:
   \   00000000   0x........         DC32     rxBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_23:
   \   00000000   0x........         DC32     canReadCounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_24:
   \   00000000   0x........         DC32     engine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_25:
   \   00000000   0x42F60000         DC32     0x42f60000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_26:
   \   00000000   0x........         DC32     engineConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_27:
   \   00000000   0x........         DC32     rlist

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_28:
   \   00000000   0x........         DC32     `?<Constant "%d too low CAN">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_29:
   \   00000000   0x........         DC32     boardConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_30:
   \   00000000   0x........         DC32     `?<Constant "CAN TX %s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_31:
   \   00000000   0x........         DC32     `?<Constant "CAN RX %s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_32:
   \   00000000   0x........         DC32     `?<Constant "type=%d canReadEnable...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_33:
   \   00000000   0x........         DC32     `?<Constant "CAN rx count %d/tx ok...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_34:
   \   00000000   0x........         DC32     canConfig

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_35:
   \   00000000   0x........         DC32     CAND1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_36:
   \   00000000   0x........         DC32     _Z9canThreadPv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_37:
   \   00000000   0x........         DC32     canTreadStack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_38:
   \   00000000   0x........         DC32     `?<Constant "CAN TX">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_39:
   \   00000000   0x........         DC32     `?<Constant "CAN RX">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_40:
   \   00000000   0x........         DC32     _Z7canInfov

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_41:
   \   00000000   0x........         DC32     `?<Constant "caninfo">`

   \                                 In section .init_array, align 4, keep-with-next, root
   \   00000000   0x........         DC32    RELOC_ARM_TARGET1 __sti__routine

   \                                 In section .rodata, align 4
   \                     `?<Constant "SID %x/%x %x %x %x %x...">`:
   \   00000000   0x53 0x49          DC8 "SID %x/%x %x %x %x %x %x %x %x %x"
   \              0x44 0x20    
   \              0x25 0x78    
   \              0x2F 0x25    
   \              0x78 0x20    
   \              0x25 0x78    
   \              0x20 0x25    
   \              0x78 0x20    
   \              0x25 0x78    
   \              0x20 0x25    
   \              0x78 0x20    
   \              0x25 0x78    
   \              0x20 0x25    
   \              0x78 0x20    
   \              0x25 0x78    
   \              0x20 0x25    
   \              0x78 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GOT odometerKm %d">`:
   \   00000000   0x47 0x4F          DC8 "GOT odometerKm %d"
   \              0x54 0x20    
   \              0x6F 0x64    
   \              0x6F 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x4B 0x6D    
   \              0x20 0x25    
   \              0x64 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GOT odometerMi %d">`:
   \   00000000   0x47 0x4F          DC8 "GOT odometerMi %d"
   \              0x54 0x20    
   \              0x6F 0x64    
   \              0x6F 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x4D 0x69    
   \              0x20 0x25    
   \              0x64 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GOT time %d">`:
   \   00000000   0x47 0x4F          DC8 "GOT time %d"
   \              0x54 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "waiting for CAN">`:
   \   00000000   0x77 0x61          DC8 "waiting for CAN"
   \              0x69 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x43 0x41    
   \              0x4E 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x43 0x41          DC8 "CAN"
   \              0x4E 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "%d too low CAN">`:
   \   00000000   0x25 0x64          DC8 "%d too low CAN"
   \              0x20 0x74    
   \              0x6F 0x6F    
   \              0x20 0x6C    
   \              0x6F 0x77    
   \              0x20 0x43    
   \              0x41 0x4E    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "CAN TX %s">`:
   \   00000000   0x43 0x41          DC8 "CAN TX %s"
   \              0x4E 0x20    
   \              0x54 0x58    
   \              0x20 0x25    
   \              0x73 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "CAN RX %s">`:
   \   00000000   0x43 0x41          DC8 "CAN RX %s"
   \              0x4E 0x20    
   \              0x52 0x58    
   \              0x20 0x25    
   \              0x73 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "type=%d canReadEnable...">`:
   \   00000000   0x74 0x79          DC8 74H, 79H, 70H, 65H, 3DH, 25H, 64H, 20H
   \              0x70 0x65    
   \              0x3D 0x25    
   \              0x64 0x20    
   \   00000008   0x63 0x61          DC8 63H, 61H, 6EH, 52H, 65H, 61H, 64H, 45H
   \              0x6E 0x52    
   \              0x65 0x61    
   \              0x64 0x45    
   \   00000010   0x6E 0x61          DC8 6EH, 61H, 62H, 6CH, 65H, 64H, 3DH, 25H
   \              0x62 0x6C    
   \              0x65 0x64    
   \              0x3D 0x25    
   \   00000018   0x73 0x20          DC8 73H, 20H, 63H, 61H, 6EH, 57H, 72H, 69H
   \              0x63 0x61    
   \              0x6E 0x57    
   \              0x72 0x69    
   \   00000020   0x74 0x65          DC8 74H, 65H, 45H, 6EH, 61H, 62H, 6CH, 65H
   \              0x45 0x6E    
   \              0x61 0x62    
   \              0x6C 0x65    
   \   00000028   0x64 0x3D          DC8 64H, 3DH, 25H, 73H, 20H, 70H, 65H, 72H
   \              0x25 0x73    
   \              0x20 0x70    
   \              0x65 0x72    
   \   00000030   0x69 0x6F          DC8 69H, 6FH, 64H, 3DH, 25H, 64H, 0
   \              0x64 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000037   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "CAN rx count %d/tx ok...">`:
   \   00000000   0x43 0x41          DC8 "CAN rx count %d/tx ok %d/tx not ok %d"
   \              0x4E 0x20    
   \              0x72 0x78    
   \              0x20 0x63    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x20 0x25    
   \              0x64 0x2F    
   \              0x74 0x78    
   \              0x20 0x6F    
   \              0x6B 0x20    
   \              0x25 0x64    
   \              0x2F 0x74    
   \              0x78 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x6F 0x6B    
   \              0x20 0x25    
   \              0x64 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "CAN TX">`:
   \   00000000   0x43 0x41          DC8 "CAN TX"
   \              0x4E 0x20    
   \              0x54 0x58    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "CAN RX">`:
   \   00000000   0x43 0x41          DC8 "CAN RX"
   \              0x4E 0x20    
   \              0x52 0x58    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "caninfo">`:
   \   00000000   0x63 0x61          DC8 "caninfo"
   \              0x6E 0x69    
   \              0x6E 0x66    
   \              0x6F 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "CAN driver">`:
   \   00000000   0x43 0x41          DC8 "CAN driver"
   \              0x4E 0x20    
   \              0x64 0x72    
   \              0x69 0x76    
   \              0x65 0x72    
   \              0x00         
   \   0000000B   0x00               DC8 0
    282          
    283          #endif /* EFI_CAN_SUPPORT */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   __sti__routine()
         8   -> LoggingWithStorage::LoggingWithStorage(char const *)
       8   canDashboardBMW()
         8   -> __aeabi_d2iz
         8   -> __aeabi_dadd
         8   -> __aeabi_ddiv
         8   -> __aeabi_dmul
         8   -> __aeabi_f2d
         8   -> __aeabi_i2d
         8   -> commonTxInit(int)
         8   -> sendMessage()
         8   -> setShortValue(CANTxFrame *, int, int)
       8   canDashboardFiat()
         8   -> commonTxInit(int)
         8   -> sendMessage()
         8   -> setShortValue(CANTxFrame *, int, int)
       8   canDashboardVAG()
         8   -> __aeabi_d2iz
         8   -> __aeabi_dadd
         8   -> __aeabi_ddiv
         8   -> __aeabi_f2d
         8   -> commonTxInit(int)
         8   -> sendMessage()
         8   -> setShortValue(CANTxFrame *, int, int)
      16   canInfo()
        16   -> boolToString(bool)
        16   -> hwPortname(brain_pin_e)
        16   -> scheduleMsg
       8   canInfoNBCBroadcast(can_nbc_e)
         8   -> canDashboardBMW()
         8   -> canDashboardFiat()
         8   -> canDashboardVAG()
         8   -> canMazdaRX8()
      16   canMazdaRX8()
        16   -> commonTxInit(int)
        16   -> getVehicleSpeed()
        16   -> sendMessage()
        16   -> setShortValue(CANTxFrame *, int, int)
       8   canRead()
         8   -> canReceive
         8   -> obdOnCanPacketRx(CANRxFrame *)
         8   -> printPacket(CANRxFrame *)
         8   -> scheduleMsg
       8   canThread(void *)
         8   -> canRead()
         8   -> chThdSleep
         8   -> warning
         8   -> writeStateToCan()
       8   commonTxInit(int)
         8   -> memset
       8   initCan()
         8   -> addConsoleAction
         8   -> canStart
         8   -> chThdCreateStatic
         8   -> mySetPadMode2(char const *, brain_pin_e, iomode_t)
      16   memset
        16   -> __aeabi_memset
      56   printPacket(CANRxFrame *)
        56   -> __aeabi_d2iz
        56   -> __aeabi_dmul
        56   -> __aeabi_i2d
        56   -> scheduleMsg
       8   sendMessage()
         8   -> sendMessage2(int)
       8   sendMessage2(int)
         8   -> canTransmit
       4   setShortValue(CANTxFrame *, int, int)
       0   setTxBit(int, int)
       8   writeStateToCan()
         8   -> RpmCalculator::rpm()
         8   -> canInfoNBCBroadcast(can_nbc_e)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "%d too low CAN">
      12  ?<Constant "CAN RX %s">
       8  ?<Constant "CAN RX">
      12  ?<Constant "CAN TX %s">
       8  ?<Constant "CAN TX">
      12  ?<Constant "CAN driver">
      40  ?<Constant "CAN rx count %d/tx ok...">
       4  ?<Constant "CAN">
      20  ?<Constant "GOT odometerKm %d">
      20  ?<Constant "GOT odometerMi %d">
      12  ?<Constant "GOT time %d">
      36  ?<Constant "SID %x/%x %x %x %x %x...">
       8  ?<Constant "caninfo">
      56  ?<Constant "type=%d canReadEnable...">
      16  ?<Constant "waiting for CAN">
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable12
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_10
       4  ??DataTable13_11
       4  ??DataTable13_12
       4  ??DataTable13_13
       4  ??DataTable13_14
       4  ??DataTable13_15
       4  ??DataTable13_16
       4  ??DataTable13_17
       4  ??DataTable13_18
       4  ??DataTable13_19
       4  ??DataTable13_2
       4  ??DataTable13_20
       4  ??DataTable13_21
       4  ??DataTable13_22
       4  ??DataTable13_23
       4  ??DataTable13_24
       4  ??DataTable13_25
       4  ??DataTable13_26
       4  ??DataTable13_27
       4  ??DataTable13_28
       4  ??DataTable13_29
       4  ??DataTable13_3
       4  ??DataTable13_30
       4  ??DataTable13_31
       4  ??DataTable13_32
       4  ??DataTable13_33
       4  ??DataTable13_34
       4  ??DataTable13_35
       4  ??DataTable13_36
       4  ??DataTable13_37
       4  ??DataTable13_38
       4  ??DataTable13_39
       4  ??DataTable13_4
       4  ??DataTable13_40
       4  ??DataTable13_41
       4  ??DataTable13_5
       4  ??DataTable13_6
       4  ??DataTable13_7
       4  ??DataTable13_8
       4  ??DataTable13_9
      16  __sti__routine()
       8  canConfig
     146  canDashboardBMW()
      64  canDashboardFiat()
      84  canDashboardVAG()
     138  canInfo()
      46  canInfoNBCBroadcast(can_nbc_e)
     280  canMazdaRX8()
      48  canRead()
       4  canReadCounter
     128  canThread(void *)
     712  canTreadStack
       4  canWriteNotOk
       4  canWriteOk
      84  commonTxInit(int)
       4  engine_clt
       4  engine_rpm
     110  initCan()
     260  logger
      22  memset
     166  printPacket(CANRxFrame *)
       4  rand
      20  rxBuffer
      10  sendMessage()
      76  sendMessage2(int)
      16  setShortValue(CANTxFrame *, int, int)
      24  setTxBit(int, int)
      16  txmsg
      34  writeStateToCan()
       4  -- Other

 
 1 028 bytes in section .bss
     4 bytes in section .data
     4 bytes in section .init_array
   288 bytes in section .rodata
 1 672 bytes in section .text
 
 1 654 bytes of CODE  memory (+ 22 bytes shared)
   288 bytes of CONST memory
 1 032 bytes of DATA  memory

Errors: none
Warnings: 1
