###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:50 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\algo #
#                       \fuel_math.cpp                                        #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\algo #
#                       \fuel_math.cpp -lCN F:\stuff\rusefi_sourceforge\firmw #
#                       are\iar\Debug\List\ -lA F:\stuff\rusefi_sourceforge\f #
#                       irmware\iar\Debug\List\ -o                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\   #
#                       --no_cse --no_unroll --no_inline --no_code_motion     #
#                       --no_tbaa --no_clustering --no_scheduling --debug     #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\f #
#                       uel_math.lst                                          #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\fu #
#                       el_math.o                                             #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\algo\fuel_math.cpp
      1          /**
      2           * @file	fuel_math.cpp
      3           * @brief	Fuel amount calculation logic
      4           *
      5           * While engine running, fuel amount is an interpolated value from the fuel map by getRpm() and getEngineLoad()
      6           * On top of the value from the fuel map we also apply
      7           * <BR>1) getInjectorLag() correction to account for fuel injector lag
      8           * <BR>2) getCltCorrection() for warm-up
      9           * <BR>3) getIatCorrection() to account for cold weather
     10           *
     11           * getCrankingFuel() depents only on getCoolantTemperature()
     12           *
     13           *
     14           * @date May 27, 2013
     15           * @author Andrey Belomutskiy, (c) 2012-2015
     16           *
     17           * This file is part of rusEfi - see http://rusefi.com
     18           *
     19           * rusEfi is free software; you can redistribute it and/or modify it under the terms of
     20           * the GNU General Public License as published by the Free Software Foundation; either
     21           * version 3 of the License, or (at your option) any later version.
     22           *
     23           * rusEfi is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
     24           * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     25           * GNU General Public License for more details.
     26           *
     27           * You should have received a copy of the GNU General Public License along with this program.
     28           * If not, see <http://www.gnu.org/licenses/>.
     29           *
     30           */
     31          
     32          #include "main.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x002A             MOVS     R2,R5
   \   0000000A   0x0031             MOVS     R1,R6
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memset
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
     33          #include "fuel_math.h"

   \                                 In section .text, align 4
   \   __interwork __softfp void Map3D<16, 16>::init(float (*)[16], float *, float *)
   \                     _ZN5Map3DILi16ELi16EE4initEPA16_fPfS3_:
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0x2400             MOVS     R4,#+0
   \                     ??init_0:
   \   00000004   0x2C10             CMP      R4,#+16
   \   00000006   0xDA06             BGE.N    ??init_1
   \   00000008   0x2540             MOVS     R5,#+64
   \   0000000A   0xFB05 0x1504      MLA      R5,R5,R4,R1
   \   0000000E   0xF840 0x5024      STR      R5,[R0, R4, LSL #+2]
   \   00000012   0x1C64             ADDS     R4,R4,#+1
   \   00000014   0xE7F6             B.N      ??init_0
   \                     ??init_1:
   \   00000016   0x4C03             LDR.N    R4,??init_2      ;; 0x923f558
   \   00000018   0x6484             STR      R4,[R0, #+72]
   \   0000001A   0x6402             STR      R2,[R0, #+64]
   \   0000001C   0x6443             STR      R3,[R0, #+68]
   \   0000001E   0xBC30             POP      {R4,R5}
   \   00000020   0x4770             BX       LR               ;; return
   \   00000022   0xBF00             Nop      
   \                     ??init_2:
   \   00000024   0x0923F558         DC32     0x923f558

   \                                 In section .text, align 4
   \   __interwork __vfp float Map3D<16, 16>::getValue(float, float)
   \                     _ZN5Map3DILi16ELi16EE8getValueEff:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xB082             SUB      SP,SP,#+8
   \   00000008   0x0004             MOVS     R4,R0
   \   0000000A   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   0000000E   0xEEF0 0x8A60      VMOV.F32 S17,S1
   \   00000012   0x6CA0             LDR      R0,[R4, #+72]
   \   00000014   0x490C             LDR.N    R1,??getValue_0+0x4  ;; 0x923f558
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xD005             BEQ.N    ??getValue_1
   \   0000001A   0x480C             LDR.N    R0,??getValue_0+0x8
   \   0000001C   0x.... 0x....      BL       firmwareError
   \   00000020   0xED9F 0x0A08      VLDR.W   S0,??getValue_0  ;; 0x7fffffff
   \   00000024   0xE00A             B.N      ??getValue_2
   \                     ??getValue_1:
   \   00000026   0x9400             STR      R4,[SP, #+0]
   \   00000028   0x2310             MOVS     R3,#+16
   \   0000002A   0x6C62             LDR      R2,[R4, #+68]
   \   0000002C   0xEEF0 0x0A68      VMOV.F32 S1,S17
   \   00000030   0x2110             MOVS     R1,#+16
   \   00000032   0x6C20             LDR      R0,[R4, #+64]
   \   00000034   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000038   0x.... 0x....      BL       _Z13interpolate3dfPfifS_iPS_
   \                     ??getValue_2:
   \   0000003C   0xB002             ADD      SP,SP,#+8
   \   0000003E   0xECBD 0x8B02      VPOP     {D8}
   \   00000042   0xBD10             POP      {R4,PC}          ;; return
   \                     ??getValue_0:
   \   00000044   0x7FFFFFFF         DC32     0x7fffffff
   \   00000048   0x0923F558         DC32     0x923f558
   \   0000004C   0x........         DC32     _ZZN5Map3DILi16ELi16EE8getValueEffEs

   \                                 In section .text, align 4
   \   __interwork __vfp float Map3D<4, 4>::getValue(float, float)
   \                     _ZN5Map3DILi4ELi4EE8getValueEff:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xB082             SUB      SP,SP,#+8
   \   00000008   0x0004             MOVS     R4,R0
   \   0000000A   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   0000000E   0xEEF0 0x8A60      VMOV.F32 S17,S1
   \   00000012   0x69A0             LDR      R0,[R4, #+24]
   \   00000014   0x490C             LDR.N    R1,??getValue_3+0x4  ;; 0x923f558
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xD005             BEQ.N    ??getValue_4
   \   0000001A   0x480C             LDR.N    R0,??getValue_3+0x8
   \   0000001C   0x.... 0x....      BL       firmwareError
   \   00000020   0xED9F 0x0A08      VLDR.W   S0,??getValue_3  ;; 0x7fffffff
   \   00000024   0xE00A             B.N      ??getValue_5
   \                     ??getValue_4:
   \   00000026   0x9400             STR      R4,[SP, #+0]
   \   00000028   0x2304             MOVS     R3,#+4
   \   0000002A   0x6962             LDR      R2,[R4, #+20]
   \   0000002C   0xEEF0 0x0A68      VMOV.F32 S1,S17
   \   00000030   0x2104             MOVS     R1,#+4
   \   00000032   0x6920             LDR      R0,[R4, #+16]
   \   00000034   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000038   0x.... 0x....      BL       _Z13interpolate3dfPfifS_iPS_
   \                     ??getValue_5:
   \   0000003C   0xB002             ADD      SP,SP,#+8
   \   0000003E   0xECBD 0x8B02      VPOP     {D8}
   \   00000042   0xBD10             POP      {R4,PC}          ;; return
   \                     ??getValue_3:
   \   00000044   0x7FFFFFFF         DC32     0x7fffffff
   \   00000048   0x0923F558         DC32     0x923f558
   \   0000004C   0x........         DC32     _ZZN5Map3DILi4ELi4EE8getValueEffEs

   \                                 In section .text, align 2
   \   __code __interwork __softfp Map3D<16, 16>::Map3D()
   \                     _ZN5Map3DILi16ELi16EEC1Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x64A0             STR      R0,[R4, #+72]
   \   00000008   0x2240             MOVS     R2,#+64
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       memset
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x6420             STR      R0,[R4, #+64]
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x6460             STR      R0,[R4, #+68]
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
     34          #include "interpolation.h"
     35          #include "engine_configuration.h"
     36          #include "allsensors.h"
     37          #include "engine_math.h"
     38          #include "rpm_calculator.h"
     39          #include "speed_density.h"
     40          #if EFI_ACCEL_ENRICHMENT
     41          #include "accel_enrichment.h"
     42          #endif /* EFI_ACCEL_ENRICHMENT */
     43          
     44          EXTERN_ENGINE
     45          ;
     46          

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine:
   \   00000000   0xB580             PUSH     {R7,LR}
     47          static fuel_Map3D_t fuelMap;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000006   0x.... 0x....      BL       _ZN5Map3DILi16ELi16EEC1Ev
     48          static fuel_Map3D_t fuelPhaseMap;
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable15_2
   \   0000000E   0x.... 0x....      BL       _ZN5Map3DILi16ELi16EEC1Ev
   \   00000012   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     fuelMap:
   \   00000000                      DS8 76

   \                                 In section .bss, align 4
   \                     fuelPhaseMap:
   \   00000000                      DS8 76
     49          extern fuel_Map3D_t ve2Map;
     50          extern fuel_Map3D_t afrMap;
     51          extern baroCorr_Map3D_t baroCorrMap;
     52          
     53          /**
     54           * @return total duration of fuel injection per engine cycle, in milliseconds
     55           */

   \                                 In section .text, align 4, keep-with-next
     56          float getRealMafFuel(float airSpeed, int rpm DECLARE_ENGINE_PARAMETER_S) {
   \                     _Z14getRealMafFuelfi:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B04      VPUSH    {D8-D9}
   \   00000006   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   0000000A   0x0004             MOVS     R4,R0
     57          	if (rpm == 0)
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD102             BNE.N    ??getRealMafFuel_0
     58          		return 0;
   \   00000010   0xED9F 0x....      VLDR.W   S0,??DataTable9  ;; 0x0
   \   00000014   0xE038             B.N      ??getRealMafFuel_1
     59          	// duration of engine cycle, in hours
     60          	float engineCycleDurationHr = 1.0 / 60 / rpm;
   \                     ??getRealMafFuel_0:
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x.... 0x....      BL       __aeabi_i2d
   \   0000001C   0x0002             MOVS     R2,R0
   \   0000001E   0x000B             MOVS     R3,R1
   \   00000020   0xF05F 0x3011      MOVS     R0,#+286331153
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable15_3  ;; 0x3f911111
   \   00000028   0x.... 0x....      BL       __aeabi_ddiv
   \   0000002C   0x.... 0x....      BL       __aeabi_d2f
   \   00000030   0xEE08 0x0A90      VMOV     S17,R0
     61          
     62          	float airMassKg = airSpeed * engineCycleDurationHr;
   \   00000034   0xEE28 0x9A28      VMUL.F32 S18,S16,S17
     63          
     64          	/**
     65          	 * todo: pre-calculate gramm/second injector flow to save one multiplication
     66          	 * open question if that's needed since that's just a multiplication
     67          	 */
     68          	float injectorFlowRate = cc_minute_to_gramm_second(engineConfiguration->injector.flow);
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable15_4
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x6880             LDR      R0,[R0, #+8]
   \   00000040   0x.... 0x....      BL       __aeabi_f2d
   \   00000044   0x.... 0x....      LDR.W    R2,??DataTable15_5  ;; 0xa32f5098
   \   00000048   0x.... 0x....      LDR.W    R3,??DataTable15_6  ;; 0x3f889359
   \   0000004C   0x.... 0x....      BL       __aeabi_dmul
   \   00000050   0x.... 0x....      BL       __aeabi_d2f
   \   00000054   0xEE09 0x0A90      VMOV     S19,R0
     69          
     70          	float afr = afrMap.getValue(airSpeed, rpm);
   \   00000058   0xEE00 0x4A10      VMOV     S0,R4
   \   0000005C   0xEEF8 0x0AC0      VCVT.F32.S32 S1,S0
   \   00000060   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable15_7
   \   00000068   0x.... 0x....      BL       _ZN5Map3DILi16ELi16EE8getValueEff
   \   0000006C   0xEEF0 0x0A40      VMOV.F32 S1,S0
     71          	float fuelMassGramm = airMassKg / afr * 1000;
   \   00000070   0xEE89 0x0A20      VDIV.F32 S0,S18,S1
   \   00000074   0xED9F 0x....      VLDR.W   S2,??DataTable12  ;; 0x447a0000
   \   00000078   0xEE20 0x0A01      VMUL.F32 S0,S0,S2
     72          
     73          	return 1000 * fuelMassGramm / injectorFlowRate;
   \   0000007C   0xED9F 0x....      VLDR.W   S2,??DataTable12  ;; 0x447a0000
   \   00000080   0xEE20 0x0A01      VMUL.F32 S0,S0,S2
   \   00000084   0xEE80 0x0A29      VDIV.F32 S0,S0,S19
   \                     ??getRealMafFuel_1:
   \   00000088   0xECBD 0x8B04      VPOP     {D8-D9}
   \   0000008C   0xBD10             POP      {R4,PC}          ;; return
     74          }
     75          

   \                                 In section .text, align 2, keep-with-next
     76          floatms_t getBaseFuel(int rpm DECLARE_ENGINE_PARAMETER_S) {
   \                     _Z11getBaseFueli:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0x0004             MOVS     R4,R0
     77          	floatms_t tpsAccelEnrich = ENGINE(tpsAccelEnrichment.getTpsEnrichment(PASS_ENGINE_PARAMETER_F));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable15_8
   \   0000000C   0x.... 0x....      BL       _ZN16AccelEnrichmemnt16getTpsEnrichmentEv
   \   00000010   0xEEB0 0x8A40      VMOV.F32 S16,S0
     78          
     79          	if (CONFIG(algorithm) == LM_SPEED_DENSITY) {
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable15_9
   \   00000018   0xF8D0 0x01B0      LDR      R0,[R0, #+432]
   \   0000001C   0x2803             CMP      R0,#+3
   \   0000001E   0xD105             BNE.N    ??getBaseFuel_0
     80          		return tpsAccelEnrich + getSpeedDensityFuel(rpm PASS_ENGINE_PARAMETER);
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       _Z19getSpeedDensityFueli
   \   00000026   0xEE38 0x0A00      VADD.F32 S0,S16,S0
   \   0000002A   0xE023             B.N      ??getBaseFuel_1
     81          	} else if (engineConfiguration->algorithm == LM_REAL_MAF) {
   \                     ??getBaseFuel_0:
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable15_4
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0xF8D0 0x01A8      LDR      R0,[R0, #+424]
   \   00000036   0x2804             CMP      R0,#+4
   \   00000038   0xD113             BNE.N    ??getBaseFuel_2
     82          		float maf = getRealMaf(PASS_ENGINE_PARAMETER_F) + engine->mapAccelEnrichment.getMapEnrichment(PASS_ENGINE_PARAMETER_F);
   \   0000003A   0x.... 0x....      BL       _Z10getRealMafv
   \   0000003E   0xEEF0 0x8A40      VMOV.F32 S17,S0
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable15_10
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0x3038             ADDS     R0,R0,#+56
   \   0000004A   0x.... 0x....      BL       _ZN16AccelEnrichmemnt16getMapEnrichmentEv
   \   0000004E   0xEE78 0x8A80      VADD.F32 S17,S17,S0
     83          		return tpsAccelEnrich + getRealMafFuel(maf, rpm PASS_ENGINE_PARAMETER);
   \   00000052   0x0020             MOVS     R0,R4
   \   00000054   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \   00000058   0x.... 0x....      BL       _Z14getRealMafFuelfi
   \   0000005C   0xEE38 0x0A00      VADD.F32 S0,S16,S0
   \   00000060   0xE008             B.N      ??getBaseFuel_1
     84          	} else {
     85          		return tpsAccelEnrich + engine->engineState.baseTableFuel;
   \                     ??getBaseFuel_2:
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable15_10
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF510 0x50F7      ADDS     R0,R0,#+7904
   \   0000006C   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000070   0xEE38 0x0A00      VADD.F32 S0,S16,S0
   \                     ??getBaseFuel_1:
   \   00000074   0xECBD 0x8B02      VPOP     {D8}
   \   00000078   0xBD10             POP      {R4,PC}          ;; return
     86          	}
     87          }
     88          

   \                                 In section .text, align 2, keep-with-next
     89          float getinjectionOffset(int rpm DECLARE_ENGINE_PARAMETER_S) {
   \                     _Z18getinjectionOffseti:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xEE08 0x0A10      VMOV     S16,R0
     90          	float engineLoad = getEngineLoadT(PASS_ENGINE_PARAMETER_F);
   \   0000000A   0x.... 0x....      BL       _Z14getEngineLoadTv
   \   0000000E   0xEEF0 0x8A40      VMOV.F32 S17,S0
     91          	return fuelPhaseMap.getValue(engineLoad, rpm);
   \   00000012   0xEEF8 0x0AC8      VCVT.F32.S32 S1,S16
   \   00000016   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \   0000001A   0x....             LDR.N    R0,??DataTable15_2
   \   0000001C   0x.... 0x....      BL       _ZN5Map3DILi16ELi16EE8getValueEff
   \   00000020   0xECBD 0x8B02      VPOP     {D8}
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
     92          }
     93          
     94          /**
     95           * Number of injections into each cylinder per engine cycle
     96           */

   \                                 In section .text, align 2, keep-with-next
     97          static int getNumberOfInjections(injection_mode_e mode DECLARE_ENGINE_PARAMETER_S) {
   \                     _Z21getNumberOfInjections16injection_mode_e:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     98          	switch (mode) {
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD003             BEQ.N    ??getNumberOfInjections_0
   \   00000008   0x2C02             CMP      R4,#+2
   \   0000000A   0xD008             BEQ.N    ??getNumberOfInjections_1
   \   0000000C   0xD305             BCC.N    ??getNumberOfInjections_2
   \   0000000E   0xE00E             B.N      ??getNumberOfInjections_3
     99          	case IM_SIMULTANEOUS:
    100          		return engineConfiguration->specs.cylindersCount;
   \                     ??getNumberOfInjections_0:
   \   00000010   0x....             LDR.N    R0,??DataTable15_4
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF8D0 0x0194      LDR      R0,[R0, #+404]
   \   00000018   0xE00E             B.N      ??getNumberOfInjections_4
    101          	case IM_SEQUENTIAL:
    102          		return 1;
   \                     ??getNumberOfInjections_2:
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0xE00C             B.N      ??getNumberOfInjections_4
    103          	case IM_BATCH:
    104          		return engineConfiguration->specs.cylindersCount / 2;
   \                     ??getNumberOfInjections_1:
   \   0000001E   0x....             LDR.N    R0,??DataTable15_4
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF8D0 0x0194      LDR      R0,[R0, #+404]
   \   00000026   0x2102             MOVS     R1,#+2
   \   00000028   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000002C   0xE004             B.N      ??getNumberOfInjections_4
    105          	default:
    106          		firmwareError("Unexpected getFuelMultiplier %d", mode);
   \                     ??getNumberOfInjections_3:
   \   0000002E   0x0021             MOVS     R1,R4
   \   00000030   0x....             LDR.N    R0,??DataTable15_11
   \   00000032   0x.... 0x....      BL       firmwareError
    107          		return 1;
   \   00000036   0x2001             MOVS     R0,#+1
   \                     ??getNumberOfInjections_4:
   \   00000038   0xBD10             POP      {R4,PC}          ;; return
    108          	}
    109          }
    110          

   \                                 In section .text, align 4, keep-with-next
    111          percent_t getInjectorDutyCycle(int rpm DECLARE_ENGINE_PARAMETER_S) {
    112          //	float totalPerCycle = getFuelMs(rpm) * getNumberOfInjections()
    113          	return 0;
   \                     _Z20getInjectorDutyCyclei:
   \   00000000   0xED9F 0x....      VLDR.W   S0,??DataTable9  ;; 0x0
   \   00000004   0x4770             BX       LR               ;; return
    114          }
    115          
    116          /**
    117           * @returns	Length of fuel injection, in milliseconds
    118           */

   \                                 In section .text, align 2, keep-with-next
    119          floatms_t getFuelMs(int rpm DECLARE_ENGINE_PARAMETER_S) {
   \                     _Z9getFuelMsi:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B04      VPUSH    {D8-D9}
   \   00000006   0x0004             MOVS     R4,R0
    120          	float theoreticalInjectionLength;
    121          	if (isCrankingR(rpm)) {
   \   00000008   0x2C01             CMP      R4,#+1
   \   0000000A   0xDB17             BLT.N    ??getFuelMs_0
   \   0000000C   0x....             LDR.N    R0,??DataTable15_9
   \   0000000E   0xF9B0 0x0068      LDRSH    R0,[R0, #+104]
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xDA12             BGE.N    ??getFuelMs_0
    122          		theoreticalInjectionLength = getCrankingFuel(PASS_ENGINE_PARAMETER_F)
    123          				/ getNumberOfInjections(engineConfiguration->crankingInjectionMode PASS_ENGINE_PARAMETER);
   \   00000016   0x.... 0x....      BL       _Z15getCrankingFuelv
   \   0000001A   0xEEF0 0x8A40      VMOV.F32 S17,S0
   \   0000001E   0x....             LDR.N    R0,??DataTable15_4
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF8D0 0x01AC      LDR      R0,[R0, #+428]
   \   00000026   0x.... 0x....      BL       _Z21getNumberOfInjections16injection_mode_e
   \   0000002A   0xEE00 0x0A10      VMOV     S0,R0
   \   0000002E   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000032   0xEE88 0x0A80      VDIV.F32 S0,S17,S0
   \   00000036   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   0000003A   0xE019             B.N      ??getFuelMs_1
    124          	} else {
    125          		float baseFuel = getBaseFuel(rpm PASS_ENGINE_PARAMETER);
   \                     ??getFuelMs_0:
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0x.... 0x....      BL       _Z11getBaseFueli
   \   00000042   0xEEF0 0x8A40      VMOV.F32 S17,S0
    126          		float fuelPerCycle = getRunningFuel(baseFuel, rpm PASS_ENGINE_PARAMETER);
   \   00000046   0x0020             MOVS     R0,R4
   \   00000048   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \   0000004C   0x.... 0x....      BL       _Z14getRunningFuelfi
   \   00000050   0xEEB0 0x9A40      VMOV.F32 S18,S0
    127          		theoreticalInjectionLength = fuelPerCycle
    128          				/ getNumberOfInjections(engineConfiguration->injectionMode PASS_ENGINE_PARAMETER);
   \   00000054   0x....             LDR.N    R0,??DataTable15_4
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0xF8D0 0x01B0      LDR      R0,[R0, #+432]
   \   0000005C   0x.... 0x....      BL       _Z21getNumberOfInjections16injection_mode_e
   \   00000060   0xEE00 0x0A10      VMOV     S0,R0
   \   00000064   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000068   0xEE89 0x0A00      VDIV.F32 S0,S18,S0
   \   0000006C   0xEEB0 0x8A40      VMOV.F32 S16,S0
    129          	}
    130          	return theoreticalInjectionLength + ENGINE(injectorLagMs);
   \                     ??getFuelMs_1:
   \   00000070   0x....             LDR.N    R0,??DataTable15_12
   \   00000072   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000076   0xEE38 0x0A00      VADD.F32 S0,S16,S0
   \   0000007A   0xECBD 0x8B04      VPOP     {D8-D9}
   \   0000007E   0xBD10             POP      {R4,PC}          ;; return
    131          }
    132          

   \                                 In section .text, align 2, keep-with-next
    133          floatms_t getRunningFuel(floatms_t baseFuel, int rpm DECLARE_ENGINE_PARAMETER_S) {
    134          	float iatCorrection = ENGINE(engineState.iatFuelCorrection);
   \                     _Z14getRunningFuelfi:
   \   00000000   0x....             LDR.N    R1,??DataTable15_13
   \   00000002   0xEDD1 0x0A00      VLDR     S1,[R1, #0]
    135          	float cltCorrection = ENGINE(engineState.cltFuelCorrection);
   \   00000006   0x....             LDR.N    R1,??DataTable15_14
   \   00000008   0xED91 0x1A00      VLDR     S2,[R1, #0]
    136          
    137          #if EFI_ACCEL_ENRICHMENT
    138          	float accelEnrichment = getAccelEnrichment();
    139          	// todo: accelEnrichment
    140          #endif /* EFI_ACCEL_ENRICHMENT */
    141          
    142          	return baseFuel * cltCorrection * iatCorrection;
   \   0000000C   0xEE20 0x0A01      VMUL.F32 S0,S0,S2
   \   00000010   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000014   0x4770             BX       LR               ;; return
    143          }
    144          
    145          /**
    146           * @brief	Injector lag correction
    147           * @param	vBatt	Battery voltage.
    148           * @return	Time in ms for injection opening time based on current battery voltage
    149           */

   \                                 In section .text, align 2, keep-with-next
    150          floatms_t getInjectorLag(float vBatt DECLARE_ENGINE_PARAMETER_S) {
   \                     _Z14getInjectorLagf:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xEEB0 0x8A40      VMOV.F32 S16,S0
    151          	if (cisnan(vBatt)) {
   \   0000000A   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   0000000E   0x.... 0x....      BL       __iar_FDtest
   \   00000012   0x2802             CMP      R0,#+2
   \   00000014   0xD10F             BNE.N    ??getInjectorLag_0
    152          		warning(OBD_System_Voltage_Malfunction, "vBatt=%f", vBatt);
   \   00000016   0xEE18 0x0A10      VMOV     R0,S16
   \   0000001A   0x.... 0x....      BL       __aeabi_f2d
   \   0000001E   0x0002             MOVS     R2,R0
   \   00000020   0x000B             MOVS     R3,R1
   \   00000022   0x....             LDR.N    R1,??DataTable15_15
   \   00000024   0xF44F 0x700C      MOV      R0,#+560
   \   00000028   0x.... 0x....      BL       warning
    153          		return engineConfiguration->injector.lag;
   \   0000002C   0x....             LDR.N    R0,??DataTable15_4
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xED90 0x0A03      VLDR     S0,[R0, #+12]
   \   00000034   0xE011             B.N      ??getInjectorLag_1
    154          	}
    155          	float vBattCorrection = interpolate2d(vBatt, engineConfiguration->injector.battLagCorrBins,
    156          			engineConfiguration->injector.battLagCorr, VBAT_INJECTOR_CURVE_SIZE);
   \                     ??getInjectorLag_0:
   \   00000036   0x2208             MOVS     R2,#+8
   \   00000038   0x....             LDR.N    R0,??DataTable15_4
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0xF110 0x0130      ADDS     R1,R0,#+48
   \   00000040   0x....             LDR.N    R0,??DataTable15_4
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0x3010             ADDS     R0,R0,#+16
   \   00000046   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   0000004A   0x.... 0x....      BL       _Z13interpolate2dfPfS_i
    157          	return engineConfiguration->injector.lag + vBattCorrection;
   \   0000004E   0x....             LDR.N    R0,??DataTable15_4
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0xEDD0 0x0A03      VLDR     S1,[R0, #+12]
   \   00000056   0xEE30 0x0A80      VADD.F32 S0,S1,S0
   \                     ??getInjectorLag_1:
   \   0000005A   0xECBD 0x8B02      VPOP     {D8}
   \   0000005E   0xBD01             POP      {R0,PC}          ;; return
    158          }
    159          
    160          /**
    161           * @brief	Initialize fuel map data structure
    162           * @note this method has nothing to do with fuel map VALUES - it's job
    163           * is to prepare the fuel map data structure for 3d interpolation
    164           */

   \                                 In section .text, align 2, keep-with-next
    165          void prepareFuelMap(DECLARE_ENGINE_PARAMETER_F) {
   \                     _Z14prepareFuelMapv:
   \   00000000   0xB580             PUSH     {R7,LR}
    166          	fuelMap.init(config->fuelTable, config->fuelLoadBins, config->fuelRpmBins);
   \   00000002   0x....             LDR.N    R0,??DataTable15_16
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF500 0x5334      ADD      R3,R0,#+11520
   \   0000000A   0x33F8             ADDS     R3,R3,#+248
   \   0000000C   0x....             LDR.N    R0,??DataTable15_16
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF500 0x5234      ADD      R2,R0,#+11520
   \   00000014   0x32B8             ADDS     R2,R2,#+184
   \   00000016   0x....             LDR.N    R0,??DataTable15_16
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF500 0x5124      ADD      R1,R0,#+10496
   \   0000001E   0x31B8             ADDS     R1,R1,#+184
   \   00000020   0x....             LDR.N    R0,??DataTable15_1
   \   00000022   0x.... 0x....      BL       _ZN5Map3DILi16ELi16EE4initEPA16_fPfS3_
    167          	fuelPhaseMap.init(config->injectionPhase, config->injPhaseLoadBins, config->injPhaseRpmBins);
   \   00000026   0x....             LDR.N    R0,??DataTable15_16
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0xF500 0x5324      ADD      R3,R0,#+10496
   \   0000002E   0x3378             ADDS     R3,R3,#+120
   \   00000030   0x....             LDR.N    R0,??DataTable15_16
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xF500 0x5224      ADD      R2,R0,#+10496
   \   00000038   0x3238             ADDS     R2,R2,#+56
   \   0000003A   0x....             LDR.N    R0,??DataTable15_16
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0xF500 0x5114      ADD      R1,R0,#+9472
   \   00000042   0x3138             ADDS     R1,R1,#+56
   \   00000044   0x....             LDR.N    R0,??DataTable15_2
   \   00000046   0x.... 0x....      BL       _ZN5Map3DILi16ELi16EE4initEPA16_fPfS3_
    168          }
   \   0000004A   0xBD01             POP      {R0,PC}          ;; return
    169          
    170          /**
    171           * @brief Engine warm-up fuel correction.
    172           */

   \                                 In section .text, align 2, keep-with-next
    173          float getCltCorrection(float clt DECLARE_ENGINE_PARAMETER_S) {
   \                     _Z16getCltCorrectionf:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xEEB0 0x8A40      VMOV.F32 S16,S0
    174          	if (cisnan(clt))
   \   0000000A   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   0000000E   0x.... 0x....      BL       __iar_FDtest
   \   00000012   0x2802             CMP      R0,#+2
   \   00000014   0xD102             BNE.N    ??getCltCorrection_0
    175          		return 1; // this error should be already reported somewhere else, let's just handle it
   \   00000016   0xEEB7 0x0A00      VMOV.F32 S0,#1.0
   \   0000001A   0xE00E             B.N      ??getCltCorrection_1
    176          	return interpolate2d(clt, config->cltFuelCorrBins, config->cltFuelCorr, CLT_CURVE_SIZE);
   \                     ??getCltCorrection_0:
   \   0000001C   0x2210             MOVS     R2,#+16
   \   0000001E   0x....             LDR.N    R0,??DataTable15_16
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF500 0x51B0      ADD      R1,R0,#+5632
   \   00000026   0x31F8             ADDS     R1,R1,#+248
   \   00000028   0x....             LDR.N    R0,??DataTable15_16
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0xF500 0x50B0      ADD      R0,R0,#+5632
   \   00000030   0x30B8             ADDS     R0,R0,#+184
   \   00000032   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000036   0x.... 0x....      BL       _Z13interpolate2dfPfS_i
   \                     ??getCltCorrection_1:
   \   0000003A   0xECBD 0x8B02      VPOP     {D8}
   \   0000003E   0xBD01             POP      {R0,PC}          ;; return
    177          }
    178          

   \                                 In section .text, align 2, keep-with-next
    179          float getIatCorrection(float iat DECLARE_ENGINE_PARAMETER_S) {
   \                     _Z16getIatCorrectionf:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xEEB0 0x8A40      VMOV.F32 S16,S0
    180          	if (cisnan(iat))
   \   0000000A   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   0000000E   0x.... 0x....      BL       __iar_FDtest
   \   00000012   0x2802             CMP      R0,#+2
   \   00000014   0xD102             BNE.N    ??getIatCorrection_0
    181          		return 1; // this error should be already reported somewhere else, let's just handle it
   \   00000016   0xEEB7 0x0A00      VMOV.F32 S0,#1.0
   \   0000001A   0xE00E             B.N      ??getIatCorrection_1
    182          	return interpolate2d(iat, config->iatFuelCorrBins, config->iatFuelCorr, IAT_CURVE_SIZE);
   \                     ??getIatCorrection_0:
   \   0000001C   0x2210             MOVS     R2,#+16
   \   0000001E   0x....             LDR.N    R0,??DataTable15_16
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF500 0x51B8      ADD      R1,R0,#+5888
   \   00000026   0x3178             ADDS     R1,R1,#+120
   \   00000028   0x....             LDR.N    R0,??DataTable15_16
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0xF500 0x50B8      ADD      R0,R0,#+5888
   \   00000030   0x3038             ADDS     R0,R0,#+56
   \   00000032   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000036   0x.... 0x....      BL       _Z13interpolate2dfPfS_i
   \                     ??getIatCorrection_1:
   \   0000003A   0xECBD 0x8B02      VPOP     {D8}
   \   0000003E   0xBD01             POP      {R0,PC}          ;; return
    183          }
    184          
    185          /**
    186           * @return Fuel injection duration injection as specified in the fuel map, in milliseconds
    187           */

   \                                 In section .text, align 4, keep-with-next
    188          floatms_t getBaseTableFuel(engine_configuration_s *engineConfiguration, int rpm, float engineLoad) {
   \                     _Z16getBaseTableFuelP22engine_configuration_sif:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0xEE08 0x1A10      VMOV     S16,R1
   \   0000000C   0xEEF0 0x8A40      VMOV.F32 S17,S0
    189          	if (cisnan(engineLoad)) {
   \   00000010   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \   00000014   0x.... 0x....      BL       __iar_FDtest
   \   00000018   0x2802             CMP      R0,#+2
   \   0000001A   0xD107             BNE.N    ??getBaseTableFuel_0
    190          		warning(OBD_PCM_Processor_Fault, "NaN engine load");
   \   0000001C   0x....             LDR.N    R1,??DataTable15_17
   \   0000001E   0xF240 0x205E      MOVW     R0,#+606
   \   00000022   0x.... 0x....      BL       warning
    191          		return NAN;
   \   00000026   0xED9F 0x....      VLDR.W   S0,??DataTable15  ;; 0x7fffffff
   \   0000002A   0xE006             B.N      ??getBaseTableFuel_1
    192          	}
    193          	return fuelMap.getValue(engineLoad, rpm);
   \                     ??getBaseTableFuel_0:
   \   0000002C   0xEEF8 0x0AC8      VCVT.F32.S32 S1,S16
   \   00000030   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \   00000034   0x....             LDR.N    R0,??DataTable15_1
   \   00000036   0x.... 0x....      BL       _ZN5Map3DILi16ELi16EE8getValueEff
   \                     ??getBaseTableFuel_1:
   \   0000003A   0xECBD 0x8B02      VPOP     {D8}
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
    194          }
    195          

   \                                 In section .text, align 2, keep-with-next
    196          float getBaroCorrection(DECLARE_ENGINE_PARAMETER_F) {
   \                     _Z17getBaroCorrectionv:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
    197          	if (hasBaroSensor(PASS_ENGINE_PARAMETER_F)) {
   \   00000006   0x.... 0x....      BL       _Z13hasBaroSensorv
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD00D             BEQ.N    ??getBaroCorrection_0
    198          		return baroCorrMap.getValue(getBaroPressure(PASS_ENGINE_PARAMETER_F), getRpm());
   \   0000000E   0x....             LDR.N    R0,??DataTable15_10
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       _ZN13RpmCalculator3rpmEv
   \   00000016   0xEE08 0x0A10      VMOV     S16,R0
   \   0000001A   0x.... 0x....      BL       _Z15getBaroPressurev
   \   0000001E   0xEEF8 0x0AC8      VCVT.F32.S32 S1,S16
   \   00000022   0x....             LDR.N    R0,??DataTable15_18
   \   00000024   0x.... 0x....      BL       _ZN5Map3DILi4ELi4EE8getValueEff
   \   00000028   0xE001             B.N      ??getBaroCorrection_1
    199          	} else {
    200          		return 1;
   \                     ??getBaroCorrection_0:
   \   0000002A   0xEEB7 0x0A00      VMOV.F32 S0,#1.0
   \                     ??getBaroCorrection_1:
   \   0000002E   0xECBD 0x8B02      VPOP     {D8}
   \   00000032   0xBD01             POP      {R0,PC}          ;; return
    201          	}
    202          }
    203          
    204          #if EFI_ENGINE_CONTROL
    205          /**
    206           * @return Duration of fuel injection while craning
    207           */

   \                                 In section .text, align 2, keep-with-next
    208          floatms_t getCrankingFuel(DECLARE_ENGINE_PARAMETER_F) {
   \                     _Z15getCrankingFuelv:
   \   00000000   0xB510             PUSH     {R4,LR}
    209          	return getCrankingFuel3(getCoolantTemperature(PASS_ENGINE_PARAMETER_F),
    210          			engine->rpmCalculator.getRevolutionCounterSinceStart() PASS_ENGINE_PARAMETER);
   \   00000002   0x....             LDR.N    R0,??DataTable15_10
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x.... 0x....      BL       _ZN13RpmCalculator30getRevolutionCounterSinceStartEv
   \   0000000A   0x0004             MOVS     R4,R0
   \   0000000C   0x.... 0x....      BL       _Z21getCoolantTemperaturev
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       _Z16getCrankingFuel3fj
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    211          }
    212          #endif
    213          

   \                                 In section .text, align 2, keep-with-next
    214          floatms_t getCrankingFuel3(float coolantTemperature,
    215          		uint32_t revolutionCounterSinceStart DECLARE_ENGINE_PARAMETER_S) {
   \                     _Z16getCrankingFuel3fj:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B04      VPUSH    {D8-D9}
   \   00000006   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   0000000A   0xEE08 0x0A90      VMOV     S17,R0
    216          	// these magic constants are in Celsius
    217          	float baseCrankingFuel = engineConfiguration->cranking.baseFuel;
   \   0000000E   0x....             LDR.N    R0,??DataTable15_4
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xED90 0x9A17      VLDR     S18,[R0, #+92]
    218          	if (cisnan(coolantTemperature))
   \   00000016   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   0000001A   0x.... 0x....      BL       __iar_FDtest
   \   0000001E   0x2802             CMP      R0,#+2
   \   00000020   0xD102             BNE.N    ??getCrankingFuel3_0
    219          		return baseCrankingFuel;
   \   00000022   0xEEB0 0x0A49      VMOV.F32 S0,S18
   \   00000026   0xE023             B.N      ??getCrankingFuel3_1
    220          	float durationCoef = interpolate2d(revolutionCounterSinceStart, config->crankingCycleBins,
    221          			config->crankingCycleCoef, CRANKING_CURVE_SIZE);
   \                     ??getCrankingFuel3_0:
   \   00000028   0x2208             MOVS     R2,#+8
   \   0000002A   0x....             LDR.N    R0,??DataTable15_16
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0xF500 0x51B8      ADD      R1,R0,#+5888
   \   00000032   0x31F8             ADDS     R1,R1,#+248
   \   00000034   0x....             LDR.N    R0,??DataTable15_16
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0xF500 0x50C0      ADD      R0,R0,#+6144
   \   0000003C   0x3018             ADDS     R0,R0,#+24
   \   0000003E   0xEEB8 0x0A68      VCVT.F32.U32 S0,S17
   \   00000042   0x.... 0x....      BL       _Z13interpolate2dfPfS_i
   \   00000046   0xEEF0 0x9A40      VMOV.F32 S19,S0
    222          
    223          	return interpolate2d(coolantTemperature, config->crankingFuelBins,
    224          			config->crankingFuelCoef, CRANKING_CURVE_SIZE) * baseCrankingFuel * durationCoef;
   \   0000004A   0x2208             MOVS     R2,#+8
   \   0000004C   0x....             LDR.N    R0,??DataTable15_16
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0xF500 0x51B8      ADD      R1,R0,#+5888
   \   00000054   0x31B8             ADDS     R1,R1,#+184
   \   00000056   0x....             LDR.N    R0,??DataTable15_16
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0xF500 0x50B8      ADD      R0,R0,#+5888
   \   0000005E   0x30D8             ADDS     R0,R0,#+216
   \   00000060   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000064   0x.... 0x....      BL       _Z13interpolate2dfPfS_i
   \   00000068   0xEE20 0x0A09      VMUL.F32 S0,S0,S18
   \   0000006C   0xEE20 0x0A29      VMUL.F32 S0,S0,S19
   \                     ??getCrankingFuel3_1:
   \   00000070   0xECBD 0x8B04      VPOP     {D8-D9}
   \   00000074   0xBD01             POP      {R0,PC}          ;; return
    225          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x447A0000         DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x7FFFFFFF         DC32     0x7fffffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   0x........         DC32     fuelMap

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \   00000000   0x........         DC32     fuelPhaseMap

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_3:
   \   00000000   0x3F911111         DC32     0x3f911111

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_4:
   \   00000000   0x........         DC32     engineConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_5:
   \   00000000   0xA32F5098         DC32     0xa32f5098

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_6:
   \   00000000   0x3F889359         DC32     0x3f889359

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_7:
   \   00000000   0x........         DC32     afrMap

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_8:
   \   00000000   0x........         DC32     _engine+0x14C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_9:
   \   00000000   0x........         DC32     persistentState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_10:
   \   00000000   0x........         DC32     engine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_11:
   \   00000000   0x........         DC32     `?<Constant "Unexpected getFuelMul...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_12:
   \   00000000   0x........         DC32     _engine+0x1EF0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_13:
   \   00000000   0x........         DC32     _engine+0x1EC4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_14:
   \   00000000   0x........         DC32     _engine+0x1EC8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_15:
   \   00000000   0x........         DC32     `?<Constant "vBatt=%f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_16:
   \   00000000   0x........         DC32     config

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_17:
   \   00000000   0x........         DC32     `?<Constant "NaN engine load">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_18:
   \   00000000   0x........         DC32     baroCorrMap

   \                                 In section .init_array, align 4, keep-with-next, root
   \   00000000   0x........         DC32    RELOC_ARM_TARGET1 __sti__routine

   \                                 In section .rodata, align 4
   \                     `?<Constant "Unexpected getFuelMul...">`:
   \   00000000   0x55 0x6E          DC8 "Unexpected getFuelMultiplier %d"
   \              0x65 0x78    
   \              0x70 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x67    
   \              0x65 0x74    
   \              0x46 0x75    
   \              0x65 0x6C    
   \              0x4D 0x75    
   \              0x6C 0x74    
   \              0x69 0x70    
   \              0x6C 0x69    
   \              0x65 0x72    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "vBatt=%f">`:
   \   00000000   0x76 0x42          DC8 "vBatt=%f"
   \              0x61 0x74    
   \              0x74 0x3D    
   \              0x25 0x66    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "NaN engine load">`:
   \   00000000   0x4E 0x61          DC8 "NaN engine load"
   \              0x4E 0x20    
   \              0x65 0x6E    
   \              0x67 0x69    
   \              0x6E 0x65    
   \              0x20 0x6C    
   \              0x6F 0x61    
   \              0x64 0x00    

   \                                 In section .text, align 2
   \   __code __interwork __softfp Map3D<16, 16>::subobject Map3D()
   \                     _ZN5Map3DILi16ELi16EEC2Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN5Map3DILi16ELi16EEC1Ev
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Map3D<16, 16>::Map3D()
         8   -> memset
      24   Map3D<16, 16>::getValue(float, float)
        24   -> firmwareError
        24   -> interpolate3d(float, float *, int, float, float *, int, float **)
       8   Map3D<16, 16>::init(float (*)[16], float *, float *)
       8   Map3D<16, 16>::subobject Map3D()
         8   -> Map3D<16, 16>::Map3D()
      24   Map3D<4, 4>::getValue(float, float)
        24   -> firmwareError
        24   -> interpolate3d(float, float *, int, float, float *, int, float **)
       8   __sti__routine()
         8   -> Map3D<16, 16>::Map3D()
      16   getBaroCorrection()
        16   -> Map3D<4, 4>::getValue(float, float)
        16   -> RpmCalculator::rpm()
        16   -> getBaroPressure()
        16   -> hasBaroSensor()
      16   getBaseFuel(int)
        16   -> AccelEnrichmemnt::getMapEnrichment()
        16   -> AccelEnrichmemnt::getTpsEnrichment()
        16   -> getRealMaf()
        16   -> getRealMafFuel(float, int)
        16   -> getSpeedDensityFuel(int)
      16   getBaseTableFuel(engine_configuration_s *, int, float)
        16   -> Map3D<16, 16>::getValue(float, float)
        16   -> __iar_FDtest
        16   -> warning
      16   getCltCorrection(float)
        16   -> __iar_FDtest
        16   -> interpolate2d(float, float *, float *, int)
       8   getCrankingFuel()
         8   -> RpmCalculator::getRevolutionCounterSinceStart()
         8   -> getCoolantTemperature()
         8   -> getCrankingFuel3(float, uint32_t)
      24   getCrankingFuel3(float, uint32_t)
        24   -> __iar_FDtest
        24   -> interpolate2d(float, float *, float *, int)
      24   getFuelMs(int)
        24   -> getBaseFuel(int)
        24   -> getCrankingFuel()
        24   -> getNumberOfInjections(injection_mode_e)
        24   -> getRunningFuel(float, int)
      16   getIatCorrection(float)
        16   -> __iar_FDtest
        16   -> interpolate2d(float, float *, float *, int)
       0   getInjectorDutyCycle(int)
      16   getInjectorLag(float)
        16   -> __aeabi_f2d
        16   -> __iar_FDtest
        16   -> interpolate2d(float, float *, float *, int)
        16   -> warning
       8   getNumberOfInjections(injection_mode_e)
         8   -> firmwareError
      24   getRealMafFuel(float, int)
        24   -> Map3D<16, 16>::getValue(float, float)
        24   -> __aeabi_d2f
        24   -> __aeabi_ddiv
        24   -> __aeabi_dmul
        24   -> __aeabi_f2d
        24   -> __aeabi_i2d
       0   getRunningFuel(float, int)
      16   getinjectionOffset(int)
        16   -> Map3D<16, 16>::getValue(float, float)
        16   -> getEngineLoadT()
      16   memset
        16   -> __aeabi_memset
       8   prepareFuelMap()
         8   -> Map3D<16, 16>::init(float (*)[16], float *, float *)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "NaN engine load">
      32  ?<Constant "Unexpected getFuelMul...">
      12  ?<Constant "vBatt=%f">
       4  ??DataTable12
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_10
       4  ??DataTable15_11
       4  ??DataTable15_12
       4  ??DataTable15_13
       4  ??DataTable15_14
       4  ??DataTable15_15
       4  ??DataTable15_16
       4  ??DataTable15_17
       4  ??DataTable15_18
       4  ??DataTable15_2
       4  ??DataTable15_3
       4  ??DataTable15_4
       4  ??DataTable15_5
       4  ??DataTable15_6
       4  ??DataTable15_7
       4  ??DataTable15_8
       4  ??DataTable15_9
       4  ??DataTable9
      30  Map3D<16, 16>::Map3D()
      80  Map3D<16, 16>::getValue(float, float)
      40  Map3D<16, 16>::init(float (*)[16], float *, float *)
      12  Map3D<16, 16>::subobject Map3D()
      80  Map3D<4, 4>::getValue(float, float)
      20  __sti__routine()
      76  fuelMap
      76  fuelPhaseMap
      52  getBaroCorrection()
     122  getBaseFuel(int)
      64  getBaseTableFuel(engine_configuration_s *, int, float)
      64  getCltCorrection(float)
      24  getCrankingFuel()
     118  getCrankingFuel3(float, uint32_t)
     128  getFuelMs(int)
      64  getIatCorrection(float)
       6  getInjectorDutyCycle(int)
      96  getInjectorLag(float)
      58  getNumberOfInjections(injection_mode_e)
     142  getRealMafFuel(float, int)
      22  getRunningFuel(float, int)
      38  getinjectionOffset(int)
      22  memset
      76  prepareFuelMap()
      44  -- Other

 
   152 bytes in section .bss
     4 bytes in section .init_array
   100 bytes in section .rodata
 1 442 bytes in section .text
 
 1 182 bytes of CODE  memory (+ 264 bytes shared)
    60 bytes of CONST memory (+  40 bytes shared)
   152 bytes of DATA  memory

Errors: none
Warnings: 1
