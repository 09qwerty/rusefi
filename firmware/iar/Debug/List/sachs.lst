###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:10:01 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\config\engines\s #
#                       achs.cpp                                              #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\config\engines\s #
#                       achs.cpp -lCN F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\Debug\List\ -lA F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\Debug\List\ -o F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\Debug\Obj\ --no_cse --no_unroll --no_inline  #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\s #
#                       achs.lst                                              #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\sa #
#                       chs.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\config\engines\sachs.cpp
      1          /**
      2           * @file	sachs.cpp
      3           *
      4           * set_engine_type 29
      5           * http://rusefi.com/forum/viewtopic.php?f=3&t=396
      6           *
      7           * @date Jan 26, 2015
      8           * @author Andrey Belomutskiy, (c) 2012-2015
      9           */
     10          
     11          #include "sachs.h"
     12          #include "allsensors.h"
     13          #include "engine_math.h"
     14          
     15          EXTERN_ENGINE;
     16          

   \                                 In section .text, align 4, keep-with-next
     17          void setSachs(DECLARE_ENGINE_PARAMETER_F) {
   \                     _Z8setSachsv:
   \   00000000   0xB580             PUSH     {R7,LR}
     18          	engineConfiguration->specs.displacement = 0.1; // 100cc
   \   00000002   0x4873             LDR.N    R0,??setSachs_0+0x10
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4973             LDR.N    R1,??setSachs_0+0x14  ;; 0x3dcccccd
   \   00000008   0xF8C0 0x1190      STR      R1,[R0, #+400]
     19          	engineConfiguration->specs.cylindersCount = 1;
   \   0000000C   0x4870             LDR.N    R0,??setSachs_0+0x10
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0xF8C0 0x1194      STR      R1,[R0, #+404]
     20          	engineConfiguration->engineCycle = 360;
   \   00000016   0x486E             LDR.N    R0,??setSachs_0+0x10
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF44F 0x71B4      MOV      R1,#+360
   \   0000001E   0xF8C0 0x11A0      STR      R1,[R0, #+416]
     21          
     22          	setOperationMode(engineConfiguration, TWO_STROKE);
   \   00000022   0x2103             MOVS     R1,#+3
   \   00000024   0x486A             LDR.N    R0,??setSachs_0+0x10
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x.... 0x....      BL       _Z16setOperationModeP22engine_configuration_s16operation_mode_e
     23          	engineConfiguration->specs.firingOrder = FO_ONE_CYLINDER;
   \   0000002C   0x4868             LDR.N    R0,??setSachs_0+0x10
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0xF8C0 0x1198      STR      R1,[R0, #+408]
     24          	engineConfiguration->engineChartSize = 400;
   \   00000036   0x4866             LDR.N    R0,??setSachs_0+0x10
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xF44F 0x71C8      MOV      R1,#+400
   \   0000003E   0xF8C0 0x15E8      STR      R1,[R0, #+1512]
     25          
     26          	 // set_injection_offset 0
     27          	engineConfiguration->injectionOffset = 0;
   \   00000042   0x4863             LDR.N    R0,??setSachs_0+0x10
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x2100             MOVS     R1,#+0
   \   00000048   0xF8C0 0x11B4      STR      R1,[R0, #+436]
     28          
     29          
     30          	/**
     31          	 * 50/2 trigger
     32          	 */
     33          	engineConfiguration->trigger.type = TT_TOOTHED_WHEEL;
   \   0000004C   0x4860             LDR.N    R0,??setSachs_0+0x10
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0xF8C0 0x1218      STR      R1,[R0, #+536]
     34          	engineConfiguration->trigger.customTotalToothCount = 50;
   \   00000056   0x485E             LDR.N    R0,??setSachs_0+0x10
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x2132             MOVS     R1,#+50
   \   0000005C   0xF8C0 0x1220      STR      R1,[R0, #+544]
     35          	engineConfiguration->trigger.customSkippedToothCount = 2;
   \   00000060   0x485B             LDR.N    R0,??setSachs_0+0x10
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0x2102             MOVS     R1,#+2
   \   00000066   0xF8C0 0x1224      STR      R1,[R0, #+548]
     36          
     37          	engineConfiguration->hasIatSensor = false;
   \   0000006A   0x4859             LDR.N    R0,??setSachs_0+0x10
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0xF890 0x05D8      LDRB     R0,[R0, #+1496]
   \   00000072   0xF010 0x00FD      ANDS     R0,R0,#0xFD
   \   00000076   0x4956             LDR.N    R1,??setSachs_0+0x10
   \   00000078   0x6809             LDR      R1,[R1, #+0]
   \   0000007A   0xF881 0x05D8      STRB     R0,[R1, #+1496]
     38          	engineConfiguration->hasMapSensor = false;
   \   0000007E   0x4854             LDR.N    R0,??setSachs_0+0x10
   \   00000080   0x6800             LDR      R0,[R0, #+0]
   \   00000082   0xF890 0x05D8      LDRB     R0,[R0, #+1496]
   \   00000086   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   0000008A   0x4951             LDR.N    R1,??setSachs_0+0x10
   \   0000008C   0x6809             LDR      R1,[R1, #+0]
   \   0000008E   0xF881 0x05D8      STRB     R0,[R1, #+1496]
     39          	engineConfiguration->hasBaroSensor = false;
   \   00000092   0x484F             LDR.N    R0,??setSachs_0+0x10
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0xF890 0x05D8      LDRB     R0,[R0, #+1496]
   \   0000009A   0xF010 0x00FB      ANDS     R0,R0,#0xFB
   \   0000009E   0x494C             LDR.N    R1,??setSachs_0+0x10
   \   000000A0   0x6809             LDR      R1,[R1, #+0]
   \   000000A2   0xF881 0x05D8      STRB     R0,[R1, #+1496]
     40          	engineConfiguration->hasAfrSensor = false;
   \   000000A6   0x484A             LDR.N    R0,??setSachs_0+0x10
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0xF890 0x05D8      LDRB     R0,[R0, #+1496]
   \   000000AE   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   000000B2   0x4947             LDR.N    R1,??setSachs_0+0x10
   \   000000B4   0x6809             LDR      R1,[R1, #+0]
   \   000000B6   0xF881 0x05D8      STRB     R0,[R1, #+1496]
     41          	engineConfiguration->hasCltSensor = false;
   \   000000BA   0x4845             LDR.N    R0,??setSachs_0+0x10
   \   000000BC   0x6800             LDR      R0,[R0, #+0]
   \   000000BE   0xF890 0x05D8      LDRB     R0,[R0, #+1496]
   \   000000C2   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   000000C6   0x4942             LDR.N    R1,??setSachs_0+0x10
   \   000000C8   0x6809             LDR      R1,[R1, #+0]
   \   000000CA   0xF881 0x05D8      STRB     R0,[R1, #+1496]
     42          	boardConfiguration->useSerialPort = false;
   \   000000CE   0x4842             LDR.N    R0,??setSachs_0+0x18
   \   000000D0   0x6800             LDR      R0,[R0, #+0]
   \   000000D2   0xF890 0x0181      LDRB     R0,[R0, #+385]
   \   000000D6   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   000000DA   0x493F             LDR.N    R1,??setSachs_0+0x18
   \   000000DC   0x6809             LDR      R1,[R1, #+0]
   \   000000DE   0xF881 0x0181      STRB     R0,[R1, #+385]
     43          
     44          	// Frankenstein analog input #1: PA1 adc1 MAP
     45          	// Frankenstein analog input #2: PA3 adc3 TPS
     46          	// Frankenstein analog input #3: PC3 adc13 IAT
     47          	// Frankenstein analog input #4: PC1 adc11 CLT
     48          	// Frankenstein analog input #5: PA0 adc0 O2
     49          	// Frankenstein analog input #6: PC2 adc12
     50          	// Frankenstein analog input #7: PA4 adc4
     51          	// Frankenstein analog input #8: PA2 adc2
     52          	// Frankenstein analog input #9: PA6 adc6
     53          	// Frankenstein analog input #10: PA7 adc7
     54          	// Frankenstein analog input #11: PC4 adc14
     55          	// Frankenstein analog input #12: PC5 adc15
     56          
     57          	engineConfiguration->tpsAdcChannel = EFI_ADC_3;
   \   000000E2   0x483B             LDR.N    R0,??setSachs_0+0x10
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0x2103             MOVS     R1,#+3
   \   000000E8   0xF8C0 0x120C      STR      R1,[R0, #+524]
     58          	engineConfiguration->vbattAdcChannel = EFI_ADC_NONE;
   \   000000EC   0x4838             LDR.N    R0,??setSachs_0+0x10
   \   000000EE   0x6800             LDR      R0,[R0, #+0]
   \   000000F0   0x2110             MOVS     R1,#+16
   \   000000F2   0xF8C0 0x11D8      STR      R1,[R0, #+472]
     59          
     60          	/**
     61          	 * TPS 0% 0.9v
     62          	 * TPS 100% 2.34v
     63          	 */
     64          	engineConfiguration->tpsMin = convertVoltageTo10bitADC(1.250);
   \   000000F6   0xEEB7 0x0A04      VMOV.F32 S0,#1.25
   \   000000FA   0x.... 0x....      BL       _Z24convertVoltageTo10bitADCf
   \   000000FE   0x4934             LDR.N    R1,??setSachs_0+0x10
   \   00000100   0x6809             LDR      R1,[R1, #+0]
   \   00000102   0xF8A1 0x0052      STRH     R0,[R1, #+82]
     65          	engineConfiguration->tpsMax = convertVoltageTo10bitADC(4.538);
   \   00000106   0xED9F 0x0A2E      VLDR.W   S0,??setSachs_0  ;; 0x4091374c
   \   0000010A   0x.... 0x....      BL       _Z24convertVoltageTo10bitADCf
   \   0000010E   0x4930             LDR.N    R1,??setSachs_0+0x10
   \   00000110   0x6809             LDR      R1,[R1, #+0]
   \   00000112   0xF8A1 0x0054      STRH     R0,[R1, #+84]
     66          
     67          
     68          	// Frankenstein: low side - out #1: PC14
     69          	// Frankenstein: low side - out #2: PC15
     70          	// Frankenstein: low side - out #3: PE6
     71          	// Frankenstein: low side - out #4: PC13
     72          	// Frankenstein: low side - out #5: PE4
     73          	// Frankenstein: low side - out #6: PE5
     74          	// Frankenstein: low side - out #7: PE2
     75          	// Frankenstein: low side - out #8: PE3
     76          	// Frankenstein: low side - out #9: PE0
     77          	// Frankenstein: low side - out #10: PE1
     78          	// Frankenstein: low side - out #11: PB8
     79          	// Frankenstein: low side - out #12: PB9
     80          
     81          	boardConfiguration->triggerInputPins[0] = GPIOA_5;
   \   00000116   0x4830             LDR.N    R0,??setSachs_0+0x18
   \   00000118   0x6800             LDR      R0,[R0, #+0]
   \   0000011A   0x2105             MOVS     R1,#+5
   \   0000011C   0xF8C0 0x1128      STR      R1,[R0, #+296]
     82          	boardConfiguration->triggerInputPins[1] = GPIO_UNASSIGNED;
   \   00000120   0x482D             LDR.N    R0,??setSachs_0+0x18
   \   00000122   0x6800             LDR      R0,[R0, #+0]
   \   00000124   0x2150             MOVS     R1,#+80
   \   00000126   0xF8C0 0x112C      STR      R1,[R0, #+300]
     83          
     84          	boardConfiguration->injectionPins[0] = GPIOC_15;
   \   0000012A   0x482B             LDR.N    R0,??setSachs_0+0x18
   \   0000012C   0x6800             LDR      R0,[R0, #+0]
   \   0000012E   0x212F             MOVS     R1,#+47
   \   00000130   0x6201             STR      R1,[R0, #+32]
     85          
     86          	boardConfiguration->fuelPumpPin = GPIOE_6;
   \   00000132   0x4829             LDR.N    R0,??setSachs_0+0x18
   \   00000134   0x6800             LDR      R0,[R0, #+0]
   \   00000136   0x2146             MOVS     R1,#+70
   \   00000138   0x6181             STR      R1,[R0, #+24]
     87          
     88          	// todo: extract a method? figure out something smarter
     89          	setFuelRpmBin(800, 15000 PASS_ENGINE_PARAMETER);
   \   0000013A   0xEDDF 0x0A22      VLDR.W   S1,??setSachs_0+0x4  ;; 0x466a6000
   \   0000013E   0xED9F 0x0A22      VLDR.W   S0,??setSachs_0+0x8  ;; 0x44480000
   \   00000142   0x.... 0x....      BL       _Z13setFuelRpmBinff
     90          	setTimingRpmBin(800, 15000 PASS_ENGINE_PARAMETER);
   \   00000146   0xEDDF 0x0A1F      VLDR.W   S1,??setSachs_0+0x4  ;; 0x466a6000
   \   0000014A   0xED9F 0x0A1F      VLDR.W   S0,??setSachs_0+0x8  ;; 0x44480000
   \   0000014E   0x.... 0x....      BL       _Z15setTimingRpmBinff
     91          	setTableBin2(config->veRpmBins, FUEL_RPM_COUNT, 15000, 7000, 1);
   \   00000152   0xEEB7 0x1A00      VMOV.F32 S2,#1.0
   \   00000156   0xEDDF 0x0A1D      VLDR.W   S1,??setSachs_0+0xC  ;; 0x45dac000
   \   0000015A   0xED9F 0x0A1A      VLDR.W   S0,??setSachs_0+0x4  ;; 0x466a6000
   \   0000015E   0x2110             MOVS     R1,#+16
   \   00000160   0x481E             LDR.N    R0,??setSachs_0+0x1C
   \   00000162   0x6800             LDR      R0,[R0, #+0]
   \   00000164   0xF500 0x5058      ADD      R0,R0,#+13824
   \   00000168   0x30F8             ADDS     R0,R0,#+248
   \   0000016A   0x.... 0x....      BL       _Z12setTableBin2Pfifff
     92          	setTableBin2(config->afrRpmBins, FUEL_RPM_COUNT, 15000, 7000, 1);
   \   0000016E   0xEEB7 0x1A00      VMOV.F32 S2,#1.0
   \   00000172   0xEDDF 0x0A16      VLDR.W   S1,??setSachs_0+0xC  ;; 0x45dac000
   \   00000176   0xED9F 0x0A13      VLDR.W   S0,??setSachs_0+0x4  ;; 0x466a6000
   \   0000017A   0x2110             MOVS     R1,#+16
   \   0000017C   0x4817             LDR.N    R0,??setSachs_0+0x1C
   \   0000017E   0x6800             LDR      R0,[R0, #+0]
   \   00000180   0xF500 0x506C      ADD      R0,R0,#+15104
   \   00000184   0x3078             ADDS     R0,R0,#+120
   \   00000186   0x.... 0x....      BL       _Z12setTableBin2Pfifff
     93          
     94          	engineConfiguration->hasFrequencyReportingMapSensor = true;
   \   0000018A   0x4811             LDR.N    R0,??setSachs_0+0x10
   \   0000018C   0x6800             LDR      R0,[R0, #+0]
   \   0000018E   0xF890 0x05DA      LDRB     R0,[R0, #+1498]
   \   00000192   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000196   0x490E             LDR.N    R1,??setSachs_0+0x10
   \   00000198   0x6809             LDR      R1,[R1, #+0]
   \   0000019A   0xF881 0x05DA      STRB     R0,[R1, #+1498]
     95          	boardConfiguration->frequencyReportingMapInputPin = GPIOC_6;
   \   0000019E   0x480E             LDR.N    R0,??setSachs_0+0x18
   \   000001A0   0x6800             LDR      R0,[R0, #+0]
   \   000001A2   0x2126             MOVS     R1,#+38
   \   000001A4   0xF8C0 0x1364      STR      R1,[R0, #+868]
     96          	boardConfiguration->mapFrequency100Kpa = 159;
   \   000001A8   0x480B             LDR.N    R0,??setSachs_0+0x18
   \   000001AA   0x6800             LDR      R0,[R0, #+0]
   \   000001AC   0x490C             LDR.N    R1,??setSachs_0+0x20  ;; 0x431f0000
   \   000001AE   0xF8C0 0x109C      STR      R1,[R0, #+156]
     97          	boardConfiguration->mapFrequency0Kpa = 80;
   \   000001B2   0x4809             LDR.N    R0,??setSachs_0+0x18
   \   000001B4   0x6800             LDR      R0,[R0, #+0]
   \   000001B6   0x490B             LDR.N    R1,??setSachs_0+0x24  ;; 0x42a00000
   \   000001B8   0xF8C0 0x1098      STR      R1,[R0, #+152]
     98          }
   \   000001BC   0xBD01             POP      {R0,PC}          ;; return
   \   000001BE   0xBF00             Nop      
   \                     ??setSachs_0:
   \   000001C0   0x4091374C         DC32     0x4091374c
   \   000001C4   0x466A6000         DC32     0x466a6000
   \   000001C8   0x44480000         DC32     0x44480000
   \   000001CC   0x45DAC000         DC32     0x45dac000
   \   000001D0   0x........         DC32     engineConfiguration
   \   000001D4   0x3DCCCCCD         DC32     0x3dcccccd
   \   000001D8   0x........         DC32     boardConfiguration
   \   000001DC   0x........         DC32     config
   \   000001E0   0x431F0000         DC32     0x431f0000
   \   000001E4   0x42A00000         DC32     0x42a00000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   setSachs()
         8   -> convertVoltageTo10bitADC(float)
         8   -> setFuelRpmBin(float, float)
         8   -> setOperationMode(engine_configuration_s *, operation_mode_e)
         8   -> setTableBin2(float *, int, float, float, float)
         8   -> setTimingRpmBin(float, float)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     488  setSachs()

 
 488 bytes in section .text
 
 488 bytes of CODE memory

Errors: none
Warnings: 1
