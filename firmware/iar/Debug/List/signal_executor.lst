###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:10:03 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\algo #
#                       \signal_executor.cpp                                  #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\algo #
#                       \signal_executor.cpp -lCN                             #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\  #
#                       -lA F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Li #
#                       st\ -o F:\stuff\rusefi_sourceforge\firmware\iar\Debug #
#                       \Obj\ --no_cse --no_unroll --no_inline                #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\s #
#                       ignal_executor.lst                                    #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\si #
#                       gnal_executor.o                                       #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\algo\signal_executor.cpp
      1          /**
      2           * @file	signal_executor.cpp
      3           *
      4           * todo: we should split this file into two:
      5           * one for pure scheduling and another one for signal output which would
      6           * use the scheduling
      7           *
      8           * @date Dec 4, 2013
      9           * @author Andrey Belomutskiy, (c) 2012-2015
     10           *
     11           * This file is part of rusEfi - see http://rusefi.com
     12           *
     13           * rusEfi is free software; you can redistribute it and/or modify it under the terms of
     14           * the GNU General Public License as published by the Free Software Foundation; either
     15           * version 3 of the License, or (at your option) any later version.
     16           *
     17           * rusEfi is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
     18           * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     19           * GNU General Public License for more details.
     20           *
     21           * You should have received a copy of the GNU General Public License along with this program.
     22           * If not, see <http://www.gnu.org/licenses/>.
     23           */
     24          
     25          #include "main.h"
     26          #include "signal_executor.h"
     27          #include "efiGpio.h"
     28          #include "engine.h"
     29          
     30          /**
     31           * Signal executors feed digital events right into WaveChart used by Sniffer tab of Dev Console
     32           */
     33          #include "rpm_calculator.h"
     34          
     35          EXTERN_ENGINE;
     36          
     37          #if EFI_WAVE_CHART
     38          #include "wave_chart.h"
     39          extern WaveChart waveChart;
     40          #endif
     41          
     42          #include "efiGpio.h"
     43          
     44          extern engine_pins_s enginePins;
     45          

   \                                 In section .data, align 4
     46          static const char *sparkNames[IGNITION_PIN_COUNT] = { "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8",
   \                     sparkNames:
   \   00000000   0x........         DC32 `?<Constant "c1">`, `?<Constant "c2">`, `?<Constant "c3">`
   \              0x........   
   \              0x........   
   \   0000000C   0x........         DC32 `?<Constant "c4">`, `?<Constant "c5">`, `?<Constant "c6">`
   \              0x........   
   \              0x........   
   \   00000018   0x........         DC32 `?<Constant "c7">`, `?<Constant "c8">`, `?<Constant "c9">`
   \              0x........   
   \              0x........   
   \   00000024   0x........         DC32 `?<Constant "cA">`, `?<Constant "cB">`, `?<Constant "cD">`
   \              0x........   
   \              0x........   
     47          		"c9", "cA", "cB", "cD"};
     48          

   \                                 In section .data, align 4
     49          static const char *injectorNames[INJECTION_PIN_COUNT] = { "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8",
   \                     injectorNames:
   \   00000000   0x........         DC32 `?<Constant "i1">`, `?<Constant "i2">`, `?<Constant "i3">`
   \              0x........   
   \              0x........   
   \   0000000C   0x........         DC32 `?<Constant "i4">`, `?<Constant "i5">`, `?<Constant "i6">`
   \              0x........   
   \              0x........   
   \   00000018   0x........         DC32 `?<Constant "i7">`, `?<Constant "i8">`, `?<Constant "j9">`
   \              0x........   
   \              0x........   
   \   00000024   0x........         DC32 `?<Constant "iA">`, `?<Constant "iB">`, `?<Constant "iC">`
   \              0x........   
   \              0x........   
     50          		"j9", "iA", "iB", "iC"};
     51          

   \                                 In section .text, align 2, keep-with-next
     52          void initSignalExecutor(void) {
   \                     _Z18initSignalExecutorv:
   \   00000000   0xB580             PUSH     {R7,LR}
     53          	initSignalExecutorImpl();
   \   00000002   0x.... 0x....      BL       _Z22initSignalExecutorImplv
     54          	for (int i = 0; i < IGNITION_PIN_COUNT;i++) {
   \   00000006   0x2000             MOVS     R0,#+0
   \                     ??initSignalExecutor_0:
   \   00000008   0x280C             CMP      R0,#+12
   \   0000000A   0xDA0A             BGE.N    ??initSignalExecutor_1
     55          		enginePins.coils[i].name = sparkNames[i];
   \   0000000C   0x2114             MOVS     R1,#+20
   \   0000000E   0x....             LDR.N    R2,??DataTable3_2
   \   00000010   0xFB01 0x2100      MLA      R1,R1,R0,R2
   \   00000014   0x....             LDR.N    R2,??DataTable3_3
   \   00000016   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   0000001A   0xF8C1 0x2160      STR      R2,[R1, #+352]
     56          	}
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \   00000020   0xE7F2             B.N      ??initSignalExecutor_0
     57          	for (int i = 0; i < INJECTION_PIN_COUNT;i++) {
   \                     ??initSignalExecutor_1:
   \   00000022   0x2000             MOVS     R0,#+0
   \                     ??initSignalExecutor_2:
   \   00000024   0x280C             CMP      R0,#+12
   \   00000026   0xDA09             BGE.N    ??initSignalExecutor_3
     58          		enginePins.injectors[i].name = injectorNames[i];
   \   00000028   0x2114             MOVS     R1,#+20
   \   0000002A   0x....             LDR.N    R2,??DataTable3_2
   \   0000002C   0xFB01 0x2100      MLA      R1,R1,R0,R2
   \   00000030   0x....             LDR.N    R2,??DataTable3_4
   \   00000032   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000036   0x670A             STR      R2,[R1, #+112]
     59          	}
   \   00000038   0x1C40             ADDS     R0,R0,#+1
   \   0000003A   0xE7F3             B.N      ??initSignalExecutor_2
     60          }
   \                     ??initSignalExecutor_3:
   \   0000003C   0xBD01             POP      {R0,PC}          ;; return
     61          
     62          //uint32_t dbgStart;
     63          //uint32_t dbgDurr;
     64          

   \                                 In section .text, align 2, keep-with-next
     65          void turnPinHigh(NamedOutputPin *output) {
   \                     _Z11turnPinHighP14NamedOutputPin:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     66          	efiAssertVoid(output!=NULL, "NULL @ turnPinHigh");
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD103             BNE.N    ??turnPinHigh_0
   \   00000008   0x....             LDR.N    R0,??DataTable3_5
   \   0000000A   0x.... 0x....      BL       firmwareError
   \   0000000E   0xE03B             B.N      ??turnPinHigh_1
     67          #if EFI_DEFAILED_LOGGING
     68          //	signal->hi_time = hTimeNow();
     69          #endif /* EFI_DEFAILED_LOGGING */
     70          
     71          #if EFI_GPIO
     72          	// turn the output level ACTIVE
     73          	// todo: this XOR should go inside the setOutputPinValue method
     74          	doSetOutputPinValue2(output, true);
   \                     ??turnPinHigh_0:
   \   00000010   0x6820             LDR      R0,[R4, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD029             BEQ.N    ??turnPinHigh_2
   \   00000016   0x68A0             LDR      R0,[R4, #+8]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD103             BNE.N    ??turnPinHigh_3
   \   0000001C   0x....             LDR.N    R0,??DataTable3_6
   \   0000001E   0x.... 0x....      BL       firmwareError
   \   00000022   0xE031             B.N      ??turnPinHigh_1
   \                     ??turnPinHigh_3:
   \   00000024   0x68A0             LDR      R0,[R4, #+8]
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x0005             MOVS     R5,R0
   \   0000002A   0x2D04             CMP      R5,#+4
   \   0000002C   0xDB03             BLT.N    ??turnPinHigh_4
   \   0000002E   0x....             LDR.N    R0,??DataTable3_7
   \   00000030   0x.... 0x....      BL       firmwareError
   \   00000034   0xE028             B.N      ??turnPinHigh_1
   \                     ??turnPinHigh_4:
   \   00000036   0x2D00             CMP      R5,#+0
   \   00000038   0xD001             BEQ.N    ??turnPinHigh_5
   \   0000003A   0x2D02             CMP      R5,#+2
   \   0000003C   0xD101             BNE.N    ??turnPinHigh_6
   \                     ??turnPinHigh_5:
   \   0000003E   0x2601             MOVS     R6,#+1
   \   00000040   0xE000             B.N      ??turnPinHigh_7
   \                     ??turnPinHigh_6:
   \   00000042   0x2600             MOVS     R6,#+0
   \                     ??turnPinHigh_7:
   \   00000044   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000046   0x68E0             LDR      R0,[R4, #+12]
   \   00000048   0x2801             CMP      R0,#+1
   \   0000004A   0xD00E             BEQ.N    ??turnPinHigh_2
   \   0000004C   0x43F0             MVNS     R0,R6
   \   0000004E   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000052   0x6861             LDR      R1,[R4, #+4]
   \   00000054   0x3110             ADDS     R1,R1,#+16
   \   00000056   0x4088             LSLS     R0,R0,R1
   \   00000058   0xF016 0x0101      ANDS     R1,R6,#0x1
   \   0000005C   0x6862             LDR      R2,[R4, #+4]
   \   0000005E   0x4091             LSLS     R1,R1,R2
   \   00000060   0x4308             ORRS     R0,R1,R0
   \   00000062   0x6821             LDR      R1,[R4, #+0]
   \   00000064   0x6188             STR      R0,[R1, #+24]
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0x60E0             STR      R0,[R4, #+12]
     75          	// sleep for the needed duration
     76          #endif
     77          #if EFI_WAVE_CHART
     78          	// explicit check here is a performance optimization to speed up no-chart mode
     79          	if (CONFIG(isEngineChartEnabled)) {
   \                     ??turnPinHigh_2:
   \   0000006A   0x....             LDR.N    R0,??DataTable3_8
   \   0000006C   0xF890 0x05E0      LDRB     R0,[R0, #+1504]
   \   00000070   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000072   0x0940             LSRS     R0,R0,#+5
   \   00000074   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD005             BEQ.N    ??turnPinHigh_8
     80          		// this is a performance optimization - array index is cheaper then invoking a method with 'switch'
     81          		const char *pinName = output->name;
   \   0000007C   0x6925             LDR      R5,[R4, #+16]
     82          //	dbgDurr = hal_lld_get_counter_value() - dbgStart;
     83          
     84          		addWaveChartEvent(pinName, WC_UP);
   \   0000007E   0x....             ADR.N    R2,??DataTable3  ;; "u"
   \   00000080   0x0029             MOVS     R1,R5
   \   00000082   0x....             LDR.N    R0,??DataTable3_9
   \   00000084   0x.... 0x....      BL       _ZN9WaveChart18addWaveChartEvent3EPKcS1_
     85          	}
     86          #endif /* EFI_WAVE_ANALYZER */
     87          //	dbgDurr = hal_lld_get_counter_value() - dbgStart;
     88          }
   \                     ??turnPinHigh_8:
   \                     ??turnPinHigh_1:
   \   00000088   0xBD70             POP      {R4-R6,PC}       ;; return
     89          

   \                                 In section .text, align 2, keep-with-next
     90          void turnPinLow(NamedOutputPin *output) {
   \                     _Z10turnPinLowP14NamedOutputPin:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     91          	efiAssertVoid(output!=NULL, "NULL turnPinLow");
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD103             BNE.N    ??turnPinLow_0
   \   00000008   0x....             LDR.N    R0,??DataTable3_10
   \   0000000A   0x.... 0x....      BL       firmwareError
   \   0000000E   0xE03B             B.N      ??turnPinLow_1
     92          #if EFI_GPIO
     93          	// turn off the output
     94          	doSetOutputPinValue2(output, false);
   \                     ??turnPinLow_0:
   \   00000010   0x6820             LDR      R0,[R4, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD029             BEQ.N    ??turnPinLow_2
   \   00000016   0x68A0             LDR      R0,[R4, #+8]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD103             BNE.N    ??turnPinLow_3
   \   0000001C   0x....             LDR.N    R0,??DataTable3_6
   \   0000001E   0x.... 0x....      BL       firmwareError
   \   00000022   0xE031             B.N      ??turnPinLow_1
   \                     ??turnPinLow_3:
   \   00000024   0x68A0             LDR      R0,[R4, #+8]
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x0005             MOVS     R5,R0
   \   0000002A   0x2D04             CMP      R5,#+4
   \   0000002C   0xDB03             BLT.N    ??turnPinLow_4
   \   0000002E   0x....             LDR.N    R0,??DataTable3_7
   \   00000030   0x.... 0x....      BL       firmwareError
   \   00000034   0xE028             B.N      ??turnPinLow_1
   \                     ??turnPinLow_4:
   \   00000036   0x2D01             CMP      R5,#+1
   \   00000038   0xD001             BEQ.N    ??turnPinLow_5
   \   0000003A   0x2D03             CMP      R5,#+3
   \   0000003C   0xD101             BNE.N    ??turnPinLow_6
   \                     ??turnPinLow_5:
   \   0000003E   0x2601             MOVS     R6,#+1
   \   00000040   0xE000             B.N      ??turnPinLow_7
   \                     ??turnPinLow_6:
   \   00000042   0x2600             MOVS     R6,#+0
   \                     ??turnPinLow_7:
   \   00000044   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000046   0x68E0             LDR      R0,[R4, #+12]
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD00E             BEQ.N    ??turnPinLow_2
   \   0000004C   0x43F0             MVNS     R0,R6
   \   0000004E   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000052   0x6861             LDR      R1,[R4, #+4]
   \   00000054   0x3110             ADDS     R1,R1,#+16
   \   00000056   0x4088             LSLS     R0,R0,R1
   \   00000058   0xF016 0x0101      ANDS     R1,R6,#0x1
   \   0000005C   0x6862             LDR      R2,[R4, #+4]
   \   0000005E   0x4091             LSLS     R1,R1,R2
   \   00000060   0x4308             ORRS     R0,R1,R0
   \   00000062   0x6821             LDR      R1,[R4, #+0]
   \   00000064   0x6188             STR      R0,[R1, #+24]
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x60E0             STR      R0,[R4, #+12]
     95          #endif
     96          
     97          #if EFI_DEFAILED_LOGGING
     98          	systime_t after = hTimeNow();
     99          	debugInt(&signal->logging, "a_time", after - signal->hi_time);
    100          	scheduleLogging(&signal->logging);
    101          #endif /* EFI_DEFAILED_LOGGING */
    102          
    103          #if EFI_WAVE_CHART
    104          	if (CONFIG(isEngineChartEnabled)) {
   \                     ??turnPinLow_2:
   \   0000006A   0x....             LDR.N    R0,??DataTable3_8
   \   0000006C   0xF890 0x05E0      LDRB     R0,[R0, #+1504]
   \   00000070   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000072   0x0940             LSRS     R0,R0,#+5
   \   00000074   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD005             BEQ.N    ??turnPinLow_8
    105          		// this is a performance optimization - array index is cheaper then invoking a method with 'switch'
    106          		const char *pinName = output->name;
   \   0000007C   0x6925             LDR      R5,[R4, #+16]
    107          
    108          		addWaveChartEvent(pinName, WC_DOWN);
   \   0000007E   0x....             ADR.N    R2,??DataTable3_1  ;; "d"
   \   00000080   0x0029             MOVS     R1,R5
   \   00000082   0x....             LDR.N    R0,??DataTable3_9
   \   00000084   0x.... 0x....      BL       _ZN9WaveChart18addWaveChartEvent3EPKcS1_
    109          	}
    110          #endif /* EFI_WAVE_ANALYZER */
    111          }
   \                     ??turnPinLow_8:
   \                     ??turnPinLow_1:
   \   00000088   0xBD70             POP      {R4-R6,PC}       ;; return
    112          
    113          int getRevolutionCounter(void);
    114          
    115          /**
    116           *
    117           * @param	delay	the number of ticks before the output signal
    118           * 					immediate output if delay is zero
    119           * @param	dwell	the number of ticks of output duration
    120           *
    121           */

   \                                 In section .text, align 2, keep-with-next
    122          void scheduleOutput(OutputSignal *signal, efitimeus_t nowUs, float delayUs, float durationUs) {
   \                     _Z14scheduleOutputP19OutputSignal_structxff:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0xED2D 0x8B02      VPUSH    {D8}
   \   00000008   0xB082             SUB      SP,SP,#+8
   \   0000000A   0x0006             MOVS     R6,R0
   \   0000000C   0x0014             MOVS     R4,R2
   \   0000000E   0x001D             MOVS     R5,R3
   \   00000010   0xEEF0 0x8A40      VMOV.F32 S17,S0
   \   00000014   0xEEB0 0x8A60      VMOV.F32 S16,S1
    123          #if EFI_GPIO
    124          	if (durationUs < 0) {
   \   00000018   0xEEB5 0x8A40      VCMP.F32 S16,#0.0
   \   0000001C   0xEEF1 0xFA10      FMSTAT   
   \   00000020   0xD50B             BPL.N    ??scheduleOutput_0
    125          		warning(OBD_PCM_Processor_Fault, "duration cannot be negative: %d", durationUs);
   \   00000022   0xEE18 0x0A10      VMOV     R0,S16
   \   00000026   0x.... 0x....      BL       __aeabi_f2d
   \   0000002A   0x0002             MOVS     R2,R0
   \   0000002C   0x000B             MOVS     R3,R1
   \   0000002E   0x....             LDR.N    R1,??DataTable3_11
   \   00000030   0xF240 0x205E      MOVW     R0,#+606
   \   00000034   0x.... 0x....      BL       warning
    126          		return;
   \   00000038   0xE04A             B.N      ??scheduleOutput_1
    127          	}
    128          	if (cisnan(durationUs)) {
   \                     ??scheduleOutput_0:
   \   0000003A   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   0000003E   0x.... 0x....      BL       __iar_FDtest
   \   00000042   0x2802             CMP      R0,#+2
   \   00000044   0xD10B             BNE.N    ??scheduleOutput_2
    129          		warning(OBD_PCM_Processor_Fault, "NaN in scheduleOutput", durationUs);
   \   00000046   0xEE18 0x0A10      VMOV     R0,S16
   \   0000004A   0x.... 0x....      BL       __aeabi_f2d
   \   0000004E   0x0002             MOVS     R2,R0
   \   00000050   0x000B             MOVS     R3,R1
   \   00000052   0x....             LDR.N    R1,??DataTable3_12
   \   00000054   0xF240 0x205E      MOVW     R0,#+606
   \   00000058   0x.... 0x....      BL       warning
    130          		return;
   \   0000005C   0xE038             B.N      ??scheduleOutput_1
    131          	}
    132          
    133          	efiAssertVoid(signal!=NULL, "signal is NULL");
   \                     ??scheduleOutput_2:
   \   0000005E   0x2E00             CMP      R6,#+0
   \   00000060   0xD103             BNE.N    ??scheduleOutput_3
   \   00000062   0x....             LDR.N    R0,??DataTable3_13
   \   00000064   0x.... 0x....      BL       firmwareError
   \   00000068   0xE032             B.N      ??scheduleOutput_1
    134          	int index = getRevolutionCounter() % 2;
   \                     ??scheduleOutput_3:
   \   0000006A   0x.... 0x....      BL       _Z20getRevolutionCounterv
   \   0000006E   0x2102             MOVS     R1,#+2
   \   00000070   0xFB90 0xF7F1      SDIV     R7,R0,R1
   \   00000074   0xFB07 0x0711      MLS      R7,R7,R1,R0
    135          	scheduling_s * sUp = &signal->signalTimerUp[index];
   \   00000078   0x2018             MOVS     R0,#+24
   \   0000007A   0xFB00 0x6007      MLA      R0,R0,R7,R6
   \   0000007E   0xF110 0x0808      ADDS     R8,R0,#+8
    136          	scheduling_s * sDown = &signal->signalTimerDown[index];
   \   00000082   0x2018             MOVS     R0,#+24
   \   00000084   0xFB00 0x6007      MLA      R0,R0,R7,R6
   \   00000088   0xF110 0x0938      ADDS     R9,R0,#+56
    137          
    138          	scheduleByTime("out up", sUp, nowUs + (int) delayUs, (schfunc_t) &turnPinHigh, signal->output);
   \   0000008C   0x6830             LDR      R0,[R6, #+0]
   \   0000008E   0x9001             STR      R0,[SP, #+4]
   \   00000090   0x....             LDR.N    R0,??DataTable3_14
   \   00000092   0x9000             STR      R0,[SP, #+0]
   \   00000094   0xEEBD 0x0AE8      VCVT.S32.F32 S0,S17
   \   00000098   0xEE10 0x0A10      VMOV     R0,S0
   \   0000009C   0x17C1             ASRS     R1,R0,#+31
   \   0000009E   0x1822             ADDS     R2,R4,R0
   \   000000A0   0xEB55 0x0301      ADCS     R3,R5,R1
   \   000000A4   0x4641             MOV      R1,R8
   \   000000A6   0x....             LDR.N    R0,??DataTable3_15
   \   000000A8   0x.... 0x....      BL       _Z14scheduleByTimePKcP12scheduling_sxPFvPvES3_
    139          	scheduleByTime("out down", sDown, nowUs + (int) (delayUs + durationUs), (schfunc_t) &turnPinLow, signal->output);
   \   000000AC   0x6830             LDR      R0,[R6, #+0]
   \   000000AE   0x9001             STR      R0,[SP, #+4]
   \   000000B0   0x....             LDR.N    R0,??DataTable3_16
   \   000000B2   0x9000             STR      R0,[SP, #+0]
   \   000000B4   0xEE38 0x0A88      VADD.F32 S0,S17,S16
   \   000000B8   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000000BC   0xEE10 0x0A10      VMOV     R0,S0
   \   000000C0   0x17C1             ASRS     R1,R0,#+31
   \   000000C2   0x1822             ADDS     R2,R4,R0
   \   000000C4   0xEB55 0x0301      ADCS     R3,R5,R1
   \   000000C8   0x4649             MOV      R1,R9
   \   000000CA   0x....             LDR.N    R0,??DataTable3_17
   \   000000CC   0x.... 0x....      BL       _Z14scheduleByTimePKcP12scheduling_sxPFvPvES3_
    140          #endif
    141          }
   \                     ??scheduleOutput_1:
   \   000000D0   0xB002             ADD      SP,SP,#+8
   \   000000D2   0xECBD 0x8B02      VPOP     {D8}
   \   000000D6   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x75 0x00          DC8      "u",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x64 0x00          DC8      "d",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     enginePins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     sparkNames

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     injectorNames

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     `?<Constant "NULL @ turnPinHigh">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     `?<Constant "pin mode not initialized">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     `?<Constant "invalid pin_output_mo...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     persistentState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     waveChart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x........         DC32     `?<Constant "NULL turnPinLow">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x........         DC32     `?<Constant "duration cannot be ne...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x........         DC32     `?<Constant "NaN in scheduleOutput">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x........         DC32     `?<Constant "signal is NULL">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x........         DC32     _Z11turnPinHighP14NamedOutputPin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x........         DC32     `?<Constant "out up">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \   00000000   0x........         DC32     _Z10turnPinLowP14NamedOutputPin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \   00000000   0x........         DC32     `?<Constant "out down">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "c1">`:
   \   00000000   0x63 0x31          DC8 "c1"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "c2">`:
   \   00000000   0x63 0x32          DC8 "c2"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "c3">`:
   \   00000000   0x63 0x33          DC8 "c3"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "c4">`:
   \   00000000   0x63 0x34          DC8 "c4"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "c5">`:
   \   00000000   0x63 0x35          DC8 "c5"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "c6">`:
   \   00000000   0x63 0x36          DC8 "c6"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "c7">`:
   \   00000000   0x63 0x37          DC8 "c7"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "c8">`:
   \   00000000   0x63 0x38          DC8 "c8"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "c9">`:
   \   00000000   0x63 0x39          DC8 "c9"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "cA">`:
   \   00000000   0x63 0x41          DC8 "cA"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "cB">`:
   \   00000000   0x63 0x42          DC8 "cB"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "cD">`:
   \   00000000   0x63 0x44          DC8 "cD"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "i1">`:
   \   00000000   0x69 0x31          DC8 "i1"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "i2">`:
   \   00000000   0x69 0x32          DC8 "i2"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "i3">`:
   \   00000000   0x69 0x33          DC8 "i3"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "i4">`:
   \   00000000   0x69 0x34          DC8 "i4"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "i5">`:
   \   00000000   0x69 0x35          DC8 "i5"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "i6">`:
   \   00000000   0x69 0x36          DC8 "i6"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "i7">`:
   \   00000000   0x69 0x37          DC8 "i7"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "i8">`:
   \   00000000   0x69 0x38          DC8 "i8"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "j9">`:
   \   00000000   0x6A 0x39          DC8 "j9"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "iA">`:
   \   00000000   0x69 0x41          DC8 "iA"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "iB">`:
   \   00000000   0x69 0x42          DC8 "iB"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "iC">`:
   \   00000000   0x69 0x43          DC8 "iC"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "NULL @ turnPinHigh">`:
   \   00000000   0x4E 0x55          DC8 "NULL @ turnPinHigh"
   \              0x4C 0x4C    
   \              0x20 0x40    
   \              0x20 0x74    
   \              0x75 0x72    
   \              0x6E 0x50    
   \              0x69 0x6E    
   \              0x48 0x69    
   \              0x67 0x68    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "pin mode not initialized">`:
   \   00000000   0x70 0x69          DC8 "pin mode not initialized"
   \              0x6E 0x20    
   \              0x6D 0x6F    
   \              0x64 0x65    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x69    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x65 0x64    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "invalid pin_output_mo...">`:
   \   00000000   0x69 0x6E          DC8 "invalid pin_output_mode_e"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x70 0x69    
   \              0x6E 0x5F    
   \              0x6F 0x75    
   \              0x74 0x70    
   \              0x75 0x74    
   \              0x5F 0x6D    
   \              0x6F 0x64    
   \              0x65 0x5F    
   \              0x65 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 2
   \   00000000   0x75 0x00          DC8 "u"

   \                                 In section .rodata, align 4
   \                     `?<Constant "NULL turnPinLow">`:
   \   00000000   0x4E 0x55          DC8 "NULL turnPinLow"
   \              0x4C 0x4C    
   \              0x20 0x74    
   \              0x75 0x72    
   \              0x6E 0x50    
   \              0x69 0x6E    
   \              0x4C 0x6F    
   \              0x77 0x00    

   \                                 In section .rodata, align 2
   \   00000000   0x64 0x00          DC8 "d"

   \                                 In section .rodata, align 4
   \                     `?<Constant "duration cannot be ne...">`:
   \   00000000   0x64 0x75          DC8 "duration cannot be negative: %d"
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x63    
   \              0x61 0x6E    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x62 0x65    
   \              0x20 0x6E    
   \              0x65 0x67    
   \              0x61 0x74    
   \              0x69 0x76    
   \              0x65 0x3A    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "NaN in scheduleOutput">`:
   \   00000000   0x4E 0x61          DC8 "NaN in scheduleOutput"
   \              0x4E 0x20    
   \              0x69 0x6E    
   \              0x20 0x73    
   \              0x63 0x68    
   \              0x65 0x64    
   \              0x75 0x6C    
   \              0x65 0x4F    
   \              0x75 0x74    
   \              0x70 0x75    
   \              0x74 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "signal is NULL">`:
   \   00000000   0x73 0x69          DC8 "signal is NULL"
   \              0x67 0x6E    
   \              0x61 0x6C    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x4E 0x55    
   \              0x4C 0x4C    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "out up">`:
   \   00000000   0x6F 0x75          DC8 "out up"
   \              0x74 0x20    
   \              0x75 0x70    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "out down">`:
   \   00000000   0x6F 0x75          DC8 "out down"
   \              0x74 0x20    
   \              0x64 0x6F    
   \              0x77 0x6E    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   initSignalExecutor()
         8   -> initSignalExecutorImpl()
      48   scheduleOutput(OutputSignal *, int64_t, float, float)
        48   -> __aeabi_f2d
        48   -> __iar_FDtest
        48   -> firmwareError
        48   -> getRevolutionCounter()
        48   -> scheduleByTime(char const *, scheduling_s *, int64_t, schfunc_t, void *)
        48   -> warning
      16   turnPinHigh(NamedOutputPin *)
        16   -> WaveChart::addWaveChartEvent3(char const *, char const *)
        16   -> firmwareError
      16   turnPinLow(NamedOutputPin *)
        16   -> WaveChart::addWaveChartEvent3(char const *, char const *)
        16   -> firmwareError


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?<Constant "NULL @ turnPinHigh">
      16  ?<Constant "NULL turnPinLow">
      24  ?<Constant "NaN in scheduleOutput">
       4  ?<Constant "c1">
       4  ?<Constant "c2">
       4  ?<Constant "c3">
       4  ?<Constant "c4">
       4  ?<Constant "c5">
       4  ?<Constant "c6">
       4  ?<Constant "c7">
       4  ?<Constant "c8">
       4  ?<Constant "c9">
       4  ?<Constant "cA">
       4  ?<Constant "cB">
       4  ?<Constant "cD">
       2  ?<Constant "d">
      32  ?<Constant "duration cannot be ne...">
       4  ?<Constant "i1">
       4  ?<Constant "i2">
       4  ?<Constant "i3">
       4  ?<Constant "i4">
       4  ?<Constant "i5">
       4  ?<Constant "i6">
       4  ?<Constant "i7">
       4  ?<Constant "i8">
       4  ?<Constant "iA">
       4  ?<Constant "iB">
       4  ?<Constant "iC">
      28  ?<Constant "invalid pin_output_mo...">
       4  ?<Constant "j9">
      12  ?<Constant "out down">
       8  ?<Constant "out up">
      28  ?<Constant "pin mode not initialized">
      16  ?<Constant "signal is NULL">
       2  ?<Constant "u">
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      62  initSignalExecutor()
      48  injectorNames
     218  scheduleOutput(OutputSignal *, int64_t, float, float)
      48  sparkNames
     138  turnPinHigh(NamedOutputPin *)
     138  turnPinLow(NamedOutputPin *)

 
  96 bytes in section .data
 284 bytes in section .rodata
 628 bytes in section .text
 
 628 bytes of CODE  memory
 284 bytes of CONST memory
  96 bytes of DATA  memory

Errors: none
Warnings: 3
