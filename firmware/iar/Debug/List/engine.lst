###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:08:56 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\algo #
#                       \engine.cpp                                           #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\algo #
#                       \engine.cpp -lCN F:\stuff\rusefi_sourceforge\firmware #
#                       \iar\Debug\List\ -lA F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\Debug\List\ -o F:\stuff\rusefi_sourceforge\f #
#                       irmware\iar\Debug\Obj\ --no_cse --no_unroll           #
#                       --no_inline --no_code_motion --no_tbaa                #
#                       --no_clustering --no_scheduling --debug               #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\e #
#                       ngine.lst                                             #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\en #
#                       gine.o                                                #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\algo\engine.cpp
      1          /**
      2           * @file	engine.cpp
      3           *
      4           *
      5           * This might be a http://en.wikipedia.org/wiki/God_object but that's best way I can
      6           * express myself in C/C++. I am open for suggestions :)
      7           *
      8           * @date May 21, 2014
      9           * @author Andrey Belomutskiy, (c) 2012-2015
     10           */
     11          
     12          #include "main.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x002A             MOVS     R2,R5
   \   0000000A   0x0031             MOVS     R1,R6
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memset
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
     13          #include "engine.h"

   \                                 In section .text, align 2
   \   __code __interwork __softfp Table2D<8>::Table2D()
   \                     _ZN7Table2DILi8EEC1Ev:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x6401             STR      R1,[R0, #+64]
   \   00000004   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4
   \   __interwork __softfp void Table2D<8>::preCalc(float *, float *)
   \                     _ZN7Table2DILi8EE7preCalcEPfS1_:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xB082             SUB      SP,SP,#+8
   \   00000008   0x000C             MOVS     R4,R1
   \   0000000A   0x0015             MOVS     R5,R2
   \   0000000C   0x6404             STR      R4,[R0, #+64]
   \   0000000E   0x2600             MOVS     R6,#+0
   \                     ??preCalc_0:
   \   00000010   0x2E07             CMP      R6,#+7
   \   00000012   0xDA3C             BGE.N    ??preCalc_1
   \   00000014   0xF854 0x1026      LDR      R1,[R4, R6, LSL #+2]
   \   00000018   0xEE08 0x1A10      VMOV     S16,R1
   \   0000001C   0xEB14 0x0186      ADDS     R1,R4,R6, LSL #+2
   \   00000020   0xEDD1 0x8A01      VLDR     S17,[R1, #+4]
   \   00000024   0xEEB4 0x8A68      VCMP.F32 S16,S17
   \   00000028   0xEEF1 0xFA10      FMSTAT   
   \   0000002C   0xD111             BNE.N    ??preCalc_2
   \   0000002E   0xEE18 0x0A90      VMOV     R0,S17
   \   00000032   0x.... 0x....      BL       __aeabi_f2d
   \   00000036   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000003A   0xEE18 0x0A10      VMOV     R0,S16
   \   0000003E   0x.... 0x....      BL       __aeabi_f2d
   \   00000042   0x0002             MOVS     R2,R0
   \   00000044   0x000B             MOVS     R3,R1
   \   00000046   0x4914             LDR.N    R1,??preCalc_3
   \   00000048   0xF240 0x205E      MOVW     R0,#+606
   \   0000004C   0x.... 0x....      BL       warning
   \   00000050   0xE01D             B.N      ??preCalc_4
   \                     ??preCalc_2:
   \   00000052   0xF855 0x1026      LDR      R1,[R5, R6, LSL #+2]
   \   00000056   0xEE00 0x1A10      VMOV     S0,R1
   \   0000005A   0xEB15 0x0186      ADDS     R1,R5,R6, LSL #+2
   \   0000005E   0xEDD1 0x0A01      VLDR     S1,[R1, #+4]
   \   00000062   0xEE30 0x1A60      VSUB.F32 S2,S0,S1
   \   00000066   0xEE78 0x1A68      VSUB.F32 S3,S16,S17
   \   0000006A   0xEE81 0x1A21      VDIV.F32 S2,S2,S3
   \   0000006E   0xEB10 0x0186      ADDS     R1,R0,R6, LSL #+2
   \   00000072   0xED81 0x1A00      VSTR     S2,[R1, #0]
   \   00000076   0xEB10 0x0186      ADDS     R1,R0,R6, LSL #+2
   \   0000007A   0xED91 0x1A00      VLDR     S2,[R1, #0]
   \   0000007E   0xEE01 0x0A48      VMLS.F32 S0,S2,S16
   \   00000082   0xEB10 0x0186      ADDS     R1,R0,R6, LSL #+2
   \   00000086   0xED81 0x0A08      VSTR     S0,[R1, #+32]
   \   0000008A   0x1C76             ADDS     R6,R6,#+1
   \   0000008C   0xE7C0             B.N      ??preCalc_0
   \                     ??preCalc_1:
   \                     ??preCalc_4:
   \   0000008E   0xB002             ADD      SP,SP,#+8
   \   00000090   0xECBD 0x8B02      VPOP     {D8}
   \   00000094   0xBD70             POP      {R4-R6,PC}       ;; return
   \   00000096   0xBF00             Nop      
   \                     ??preCalc_3:
   \   00000098   0x........         DC32     _ZZN7Table2DILi8EE7preCalcEPfS1_Es

   \                                 In section .text, align 4
   \   __interwork __vfp float Map3D<16, 16>::getValue(float, float)
   \                     _ZN5Map3DILi16ELi16EE8getValueEff:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xB082             SUB      SP,SP,#+8
   \   00000008   0x0004             MOVS     R4,R0
   \   0000000A   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   0000000E   0xEEF0 0x8A60      VMOV.F32 S17,S1
   \   00000012   0x6CA0             LDR      R0,[R4, #+72]
   \   00000014   0x490C             LDR.N    R1,??getValue_0+0x4  ;; 0x923f558
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xD005             BEQ.N    ??getValue_1
   \   0000001A   0x480C             LDR.N    R0,??getValue_0+0x8
   \   0000001C   0x.... 0x....      BL       firmwareError
   \   00000020   0xED9F 0x0A08      VLDR.W   S0,??getValue_0  ;; 0x7fffffff
   \   00000024   0xE00A             B.N      ??getValue_2
   \                     ??getValue_1:
   \   00000026   0x9400             STR      R4,[SP, #+0]
   \   00000028   0x2310             MOVS     R3,#+16
   \   0000002A   0x6C62             LDR      R2,[R4, #+68]
   \   0000002C   0xEEF0 0x0A68      VMOV.F32 S1,S17
   \   00000030   0x2110             MOVS     R1,#+16
   \   00000032   0x6C20             LDR      R0,[R4, #+64]
   \   00000034   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000038   0x.... 0x....      BL       _Z13interpolate3dfPfifS_iPS_
   \                     ??getValue_2:
   \   0000003C   0xB002             ADD      SP,SP,#+8
   \   0000003E   0xECBD 0x8B02      VPOP     {D8}
   \   00000042   0xBD10             POP      {R4,PC}          ;; return
   \                     ??getValue_0:
   \   00000044   0x7FFFFFFF         DC32     0x7fffffff
   \   00000048   0x0923F558         DC32     0x923f558
   \   0000004C   0x........         DC32     _ZZN5Map3DILi16ELi16EE8getValueEffEs
     14          #include "engine_state.h"
     15          #include "efiGpio.h"
     16          #include "trigger_central.h"
     17          #include "fuel_math.h"
     18          #include "engine_math.h"
     19          #include "advance_map.h"
     20          #include "speed_density.h"
     21          
     22          #if EFI_PROD_CODE
     23          #include "injector_central.h"
     24          #else
     25          #define isRunningBenchTest() true
     26          #endif
     27          

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine:
   \   00000000   0xB580             PUSH     {R7,LR}
     28          static LoggingWithStorage logger("engine");
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable12_3
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   0000000A   0x.... 0x....      BL       _ZN18LoggingWithStorageC1EPKc
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     logger:
   \   00000000                      DS8 260
     29          
     30          extern engine_pins_s enginePins;
     31          
     32          EXTERN_ENGINE
     33          ;
     34          
     35          /**
     36           * We are executing these heavy (logarithm) methods from outside the trigger callbacks for performance reasons.
     37           */

   \                                 In section .text, align 4, keep-with-next
     38          void Engine::updateSlowSensors() {
   \                     _ZN6Engine17updateSlowSensorsEv:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0x0004             MOVS     R4,R0
     39          	Engine *engine = this;
   \   00000008   0x0025             MOVS     R5,R4
     40          	board_configuration_s * boardConfiguration = &engineConfiguration->bc;
   \   0000000A   0x6A60             LDR      R0,[R4, #+36]
   \   0000000C   0xF510 0x761C      ADDS     R6,R0,#+624
     41          	engineState.iat = getIntakeAirTemperature(PASS_ENGINE_PARAMETER_F);
   \   00000010   0x.... 0x....      BL       _Z23getIntakeAirTemperaturev
   \   00000014   0xF504 0x50F0      ADD      R0,R4,#+7680
   \   00000018   0x3050             ADDS     R0,R0,#+80
   \   0000001A   0xED80 0x0A00      VSTR     S0,[R0, #0]
     42          	engineState.clt = getCoolantTemperature(PASS_ENGINE_PARAMETER_F);
   \   0000001E   0x.... 0x....      BL       _Z21getCoolantTemperaturev
   \   00000022   0xF504 0x50F0      ADD      R0,R4,#+7680
   \   00000026   0x3054             ADDS     R0,R0,#+84
   \   00000028   0xED80 0x0A00      VSTR     S0,[R0, #0]
     43          
     44          	if (engineConfiguration->fuelLevelSensor != EFI_ADC_NONE) {
   \   0000002C   0x6A60             LDR      R0,[R4, #+36]
   \   0000002E   0xF8D0 0x01E4      LDR      R0,[R0, #+484]
   \   00000032   0x2810             CMP      R0,#+16
   \   00000034   0xD024             BEQ.N    ??updateSlowSensors_0
     45          		float fuelLevelVoltage = getVoltageDivided("fuel", engineConfiguration->fuelLevelSensor);
   \   00000036   0x6A60             LDR      R0,[R4, #+36]
   \   00000038   0xF8D0 0x11E4      LDR      R1,[R0, #+484]
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable12_5
   \   00000040   0x.... 0x....      BL       _Z19getInternalAdcValuePKc13adc_channel_e
   \   00000044   0xEE00 0x0A10      VMOV     S0,R0
   \   00000048   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000004C   0xEDDF 0x....      VLDR.W   S1,??DataTable8  ;; 0x3a400c01
   \   00000050   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000054   0x6A60             LDR      R0,[R4, #+36]
   \   00000056   0xEDD0 0x0A74      VLDR     S1,[R0, #+464]
   \   0000005A   0xEE20 0x8A20      VMUL.F32 S16,S0,S1
     46          		engineState.fuelLevel = interpolate(boardConfiguration->fuelLevelEmptyTankVoltage, 0,
     47          				boardConfiguration->fuelLevelFullTankVoltage, 100,
     48          				fuelLevelVoltage);
   \   0000005E   0xEEB0 0x2A48      VMOV.F32 S4,S16
   \   00000062   0xEDDF 0x....      VLDR.W   S3,??DataTable8_1  ;; 0x42c80000
   \   00000066   0xED96 0x1A44      VLDR     S2,[R6, #+272]
   \   0000006A   0xEDDF 0x....      VLDR.W   S1,??DataTable8_2  ;; 0x0
   \   0000006E   0xED96 0x0A43      VLDR     S0,[R6, #+268]
   \   00000072   0x.... 0x....      BL       _Z11interpolatefffff
   \   00000076   0xF504 0x50F0      ADD      R0,R4,#+7680
   \   0000007A   0x3058             ADDS     R0,R0,#+88
   \   0000007C   0xED80 0x0A00      VSTR     S0,[R0, #0]
     49          	}
     50          	float vBatt = hasVBatt(PASS_ENGINE_PARAMETER_F) ? getVBatt(PASS_ENGINE_PARAMETER_F) : 12;
   \                     ??updateSlowSensors_0:
   \   00000080   0x.... 0x....      BL       _Z8hasVBattv
   \   00000084   0x2800             CMP      R0,#+0
   \   00000086   0xD004             BEQ.N    ??updateSlowSensors_1
   \   00000088   0x.... 0x....      BL       _Z8getVBattv
   \   0000008C   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   00000090   0xE001             B.N      ??updateSlowSensors_2
   \                     ??updateSlowSensors_1:
   \   00000092   0xEEB2 0x8A08      VMOV.F32 S16,#12.0
     51          
     52          	injectorLagMs = getInjectorLag(vBatt PASS_ENGINE_PARAMETER);
   \                     ??updateSlowSensors_2:
   \   00000096   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   0000009A   0x.... 0x....      BL       _Z14getInjectorLagf
   \   0000009E   0xF504 0x50F0      ADD      R0,R4,#+7680
   \   000000A2   0x30F0             ADDS     R0,R0,#+240
   \   000000A4   0xED80 0x0A00      VSTR     S0,[R0, #0]
     53          }
   \   000000A8   0xECBD 0x8B02      VPOP     {D8}
   \   000000AC   0xBD70             POP      {R4-R6,PC}       ;; return
     54          

   \                                 In section .text, align 2, keep-with-next
     55          void Engine::onTriggerEvent(efitick_t nowNt) {
   \                     _ZN6Engine14onTriggerEventEx:
   \   00000000   0xB410             PUSH     {R4}
     56          	isSpinning = true;
   \   00000002   0xF242 0x4110      MOVW     R1,#+9232
   \   00000006   0x2401             MOVS     R4,#+1
   \   00000008   0x540C             STRB     R4,[R1, R0]
     57          	lastTriggerEventTimeNt = nowNt;
   \   0000000A   0xF500 0x51F0      ADD      R1,R0,#+7680
   \   0000000E   0x31E8             ADDS     R1,R1,#+232
   \   00000010   0xE9C1 0x2300      STRD     R2,R3,[R1, #+0]
     58          }
   \   00000014   0xBC10             POP      {R4}
   \   00000016   0x4770             BX       LR               ;; return
     59          

   \                                 In section .text, align 2, keep-with-next
     60          static void invokeEnginePreCalculate(Engine *engine) {
   \                     _Z24invokeEnginePreCalculateP6Engine:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     61          	engine->preCalculate();
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN6Engine12preCalculateEv
     62          }
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
     63          

   \                                 In section .text, align 2, keep-with-next
     64          void Engine::addConfigurationListener(configuration_callback_t callback) {
   \                     _ZN6Engine24addConfigurationListenerEPFvPS_E:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     65          	configurationListeners.registerCallback((VoidInt)invokeEnginePreCalculate, this);
   \   00000006   0x0022             MOVS     R2,R4
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable12_6
   \   0000000C   0xF504 0x500C      ADD      R0,R4,#+8960
   \   00000010   0x3044             ADDS     R0,R0,#+68
   \   00000012   0x.... 0x....      BL       _ZN16IntListenerArray16registerCallbackEPFviEPv
     66          }
   \   00000016   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     67          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp Engine::subobject Engine(persistent_config_s *)
   \                     _ZN6EngineC2EP19persistent_config_s:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN6EngineC1EP19persistent_config_s
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
     68          Engine::Engine(persistent_config_s *config) {
   \                     _ZN6EngineC1EP19persistent_config_s:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       _ZN13RpmCalculatorC1Ev
   \   0000000C   0xF114 0x0038      ADDS     R0,R4,#+56
   \   00000010   0x.... 0x....      BL       _ZN16AccelEnrichmemntC1Ev
   \   00000014   0xF514 0x70A6      ADDS     R0,R4,#+332
   \   00000018   0x.... 0x....      BL       _ZN16AccelEnrichmemntC1Ev
   \   0000001C   0xF514 0x7021      ADDS     R0,R4,#+644
   \   00000020   0x.... 0x....      BL       _ZN12TriggerShapeC1Ev
   \   00000024   0xF504 0x50F0      ADD      R0,R4,#+7680
   \   00000028   0x3050             ADDS     R0,R0,#+80
   \   0000002A   0x.... 0x....      BL       _ZN11EngineStateC1Ev
   \   0000002E   0xF514 0x50F8      ADDS     R0,R4,#+7936
   \   00000032   0x.... 0x....      BL       _ZN7Table2DILi8EEC1Ev
   \   00000036   0xF504 0x500C      ADD      R0,R4,#+8960
   \   0000003A   0x3044             ADDS     R0,R0,#+68
   \   0000003C   0x.... 0x....      BL       _ZN16IntListenerArrayC1Ev
     69          	lastTriggerEventTimeNt = 0;
   \   00000040   0xF504 0x50F0      ADD      R0,R4,#+7680
   \   00000044   0x30E8             ADDS     R0,R0,#+232
   \   00000046   0x2200             MOVS     R2,#+0
   \   00000048   0x2300             MOVS     R3,#+0
   \   0000004A   0xE9C0 0x2300      STRD     R2,R3,[R0, #+0]
     70          	isCylinderCleanupMode = false;
   \   0000004E   0xF641 0x60F8      MOVW     R0,#+7928
   \   00000052   0x2100             MOVS     R1,#+0
   \   00000054   0x5501             STRB     R1,[R0, R4]
     71          	engineCycleEventCount = 0;
   \   00000056   0xF641 0x60FC      MOVW     R0,#+7932
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0x5101             STR      R1,[R0, R4]
     72          	stopEngineRequestTimeNt = 0;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x2100             MOVS     R1,#+0
   \   00000062   0xE9C4 0x010C      STRD     R0,R1,[R4, #+48]
     73          	isRunningPwmTest = false;
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0xF884 0x0266      STRB     R0,[R4, #+614]
     74          	isTestMode = false;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0xF884 0x0280      STRB     R0,[R4, #+640]
     75          	isSpinning = false;
   \   00000072   0xF242 0x4010      MOVW     R0,#+9232
   \   00000076   0x2100             MOVS     R1,#+0
   \   00000078   0x5501             STRB     R1,[R0, R4]
     76          	adcToVoltageInputDividerCoefficient = NAN;
   \   0000007A   0xF641 0x60F4      MOVW     R0,#+7924
   \   0000007E   0xF07F 0x4100      MVNS     R1,#-2147483648
   \   00000082   0x5101             STR      R1,[R0, R4]
     77          	this->config = config;
   \   00000084   0x6225             STR      R5,[R4, #+32]
     78          	engineConfiguration = &config->engineConfiguration;
   \   00000086   0x6265             STR      R5,[R4, #+36]
     79          	engineConfiguration2 = NULL;
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0x62A0             STR      R0,[R4, #+40]
     80          	engineState.iat = engineState.clt = NAN;
   \   0000008C   0xED9F 0x....      VLDR.W   S0,??DataTable9  ;; 0x7fffffff
   \   00000090   0xF504 0x50F0      ADD      R0,R4,#+7680
   \   00000094   0x3054             ADDS     R0,R0,#+84
   \   00000096   0xED80 0x0A00      VSTR     S0,[R0, #0]
   \   0000009A   0xF504 0x50F0      ADD      R0,R4,#+7680
   \   0000009E   0x3050             ADDS     R0,R0,#+80
   \   000000A0   0xED80 0x0A00      VSTR     S0,[R0, #0]
     81          	memset(&ignitionPin, 0, sizeof(ignitionPin));
   \   000000A4   0x2230             MOVS     R2,#+48
   \   000000A6   0x2100             MOVS     R1,#+0
   \   000000A8   0xF514 0x50F1      ADDS     R0,R4,#+7712
   \   000000AC   0x.... 0x....      BL       memset
     82          	memset(config, 0, sizeof(persistent_config_s));
   \   000000B0   0xF643 0x32B8      MOVW     R2,#+15288
   \   000000B4   0x2100             MOVS     R1,#+0
   \   000000B6   0x0028             MOVS     R0,R5
   \   000000B8   0x.... 0x....      BL       memset
     83          
     84          	knockNow = false;
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0xF884 0x0267      STRB     R0,[R4, #+615]
     85          	knockEver = false;
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0xF884 0x0268      STRB     R0,[R4, #+616]
     86          	knockCount = 0;
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0xF8C4 0x026C      STR      R0,[R4, #+620]
     87          	knockDebug = false;
   \   000000CE   0x2000             MOVS     R0,#+0
   \   000000D0   0xF884 0x0270      STRB     R0,[R4, #+624]
     88          	timeOfLastKnockEvent = 0;
   \   000000D4   0x2000             MOVS     R0,#+0
   \   000000D6   0x2100             MOVS     R1,#+0
   \   000000D8   0xE9C4 0x019E      STRD     R0,R1,[R4, #+632]
     89          	injectorLagMs = fuelMs = 0;
   \   000000DC   0xED9F 0x....      VLDR.W   S0,??DataTable8_2  ;; 0x0
   \   000000E0   0xED84 0x0A98      VSTR     S0,[R4, #+608]
   \   000000E4   0xF504 0x50F0      ADD      R0,R4,#+7680
   \   000000E8   0x30F0             ADDS     R0,R0,#+240
   \   000000EA   0xED80 0x0A00      VSTR     S0,[R0, #0]
     90          	clutchDownState = clutchUpState = false;
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0xF884 0x0264      STRB     R0,[R4, #+612]
   \   000000F4   0xF884 0x0265      STRB     R0,[R4, #+613]
     91          	memset(&m, 0, sizeof(m));
   \   000000F8   0x2250             MOVS     R2,#+80
   \   000000FA   0x2100             MOVS     R1,#+0
   \   000000FC   0xF514 0x500F      ADDS     R0,R4,#+9152
   \   00000100   0x.... 0x....      BL       memset
     92          
     93          	addConfigurationListener(invokeEnginePreCalculate);
   \   00000104   0x.... 0x....      LDR.W    R1,??DataTable12_6
   \   00000108   0x0020             MOVS     R0,R4
   \   0000010A   0x.... 0x....      BL       _ZN6Engine24addConfigurationListenerEPFvPS_E
     94          }
   \   0000010E   0x0020             MOVS     R0,R4
   \   00000110   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     95          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp EngineState::subobject EngineState()
   \                     _ZN11EngineStateC2Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN11EngineStateC1Ev
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
     96          EngineState::EngineState() {
   \                     _ZN11EngineStateC1Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0xF114 0x000C      ADDS     R0,R4,#+12
   \   00000008   0x.... 0x....      BL       _ZN14ThermistorMathC1Ev
   \   0000000C   0xF114 0x0034      ADDS     R0,R4,#+52
   \   00000010   0x.... 0x....      BL       _ZN14ThermistorMathC1Ev
     97          	advance = dwellAngle = 0;
   \   00000014   0xED9F 0x....      VLDR.W   S0,??DataTable8_2  ;; 0x0
   \   00000018   0xED84 0x0A1B      VSTR     S0,[R4, #+108]
   \   0000001C   0xED84 0x0A1C      VSTR     S0,[R4, #+112]
     98          }
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
     99          
    100          /**
    101           * Here we have a bunch of stuff which should invoked after configuration change
    102           * so that we can prepare some helper structures
    103           */

   \                                 In section .text, align 2, keep-with-next
    104          void Engine::preCalculate() {
   \                     _ZN6Engine12preCalculateEv:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0x0004             MOVS     R4,R0
    105          	sparkTable.preCalc(engineConfiguration->sparkDwellBins,
    106          			engineConfiguration->sparkDwell);
   \   00000008   0x6A60             LDR      R0,[R4, #+36]
   \   0000000A   0xF510 0x72B8      ADDS     R2,R0,#+368
   \   0000000E   0x6A60             LDR      R0,[R4, #+36]
   \   00000010   0xF510 0x71A8      ADDS     R1,R0,#+336
   \   00000014   0xF514 0x50F8      ADDS     R0,R4,#+7936
   \   00000018   0x.... 0x....      BL       _ZN7Table2DILi8EE7preCalcEPfS1_
    107          
    108          	/**
    109          	 * Here we prepare a fast, index-based MAF lookup from a slower curve description
    110          	 */
    111          	for (int i = 0; i < MAF_DECODING_CACHE_SIZE; i++) {
   \   0000001C   0x2500             MOVS     R5,#+0
   \                     ??preCalculate_0:
   \   0000001E   0x2DFF             CMP      R5,#+255
   \   00000020   0xDC23             BGT.N    ??preCalculate_1
    112          		float volts = i / MAF_DECODING_CACHE_MULT;
   \   00000022   0x0028             MOVS     R0,R5
   \   00000024   0x.... 0x....      BL       __aeabi_i2d
   \   00000028   0x.... 0x....      LDR.W    R2,??DataTable12_7  ;; 0x9999999a
   \   0000002C   0x.... 0x....      LDR.W    R3,??DataTable12_8  ;; 0x40499999
   \   00000030   0x.... 0x....      BL       __aeabi_ddiv
   \   00000034   0x.... 0x....      BL       __aeabi_d2f
   \   00000038   0xEE08 0x0A10      VMOV     S16,R0
    113          		float maf = interpolate2d(volts, config->mafDecodingBins,
    114          				config->mafDecoding, MAF_DECODING_COUNT);
   \   0000003C   0xF44F 0x7280      MOV      R2,#+256
   \   00000040   0x6A20             LDR      R0,[R4, #+32]
   \   00000042   0xF500 0x51C0      ADD      R1,R0,#+6144
   \   00000046   0x31B8             ADDS     R1,R1,#+184
   \   00000048   0x6A20             LDR      R0,[R4, #+32]
   \   0000004A   0xF500 0x50E0      ADD      R0,R0,#+7168
   \   0000004E   0x30B8             ADDS     R0,R0,#+184
   \   00000050   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000054   0x.... 0x....      BL       _Z13interpolate2dfPfS_i
    115          		mafDecodingLookup[i] = maf;
   \   00000058   0xEB14 0x0085      ADDS     R0,R4,R5, LSL #+2
   \   0000005C   0xF500 0x50F8      ADD      R0,R0,#+7936
   \   00000060   0x3044             ADDS     R0,R0,#+68
   \   00000062   0xED80 0x0A00      VSTR     S0,[R0, #0]
    116          	}
   \   00000066   0x1C6D             ADDS     R5,R5,#+1
   \   00000068   0xE7D9             B.N      ??preCalculate_0
    117          }
   \                     ??preCalculate_1:
   \   0000006A   0xECBD 0x8B02      VPOP     {D8}
   \   0000006E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    118          

   \                                 In section .text, align 2, keep-with-next
    119          void Engine::init() {
    120          }
   \                     _ZN6Engine4initEv:
   \   00000000   0x4770             BX       LR               ;; return
    121          

   \                                 In section .text, align 2, keep-with-next
    122          static bool stopPin(NamedOutputPin *output) {
   \                     _Z7stopPinP14NamedOutputPin:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    123          #if EFI_PROD_CODE || defined(__DOXYGEN__)
    124          	if (output->isInitialized() && output->getLogicValue()) {
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN9OutputPin13isInitializedEv
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD011             BEQ.N    ??stopPin_0
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       _ZN9OutputPin13getLogicValueEv
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD00C             BEQ.N    ??stopPin_0
    125          		output->setValue(false);
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       _ZN9OutputPin8setValueEi
    126          		scheduleMsg(&logger, "turning off %s", output->name);
   \   00000020   0x6922             LDR      R2,[R4, #+16]
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable12_9
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   0000002A   0x.... 0x....      BL       scheduleMsg
    127          		return true;
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xE000             B.N      ??stopPin_1
    128          	}
    129          #endif
    130          	return false;
   \                     ??stopPin_0:
   \   00000032   0x2000             MOVS     R0,#+0
   \                     ??stopPin_1:
   \   00000034   0xBD10             POP      {R4,PC}          ;; return
    131          }
    132          

   \                                 In section .text, align 2, keep-with-next
    133          bool_t Engine::stopPins() {
   \                     _ZN6Engine8stopPinsEv:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    134          	bool result = false;
   \   00000004   0x2600             MOVS     R6,#+0
    135          	for (int i = 0; i < engineConfiguration->specs.cylindersCount; i++) {
   \   00000006   0x2500             MOVS     R5,#+0
   \                     ??stopPins_0:
   \   00000008   0x6A60             LDR      R0,[R4, #+36]
   \   0000000A   0xF8D0 0x0194      LDR      R0,[R0, #+404]
   \   0000000E   0x4285             CMP      R5,R0
   \   00000010   0xDA14             BGE.N    ??stopPins_1
    136          		result |= stopPin(&enginePins.coils[i]);
   \   00000012   0x2014             MOVS     R0,#+20
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable12_10
   \   00000018   0xFB00 0x1005      MLA      R0,R0,R5,R1
   \   0000001C   0xF510 0x70A8      ADDS     R0,R0,#+336
   \   00000020   0x.... 0x....      BL       _Z7stopPinP14NamedOutputPin
   \   00000024   0x4306             ORRS     R6,R0,R6
    137          		result |= stopPin(&enginePins.injectors[i]);
   \   00000026   0x2014             MOVS     R0,#+20
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable12_10
   \   0000002C   0xFB00 0x1005      MLA      R0,R0,R5,R1
   \   00000030   0x3060             ADDS     R0,R0,#+96
   \   00000032   0x.... 0x....      BL       _Z7stopPinP14NamedOutputPin
   \   00000036   0x4306             ORRS     R6,R0,R6
    138          	}
   \   00000038   0x1C6D             ADDS     R5,R5,#+1
   \   0000003A   0xE7E5             B.N      ??stopPins_0
    139          	return result;
   \                     ??stopPins_1:
   \   0000003C   0x0030             MOVS     R0,R6
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0xBD70             POP      {R4-R6,PC}       ;; return
    140          }
    141          

   \                                 In section .text, align 2, keep-with-next
    142          void Engine::printKnockState(void) {
   \                     _ZN6Engine15printKnockStateEv:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    143          	scheduleMsg(&logger, "knock now=%s/ever=%s", boolToString(knockNow), boolToString(knockEver));
   \   00000004   0xF894 0x0268      LDRB     R0,[R4, #+616]
   \   00000008   0x.... 0x....      BL       _Z12boolToStringb
   \   0000000C   0x0005             MOVS     R5,R0
   \   0000000E   0xF894 0x0267      LDRB     R0,[R4, #+615]
   \   00000012   0x.... 0x....      BL       _Z12boolToStringb
   \   00000016   0x002B             MOVS     R3,R5
   \   00000018   0x0002             MOVS     R2,R0
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable12_11
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   00000022   0x.... 0x....      BL       scheduleMsg
    144          }
   \   00000026   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    145          

   \                                 In section .text, align 2, keep-with-next
    146          void Engine::knockLogic(float knockVolts) {
   \                     _ZN6Engine10knockLogicEf:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0xEEB0 0x8A40      VMOV.F32 S16,S0
    147              knockNow = knockVolts > engineConfiguration->knockVThreshold;
   \   0000000C   0x6A60             LDR      R0,[R4, #+36]
   \   0000000E   0xF8D0 0x0610      LDR      R0,[R0, #+1552]
   \   00000012   0xEE00 0x0A10      VMOV     S0,R0
   \   00000016   0xEEB4 0x0A48      VCMP.F32 S0,S16
   \   0000001A   0xEEF1 0xFA10      FMSTAT   
   \   0000001E   0xD501             BPL.N    ??knockLogic_0
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0xE000             B.N      ??knockLogic_1
   \                     ??knockLogic_0:
   \   00000024   0x2000             MOVS     R0,#+0
   \                     ??knockLogic_1:
   \   00000026   0xF884 0x0267      STRB     R0,[R4, #+615]
    148              /**
    149               * KnockCount is directly proportional to the degrees of ignition
    150               * advance removed
    151               * ex: degrees to subtract = knockCount;
    152               */
    153          
    154              /**
    155               * TODO use knockLevel as a factor for amount of ignition advance
    156               * to remove
    157               * Perhaps allow the user to set a multiplier
    158               * ex: degrees to subtract = knockCount + (knockLevel * X)
    159               * X = user configurable multiplier
    160               */
    161              if (knockNow) {
   \   0000002A   0xF894 0x0267      LDRB     R0,[R4, #+615]
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD018             BEQ.N    ??knockLogic_2
    162                  knockEver = true;
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0xF884 0x0268      STRB     R0,[R4, #+616]
    163                  timeOfLastKnockEvent = getTimeNowUs();
   \   00000038   0x.... 0x....      BL       getTimeNowUs
   \   0000003C   0xE9C4 0x019E      STRD     R0,R1,[R4, #+632]
    164                  if (knockCount < engineConfiguration->maxKnockSubDeg)
   \   00000040   0xED94 0x0A9B      VLDR     S0,[R4, #+620]
   \   00000044   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000048   0x6A60             LDR      R0,[R4, #+36]
   \   0000004A   0xEDD0 0x0A90      VLDR     S1,[R0, #+576]
   \   0000004E   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   00000052   0xEEF1 0xFA10      FMSTAT   
   \   00000056   0xD512             BPL.N    ??knockLogic_3
    165                      knockCount++;
   \   00000058   0xF8D4 0x026C      LDR      R0,[R4, #+620]
   \   0000005C   0x1C40             ADDS     R0,R0,#+1
   \   0000005E   0xF8C4 0x026C      STR      R0,[R4, #+620]
   \   00000062   0xE00C             B.N      ??knockLogic_3
    166              } else if (knockCount >= 1) {
   \                     ??knockLogic_2:
   \   00000064   0xF8D4 0x026C      LDR      R0,[R4, #+620]
   \   00000068   0x2801             CMP      R0,#+1
   \   0000006A   0xDB05             BLT.N    ??knockLogic_4
    167                  knockCount--;
   \   0000006C   0xF8D4 0x026C      LDR      R0,[R4, #+620]
   \   00000070   0x1E40             SUBS     R0,R0,#+1
   \   00000072   0xF8C4 0x026C      STR      R0,[R4, #+620]
   \   00000076   0xE002             B.N      ??knockLogic_3
    168          	} else {
    169                  knockCount = 0;
   \                     ??knockLogic_4:
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0xF8C4 0x026C      STR      R0,[R4, #+620]
    170              }
    171          }
   \                     ??knockLogic_3:
   \   0000007E   0xECBD 0x8B02      VPOP     {D8}
   \   00000082   0xBD10             POP      {R4,PC}          ;; return
    172          

   \                                 In section .text, align 2, keep-with-next
    173          void Engine::watchdog() {
   \                     _ZN6Engine8watchdogEv:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x4680             MOV      R8,R0
    174          #if EFI_ENGINE_CONTROL
    175          	if (isRunningPwmTest)
   \   00000008   0xF898 0x0266      LDRB     R0,[R8, #+614]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD147             BNE.N    ??watchdog_0
    176          		return;
    177          	if (!isSpinning) {
   \                     ??watchdog_1:
   \   00000010   0xF242 0x4010      MOVW     R0,#+9232
   \   00000014   0xF810 0x0008      LDRB     R0,[R0, R8]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD10C             BNE.N    ??watchdog_2
    178          		if (!isRunningBenchTest() && stopPins()) {
   \   0000001C   0x.... 0x....      BL       _Z18isRunningBenchTestv
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD107             BNE.N    ??watchdog_3
   \   00000024   0x4640             MOV      R0,R8
   \   00000026   0x.... 0x....      BL       _ZN6Engine8stopPinsEv
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD002             BEQ.N    ??watchdog_3
    179          			firmwareError("Some pins were turned off by 2nd pass watchdog");
   \   0000002E   0x....             LDR.N    R0,??DataTable12_12
   \   00000030   0x.... 0x....      BL       firmwareError
    180          		}
    181          		return;
   \                     ??watchdog_3:
   \   00000034   0xE034             B.N      ??watchdog_0
    182          	}
    183          	efitick_t nowNt = getTimeNowNt();
   \                     ??watchdog_2:
   \   00000036   0x.... 0x....      BL       getTimeNowNt
   \   0000003A   0x0004             MOVS     R4,R0
   \   0000003C   0x000D             MOVS     R5,R1
    184          	/**
    185          	 * Lowest possible cranking is about 240 RPM, that's 4 revolutions per second.
    186          	 * 0.25 second is 250000 uS
    187          	 *
    188          	 * todo: better watch dog implementation should be implemented - see
    189          	 * http://sourceforge.net/p/rusefi/tickets/96/
    190          	 *
    191          	 * note that the result of this subtraction could be negative, that would happen if
    192          	 * we have a trigger event between the time we've invoked 'getTimeNow' and here
    193          	 */
    194          	efitick_t timeSinceLastTriggerEvent = nowNt - lastTriggerEventTimeNt;
   \   0000003E   0xF508 0x50F0      ADD      R0,R8,#+7680
   \   00000042   0x30E8             ADDS     R0,R0,#+232
   \   00000044   0xE9D0 0x2300      LDRD     R2,R3,[R0, #+0]
   \   00000048   0x1AA6             SUBS     R6,R4,R2
   \   0000004A   0xEB75 0x0703      SBCS     R7,R5,R3
    195          	if (timeSinceLastTriggerEvent < US2NT(250000LL)) {
   \   0000004E   0x....             LDR.N    R0,??DataTable12_13  ;; 0x280de80
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0x428F             CMP      R7,R1
   \   00000054   0xDC03             BGT.N    ??watchdog_4
   \   00000056   0xDB01             BLT.N    ??watchdog_5
   \   00000058   0x4286             CMP      R6,R0
   \   0000005A   0xD200             BCS.N    ??watchdog_4
    196          		return;
   \                     ??watchdog_5:
   \   0000005C   0xE020             B.N      ??watchdog_0
    197          	}
    198          	isSpinning = false;
   \                     ??watchdog_4:
   \   0000005E   0xF242 0x4010      MOVW     R0,#+9232
   \   00000062   0x2100             MOVS     R1,#+0
   \   00000064   0xF800 0x1008      STRB     R1,[R0, R8]
    199          #if EFI_PROD_CODE || EFI_SIMULATOR
    200          	scheduleMsg(&logger, "engine has STOPPED");
   \   00000068   0x....             LDR.N    R1,??DataTable12_14
   \   0000006A   0x....             LDR.N    R0,??DataTable12_4
   \   0000006C   0x.... 0x....      BL       scheduleMsg
    201          	scheduleMsg(&logger, "templog engine has STOPPED [%x][%x] [%x][%x] %d",
    202          			(int)(nowNt >> 32), (int)nowNt,
    203          			(int)(lastTriggerEventTimeNt >> 32), (int)lastTriggerEventTimeNt,
    204          			(int)timeSinceLastTriggerEvent
    205          			);
   \   00000070   0x9602             STR      R6,[SP, #+8]
   \   00000072   0xF508 0x52F0      ADD      R2,R8,#+7680
   \   00000076   0x32E8             ADDS     R2,R2,#+232
   \   00000078   0xE9D2 0x0100      LDRD     R0,R1,[R2, #+0]
   \   0000007C   0x9001             STR      R0,[SP, #+4]
   \   0000007E   0xF508 0x52F0      ADD      R2,R8,#+7680
   \   00000082   0x32E8             ADDS     R2,R2,#+232
   \   00000084   0xE9D2 0x0100      LDRD     R0,R1,[R2, #+0]
   \   00000088   0x9100             STR      R1,[SP, #+0]
   \   0000008A   0x0023             MOVS     R3,R4
   \   0000008C   0x002A             MOVS     R2,R5
   \   0000008E   0x....             LDR.N    R1,??DataTable12_15
   \   00000090   0x....             LDR.N    R0,??DataTable12_4
   \   00000092   0x.... 0x....      BL       scheduleMsg
    206          	triggerInfo();
   \   00000096   0x.... 0x....      BL       _Z11triggerInfov
    207          #endif
    208          
    209          	stopPins();
   \   0000009A   0x4640             MOV      R0,R8
   \   0000009C   0x.... 0x....      BL       _ZN6Engine8stopPinsEv
    210          #endif
    211          }
   \                     ??watchdog_0:
   \   000000A0   0xE8BD 0x81FF      POP      {R0-R8,PC}       ;; return
    212          
    213          extern fuel_Map3D_t veMap;
    214          extern fuel_Map3D_t afrMap;
    215          
    216          /**
    217           * The idea of this method is to execute all heavy calculations in a lower-priority thread,
    218           * so that trigger event handler/IO scheduler tasks are faster. Th
    219           */

   \                                 In section .text, align 4, keep-with-next
    220          void Engine::periodicFastCallback(DECLARE_ENGINE_PARAMETER_F) {
   \                     _ZN6Engine20periodicFastCallbackEv:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B06      VPUSH    {D8-D10}
   \   00000006   0x0004             MOVS     R4,R0
    221          	int rpm = rpmCalculator.rpmValue;
   \   00000008   0xED94 0x8A00      VLDR     S16,[R4, #0]
    222          	float engineLoad = getEngineLoadT(PASS_ENGINE_PARAMETER_F);
   \   0000000C   0x.... 0x....      BL       _Z14getEngineLoadTv
   \   00000010   0xEEF0 0x8A40      VMOV.F32 S17,S0
    223          
    224          	engineState.sparkDwell = getSparkDwellMsT(rpm PASS_ENGINE_PARAMETER);
   \   00000014   0xEE18 0x0A10      VMOV     R0,S16
   \   00000018   0x.... 0x....      BL       _Z16getSparkDwellMsTi
   \   0000001C   0xF504 0x50F0      ADD      R0,R4,#+7680
   \   00000020   0x30B4             ADDS     R0,R0,#+180
   \   00000022   0xED80 0x0A00      VSTR     S0,[R0, #0]
    225          	// todo: move this field to engineState
    226          	engine->engineState.dwellAngle = engineState.sparkDwell / getOneDegreeTimeMs(rpm);
   \   00000026   0xEEB8 0x0AC8      VCVT.F32.S32 S0,S16
   \   0000002A   0xEDDF 0x....      VLDR.W   S1,??DataTable12  ;; 0x4326aaab
   \   0000002E   0xEE80 0x0A80      VDIV.F32 S0,S1,S0
   \   00000032   0xF504 0x50F0      ADD      R0,R4,#+7680
   \   00000036   0x30B4             ADDS     R0,R0,#+180
   \   00000038   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000003C   0xEE80 0x0A80      VDIV.F32 S0,S1,S0
   \   00000040   0x....             LDR.N    R0,??DataTable12_16
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF500 0x50F0      ADD      R0,R0,#+7680
   \   00000048   0x30BC             ADDS     R0,R0,#+188
   \   0000004A   0xED80 0x0A00      VSTR     S0,[R0, #0]
    227          
    228          	engine->engineState.iatFuelCorrection = getIatCorrection(engine->engineState.iat PASS_ENGINE_PARAMETER);
   \   0000004E   0x....             LDR.N    R0,??DataTable12_16
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0xF500 0x50F0      ADD      R0,R0,#+7680
   \   00000056   0x3050             ADDS     R0,R0,#+80
   \   00000058   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000005C   0x.... 0x....      BL       _Z16getIatCorrectionf
   \   00000060   0x....             LDR.N    R0,??DataTable12_16
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0xF500 0x50F0      ADD      R0,R0,#+7680
   \   00000068   0x30C4             ADDS     R0,R0,#+196
   \   0000006A   0xED80 0x0A00      VSTR     S0,[R0, #0]
    229          	engine->engineState.cltFuelCorrection = getCltCorrection(engine->engineState.clt PASS_ENGINE_PARAMETER);
   \   0000006E   0x....             LDR.N    R0,??DataTable12_16
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0xF500 0x50F0      ADD      R0,R0,#+7680
   \   00000076   0x3054             ADDS     R0,R0,#+84
   \   00000078   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000007C   0x.... 0x....      BL       _Z16getCltCorrectionf
   \   00000080   0x....             LDR.N    R0,??DataTable12_16
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0xF500 0x50F0      ADD      R0,R0,#+7680
   \   00000088   0x30C8             ADDS     R0,R0,#+200
   \   0000008A   0xED80 0x0A00      VSTR     S0,[R0, #0]
    230          
    231          	engine->engineState.baroCorrection = getBaroCorrection(PASS_ENGINE_PARAMETER_F);
   \   0000008E   0x.... 0x....      BL       _Z17getBaroCorrectionv
   \   00000092   0x....             LDR.N    R0,??DataTable12_16
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0xF500 0x50F0      ADD      R0,R0,#+7680
   \   0000009A   0x30D0             ADDS     R0,R0,#+208
   \   0000009C   0xED80 0x0A00      VSTR     S0,[R0, #0]
    232          
    233          	engine->engineState.injectionOffset = getinjectionOffset(rpm PASS_ENGINE_PARAMETER);
   \   000000A0   0xEE18 0x0A10      VMOV     R0,S16
   \   000000A4   0x.... 0x....      BL       _Z18getinjectionOffseti
   \   000000A8   0x....             LDR.N    R0,??DataTable12_16
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0xF500 0x50F0      ADD      R0,R0,#+7680
   \   000000B0   0x30E4             ADDS     R0,R0,#+228
   \   000000B2   0xED80 0x0A00      VSTR     S0,[R0, #0]
    234          	engine->engineState.timingAdvance = getAdvance(rpm, engineLoad PASS_ENGINE_PARAMETER);
   \   000000B6   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \   000000BA   0xEE18 0x0A10      VMOV     R0,S16
   \   000000BE   0x.... 0x....      BL       _Z10getAdvanceif
   \   000000C2   0x....             LDR.N    R0,??DataTable12_16
   \   000000C4   0x6800             LDR      R0,[R0, #+0]
   \   000000C6   0xF500 0x50F0      ADD      R0,R0,#+7680
   \   000000CA   0x30B8             ADDS     R0,R0,#+184
   \   000000CC   0xED80 0x0A00      VSTR     S0,[R0, #0]
    235          
    236          	if (engineConfiguration->algorithm == LM_SPEED_DENSITY) {
   \   000000D0   0x6A60             LDR      R0,[R4, #+36]
   \   000000D2   0xF8D0 0x01A8      LDR      R0,[R0, #+424]
   \   000000D6   0x2803             CMP      R0,#+3
   \   000000D8   0xD150             BNE.N    ??periodicFastCallback_0
    237          		float coolantC = ENGINE(engineState.clt);
   \   000000DA   0x....             LDR.N    R0,??DataTable12_17
   \   000000DC   0xED90 0x9A00      VLDR     S18,[R0, #0]
    238          		float intakeC = ENGINE(engineState.iat);
   \   000000E0   0x....             LDR.N    R0,??DataTable12_18
   \   000000E2   0xEDD0 0x9A00      VLDR     S19,[R0, #0]
    239          		float tps = getTPS(PASS_ENGINE_PARAMETER_F);
   \   000000E6   0x.... 0x....      BL       _Z6getTPSv
   \   000000EA   0xEEB0 0xAA40      VMOV.F32 S20,S0
    240          		engine->engineState.tChargeK = convertCelsiusToKelvin(getTCharge(rpm, tps, coolantC, intakeC));
   \   000000EE   0xEEB0 0x1A69      VMOV.F32 S2,S19
   \   000000F2   0xEEF0 0x0A49      VMOV.F32 S1,S18
   \   000000F6   0xEEB0 0x0A4A      VMOV.F32 S0,S20
   \   000000FA   0xEE18 0x0A10      VMOV     R0,S16
   \   000000FE   0x.... 0x....      BL       _Z10getTChargeifff
   \   00000102   0xEDDF 0x....      VLDR.W   S1,??DataTable12_1  ;; 0x43889333
   \   00000106   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   0000010A   0x....             LDR.N    R0,??DataTable12_16
   \   0000010C   0x6800             LDR      R0,[R0, #+0]
   \   0000010E   0xF500 0x50F0      ADD      R0,R0,#+7680
   \   00000112   0x30D4             ADDS     R0,R0,#+212
   \   00000114   0xED80 0x0A00      VSTR     S0,[R0, #0]
    241          		float map = getMap();
   \   00000118   0x.... 0x....      BL       _Z6getMapv
   \   0000011C   0xEEF0 0xAA40      VMOV.F32 S21,S0
    242          
    243          		/**
    244          		 * *0.01 because of https://sourceforge.net/p/rusefi/tickets/153/
    245          		 */
    246          		engine->engineState.currentVE = engine->engineState.baroCorrection * veMap.getValue(map, rpm) * 0.01;
   \   00000120   0xEEF8 0x0AC8      VCVT.F32.S32 S1,S16
   \   00000124   0xEEB0 0x0A6A      VMOV.F32 S0,S21
   \   00000128   0x....             LDR.N    R0,??DataTable12_19
   \   0000012A   0x.... 0x....      BL       _ZN5Map3DILi16ELi16EE8getValueEff
   \   0000012E   0x....             LDR.N    R0,??DataTable12_16
   \   00000130   0x6800             LDR      R0,[R0, #+0]
   \   00000132   0xF500 0x50F0      ADD      R0,R0,#+7680
   \   00000136   0x30D0             ADDS     R0,R0,#+208
   \   00000138   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000013C   0xEE20 0x0A80      VMUL.F32 S0,S1,S0
   \   00000140   0xEE10 0x0A10      VMOV     R0,S0
   \   00000144   0x.... 0x....      BL       __aeabi_f2d
   \   00000148   0x....             LDR.N    R2,??DataTable12_20  ;; 0x47ae147b
   \   0000014A   0x....             LDR.N    R3,??DataTable12_21  ;; 0x3f847ae1
   \   0000014C   0x.... 0x....      BL       __aeabi_dmul
   \   00000150   0x.... 0x....      BL       __aeabi_d2f
   \   00000154   0xF641 0x61D8      MOVW     R1,#+7896
   \   00000158   0x....             LDR.N    R2,??DataTable12_16
   \   0000015A   0x6812             LDR      R2,[R2, #+0]
   \   0000015C   0x5088             STR      R0,[R1, R2]
    247          		engine->engineState.targerAFR = afrMap.getValue(map, rpm);
   \   0000015E   0xEEF8 0x0AC8      VCVT.F32.S32 S1,S16
   \   00000162   0xEEB0 0x0A6A      VMOV.F32 S0,S21
   \   00000166   0x....             LDR.N    R0,??DataTable12_22
   \   00000168   0x.... 0x....      BL       _ZN5Map3DILi16ELi16EE8getValueEff
   \   0000016C   0x....             LDR.N    R0,??DataTable12_16
   \   0000016E   0x6800             LDR      R0,[R0, #+0]
   \   00000170   0xF500 0x50F0      ADD      R0,R0,#+7680
   \   00000174   0x30DC             ADDS     R0,R0,#+220
   \   00000176   0xED80 0x0A00      VSTR     S0,[R0, #0]
   \   0000017A   0xE010             B.N      ??periodicFastCallback_1
    248          	} else {
    249          		float engineLoad = getEngineLoadT(PASS_ENGINE_PARAMETER_F);
   \                     ??periodicFastCallback_0:
   \   0000017C   0x.... 0x....      BL       _Z14getEngineLoadTv
   \   00000180   0xEEB0 0x9A40      VMOV.F32 S18,S0
    250          		engine->engineState.baseTableFuel = getBaseTableFuel(engineConfiguration, rpm, engineLoad);
   \   00000184   0xEEB0 0x0A49      VMOV.F32 S0,S18
   \   00000188   0xEE18 0x1A10      VMOV     R1,S16
   \   0000018C   0x6A60             LDR      R0,[R4, #+36]
   \   0000018E   0x.... 0x....      BL       _Z16getBaseTableFuelP22engine_configuration_sif
   \   00000192   0x....             LDR.N    R0,??DataTable12_16
   \   00000194   0x6800             LDR      R0,[R0, #+0]
   \   00000196   0xF510 0x50F7      ADDS     R0,R0,#+7904
   \   0000019A   0xED80 0x0A00      VSTR     S0,[R0, #0]
    251          	}
    252          }
   \                     ??periodicFastCallback_1:
   \   0000019E   0xECBD 0x8B06      VPOP     {D8-D10}
   \   000001A2   0xBD10             POP      {R4,PC}          ;; return
    253          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp StartupFuelPumping::subobject StartupFuelPumping()
   \                     _ZN18StartupFuelPumpingC2Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN18StartupFuelPumpingC1Ev
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    254          StartupFuelPumping::StartupFuelPumping() {
    255          	isTpsAbove50 = false;
   \                     _ZN18StartupFuelPumpingC1Ev:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x7001             STRB     R1,[R0, #+0]
    256          	pumpsCounter = 0;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6041             STR      R1,[R0, #+4]
    257          }
   \   00000008   0x4770             BX       LR               ;; return
    258          

   \                                 In section .text, align 2, keep-with-next
    259          void StartupFuelPumping::setPumpsCounter(
    260          		engine_configuration_s *engineConfiguration, int newValue) {
   \                     _ZN18StartupFuelPumping15setPumpsCounterEP22engine_configuration_si:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    261          	if (pumpsCounter != newValue) {
   \   00000008   0x6860             LDR      R0,[R4, #+4]
   \   0000000A   0x42B0             CMP      R0,R6
   \   0000000C   0xD010             BEQ.N    ??setPumpsCounter_0
    262          		pumpsCounter = newValue;
   \   0000000E   0x6066             STR      R6,[R4, #+4]
    263          
    264          		if (pumpsCounter == PUMPS_TO_PRIME) {
   \   00000010   0x6860             LDR      R0,[R4, #+4]
   \   00000012   0x2806             CMP      R0,#+6
   \   00000014   0xD107             BNE.N    ??setPumpsCounter_1
    265          			scheduleMsg(&logger, "let's squirt prime pulse %f", pumpsCounter);
   \   00000016   0x6862             LDR      R2,[R4, #+4]
   \   00000018   0x....             LDR.N    R1,??DataTable12_23
   \   0000001A   0x....             LDR.N    R0,??DataTable12_4
   \   0000001C   0x.... 0x....      BL       scheduleMsg
    266          			pumpsCounter = 0;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x6060             STR      R0,[R4, #+4]
   \   00000024   0xE004             B.N      ??setPumpsCounter_0
    267          		} else {
    268          			scheduleMsg(&logger, "setPumpsCounter %d", pumpsCounter);
   \                     ??setPumpsCounter_1:
   \   00000026   0x6862             LDR      R2,[R4, #+4]
   \   00000028   0x....             LDR.N    R1,??DataTable12_24
   \   0000002A   0x....             LDR.N    R0,??DataTable12_4
   \   0000002C   0x.... 0x....      BL       scheduleMsg
    269          		}
    270          	}
    271          }
   \                     ??setPumpsCounter_0:
   \   00000030   0xBD70             POP      {R4-R6,PC}       ;; return
    272          

   \                                 In section .text, align 4, keep-with-next
    273          void StartupFuelPumping::update(DECLARE_ENGINE_PARAMETER_F) {
   \                     _ZN18StartupFuelPumping6updateEv:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    274          	if (engine->rpmCalculator.rpm(PASS_ENGINE_PARAMETER_F) == 0) {
   \   00000004   0x....             LDR.N    R0,??DataTable12_16
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x.... 0x....      BL       _ZN13RpmCalculator3rpmEv
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD117             BNE.N    ??update_0
    275          		bool isTpsAbove50 = getTPS(PASS_ENGINE_PARAMETER_F) >= 50;
   \   00000010   0x.... 0x....      BL       _Z6getTPSv
   \   00000014   0xEDDF 0x....      VLDR.W   S1,??DataTable12_2  ;; 0x42480000
   \   00000018   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   0000001C   0xEEF1 0xFA10      FMSTAT   
   \   00000020   0xDB01             BLT.N    ??update_1
   \   00000022   0x2501             MOVS     R5,#+1
   \   00000024   0xE000             B.N      ??update_2
   \                     ??update_1:
   \   00000026   0x2500             MOVS     R5,#+0
    276          
    277          		if (this->isTpsAbove50 != isTpsAbove50) {
   \                     ??update_2:
   \   00000028   0x7820             LDRB     R0,[R4, #+0]
   \   0000002A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002C   0x42A8             CMP      R0,R5
   \   0000002E   0xD00F             BEQ.N    ??update_3
    278          			setPumpsCounter(engineConfiguration, pumpsCounter + 1);
   \   00000030   0x6860             LDR      R0,[R4, #+4]
   \   00000032   0x1C42             ADDS     R2,R0,#+1
   \   00000034   0x....             LDR.N    R0,??DataTable12_25
   \   00000036   0x6801             LDR      R1,[R0, #+0]
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0x.... 0x....      BL       _ZN18StartupFuelPumping15setPumpsCounterEP22engine_configuration_si
   \   0000003E   0xE007             B.N      ??update_3
    279          		}
    280          
    281          	} else {
    282          		/**
    283          		 * Engine is not stopped - not priming pumping mode
    284          		 */
    285          		setPumpsCounter(engineConfiguration, 0);
   \                     ??update_0:
   \   00000040   0x2200             MOVS     R2,#+0
   \   00000042   0x....             LDR.N    R0,??DataTable12_25
   \   00000044   0x6801             LDR      R1,[R0, #+0]
   \   00000046   0x0020             MOVS     R0,R4
   \   00000048   0x.... 0x....      BL       _ZN18StartupFuelPumping15setPumpsCounterEP22engine_configuration_si
    286          		isTpsAbove50 = false;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x7020             STRB     R0,[R4, #+0]
    287          	}
    288          }
   \                     ??update_3:
   \   00000050   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x3A400C01         DC32     0x3a400c01

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x7FFFFFFF         DC32     0x7fffffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x4326AAAB         DC32     0x4326aaab

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x43889333         DC32     0x43889333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x42480000         DC32     0x42480000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x........         DC32     `?<Constant "engine">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x........         DC32     logger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x........         DC32     `?<Constant "fuel">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   0x........         DC32     _Z24invokeEnginePreCalculateP6Engine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \   00000000   0x9999999A         DC32     0x9999999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_8:
   \   00000000   0x40499999         DC32     0x40499999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_9:
   \   00000000   0x........         DC32     `?<Constant "turning off %s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_10:
   \   00000000   0x........         DC32     enginePins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_11:
   \   00000000   0x........         DC32     `?<Constant "knock now=%s/ever=%s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_12:
   \   00000000   0x........         DC32     `?<Constant "Some pins were turned...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_13:
   \   00000000   0x0280DE80         DC32     0x280de80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_14:
   \   00000000   0x........         DC32     `?<Constant "engine has STOPPED">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_15:
   \   00000000   0x........         DC32     `?<Constant "templog engine has ST...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_16:
   \   00000000   0x........         DC32     engine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_17:
   \   00000000   0x........         DC32     _engine+0x1E54

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_18:
   \   00000000   0x........         DC32     _engine+0x1E50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_19:
   \   00000000   0x........         DC32     veMap

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_20:
   \   00000000   0x47AE147B         DC32     0x47ae147b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_21:
   \   00000000   0x3F847AE1         DC32     0x3f847ae1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_22:
   \   00000000   0x........         DC32     afrMap

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_23:
   \   00000000   0x........         DC32     `?<Constant "let\\'s squirt prime pu...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_24:
   \   00000000   0x........         DC32     `?<Constant "setPumpsCounter %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_25:
   \   00000000   0x........         DC32     engineConfiguration

   \                                 In section .init_array, align 4, keep-with-next, root
   \   00000000   0x........         DC32    RELOC_ARM_TARGET1 __sti__routine

   \                                 In section .rodata, align 4
   \                     `?<Constant "turning off %s">`:
   \   00000000   0x74 0x75          DC8 "turning off %s"
   \              0x72 0x6E    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x6F 0x66    
   \              0x66 0x20    
   \              0x25 0x73    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "fuel">`:
   \   00000000   0x66 0x75          DC8 "fuel"
   \              0x65 0x6C    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Some pins were turned...">`:
   \   00000000   0x53 0x6F          DC8 "Some pins were turned off by 2nd pass watchdog"
   \              0x6D 0x65    
   \              0x20 0x70    
   \              0x69 0x6E    
   \              0x73 0x20    
   \              0x77 0x65    
   \              0x72 0x65    
   \              0x20 0x74    
   \              0x75 0x72    
   \              0x6E 0x65    
   \              0x64 0x20    
   \              0x6F 0x66    
   \              0x66 0x20    
   \              0x62 0x79    
   \              0x20 0x32    
   \              0x6E 0x64    
   \              0x20 0x70    
   \              0x61 0x73    
   \              0x73 0x20    
   \              0x77 0x61    
   \              0x74 0x63    
   \              0x68 0x64    
   \              0x6F 0x67    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "engine has STOPPED">`:
   \   00000000   0x65 0x6E          DC8 "engine has STOPPED"
   \              0x67 0x69    
   \              0x6E 0x65    
   \              0x20 0x68    
   \              0x61 0x73    
   \              0x20 0x53    
   \              0x54 0x4F    
   \              0x50 0x50    
   \              0x45 0x44    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "templog engine has ST...">`:
   \   00000000   0x74 0x65          DC8 "templog engine has STOPPED [%x][%x] [%x][%x] %d"
   \              0x6D 0x70    
   \              0x6C 0x6F    
   \              0x67 0x20    
   \              0x65 0x6E    
   \              0x67 0x69    
   \              0x6E 0x65    
   \              0x20 0x68    
   \              0x61 0x73    
   \              0x20 0x53    
   \              0x54 0x4F    
   \              0x50 0x50    
   \              0x45 0x44    
   \              0x20 0x5B    
   \              0x25 0x78    
   \              0x5D 0x5B    
   \              0x25 0x78    
   \              0x5D 0x20    
   \              0x5B 0x25    
   \              0x78 0x5D    
   \              0x5B 0x25    
   \              0x78 0x5D    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "knock now=%s/ever=%s">`:
   \   00000000   0x6B 0x6E          DC8 "knock now=%s/ever=%s"
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x6E 0x6F    
   \              0x77 0x3D    
   \              0x25 0x73    
   \              0x2F 0x65    
   \              0x76 0x65    
   \              0x72 0x3D    
   \              0x25 0x73    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "let\\'s squirt prime pu...">`:
   \   00000000   0x6C 0x65          DC8 "let's squirt prime pulse %f"
   \              0x74 0x27    
   \              0x73 0x20    
   \              0x73 0x71    
   \              0x75 0x69    
   \              0x72 0x74    
   \              0x20 0x70    
   \              0x72 0x69    
   \              0x6D 0x65    
   \              0x20 0x70    
   \              0x75 0x6C    
   \              0x73 0x65    
   \              0x20 0x25    
   \              0x66 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "setPumpsCounter %d">`:
   \   00000000   0x73 0x65          DC8 "setPumpsCounter %d"
   \              0x74 0x50    
   \              0x75 0x6D    
   \              0x70 0x73    
   \              0x43 0x6F    
   \              0x75 0x6E    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x25 0x64    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "engine">`:
   \   00000000   0x65 0x6E          DC8 "engine"
   \              0x67 0x69    
   \              0x6E 0x65    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 2
   \   __code __interwork __softfp Table2D<8>::subobject Table2D()
   \                     _ZN7Table2DILi8EEC2Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN7Table2DILi8EEC1Ev
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
    289          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   Engine::Engine(persistent_config_s *)
        16   -> AccelEnrichmemnt::AccelEnrichmemnt()
        16   -> Engine::addConfigurationListener(void (*)(Engine *))
        16   -> EngineState::EngineState()
        16   -> IntListenerArray::IntListenerArray()
        16   -> RpmCalculator::RpmCalculator()
        16   -> Table2D<8>::Table2D()
        16   -> TriggerShape::TriggerShape()
        16   -> memset
      16   Engine::addConfigurationListener(void (*)(Engine *))
        16   -> IntListenerArray::registerCallback(VoidInt, void *)
       0   Engine::init()
      16   Engine::knockLogic(float)
        16   -> getTimeNowUs
       4   Engine::onTriggerEvent(int64_t)
      32   Engine::periodicFastCallback()
        32   -> Map3D<16, 16>::getValue(float, float)
        32   -> __aeabi_d2f
        32   -> __aeabi_dmul
        32   -> __aeabi_f2d
        32   -> getAdvance(int, float)
        32   -> getBaroCorrection()
        32   -> getBaseTableFuel(engine_configuration_s *, int, float)
        32   -> getCltCorrection(float)
        32   -> getEngineLoadT()
        32   -> getIatCorrection(float)
        32   -> getMap()
        32   -> getSparkDwellMsT(int)
        32   -> getTCharge(int, float, float, float)
        32   -> getTPS()
        32   -> getinjectionOffset(int)
      24   Engine::preCalculate()
        24   -> Table2D<8>::preCalc(float *, float *)
        24   -> __aeabi_d2f
        24   -> __aeabi_ddiv
        24   -> __aeabi_i2d
        24   -> interpolate2d(float, float *, float *, int)
      16   Engine::printKnockState()
        16   -> boolToString(bool)
        16   -> scheduleMsg
      16   Engine::stopPins()
        16   -> stopPin(NamedOutputPin *)
       8   Engine::subobject Engine(persistent_config_s *)
         8   -> Engine::Engine(persistent_config_s *)
      24   Engine::updateSlowSensors()
        24   -> getCoolantTemperature()
        24   -> getInjectorLag(float)
        24   -> getIntakeAirTemperature()
        24   -> getInternalAdcValue(char const *, adc_channel_e)
        24   -> getVBatt()
        24   -> hasVBatt()
        24   -> interpolate(float, float, float, float, float)
      40   Engine::watchdog()
        40   -> Engine::stopPins()
        40   -> firmwareError
        40   -> getTimeNowNt
        40   -> isRunningBenchTest()
        40   -> scheduleMsg
        40   -> triggerInfo()
       8   EngineState::EngineState()
         8   -> ThermistorMath::ThermistorMath()
       8   EngineState::subobject EngineState()
         8   -> EngineState::EngineState()
      24   Map3D<16, 16>::getValue(float, float)
        24   -> firmwareError
        24   -> interpolate3d(float, float *, int, float, float *, int, float **)
       0   StartupFuelPumping::StartupFuelPumping()
      16   StartupFuelPumping::setPumpsCounter(engine_configuration_s *, int)
        16   -> scheduleMsg
       8   StartupFuelPumping::subobject StartupFuelPumping()
         8   -> StartupFuelPumping::StartupFuelPumping()
      16   StartupFuelPumping::update()
        16   -> RpmCalculator::rpm()
        16   -> StartupFuelPumping::setPumpsCounter(engine_configuration_s *, int)
        16   -> getTPS()
       0   Table2D<8>::Table2D()
      32   Table2D<8>::preCalc(float *, float *)
        32   -> __aeabi_f2d
        32   -> warning
       8   Table2D<8>::subobject Table2D()
         8   -> Table2D<8>::Table2D()
       8   __sti__routine()
         8   -> LoggingWithStorage::LoggingWithStorage(char const *)
       8   invokeEnginePreCalculate(Engine *)
         8   -> Engine::preCalculate()
      16   memset
        16   -> __aeabi_memset
       8   stopPin(NamedOutputPin *)
         8   -> OutputPin::getLogicValue()
         8   -> OutputPin::isInitialized()
         8   -> OutputPin::setValue(int)
         8   -> scheduleMsg


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      48  ?<Constant "Some pins were turned...">
      20  ?<Constant "engine has STOPPED">
       8  ?<Constant "engine">
       8  ?<Constant "fuel">
      24  ?<Constant "knock now=%s/ever=%s">
      28  ?<Constant "let\'s squirt prime pu...">
      20  ?<Constant "setPumpsCounter %d">
      48  ?<Constant "templog engine has ST...">
      16  ?<Constant "turning off %s">
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_10
       4  ??DataTable12_11
       4  ??DataTable12_12
       4  ??DataTable12_13
       4  ??DataTable12_14
       4  ??DataTable12_15
       4  ??DataTable12_16
       4  ??DataTable12_17
       4  ??DataTable12_18
       4  ??DataTable12_19
       4  ??DataTable12_2
       4  ??DataTable12_20
       4  ??DataTable12_21
       4  ??DataTable12_22
       4  ??DataTable12_23
       4  ??DataTable12_24
       4  ??DataTable12_25
       4  ??DataTable12_3
       4  ??DataTable12_4
       4  ??DataTable12_5
       4  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable12_9
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable9
     274  Engine::Engine(persistent_config_s *)
      24  Engine::addConfigurationListener(void (*)(Engine *))
       2  Engine::init()
     132  Engine::knockLogic(float)
      24  Engine::onTriggerEvent(int64_t)
     420  Engine::periodicFastCallback()
     112  Engine::preCalculate()
      40  Engine::printKnockState()
      66  Engine::stopPins()
      12  Engine::subobject Engine(persistent_config_s *)
     174  Engine::updateSlowSensors()
     164  Engine::watchdog()
      36  EngineState::EngineState()
      12  EngineState::subobject EngineState()
      80  Map3D<16, 16>::getValue(float, float)
      10  StartupFuelPumping::StartupFuelPumping()
      50  StartupFuelPumping::setPumpsCounter(engine_configuration_s *, int)
      12  StartupFuelPumping::subobject StartupFuelPumping()
      82  StartupFuelPumping::update()
       6  Table2D<8>::Table2D()
     156  Table2D<8>::preCalc(float *, float *)
      12  Table2D<8>::subobject Table2D()
      16  __sti__routine()
      12  invokeEnginePreCalculate(Engine *)
     260  logger
      22  memset
      54  stopPin(NamedOutputPin *)
      72  -- Other

 
   260 bytes in section .bss
     4 bytes in section .init_array
   288 bytes in section .rodata
 2 124 bytes in section .text
 
 1 852 bytes of CODE  memory (+ 276 bytes shared)
   220 bytes of CONST memory (+  68 bytes shared)
   260 bytes of DATA  memory

Errors: none
Warnings: 2
