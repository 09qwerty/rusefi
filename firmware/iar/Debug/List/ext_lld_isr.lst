###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:49 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\p #
#                       latforms\STM32F4xx\ext_lld_isr.c                      #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\p #
#                       latforms\STM32F4xx\ext_lld_isr.c -lCN                 #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\  #
#                       -lA F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Li #
#                       st\ -o F:\stuff\rusefi_sourceforge\firmware\iar\Debug #
#                       \Obj\ --no_cse --no_unroll --no_inline                #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\ -On #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\e #
#                       xt_lld_isr.lst                                        #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\ex #
#                       t_lld_isr.o                                           #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\platforms\STM32F4xx\ext_lld_isr.c
      1          /*
      2              ChibiOS/RT - Copyright (C) 2006-2013 Giovanni Di Sirio
      3          
      4              Licensed under the Apache License, Version 2.0 (the "License");
      5              you may not use this file except in compliance with the License.
      6              You may obtain a copy of the License at
      7          
      8                  http://www.apache.org/licenses/LICENSE-2.0
      9          
     10              Unless required by applicable law or agreed to in writing, software
     11              distributed under the License is distributed on an "AS IS" BASIS,
     12              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     13              See the License for the specific language governing permissions and
     14              limitations under the License.
     15          */
     16          
     17          /**
     18           * @file    STM32F4xx/ext_lld_isr.c
     19           * @brief   STM32F4xx/STM32F2xx EXT subsystem low level driver ISR code.
     20           *
     21           * @addtogroup EXT
     22           * @{
     23           */
     24          
     25          #include "ch.h"
     26          #include "hal.h"
     27          
     28          #if HAL_USE_EXT || defined(__DOXYGEN__)
     29          
     30          #include "ext_lld_isr.h"
     31          
     32          /*===========================================================================*/
     33          /* Driver local definitions.                                                 */
     34          /*===========================================================================*/
     35          
     36          /*===========================================================================*/
     37          /* Driver exported variables.                                                */
     38          /*===========================================================================*/
     39          
     40          /*===========================================================================*/
     41          /* Driver local variables.                                                   */
     42          /*===========================================================================*/
     43          
     44          /*===========================================================================*/
     45          /* Driver local functions.                                                   */
     46          /*===========================================================================*/
     47          
     48          /*===========================================================================*/
     49          /* Driver interrupt handlers.                                                */
     50          /*===========================================================================*/
     51          
     52          /**
     53           * @brief   EXTI[0] interrupt handler.
     54           *
     55           * @isr
     56           */

   \                                 In section .text, align 2, keep-with-next
     57          CH_IRQ_HANDLER(EXTI0_IRQHandler) {
   \                     Vector58:
   \   00000000   0xB580             PUSH     {R7,LR}
     58          
     59            CH_IRQ_PROLOGUE();
   \   00000002   0x.... 0x....      BL       dbg_check_enter_isr
     60          
     61            EXTI->PR = (1 << 0);
   \   00000006   0x....             LDR.N    R0,??DataTable13  ;; 0x40013c14
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x6001             STR      R1,[R0, #+0]
     62            EXTD1.config->channels[0].cb(&EXTD1, 0);
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x....             LDR.N    R0,??DataTable13_1
   \   00000010   0x....             LDR.N    R2,??DataTable13_1
   \   00000012   0x6852             LDR      R2,[R2, #+4]
   \   00000014   0x6852             LDR      R2,[R2, #+4]
   \   00000016   0x4790             BLX      R2
     63          
     64            CH_IRQ_EPILOGUE();
   \   00000018   0x.... 0x....      BL       dbg_check_leave_isr
   \   0000001C   0x.... 0x....      BL       _port_irq_epilogue
     65          }
   \   00000020   0xBD01             POP      {R0,PC}          ;; return
     66          
     67          /**
     68           * @brief   EXTI[1] interrupt handler.
     69           *
     70           * @isr
     71           */

   \                                 In section .text, align 2, keep-with-next
     72          CH_IRQ_HANDLER(EXTI1_IRQHandler) {
   \                     Vector5C:
   \   00000000   0xB580             PUSH     {R7,LR}
     73          
     74            CH_IRQ_PROLOGUE();
   \   00000002   0x.... 0x....      BL       dbg_check_enter_isr
     75          
     76            EXTI->PR = (1 << 1);
   \   00000006   0x....             LDR.N    R0,??DataTable13  ;; 0x40013c14
   \   00000008   0x2102             MOVS     R1,#+2
   \   0000000A   0x6001             STR      R1,[R0, #+0]
     77            EXTD1.config->channels[1].cb(&EXTD1, 1);
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x....             LDR.N    R0,??DataTable13_1
   \   00000010   0x....             LDR.N    R2,??DataTable13_1
   \   00000012   0x6852             LDR      R2,[R2, #+4]
   \   00000014   0x68D2             LDR      R2,[R2, #+12]
   \   00000016   0x4790             BLX      R2
     78          
     79            CH_IRQ_EPILOGUE();
   \   00000018   0x.... 0x....      BL       dbg_check_leave_isr
   \   0000001C   0x.... 0x....      BL       _port_irq_epilogue
     80          }
   \   00000020   0xBD01             POP      {R0,PC}          ;; return
     81          
     82          /**
     83           * @brief   EXTI[2] interrupt handler.
     84           *
     85           * @isr
     86           */

   \                                 In section .text, align 2, keep-with-next
     87          CH_IRQ_HANDLER(EXTI2_IRQHandler) {
   \                     Vector60:
   \   00000000   0xB580             PUSH     {R7,LR}
     88          
     89            CH_IRQ_PROLOGUE();
   \   00000002   0x.... 0x....      BL       dbg_check_enter_isr
     90          
     91            EXTI->PR = (1 << 2);
   \   00000006   0x....             LDR.N    R0,??DataTable13  ;; 0x40013c14
   \   00000008   0x2104             MOVS     R1,#+4
   \   0000000A   0x6001             STR      R1,[R0, #+0]
     92            EXTD1.config->channels[2].cb(&EXTD1, 2);
   \   0000000C   0x2102             MOVS     R1,#+2
   \   0000000E   0x....             LDR.N    R0,??DataTable13_1
   \   00000010   0x....             LDR.N    R2,??DataTable13_1
   \   00000012   0x6852             LDR      R2,[R2, #+4]
   \   00000014   0x6952             LDR      R2,[R2, #+20]
   \   00000016   0x4790             BLX      R2
     93          
     94            CH_IRQ_EPILOGUE();
   \   00000018   0x.... 0x....      BL       dbg_check_leave_isr
   \   0000001C   0x.... 0x....      BL       _port_irq_epilogue
     95          }
   \   00000020   0xBD01             POP      {R0,PC}          ;; return
     96          
     97          /**
     98           * @brief   EXTI[3] interrupt handler.
     99           *
    100           * @isr
    101           */

   \                                 In section .text, align 2, keep-with-next
    102          CH_IRQ_HANDLER(EXTI3_IRQHandler) {
   \                     Vector64:
   \   00000000   0xB580             PUSH     {R7,LR}
    103          
    104            CH_IRQ_PROLOGUE();
   \   00000002   0x.... 0x....      BL       dbg_check_enter_isr
    105          
    106            EXTI->PR = (1 << 3);
   \   00000006   0x....             LDR.N    R0,??DataTable13  ;; 0x40013c14
   \   00000008   0x2108             MOVS     R1,#+8
   \   0000000A   0x6001             STR      R1,[R0, #+0]
    107            EXTD1.config->channels[3].cb(&EXTD1, 3);
   \   0000000C   0x2103             MOVS     R1,#+3
   \   0000000E   0x....             LDR.N    R0,??DataTable13_1
   \   00000010   0x....             LDR.N    R2,??DataTable13_1
   \   00000012   0x6852             LDR      R2,[R2, #+4]
   \   00000014   0x69D2             LDR      R2,[R2, #+28]
   \   00000016   0x4790             BLX      R2
    108          
    109            CH_IRQ_EPILOGUE();
   \   00000018   0x.... 0x....      BL       dbg_check_leave_isr
   \   0000001C   0x.... 0x....      BL       _port_irq_epilogue
    110          }
   \   00000020   0xBD01             POP      {R0,PC}          ;; return
    111          
    112          /**
    113           * @brief   EXTI[4] interrupt handler.
    114           *
    115           * @isr
    116           */

   \                                 In section .text, align 2, keep-with-next
    117          CH_IRQ_HANDLER(EXTI4_IRQHandler) {
   \                     Vector68:
   \   00000000   0xB580             PUSH     {R7,LR}
    118          
    119            CH_IRQ_PROLOGUE();
   \   00000002   0x.... 0x....      BL       dbg_check_enter_isr
    120          
    121            EXTI->PR = (1 << 4);
   \   00000006   0x....             LDR.N    R0,??DataTable13  ;; 0x40013c14
   \   00000008   0x2110             MOVS     R1,#+16
   \   0000000A   0x6001             STR      R1,[R0, #+0]
    122            EXTD1.config->channels[4].cb(&EXTD1, 4);
   \   0000000C   0x2104             MOVS     R1,#+4
   \   0000000E   0x....             LDR.N    R0,??DataTable13_1
   \   00000010   0x....             LDR.N    R2,??DataTable13_1
   \   00000012   0x6852             LDR      R2,[R2, #+4]
   \   00000014   0x6A52             LDR      R2,[R2, #+36]
   \   00000016   0x4790             BLX      R2
    123          
    124            CH_IRQ_EPILOGUE();
   \   00000018   0x.... 0x....      BL       dbg_check_leave_isr
   \   0000001C   0x.... 0x....      BL       _port_irq_epilogue
    125          }
   \   00000020   0xBD01             POP      {R0,PC}          ;; return
    126          
    127          /**
    128           * @brief   EXTI[5]...EXTI[9] interrupt handler.
    129           *
    130           * @isr
    131           */

   \                                 In section .text, align 2, keep-with-next
    132          CH_IRQ_HANDLER(EXTI9_5_IRQHandler) {
   \                     Vector9C:
   \   00000000   0xB510             PUSH     {R4,LR}
    133            uint32_t pr;
    134          
    135            CH_IRQ_PROLOGUE();
   \   00000002   0x.... 0x....      BL       dbg_check_enter_isr
    136          
    137            pr = EXTI->PR & ((1 << 5) | (1 << 6) | (1 << 7) | (1 << 8) | (1 << 9));
   \   00000006   0x....             LDR.N    R0,??DataTable13  ;; 0x40013c14
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF410 0x7078      ANDS     R0,R0,#0x3E0
   \   0000000E   0x0004             MOVS     R4,R0
    138            EXTI->PR = pr;
   \   00000010   0x....             LDR.N    R0,??DataTable13  ;; 0x40013c14
   \   00000012   0x6004             STR      R4,[R0, #+0]
    139            if (pr & (1 << 5))
   \   00000014   0x06A0             LSLS     R0,R4,#+26
   \   00000016   0xD505             BPL.N    ??Vector9C_0
    140              EXTD1.config->channels[5].cb(&EXTD1, 5);
   \   00000018   0x2105             MOVS     R1,#+5
   \   0000001A   0x....             LDR.N    R0,??DataTable13_1
   \   0000001C   0x....             LDR.N    R2,??DataTable13_1
   \   0000001E   0x6852             LDR      R2,[R2, #+4]
   \   00000020   0x6AD2             LDR      R2,[R2, #+44]
   \   00000022   0x4790             BLX      R2
    141            if (pr & (1 << 6))
   \                     ??Vector9C_0:
   \   00000024   0x0660             LSLS     R0,R4,#+25
   \   00000026   0xD505             BPL.N    ??Vector9C_1
    142              EXTD1.config->channels[6].cb(&EXTD1, 6);
   \   00000028   0x2106             MOVS     R1,#+6
   \   0000002A   0x....             LDR.N    R0,??DataTable13_1
   \   0000002C   0x....             LDR.N    R2,??DataTable13_1
   \   0000002E   0x6852             LDR      R2,[R2, #+4]
   \   00000030   0x6B52             LDR      R2,[R2, #+52]
   \   00000032   0x4790             BLX      R2
    143            if (pr & (1 << 7))
   \                     ??Vector9C_1:
   \   00000034   0x0620             LSLS     R0,R4,#+24
   \   00000036   0xD505             BPL.N    ??Vector9C_2
    144              EXTD1.config->channels[7].cb(&EXTD1, 7);
   \   00000038   0x2107             MOVS     R1,#+7
   \   0000003A   0x....             LDR.N    R0,??DataTable13_1
   \   0000003C   0x....             LDR.N    R2,??DataTable13_1
   \   0000003E   0x6852             LDR      R2,[R2, #+4]
   \   00000040   0x6BD2             LDR      R2,[R2, #+60]
   \   00000042   0x4790             BLX      R2
    145            if (pr & (1 << 8))
   \                     ??Vector9C_2:
   \   00000044   0x05E0             LSLS     R0,R4,#+23
   \   00000046   0xD505             BPL.N    ??Vector9C_3
    146              EXTD1.config->channels[8].cb(&EXTD1, 8);
   \   00000048   0x2108             MOVS     R1,#+8
   \   0000004A   0x....             LDR.N    R0,??DataTable13_1
   \   0000004C   0x....             LDR.N    R2,??DataTable13_1
   \   0000004E   0x6852             LDR      R2,[R2, #+4]
   \   00000050   0x6C52             LDR      R2,[R2, #+68]
   \   00000052   0x4790             BLX      R2
    147            if (pr & (1 << 9))
   \                     ??Vector9C_3:
   \   00000054   0x05A0             LSLS     R0,R4,#+22
   \   00000056   0xD505             BPL.N    ??Vector9C_4
    148              EXTD1.config->channels[9].cb(&EXTD1, 9);
   \   00000058   0x2109             MOVS     R1,#+9
   \   0000005A   0x....             LDR.N    R0,??DataTable13_1
   \   0000005C   0x....             LDR.N    R2,??DataTable13_1
   \   0000005E   0x6852             LDR      R2,[R2, #+4]
   \   00000060   0x6CD2             LDR      R2,[R2, #+76]
   \   00000062   0x4790             BLX      R2
    149          
    150            CH_IRQ_EPILOGUE();
   \                     ??Vector9C_4:
   \   00000064   0x.... 0x....      BL       dbg_check_leave_isr
   \   00000068   0x.... 0x....      BL       _port_irq_epilogue
    151          }
   \   0000006C   0xBD10             POP      {R4,PC}          ;; return
    152          
    153          /**
    154           * @brief   EXTI[10]...EXTI[15] interrupt handler.
    155           *
    156           * @isr
    157           */

   \                                 In section .text, align 2, keep-with-next
    158          CH_IRQ_HANDLER(EXTI15_10_IRQHandler) {
   \                     VectorE0:
   \   00000000   0xB510             PUSH     {R4,LR}
    159            uint32_t pr;
    160          
    161            CH_IRQ_PROLOGUE();
   \   00000002   0x.... 0x....      BL       dbg_check_enter_isr
    162          
    163            pr = EXTI->PR & ((1 << 10) | (1 << 11) | (1 << 12) | (1 << 13) | (1 << 14) |
    164                             (1 << 15));
   \   00000006   0x....             LDR.N    R0,??DataTable13  ;; 0x40013c14
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF410 0x407C      ANDS     R0,R0,#0xFC00
   \   0000000E   0x0004             MOVS     R4,R0
    165            EXTI->PR = pr;
   \   00000010   0x....             LDR.N    R0,??DataTable13  ;; 0x40013c14
   \   00000012   0x6004             STR      R4,[R0, #+0]
    166            if (pr & (1 << 10))
   \   00000014   0x0560             LSLS     R0,R4,#+21
   \   00000016   0xD505             BPL.N    ??VectorE0_0
    167              EXTD1.config->channels[10].cb(&EXTD1, 10);
   \   00000018   0x210A             MOVS     R1,#+10
   \   0000001A   0x....             LDR.N    R0,??DataTable13_1
   \   0000001C   0x....             LDR.N    R2,??DataTable13_1
   \   0000001E   0x6852             LDR      R2,[R2, #+4]
   \   00000020   0x6D52             LDR      R2,[R2, #+84]
   \   00000022   0x4790             BLX      R2
    168            if (pr & (1 << 11))
   \                     ??VectorE0_0:
   \   00000024   0x0520             LSLS     R0,R4,#+20
   \   00000026   0xD505             BPL.N    ??VectorE0_1
    169              EXTD1.config->channels[11].cb(&EXTD1, 11);
   \   00000028   0x210B             MOVS     R1,#+11
   \   0000002A   0x....             LDR.N    R0,??DataTable13_1
   \   0000002C   0x....             LDR.N    R2,??DataTable13_1
   \   0000002E   0x6852             LDR      R2,[R2, #+4]
   \   00000030   0x6DD2             LDR      R2,[R2, #+92]
   \   00000032   0x4790             BLX      R2
    170            if (pr & (1 << 12))
   \                     ??VectorE0_1:
   \   00000034   0x04E0             LSLS     R0,R4,#+19
   \   00000036   0xD505             BPL.N    ??VectorE0_2
    171              EXTD1.config->channels[12].cb(&EXTD1, 12);
   \   00000038   0x210C             MOVS     R1,#+12
   \   0000003A   0x....             LDR.N    R0,??DataTable13_1
   \   0000003C   0x....             LDR.N    R2,??DataTable13_1
   \   0000003E   0x6852             LDR      R2,[R2, #+4]
   \   00000040   0x6E52             LDR      R2,[R2, #+100]
   \   00000042   0x4790             BLX      R2
    172            if (pr & (1 << 13))
   \                     ??VectorE0_2:
   \   00000044   0x04A0             LSLS     R0,R4,#+18
   \   00000046   0xD505             BPL.N    ??VectorE0_3
    173              EXTD1.config->channels[13].cb(&EXTD1, 13);
   \   00000048   0x210D             MOVS     R1,#+13
   \   0000004A   0x....             LDR.N    R0,??DataTable13_1
   \   0000004C   0x....             LDR.N    R2,??DataTable13_1
   \   0000004E   0x6852             LDR      R2,[R2, #+4]
   \   00000050   0x6ED2             LDR      R2,[R2, #+108]
   \   00000052   0x4790             BLX      R2
    174            if (pr & (1 << 14))
   \                     ??VectorE0_3:
   \   00000054   0x0460             LSLS     R0,R4,#+17
   \   00000056   0xD505             BPL.N    ??VectorE0_4
    175              EXTD1.config->channels[14].cb(&EXTD1, 14);
   \   00000058   0x210E             MOVS     R1,#+14
   \   0000005A   0x....             LDR.N    R0,??DataTable13_1
   \   0000005C   0x....             LDR.N    R2,??DataTable13_1
   \   0000005E   0x6852             LDR      R2,[R2, #+4]
   \   00000060   0x6F52             LDR      R2,[R2, #+116]
   \   00000062   0x4790             BLX      R2
    176            if (pr & (1 << 15))
   \                     ??VectorE0_4:
   \   00000064   0x0420             LSLS     R0,R4,#+16
   \   00000066   0xD505             BPL.N    ??VectorE0_5
    177              EXTD1.config->channels[15].cb(&EXTD1, 15);
   \   00000068   0x210F             MOVS     R1,#+15
   \   0000006A   0x....             LDR.N    R0,??DataTable13_1
   \   0000006C   0x....             LDR.N    R2,??DataTable13_1
   \   0000006E   0x6852             LDR      R2,[R2, #+4]
   \   00000070   0x6FD2             LDR      R2,[R2, #+124]
   \   00000072   0x4790             BLX      R2
    178          
    179            CH_IRQ_EPILOGUE();
   \                     ??VectorE0_5:
   \   00000074   0x.... 0x....      BL       dbg_check_leave_isr
   \   00000078   0x.... 0x....      BL       _port_irq_epilogue
    180          }
   \   0000007C   0xBD10             POP      {R4,PC}          ;; return
    181          
    182          /**
    183           * @brief   EXTI[16] interrupt handler (PVD).
    184           *
    185           * @isr
    186           */

   \                                 In section .text, align 2, keep-with-next
    187          CH_IRQ_HANDLER(PVD_IRQHandler) {
   \                     Vector44:
   \   00000000   0xB580             PUSH     {R7,LR}
    188          
    189            CH_IRQ_PROLOGUE();
   \   00000002   0x.... 0x....      BL       dbg_check_enter_isr
    190          
    191            EXTI->PR = (1 << 16);
   \   00000006   0x....             LDR.N    R0,??DataTable13  ;; 0x40013c14
   \   00000008   0xF45F 0x3180      MOVS     R1,#+65536
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    192            EXTD1.config->channels[16].cb(&EXTD1, 16);
   \   0000000E   0x2110             MOVS     R1,#+16
   \   00000010   0x....             LDR.N    R0,??DataTable13_1
   \   00000012   0x....             LDR.N    R2,??DataTable13_1
   \   00000014   0x6852             LDR      R2,[R2, #+4]
   \   00000016   0xF8D2 0x2084      LDR      R2,[R2, #+132]
   \   0000001A   0x4790             BLX      R2
    193          
    194            CH_IRQ_EPILOGUE();
   \   0000001C   0x.... 0x....      BL       dbg_check_leave_isr
   \   00000020   0x.... 0x....      BL       _port_irq_epilogue
    195          }
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
    196          
    197          /**
    198           * @brief   EXTI[17] interrupt handler (RTC).
    199           *
    200           * @isr
    201           */

   \                                 In section .text, align 2, keep-with-next
    202          CH_IRQ_HANDLER(RTC_Alarm_IRQHandler) {
   \                     VectorE4:
   \   00000000   0xB580             PUSH     {R7,LR}
    203          
    204            CH_IRQ_PROLOGUE();
   \   00000002   0x.... 0x....      BL       dbg_check_enter_isr
    205          
    206            EXTI->PR = (1 << 17);
   \   00000006   0x....             LDR.N    R0,??DataTable13  ;; 0x40013c14
   \   00000008   0xF45F 0x3100      MOVS     R1,#+131072
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    207            EXTD1.config->channels[17].cb(&EXTD1, 17);
   \   0000000E   0x2111             MOVS     R1,#+17
   \   00000010   0x....             LDR.N    R0,??DataTable13_1
   \   00000012   0x....             LDR.N    R2,??DataTable13_1
   \   00000014   0x6852             LDR      R2,[R2, #+4]
   \   00000016   0xF8D2 0x208C      LDR      R2,[R2, #+140]
   \   0000001A   0x4790             BLX      R2
    208          
    209            CH_IRQ_EPILOGUE();
   \   0000001C   0x.... 0x....      BL       dbg_check_leave_isr
   \   00000020   0x.... 0x....      BL       _port_irq_epilogue
    210          }
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
    211          
    212          /**
    213           * @brief   EXTI[18] interrupt handler (OTG_FS_WKUP).
    214           *
    215           * @isr
    216           */

   \                                 In section .text, align 2, keep-with-next
    217          CH_IRQ_HANDLER(OTG_FS_WKUP_IRQHandler) {
   \                     VectorE8:
   \   00000000   0xB580             PUSH     {R7,LR}
    218          
    219            CH_IRQ_PROLOGUE();
   \   00000002   0x.... 0x....      BL       dbg_check_enter_isr
    220          
    221            EXTI->PR = (1 << 18);
   \   00000006   0x....             LDR.N    R0,??DataTable13  ;; 0x40013c14
   \   00000008   0xF45F 0x2180      MOVS     R1,#+262144
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    222            EXTD1.config->channels[18].cb(&EXTD1, 18);
   \   0000000E   0x2112             MOVS     R1,#+18
   \   00000010   0x....             LDR.N    R0,??DataTable13_1
   \   00000012   0x....             LDR.N    R2,??DataTable13_1
   \   00000014   0x6852             LDR      R2,[R2, #+4]
   \   00000016   0xF8D2 0x2094      LDR      R2,[R2, #+148]
   \   0000001A   0x4790             BLX      R2
    223          
    224            CH_IRQ_EPILOGUE();
   \   0000001C   0x.... 0x....      BL       dbg_check_leave_isr
   \   00000020   0x.... 0x....      BL       _port_irq_epilogue
    225          }
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
    226          
    227          #if !defined(STM32F401xx)
    228          /**
    229           * @brief   EXTI[19] interrupt handler (ETH_WKUP).
    230           *
    231           * @isr
    232           */

   \                                 In section .text, align 2, keep-with-next
    233          CH_IRQ_HANDLER(ETH_WKUP_IRQHandler) {
   \                     Vector138:
   \   00000000   0xB580             PUSH     {R7,LR}
    234          
    235            CH_IRQ_PROLOGUE();
   \   00000002   0x.... 0x....      BL       dbg_check_enter_isr
    236          
    237            EXTI->PR = (1 << 19);
   \   00000006   0x....             LDR.N    R0,??DataTable13  ;; 0x40013c14
   \   00000008   0xF45F 0x2100      MOVS     R1,#+524288
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    238            EXTD1.config->channels[19].cb(&EXTD1, 19);
   \   0000000E   0x2113             MOVS     R1,#+19
   \   00000010   0x....             LDR.N    R0,??DataTable13_1
   \   00000012   0x....             LDR.N    R2,??DataTable13_1
   \   00000014   0x6852             LDR      R2,[R2, #+4]
   \   00000016   0xF8D2 0x209C      LDR      R2,[R2, #+156]
   \   0000001A   0x4790             BLX      R2
    239          
    240            CH_IRQ_EPILOGUE();
   \   0000001C   0x.... 0x....      BL       dbg_check_leave_isr
   \   00000020   0x.... 0x....      BL       _port_irq_epilogue
    241          }
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
    242          
    243          /**
    244           * @brief   EXTI[20] interrupt handler (OTG_HS_WKUP).
    245           *
    246           * @isr
    247           */

   \                                 In section .text, align 2, keep-with-next
    248          CH_IRQ_HANDLER(OTG_HS_WKUP_IRQHandler) {
   \                     Vector170:
   \   00000000   0xB580             PUSH     {R7,LR}
    249          
    250            CH_IRQ_PROLOGUE();
   \   00000002   0x.... 0x....      BL       dbg_check_enter_isr
    251          
    252            EXTI->PR = (1 << 20);
   \   00000006   0x....             LDR.N    R0,??DataTable13  ;; 0x40013c14
   \   00000008   0xF45F 0x1180      MOVS     R1,#+1048576
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    253            EXTD1.config->channels[20].cb(&EXTD1, 20);
   \   0000000E   0x2114             MOVS     R1,#+20
   \   00000010   0x....             LDR.N    R0,??DataTable13_1
   \   00000012   0x....             LDR.N    R2,??DataTable13_1
   \   00000014   0x6852             LDR      R2,[R2, #+4]
   \   00000016   0xF8D2 0x20A4      LDR      R2,[R2, #+164]
   \   0000001A   0x4790             BLX      R2
    254          
    255            CH_IRQ_EPILOGUE();
   \   0000001C   0x.... 0x....      BL       dbg_check_leave_isr
   \   00000020   0x.... 0x....      BL       _port_irq_epilogue
    256          }
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
    257          
    258          /**
    259           * @brief   EXTI[21] interrupt handler (TAMPER_STAMP).
    260           *
    261           * @isr
    262           */

   \                                 In section .text, align 2, keep-with-next
    263          CH_IRQ_HANDLER(TAMPER_STAMP_IRQHandler) {
   \                     TAMPER_STAMP_IRQHandler:
   \   00000000   0xB580             PUSH     {R7,LR}
    264          
    265            CH_IRQ_PROLOGUE();
   \   00000002   0x.... 0x....      BL       dbg_check_enter_isr
    266          
    267            EXTI->PR = (1 << 21);
   \   00000006   0x....             LDR.N    R0,??DataTable13  ;; 0x40013c14
   \   00000008   0xF45F 0x1100      MOVS     R1,#+2097152
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    268            EXTD1.config->channels[21].cb(&EXTD1, 21);
   \   0000000E   0x2115             MOVS     R1,#+21
   \   00000010   0x....             LDR.N    R0,??DataTable13_1
   \   00000012   0x....             LDR.N    R2,??DataTable13_1
   \   00000014   0x6852             LDR      R2,[R2, #+4]
   \   00000016   0xF8D2 0x20AC      LDR      R2,[R2, #+172]
   \   0000001A   0x4790             BLX      R2
    269          
    270            CH_IRQ_EPILOGUE();
   \   0000001C   0x.... 0x....      BL       dbg_check_leave_isr
   \   00000020   0x.... 0x....      BL       _port_irq_epilogue
    271          }
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
    272          #endif /* !defined(STM32F401xx) */
    273          
    274          /**
    275           * @brief   EXTI[22] interrupt handler (RTC_WKUP).
    276           *
    277           * @isr
    278           */

   \                                 In section .text, align 2, keep-with-next
    279          CH_IRQ_HANDLER(RTC_WKUP_IRQHandler) {
   \                     Vector4C:
   \   00000000   0xB580             PUSH     {R7,LR}
    280          
    281            CH_IRQ_PROLOGUE();
   \   00000002   0x.... 0x....      BL       dbg_check_enter_isr
    282          
    283            EXTI->PR = (1 << 22);
   \   00000006   0x....             LDR.N    R0,??DataTable13  ;; 0x40013c14
   \   00000008   0xF45F 0x0180      MOVS     R1,#+4194304
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    284            EXTD1.config->channels[22].cb(&EXTD1, 22);
   \   0000000E   0x2116             MOVS     R1,#+22
   \   00000010   0x....             LDR.N    R0,??DataTable13_1
   \   00000012   0x....             LDR.N    R2,??DataTable13_1
   \   00000014   0x6852             LDR      R2,[R2, #+4]
   \   00000016   0xF8D2 0x20B4      LDR      R2,[R2, #+180]
   \   0000001A   0x4790             BLX      R2
    285          
    286            CH_IRQ_EPILOGUE();
   \   0000001C   0x.... 0x....      BL       dbg_check_leave_isr
   \   00000020   0x.... 0x....      BL       _port_irq_epilogue
    287          }
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
    288          
    289          /*===========================================================================*/
    290          /* Driver exported functions.                                                */
    291          /*===========================================================================*/
    292          
    293          /**
    294           * @brief   Enables EXTI IRQ sources.
    295           *
    296           * @notapi
    297           */

   \                                 In section .text, align 2, keep-with-next
    298          void ext_lld_exti_irq_enable(void) {
   \                     ext_lld_exti_irq_enable:
   \   00000000   0xB580             PUSH     {R7,LR}
    299          
    300            nvicEnableVector(EXTI0_IRQn,
    301                             CORTEX_PRIORITY_MASK(STM32_EXT_EXTI0_IRQ_PRIORITY));
   \   00000002   0x2160             MOVS     R1,#+96
   \   00000004   0x2006             MOVS     R0,#+6
   \   00000006   0x.... 0x....      BL       nvicEnableVector
    302            nvicEnableVector(EXTI1_IRQn,
    303                             CORTEX_PRIORITY_MASK(STM32_EXT_EXTI1_IRQ_PRIORITY));
   \   0000000A   0x2160             MOVS     R1,#+96
   \   0000000C   0x2007             MOVS     R0,#+7
   \   0000000E   0x.... 0x....      BL       nvicEnableVector
    304            nvicEnableVector(EXTI2_IRQn,
    305                             CORTEX_PRIORITY_MASK(STM32_EXT_EXTI2_IRQ_PRIORITY));
   \   00000012   0x2160             MOVS     R1,#+96
   \   00000014   0x2008             MOVS     R0,#+8
   \   00000016   0x.... 0x....      BL       nvicEnableVector
    306            nvicEnableVector(EXTI3_IRQn,
    307                             CORTEX_PRIORITY_MASK(STM32_EXT_EXTI3_IRQ_PRIORITY));
   \   0000001A   0x2160             MOVS     R1,#+96
   \   0000001C   0x2009             MOVS     R0,#+9
   \   0000001E   0x.... 0x....      BL       nvicEnableVector
    308            nvicEnableVector(EXTI4_IRQn,
    309                             CORTEX_PRIORITY_MASK(STM32_EXT_EXTI4_IRQ_PRIORITY));
   \   00000022   0x2160             MOVS     R1,#+96
   \   00000024   0x200A             MOVS     R0,#+10
   \   00000026   0x.... 0x....      BL       nvicEnableVector
    310            nvicEnableVector(EXTI9_5_IRQn,
    311                             CORTEX_PRIORITY_MASK(STM32_EXT_EXTI5_9_IRQ_PRIORITY));
   \   0000002A   0x2160             MOVS     R1,#+96
   \   0000002C   0x2017             MOVS     R0,#+23
   \   0000002E   0x.... 0x....      BL       nvicEnableVector
    312            nvicEnableVector(EXTI15_10_IRQn,
    313                             CORTEX_PRIORITY_MASK(STM32_EXT_EXTI10_15_IRQ_PRIORITY));
   \   00000032   0x2160             MOVS     R1,#+96
   \   00000034   0x2028             MOVS     R0,#+40
   \   00000036   0x.... 0x....      BL       nvicEnableVector
    314            nvicEnableVector(PVD_IRQn,
    315                             CORTEX_PRIORITY_MASK(STM32_EXT_EXTI16_IRQ_PRIORITY));
   \   0000003A   0x2160             MOVS     R1,#+96
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x.... 0x....      BL       nvicEnableVector
    316            nvicEnableVector(RTC_Alarm_IRQn,
    317                             CORTEX_PRIORITY_MASK(STM32_EXT_EXTI17_IRQ_PRIORITY));
   \   00000042   0x21F0             MOVS     R1,#+240
   \   00000044   0x2029             MOVS     R0,#+41
   \   00000046   0x.... 0x....      BL       nvicEnableVector
    318            nvicEnableVector(OTG_FS_WKUP_IRQn,
    319                             CORTEX_PRIORITY_MASK(STM32_EXT_EXTI18_IRQ_PRIORITY));
   \   0000004A   0x2160             MOVS     R1,#+96
   \   0000004C   0x202A             MOVS     R0,#+42
   \   0000004E   0x.... 0x....      BL       nvicEnableVector
    320          #if !defined(STM32F401xx)
    321            nvicEnableVector(ETH_WKUP_IRQn,
    322                             CORTEX_PRIORITY_MASK(STM32_EXT_EXTI19_IRQ_PRIORITY));
   \   00000052   0x2160             MOVS     R1,#+96
   \   00000054   0x203E             MOVS     R0,#+62
   \   00000056   0x.... 0x....      BL       nvicEnableVector
    323            nvicEnableVector(OTG_HS_WKUP_IRQn,
    324                             CORTEX_PRIORITY_MASK(STM32_EXT_EXTI20_IRQ_PRIORITY));
   \   0000005A   0x2160             MOVS     R1,#+96
   \   0000005C   0x204C             MOVS     R0,#+76
   \   0000005E   0x.... 0x....      BL       nvicEnableVector
    325            nvicEnableVector(TAMP_STAMP_IRQn,
    326                             CORTEX_PRIORITY_MASK(STM32_EXT_EXTI21_IRQ_PRIORITY));
   \   00000062   0x21F0             MOVS     R1,#+240
   \   00000064   0x2002             MOVS     R0,#+2
   \   00000066   0x.... 0x....      BL       nvicEnableVector
    327          #endif /* !defined(STM32F401xx) */
    328            nvicEnableVector(RTC_WKUP_IRQn,
    329                             CORTEX_PRIORITY_MASK(STM32_EXT_EXTI22_IRQ_PRIORITY));
   \   0000006A   0x21F0             MOVS     R1,#+240
   \   0000006C   0x2003             MOVS     R0,#+3
   \   0000006E   0x.... 0x....      BL       nvicEnableVector
    330          }
   \   00000072   0xBD01             POP      {R0,PC}          ;; return
    331          
    332          /**
    333           * @brief   Disables EXTI IRQ sources.
    334           *
    335           * @notapi
    336           */

   \                                 In section .text, align 2, keep-with-next
    337          void ext_lld_exti_irq_disable(void) {
   \                     ext_lld_exti_irq_disable:
   \   00000000   0xB580             PUSH     {R7,LR}
    338          
    339            nvicDisableVector(EXTI0_IRQn);
   \   00000002   0x2006             MOVS     R0,#+6
   \   00000004   0x.... 0x....      BL       nvicDisableVector
    340            nvicDisableVector(EXTI1_IRQn);
   \   00000008   0x2007             MOVS     R0,#+7
   \   0000000A   0x.... 0x....      BL       nvicDisableVector
    341            nvicDisableVector(EXTI2_IRQn);
   \   0000000E   0x2008             MOVS     R0,#+8
   \   00000010   0x.... 0x....      BL       nvicDisableVector
    342            nvicDisableVector(EXTI3_IRQn);
   \   00000014   0x2009             MOVS     R0,#+9
   \   00000016   0x.... 0x....      BL       nvicDisableVector
    343            nvicDisableVector(EXTI4_IRQn);
   \   0000001A   0x200A             MOVS     R0,#+10
   \   0000001C   0x.... 0x....      BL       nvicDisableVector
    344            nvicDisableVector(EXTI9_5_IRQn);
   \   00000020   0x2017             MOVS     R0,#+23
   \   00000022   0x.... 0x....      BL       nvicDisableVector
    345            nvicDisableVector(EXTI15_10_IRQn);
   \   00000026   0x2028             MOVS     R0,#+40
   \   00000028   0x.... 0x....      BL       nvicDisableVector
    346            nvicDisableVector(PVD_IRQn);
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x.... 0x....      BL       nvicDisableVector
    347            nvicDisableVector(RTC_Alarm_IRQn);
   \   00000032   0x2029             MOVS     R0,#+41
   \   00000034   0x.... 0x....      BL       nvicDisableVector
    348            nvicDisableVector(OTG_FS_WKUP_IRQn);
   \   00000038   0x202A             MOVS     R0,#+42
   \   0000003A   0x.... 0x....      BL       nvicDisableVector
    349          #if !defined(STM32F401xx)
    350            nvicDisableVector(ETH_WKUP_IRQn);
   \   0000003E   0x203E             MOVS     R0,#+62
   \   00000040   0x.... 0x....      BL       nvicDisableVector
    351            nvicDisableVector(OTG_HS_WKUP_IRQn);
   \   00000044   0x204C             MOVS     R0,#+76
   \   00000046   0x.... 0x....      BL       nvicDisableVector
    352            nvicDisableVector(TAMP_STAMP_IRQn);
   \   0000004A   0x2002             MOVS     R0,#+2
   \   0000004C   0x.... 0x....      BL       nvicDisableVector
    353          #endif /* !defined(STM32F401xx) */
    354            nvicDisableVector(RTC_WKUP_IRQn);
   \   00000050   0x2003             MOVS     R0,#+3
   \   00000052   0x.... 0x....      BL       nvicDisableVector
    355          }
   \   00000056   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x40013C14         DC32     0x40013c14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x........         DC32     EXTD1
    356          
    357          #endif /* HAL_USE_EXT */
    358          
    359          /** @} */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   TAMPER_STAMP_IRQHandler
         8   -- Indirect call
         8   -> _port_irq_epilogue
         8   -> dbg_check_enter_isr
         8   -> dbg_check_leave_isr
       8   Vector138
         8   -- Indirect call
         8   -> _port_irq_epilogue
         8   -> dbg_check_enter_isr
         8   -> dbg_check_leave_isr
       8   Vector170
         8   -- Indirect call
         8   -> _port_irq_epilogue
         8   -> dbg_check_enter_isr
         8   -> dbg_check_leave_isr
       8   Vector44
         8   -- Indirect call
         8   -> _port_irq_epilogue
         8   -> dbg_check_enter_isr
         8   -> dbg_check_leave_isr
       8   Vector4C
         8   -- Indirect call
         8   -> _port_irq_epilogue
         8   -> dbg_check_enter_isr
         8   -> dbg_check_leave_isr
       8   Vector58
         8   -- Indirect call
         8   -> _port_irq_epilogue
         8   -> dbg_check_enter_isr
         8   -> dbg_check_leave_isr
       8   Vector5C
         8   -- Indirect call
         8   -> _port_irq_epilogue
         8   -> dbg_check_enter_isr
         8   -> dbg_check_leave_isr
       8   Vector60
         8   -- Indirect call
         8   -> _port_irq_epilogue
         8   -> dbg_check_enter_isr
         8   -> dbg_check_leave_isr
       8   Vector64
         8   -- Indirect call
         8   -> _port_irq_epilogue
         8   -> dbg_check_enter_isr
         8   -> dbg_check_leave_isr
       8   Vector68
         8   -- Indirect call
         8   -> _port_irq_epilogue
         8   -> dbg_check_enter_isr
         8   -> dbg_check_leave_isr
       8   Vector9C
         8   -- Indirect call
         8   -> _port_irq_epilogue
         8   -> dbg_check_enter_isr
         8   -> dbg_check_leave_isr
       8   VectorE0
         8   -- Indirect call
         8   -> _port_irq_epilogue
         8   -> dbg_check_enter_isr
         8   -> dbg_check_leave_isr
       8   VectorE4
         8   -- Indirect call
         8   -> _port_irq_epilogue
         8   -> dbg_check_enter_isr
         8   -> dbg_check_leave_isr
       8   VectorE8
         8   -- Indirect call
         8   -> _port_irq_epilogue
         8   -> dbg_check_enter_isr
         8   -> dbg_check_leave_isr
       8   ext_lld_exti_irq_disable
         8   -> nvicDisableVector
       8   ext_lld_exti_irq_enable
         8   -> nvicEnableVector


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable13
       4  ??DataTable13_1
      38  TAMPER_STAMP_IRQHandler
      38  Vector138
      38  Vector170
      38  Vector44
      38  Vector4C
      34  Vector58
      34  Vector5C
      34  Vector60
      34  Vector64
      34  Vector68
     110  Vector9C
     126  VectorE0
      38  VectorE4
      38  VectorE8
      88  ext_lld_exti_irq_disable
     116  ext_lld_exti_irq_enable

 
 884 bytes in section .text
 
 884 bytes of CODE memory

Errors: none
Warnings: none
