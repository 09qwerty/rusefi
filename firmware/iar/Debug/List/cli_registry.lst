###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:08:47 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\util\cli_registr #
#                       y.cpp                                                 #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\util\cli_registr #
#                       y.cpp -lCN F:\stuff\rusefi_sourceforge\firmware\iar\D #
#                       ebug\List\ -lA F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\Debug\List\ -o F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\Debug\Obj\ --no_cse --no_unroll --no_inline     #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\c #
#                       li_registry.lst                                       #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\cl #
#                       i_registry.o                                          #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\util\cli_registry.cpp
      1          /**
      2           * @file    cli_registry.cpp
      3           * @brief   Command-line interface commands registry
      4           *
      5           * Here we have a data structure which holds all the dynamically-registered
      6           * command line interface action names & callback. This logic is invoked in
      7           * user context by the console thread - see consoleThreadThreadEntryPoint
      8           *
      9           * TODO: there is too much copy-paste here, this class needs some refactoring :)
     10           *
     11           * see testConsoleLogic()
     12           *
     13           * @date Nov 15, 2012
     14           * @author Andrey Belomutskiy, (c) 2012-2015
     15           */
     16          
     17          #include <stdarg.h>
     18          #include <string.h>
     19          #include <stdbool.h>
     20          #include "main.h"
     21          #include "cli_registry.h"
     22          #include "efilib.h"
     23          
     24          #if EFI_PROD_CODE
     25          #include "board_test.h"
     26          #endif
     27          
     28          #if ! EFI_UNIT_TEST
     29          #include "eficonsole.h"
     30          #endif /* ! EFI_UNIT_TEST */
     31          

   \                                 In section .bss, align 4
     32          static Logging * logging;
   \                     logging:
   \   00000000                      DS8 4
     33          

   \                                 In section .bss, align 4
     34          static int consoleActionCount = 0;
   \                     consoleActionCount:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     35          static TokenCallback consoleActions[CONSOLE_MAX_ACTIONS];
   \                     consoleActions:
   \   00000000                      DS8 3136
     36          
     37          #define SECURE_LINE_PREFIX "sec!"
     38          #define SECURE_LINE_PREFIX_LENGTH 4
     39          

   \                                 In section .text, align 2, keep-with-next
     40          void resetConsoleActions(void) {
     41          	consoleActionCount = 0;
   \                     resetConsoleActions:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable9_1
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6001             STR      R1,[R0, #+0]
     42          }
   \   00000008   0x4770             BX       LR               ;; return
     43          

   \                                 In section .text, align 2, keep-with-next
     44          static void doAddAction(const char *token, action_type_e type, Void callback, void *param) {
   \                     _Z11doAddActionPKc13action_type_ePFvvEPv:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
     45          	efiAssertVoid(consoleActionCount < CONSOLE_MAX_ACTIONS, "Too many console actions");
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable9_1
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x28C4             CMP      R0,#+196
   \   00000012   0xDB04             BLT.N    ??doAddAction_0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable9_2
   \   00000018   0x.... 0x....      BL       firmwareError
   \   0000001C   0xE011             B.N      ??doAddAction_1
     46          	TokenCallback *current = &consoleActions[consoleActionCount++];
   \                     ??doAddAction_0:
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable9_1
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable9_3
   \   00000028   0xEB11 0x1000      ADDS     R0,R1,R0, LSL #+4
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable9_1
   \   00000030   0x6809             LDR      R1,[R1, #+0]
   \   00000032   0x1C49             ADDS     R1,R1,#+1
   \   00000034   0x.... 0x....      LDR.W    R2,??DataTable9_1
   \   00000038   0x6011             STR      R1,[R2, #+0]
     47          	current->token = token;
   \   0000003A   0x6004             STR      R4,[R0, #+0]
     48          	current->parameterType = type;
   \   0000003C   0x7105             STRB     R5,[R0, #+4]
     49          	current->callback = callback;
   \   0000003E   0x6086             STR      R6,[R0, #+8]
     50          	current->param = param;
   \   00000040   0x60C7             STR      R7,[R0, #+12]
     51          }
   \                     ??doAddAction_1:
   \   00000042   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     52          

   \                                 In section .text, align 2, keep-with-next
     53          void addConsoleActionP(const char *token, VoidPtr callback, void *param) {
   \                     addConsoleActionP:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     54          	doAddAction(token, NO_PARAMETER_P, (Void) callback, param);
   \   00000008   0x0033             MOVS     R3,R6
   \   0000000A   0x002A             MOVS     R2,R5
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       _Z11doAddActionPKc13action_type_ePFvvEPv
     55          }
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
     56          

   \                                 In section .text, align 2, keep-with-next
     57          void addConsoleActionSSP(const char *token, VoidCharPtrCharPtrVoidPtr callback, void *param) {
   \                     addConsoleActionSSP:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     58          	doAddAction(token, STRING2_PARAMETER_P, (Void) callback, param);
   \   00000008   0x0033             MOVS     R3,R6
   \   0000000A   0x002A             MOVS     R2,R5
   \   0000000C   0x2109             MOVS     R1,#+9
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       _Z11doAddActionPKc13action_type_ePFvvEPv
     59          }
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
     60          
     61          /**
     62           * @brief	Register console action without parameters
     63           */

   \                                 In section .text, align 2, keep-with-next
     64          void addConsoleAction(const char *token, Void callback) {
   \                     addConsoleAction:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     65          	doAddAction(token, NO_PARAMETER, callback, NULL);
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x002A             MOVS     R2,R5
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       _Z11doAddActionPKc13action_type_ePFvvEPv
     66          }
   \   00000012   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     67          
     68          /**
     69           * @brief	Register a console command with one Integer parameter
     70           */

   \                                 In section .text, align 2, keep-with-next
     71          void addConsoleActionI(const char *token, VoidInt callback) {
   \                     addConsoleActionI:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     72          	doAddAction(token, ONE_PARAMETER, (Void) callback, NULL);
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x002A             MOVS     R2,R5
   \   0000000A   0x2102             MOVS     R1,#+2
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       _Z11doAddActionPKc13action_type_ePFvvEPv
     73          }
   \   00000012   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     74          

   \                                 In section .text, align 2, keep-with-next
     75          void addConsoleActionIP(const char *token, VoidIntVoidPtr callback, void *param) {
   \                     addConsoleActionIP:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     76          	doAddAction(token, ONE_PARAMETER_P, (Void) callback, param);
   \   00000008   0x0033             MOVS     R3,R6
   \   0000000A   0x002A             MOVS     R2,R5
   \   0000000C   0x2103             MOVS     R1,#+3
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       _Z11doAddActionPKc13action_type_ePFvvEPv
     77          }
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
     78          
     79          /**
     80           * @brief	Register a console command with two Integer parameters
     81           */

   \                                 In section .text, align 2, keep-with-next
     82          void addConsoleActionII(const char *token, VoidIntInt callback) {
   \                     addConsoleActionII:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     83          	doAddAction(token, TWO_INTS_PARAMETER, (Void) callback, NULL);
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x002A             MOVS     R2,R5
   \   0000000A   0x210C             MOVS     R1,#+12
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       _Z11doAddActionPKc13action_type_ePFvvEPv
     84          }
   \   00000012   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     85          

   \                                 In section .text, align 2, keep-with-next
     86          void addConsoleActionIIP(const char *token, VoidIntIntVoidPtr callback, void *param) {
   \                     addConsoleActionIIP:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     87          	doAddAction(token, TWO_INTS_PARAMETER_P, (Void) callback, param);
   \   00000008   0x0033             MOVS     R3,R6
   \   0000000A   0x002A             MOVS     R2,R5
   \   0000000C   0x210D             MOVS     R1,#+13
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       _Z11doAddActionPKc13action_type_ePFvvEPv
     88          }
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
     89          

   \                                 In section .text, align 2, keep-with-next
     90          void addConsoleActionS(const char *token, VoidCharPtr callback) {
   \                     addConsoleActionS:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     91          	doAddAction(token, STRING_PARAMETER, (Void) callback, NULL);
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x002A             MOVS     R2,R5
   \   0000000A   0x2106             MOVS     R1,#+6
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       _Z11doAddActionPKc13action_type_ePFvvEPv
     92          }
   \   00000012   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     93          

   \                                 In section .text, align 2, keep-with-next
     94          void addConsoleActionSP(const char *token, VoidCharPtrVoidPtr callback, void *param) {
   \                     addConsoleActionSP:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     95          	doAddAction(token, STRING_PARAMETER_P, (Void) callback, param);
   \   00000008   0x0033             MOVS     R3,R6
   \   0000000A   0x002A             MOVS     R2,R5
   \   0000000C   0x2107             MOVS     R1,#+7
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       _Z11doAddActionPKc13action_type_ePFvvEPv
     96          }
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
     97          

   \                                 In section .text, align 2, keep-with-next
     98          void addConsoleActionSS(const char *token, VoidCharPtrCharPtr callback) {
   \                     addConsoleActionSS:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     99          	doAddAction(token, STRING2_PARAMETER, (Void) callback, NULL);
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x002A             MOVS     R2,R5
   \   0000000A   0x2108             MOVS     R1,#+8
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       _Z11doAddActionPKc13action_type_ePFvvEPv
    100          }
   \   00000012   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    101          

   \                                 In section .text, align 2, keep-with-next
    102          void addConsoleActionSSS(const char *token, VoidCharPtrCharPtrCharPtr callback) {
   \                     addConsoleActionSSS:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    103          	doAddAction(token, STRING3_PARAMETER, (Void) callback, NULL);
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x002A             MOVS     R2,R5
   \   0000000A   0x210A             MOVS     R1,#+10
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       _Z11doAddActionPKc13action_type_ePFvvEPv
    104          }
   \   00000012   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    105          

   \                                 In section .text, align 2, keep-with-next
    106          void addConsoleActionSSSSS(const char *token, VoidCharPtrCharPtrCharPtrCharPtrCharPtr callback) {
   \                     addConsoleActionSSSSS:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    107          	doAddAction(token, STRING5_PARAMETER, (Void) callback, NULL);
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x002A             MOVS     R2,R5
   \   0000000A   0x210B             MOVS     R1,#+11
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       _Z11doAddActionPKc13action_type_ePFvvEPv
    108          }
   \   00000012   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    109          

   \                                 In section .text, align 2, keep-with-next
    110          void addConsoleActionF(const char *token, VoidFloat callback) {
   \                     addConsoleActionF:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    111          	doAddAction(token, FLOAT_PARAMETER, (Void) callback, NULL);
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x002A             MOVS     R2,R5
   \   0000000A   0x2104             MOVS     R1,#+4
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       _Z11doAddActionPKc13action_type_ePFvvEPv
    112          }
   \   00000012   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    113          

   \                                 In section .text, align 2, keep-with-next
    114          void addConsoleActionFF(const char *token, VoidFloatFloat callback) {
   \                     addConsoleActionFF:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    115          	doAddAction(token, FLOAT_FLOAT_PARAMETER, (Void) callback, NULL);
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x002A             MOVS     R2,R5
   \   0000000A   0x210E             MOVS     R1,#+14
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       _Z11doAddActionPKc13action_type_ePFvvEPv
    116          }
   \   00000012   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    117          

   \                                 In section .text, align 2, keep-with-next
    118          void addConsoleActionFFP(const char *token, VoidFloatFloatVoidPtr callback, void *param) {
   \                     addConsoleActionFFP:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    119          	doAddAction(token, FLOAT_FLOAT_PARAMETER_P, (Void) callback, param);
   \   00000008   0x0033             MOVS     R3,R6
   \   0000000A   0x002A             MOVS     R2,R5
   \   0000000C   0x210F             MOVS     R1,#+15
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       _Z11doAddActionPKc13action_type_ePFvvEPv
    120          }
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
    121          

   \                                 In section .text, align 2, keep-with-next
    122          static int getParameterCount(action_type_e parameterType) {
   \                     _Z17getParameterCount13action_type_e:
   \   00000000   0x0001             MOVS     R1,R0
    123          	switch (parameterType) {
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x0008             MOVS     R0,R1
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD90F             BLS.N    ??getParameterCount_0
   \   0000000C   0x1E80             SUBS     R0,R0,#+2
   \   0000000E   0x2802             CMP      R0,#+2
   \   00000010   0xD90E             BLS.N    ??getParameterCount_1
   \   00000012   0x1F00             SUBS     R0,R0,#+4
   \   00000014   0xD00C             BEQ.N    ??getParameterCount_1
   \   00000016   0x1E80             SUBS     R0,R0,#+2
   \   00000018   0x2801             CMP      R0,#+1
   \   0000001A   0xD90B             BLS.N    ??getParameterCount_2
   \   0000001C   0x1E80             SUBS     R0,R0,#+2
   \   0000001E   0xD00B             BEQ.N    ??getParameterCount_3
   \   00000020   0x1E40             SUBS     R0,R0,#+1
   \   00000022   0xD00B             BEQ.N    ??getParameterCount_4
   \   00000024   0x1E40             SUBS     R0,R0,#+1
   \   00000026   0x2803             CMP      R0,#+3
   \   00000028   0xD904             BLS.N    ??getParameterCount_2
   \   0000002A   0xE009             B.N      ??getParameterCount_5
    124          	case NO_PARAMETER:
    125          	case NO_PARAMETER_P:
    126          		return 0;
   \                     ??getParameterCount_0:
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xE009             B.N      ??getParameterCount_6
    127          	case ONE_PARAMETER:
    128          	case ONE_PARAMETER_P:
    129          	case FLOAT_PARAMETER:
    130          	case STRING_PARAMETER:
    131          		return 1;
   \                     ??getParameterCount_1:
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0xE007             B.N      ??getParameterCount_6
    132          	case FLOAT_FLOAT_PARAMETER:
    133          	case FLOAT_FLOAT_PARAMETER_P:
    134          	case STRING2_PARAMETER:
    135          	case STRING2_PARAMETER_P:
    136          	case TWO_INTS_PARAMETER:
    137          	case TWO_INTS_PARAMETER_P:
    138          		return 2;
   \                     ??getParameterCount_2:
   \   00000034   0x2002             MOVS     R0,#+2
   \   00000036   0xE005             B.N      ??getParameterCount_6
    139          	case STRING3_PARAMETER:
    140          		return 3;
   \                     ??getParameterCount_3:
   \   00000038   0x2003             MOVS     R0,#+3
   \   0000003A   0xE003             B.N      ??getParameterCount_6
    141          	case STRING5_PARAMETER:
    142          		return 5;
   \                     ??getParameterCount_4:
   \   0000003C   0x2005             MOVS     R0,#+5
   \   0000003E   0xE001             B.N      ??getParameterCount_6
    143          	default:
    144          		return -1;
   \                     ??getParameterCount_5:
   \   00000040   0xF05F 0x30FF      MOVS     R0,#-1
   \                     ??getParameterCount_6:
   \   00000044   0x4770             BX       LR               ;; return
    145          	}
    146          }
    147          
    148          /**
    149           * @brief This function prints out a list of all available commands
    150           */

   \                                 In section .text, align 2, keep-with-next
    151          void helpCommand(void) {
   \                     helpCommand:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    152          #if EFI_PROD_CODE
    153          	if (isBoardTestMode()) {
   \   00000002   0x.... 0x....      BL       isBoardTestMode
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD002             BEQ.N    ??helpCommand_0
    154          		printBoardTestState();
   \   0000000A   0x.... 0x....      BL       printBoardTestState
    155          		return;
   \   0000000E   0xE028             B.N      ??helpCommand_1
    156          	}
    157          #endif /* EFI_PROD_CODE */
    158          
    159          #if (EFI_PROD_CODE || EFI_SIMULATOR) || defined(__DOXYGEN__)
    160          	scheduleMsg(logging, "%d actions available", consoleActionCount);
   \                     ??helpCommand_0:
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable9_1
   \   00000014   0x6802             LDR      R2,[R0, #+0]
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable9_4
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable9_5
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x.... 0x....      BL       scheduleMsg
    161          	for (int i = 0; i < consoleActionCount; i++) {
   \   00000024   0x2400             MOVS     R4,#+0
   \                     ??helpCommand_2:
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable9_1
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xDA11             BGE.N    ??helpCommand_3
    162          		TokenCallback *current = &consoleActions[i];
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable9_3
   \   00000034   0xEB10 0x1504      ADDS     R5,R0,R4, LSL #+4
    163          		scheduleMsg(logging, "  %s: %d parameters", current->token, getParameterCount(current->parameterType));
   \   00000038   0x7928             LDRB     R0,[R5, #+4]
   \   0000003A   0x.... 0x....      BL       _Z17getParameterCount13action_type_e
   \   0000003E   0x0003             MOVS     R3,R0
   \   00000040   0x682A             LDR      R2,[R5, #+0]
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable9_6
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable9_5
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0x.... 0x....      BL       scheduleMsg
    164          	}
   \   00000050   0x1C64             ADDS     R4,R4,#+1
   \   00000052   0xE7E8             B.N      ??helpCommand_2
    165          #endif
    166          	scheduleMsg(logging, "For more visit http://rusefi.com/wiki/index.php?title=Manual:Software:dev_console_commands");
   \                     ??helpCommand_3:
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable9_7
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable9_5
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0x.... 0x....      BL       scheduleMsg
    167          }
   \                     ??helpCommand_1:
   \   00000062   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    168          
    169          /**
    170           * @brief This is just a test function
    171           */

   \                                 In section .text, align 2, keep-with-next
    172          static void echo(int value) {
   \                     _Z4echoi:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    173          	print("got value: %d\r\n", value);
   \   00000004   0x0021             MOVS     R1,R4
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable9_8
   \   0000000A   0x.... 0x....      BL       print
    174          }
   \   0000000E   0xBD10             POP      {R4,PC}          ;; return
    175          

   \                                 In section .text, align 2, keep-with-next
    176          char *unquote(char *line) {
   \                     unquote:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    177          	if (line[0] == '"') {
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0x2822             CMP      R0,#+34
   \   00000008   0xD10E             BNE.N    ??unquote_0
    178          		int len = strlen(line);
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       strlen
   \   00000010   0x0001             MOVS     R1,R0
    179          		if (line[len - 1] == '"') {
   \   00000012   0x1908             ADDS     R0,R1,R4
   \   00000014   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   00000018   0x2822             CMP      R0,#+34
   \   0000001A   0xD105             BNE.N    ??unquote_0
    180          			line[len - 1] = 0;
   \   0000001C   0x1908             ADDS     R0,R1,R4
   \   0000001E   0x2200             MOVS     R2,#+0
   \   00000020   0xF800 0x2C01      STRB     R2,[R0, #-1]
    181          			return line + 1;
   \   00000024   0x1C60             ADDS     R0,R4,#+1
   \   00000026   0xE000             B.N      ??unquote_1
    182          		}
    183          	}
    184          	return line;
   \                     ??unquote_0:
   \   00000028   0x0020             MOVS     R0,R4
   \                     ??unquote_1:
   \   0000002A   0xBD10             POP      {R4,PC}          ;; return
    185          }
    186          

   \                                 In section .text, align 2, keep-with-next
    187          int findEndOfToken(const char *line) {
   \                     findEndOfToken:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    188          	if (line[0] == '"') {
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0x2822             CMP      R0,#+34
   \   00000008   0xD10C             BNE.N    ??findEndOfToken_0
    189          		/**
    190          		 * Looks like this is a quoted token
    191          		 */
    192          		int v = indexOf(line + 1, '"');
   \   0000000A   0x2122             MOVS     R1,#+34
   \   0000000C   0x1C60             ADDS     R0,R4,#+1
   \   0000000E   0x.... 0x....      BL       indexOf
   \   00000012   0x0001             MOVS     R1,R0
    193          		if (v == -1) {
   \   00000014   0xF111 0x0F01      CMN      R1,#+1
   \   00000018   0xD102             BNE.N    ??findEndOfToken_1
    194          			/**
    195          			 * Matching closing quote not found
    196          			 */
    197          			return -1;
   \   0000001A   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000001E   0xE005             B.N      ??findEndOfToken_2
    198          		}
    199          		/**
    200          		 * Skipping first quote and the symbol after closing quote
    201          		 */
    202          		return v + 2;
   \                     ??findEndOfToken_1:
   \   00000020   0x1C88             ADDS     R0,R1,#+2
   \   00000022   0xE003             B.N      ??findEndOfToken_2
    203          	}
    204          	return indexOf(line, ' ');
   \                     ??findEndOfToken_0:
   \   00000024   0x2120             MOVS     R1,#+32
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x.... 0x....      BL       indexOf
   \                     ??findEndOfToken_2:
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
    205          }
    206          

   \                                 In section .text, align 2, keep-with-next
    207          void handleActionWithParameter(TokenCallback *current, char *parameter) {
   \                     _Z25handleActionWithParameterP13TokenCallbackPc:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0xED2D 0x8B02      VPUSH    {D8}
   \   00000008   0xB082             SUB      SP,SP,#+8
   \   0000000A   0x0004             MOVS     R4,R0
   \   0000000C   0x468B             MOV      R11,R1
    208          	if (current->parameterType == STRING_PARAMETER) {
   \   0000000E   0x7920             LDRB     R0,[R4, #+4]
   \   00000010   0x2806             CMP      R0,#+6
   \   00000012   0xD103             BNE.N    ??handleActionWithParameter_0
    209          		VoidCharPtr callbackS = (VoidCharPtr) current->callback;
   \   00000014   0x68A5             LDR      R5,[R4, #+8]
    210          		(*callbackS)(parameter);
   \   00000016   0x4658             MOV      R0,R11
   \   00000018   0x47A8             BLX      R5
    211          		return;
   \   0000001A   0xE136             B.N      ??handleActionWithParameter_1
    212          	}
    213          
    214          	if (current->parameterType == STRING_PARAMETER_P) {
   \                     ??handleActionWithParameter_0:
   \   0000001C   0x7920             LDRB     R0,[R4, #+4]
   \   0000001E   0x2807             CMP      R0,#+7
   \   00000020   0xD104             BNE.N    ??handleActionWithParameter_2
    215          		VoidCharPtrVoidPtr callbackS = (VoidCharPtrVoidPtr) current->callback;
   \   00000022   0x68A5             LDR      R5,[R4, #+8]
    216          		(*callbackS)(parameter, current->param);
   \   00000024   0x68E1             LDR      R1,[R4, #+12]
   \   00000026   0x4658             MOV      R0,R11
   \   00000028   0x47A8             BLX      R5
    217          		return;
   \   0000002A   0xE12E             B.N      ??handleActionWithParameter_1
    218          	}
    219          
    220          	// todo: refactor this hell!
    221          	if (current->parameterType == STRING2_PARAMETER || current->parameterType == STRING2_PARAMETER_P) {
   \                     ??handleActionWithParameter_2:
   \   0000002C   0x7920             LDRB     R0,[R4, #+4]
   \   0000002E   0x2808             CMP      R0,#+8
   \   00000030   0xD002             BEQ.N    ??handleActionWithParameter_3
   \   00000032   0x7920             LDRB     R0,[R4, #+4]
   \   00000034   0x2809             CMP      R0,#+9
   \   00000036   0xD120             BNE.N    ??handleActionWithParameter_4
    222          		int spaceIndex = findEndOfToken(parameter);
   \                     ??handleActionWithParameter_3:
   \   00000038   0x4658             MOV      R0,R11
   \   0000003A   0x.... 0x....      BL       findEndOfToken
   \   0000003E   0x0005             MOVS     R5,R0
    223          		if (spaceIndex == -1) {
   \   00000040   0xF115 0x0F01      CMN      R5,#+1
   \   00000044   0xF000 0x8121      BEQ.W    ??handleActionWithParameter_1
    224          			return;
    225          		}
    226          		parameter[spaceIndex] = 0;
   \                     ??handleActionWithParameter_5:
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xF805 0x000B      STRB     R0,[R5, R11]
    227          		char * param0 = parameter;
   \   0000004E   0x465E             MOV      R6,R11
    228          
    229          		parameter += spaceIndex + 1;
   \   00000050   0xEB15 0x000B      ADDS     R0,R5,R11
   \   00000054   0xF110 0x0B01      ADDS     R11,R0,#+1
    230          		char * param1 = parameter;
   \   00000058   0x465F             MOV      R7,R11
    231          
    232          		if (current->parameterType == STRING2_PARAMETER) {
   \   0000005A   0x7920             LDRB     R0,[R4, #+4]
   \   0000005C   0x2808             CMP      R0,#+8
   \   0000005E   0xD105             BNE.N    ??handleActionWithParameter_6
    233          			VoidCharPtrCharPtr callbackS = (VoidCharPtrCharPtr) current->callback;
   \   00000060   0xF8D4 0x8008      LDR      R8,[R4, #+8]
    234          			(*callbackS)(param0, param1);
   \   00000064   0x0039             MOVS     R1,R7
   \   00000066   0x0030             MOVS     R0,R6
   \   00000068   0x47C0             BLX      R8
   \   0000006A   0xE005             B.N      ??handleActionWithParameter_7
    235          		} else {
    236          			VoidCharPtrCharPtrVoidPtr callbackS = (VoidCharPtrCharPtrVoidPtr) current->callback;
   \                     ??handleActionWithParameter_6:
   \   0000006C   0xF8D4 0x8008      LDR      R8,[R4, #+8]
    237          			(*callbackS)(param0, param1, current->param);
   \   00000070   0x68E2             LDR      R2,[R4, #+12]
   \   00000072   0x0039             MOVS     R1,R7
   \   00000074   0x0030             MOVS     R0,R6
   \   00000076   0x47C0             BLX      R8
    238          		}
    239          		return;
   \                     ??handleActionWithParameter_7:
   \   00000078   0xE107             B.N      ??handleActionWithParameter_1
    240          	}
    241          
    242          	if (current->parameterType == STRING3_PARAMETER) {
   \                     ??handleActionWithParameter_4:
   \   0000007A   0x7920             LDRB     R0,[R4, #+4]
   \   0000007C   0x280A             CMP      R0,#+10
   \   0000007E   0xD126             BNE.N    ??handleActionWithParameter_8
    243          		int spaceIndex = findEndOfToken(parameter);
   \   00000080   0x4658             MOV      R0,R11
   \   00000082   0x.... 0x....      BL       findEndOfToken
   \   00000086   0x0005             MOVS     R5,R0
    244          		if (spaceIndex == -1) {
   \   00000088   0xF115 0x0F01      CMN      R5,#+1
   \   0000008C   0xF000 0x80FD      BEQ.W    ??handleActionWithParameter_1
    245          			return;
    246          		}
    247          		parameter[spaceIndex] = 0;
   \                     ??handleActionWithParameter_9:
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0xF805 0x000B      STRB     R0,[R5, R11]
    248          		char * param0 = parameter;
   \   00000096   0x465E             MOV      R6,R11
    249          
    250          		parameter += spaceIndex + 1;
   \   00000098   0xEB15 0x000B      ADDS     R0,R5,R11
   \   0000009C   0xF110 0x0B01      ADDS     R11,R0,#+1
    251          		spaceIndex = findEndOfToken(parameter);
   \   000000A0   0x4658             MOV      R0,R11
   \   000000A2   0x.... 0x....      BL       findEndOfToken
   \   000000A6   0x0005             MOVS     R5,R0
    252          		if (spaceIndex == -1)
   \   000000A8   0xF115 0x0F01      CMN      R5,#+1
   \   000000AC   0xF000 0x80ED      BEQ.W    ??handleActionWithParameter_1
    253          			return;
    254          		parameter[spaceIndex] = 0;
   \                     ??handleActionWithParameter_10:
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0xF805 0x000B      STRB     R0,[R5, R11]
    255          		char * param1 = parameter;
   \   000000B6   0x465F             MOV      R7,R11
    256          		parameter += spaceIndex + 1;
   \   000000B8   0xEB15 0x000B      ADDS     R0,R5,R11
   \   000000BC   0xF110 0x0B01      ADDS     R11,R0,#+1
    257          		char * param2 = parameter;
    258          
    259          		VoidCharPtrCharPtrCharPtr callbackS = (VoidCharPtrCharPtrCharPtr) current->callback;
   \   000000C0   0xF8D4 0x8008      LDR      R8,[R4, #+8]
    260          		(*callbackS)(param0, param1, param2);
   \   000000C4   0x465A             MOV      R2,R11
   \   000000C6   0x0039             MOVS     R1,R7
   \   000000C8   0x0030             MOVS     R0,R6
   \   000000CA   0x47C0             BLX      R8
    261          		return;
   \   000000CC   0xE0DD             B.N      ??handleActionWithParameter_1
    262          
    263          	}
    264          
    265          	// todo: refactor this hell!
    266          	if (current->parameterType == STRING5_PARAMETER) {
   \                     ??handleActionWithParameter_8:
   \   000000CE   0x7920             LDRB     R0,[R4, #+4]
   \   000000D0   0x280B             CMP      R0,#+11
   \   000000D2   0xD149             BNE.N    ??handleActionWithParameter_11
    267          		int spaceIndex = findEndOfToken(parameter);
   \   000000D4   0x4658             MOV      R0,R11
   \   000000D6   0x.... 0x....      BL       findEndOfToken
   \   000000DA   0x0005             MOVS     R5,R0
    268          		if (spaceIndex == -1) {
   \   000000DC   0xF115 0x0F01      CMN      R5,#+1
   \   000000E0   0xF000 0x80D3      BEQ.W    ??handleActionWithParameter_1
    269          			return;
    270          		}
    271          		parameter[spaceIndex] = 0;
   \                     ??handleActionWithParameter_12:
   \   000000E4   0x2000             MOVS     R0,#+0
   \   000000E6   0xF805 0x000B      STRB     R0,[R5, R11]
    272          		char * param0 = parameter;
   \   000000EA   0x465E             MOV      R6,R11
    273          
    274          		parameter += spaceIndex + 1;
   \   000000EC   0xEB15 0x000B      ADDS     R0,R5,R11
   \   000000F0   0xF110 0x0B01      ADDS     R11,R0,#+1
    275          		spaceIndex = findEndOfToken(parameter);
   \   000000F4   0x4658             MOV      R0,R11
   \   000000F6   0x.... 0x....      BL       findEndOfToken
   \   000000FA   0x0005             MOVS     R5,R0
    276          		if (spaceIndex == -1)
   \   000000FC   0xF115 0x0F01      CMN      R5,#+1
   \   00000100   0xF000 0x80C3      BEQ.W    ??handleActionWithParameter_1
    277          			return;
    278          		parameter[spaceIndex] = 0;
   \                     ??handleActionWithParameter_13:
   \   00000104   0x2000             MOVS     R0,#+0
   \   00000106   0xF805 0x000B      STRB     R0,[R5, R11]
    279          		char * param1 = parameter;
   \   0000010A   0x465F             MOV      R7,R11
    280          
    281          		parameter += spaceIndex + 1;
   \   0000010C   0xEB15 0x000B      ADDS     R0,R5,R11
   \   00000110   0xF110 0x0B01      ADDS     R11,R0,#+1
    282          		spaceIndex = findEndOfToken(parameter);
   \   00000114   0x4658             MOV      R0,R11
   \   00000116   0x.... 0x....      BL       findEndOfToken
   \   0000011A   0x0005             MOVS     R5,R0
    283          		if (spaceIndex == -1)
   \   0000011C   0xF115 0x0F01      CMN      R5,#+1
   \   00000120   0xF000 0x80B3      BEQ.W    ??handleActionWithParameter_1
    284          			return;
    285          		parameter[spaceIndex] = 0;
   \                     ??handleActionWithParameter_14:
   \   00000124   0x2000             MOVS     R0,#+0
   \   00000126   0xF805 0x000B      STRB     R0,[R5, R11]
    286          		char * param2 = parameter;
   \   0000012A   0x46D8             MOV      R8,R11
    287          
    288          		parameter += spaceIndex + 1;
   \   0000012C   0xEB15 0x000B      ADDS     R0,R5,R11
   \   00000130   0xF110 0x0B01      ADDS     R11,R0,#+1
    289          		spaceIndex = findEndOfToken(parameter);
   \   00000134   0x4658             MOV      R0,R11
   \   00000136   0x.... 0x....      BL       findEndOfToken
   \   0000013A   0x0005             MOVS     R5,R0
    290          		if (spaceIndex == -1)
   \   0000013C   0xF115 0x0F01      CMN      R5,#+1
   \   00000140   0xF000 0x80A3      BEQ.W    ??handleActionWithParameter_1
    291          			return;
    292          		parameter[spaceIndex] = 0;
   \                     ??handleActionWithParameter_15:
   \   00000144   0x2000             MOVS     R0,#+0
   \   00000146   0xF805 0x000B      STRB     R0,[R5, R11]
    293          		char * param3 = parameter;
   \   0000014A   0x46D9             MOV      R9,R11
    294          
    295          		parameter += spaceIndex + 1;
   \   0000014C   0xEB15 0x000B      ADDS     R0,R5,R11
   \   00000150   0xF110 0x0B01      ADDS     R11,R0,#+1
    296          		char * param4 = parameter;
    297          
    298          		VoidCharPtrCharPtrCharPtrCharPtrCharPtr callbackS = (VoidCharPtrCharPtrCharPtrCharPtrCharPtr) current->callback;
   \   00000154   0xF8D4 0xA008      LDR      R10,[R4, #+8]
    299          		(*callbackS)(param0, param1, param2, param3, param4);
   \   00000158   0xF8CD 0xB000      STR      R11,[SP, #+0]
   \   0000015C   0x464B             MOV      R3,R9
   \   0000015E   0x4642             MOV      R2,R8
   \   00000160   0x0039             MOVS     R1,R7
   \   00000162   0x0030             MOVS     R0,R6
   \   00000164   0x47D0             BLX      R10
    300          		return;
   \   00000166   0xE090             B.N      ??handleActionWithParameter_1
    301          
    302          	}
    303          
    304          	if (current->parameterType == TWO_INTS_PARAMETER) {
   \                     ??handleActionWithParameter_11:
   \   00000168   0x7920             LDRB     R0,[R4, #+4]
   \   0000016A   0x280C             CMP      R0,#+12
   \   0000016C   0xD136             BNE.N    ??handleActionWithParameter_16
    305          		int spaceIndex = findEndOfToken(parameter);
   \   0000016E   0x4658             MOV      R0,R11
   \   00000170   0x.... 0x....      BL       findEndOfToken
   \   00000174   0x0005             MOVS     R5,R0
    306          		if (spaceIndex == -1)
   \   00000176   0xF115 0x0F01      CMN      R5,#+1
   \   0000017A   0xF000 0x8086      BEQ.W    ??handleActionWithParameter_1
    307          			return;
    308          		parameter[spaceIndex] = 0;
   \                     ??handleActionWithParameter_17:
   \   0000017E   0x2000             MOVS     R0,#+0
   \   00000180   0xF805 0x000B      STRB     R0,[R5, R11]
    309          		int value1 = atoi(parameter);
   \   00000184   0x4658             MOV      R0,R11
   \   00000186   0x.... 0x....      BL       atoi
   \   0000018A   0x0006             MOVS     R6,R0
    310          		if (absI(value1) == ERROR_CODE) {
   \   0000018C   0x0030             MOVS     R0,R6
   \   0000018E   0x.... 0x....      BL       absI
   \   00000192   0x....             LDR.N    R1,??DataTable9_9  ;; 0x128ce430
   \   00000194   0x4288             CMP      R0,R1
   \   00000196   0xD106             BNE.N    ??handleActionWithParameter_18
    311          #if (EFI_PROD_CODE || EFI_SIMULATOR) || defined(__DOXYGEN__)
    312          			scheduleMsg(logging, "not an integer [%s]", parameter);
   \   00000198   0x465A             MOV      R2,R11
   \   0000019A   0x....             LDR.N    R1,??DataTable9_10
   \   0000019C   0x....             LDR.N    R0,??DataTable9_5
   \   0000019E   0x6800             LDR      R0,[R0, #+0]
   \   000001A0   0x.... 0x....      BL       scheduleMsg
    313          #endif
    314          			return;
   \   000001A4   0xE071             B.N      ??handleActionWithParameter_1
    315          		}
    316          		parameter += spaceIndex + 1;
   \                     ??handleActionWithParameter_18:
   \   000001A6   0xEB15 0x000B      ADDS     R0,R5,R11
   \   000001AA   0xF110 0x0B01      ADDS     R11,R0,#+1
    317          		int value2 = atoi(parameter);
   \   000001AE   0x4658             MOV      R0,R11
   \   000001B0   0x.... 0x....      BL       atoi
   \   000001B4   0x0007             MOVS     R7,R0
    318          		if (absI(value2) == ERROR_CODE) {
   \   000001B6   0x0038             MOVS     R0,R7
   \   000001B8   0x.... 0x....      BL       absI
   \   000001BC   0x....             LDR.N    R1,??DataTable9_9  ;; 0x128ce430
   \   000001BE   0x4288             CMP      R0,R1
   \   000001C0   0xD106             BNE.N    ??handleActionWithParameter_19
    319          #if (EFI_PROD_CODE || EFI_SIMULATOR) || defined(__DOXYGEN__)
    320          			scheduleMsg(logging, "not an integer [%s]", parameter);
   \   000001C2   0x465A             MOV      R2,R11
   \   000001C4   0x....             LDR.N    R1,??DataTable9_10
   \   000001C6   0x....             LDR.N    R0,??DataTable9_5
   \   000001C8   0x6800             LDR      R0,[R0, #+0]
   \   000001CA   0x.... 0x....      BL       scheduleMsg
    321          #endif
    322          			return;
   \   000001CE   0xE05C             B.N      ??handleActionWithParameter_1
    323          		}
    324          		VoidIntInt callbackS = (VoidIntInt) current->callback;
   \                     ??handleActionWithParameter_19:
   \   000001D0   0xF8D4 0x8008      LDR      R8,[R4, #+8]
    325          		(*callbackS)(value1, value2);
   \   000001D4   0x0039             MOVS     R1,R7
   \   000001D6   0x0030             MOVS     R0,R6
   \   000001D8   0x47C0             BLX      R8
    326          		return;
   \   000001DA   0xE056             B.N      ??handleActionWithParameter_1
    327          	}
    328          
    329          	if (current->parameterType == FLOAT_PARAMETER) {
   \                     ??handleActionWithParameter_16:
   \   000001DC   0x7920             LDRB     R0,[R4, #+4]
   \   000001DE   0x2804             CMP      R0,#+4
   \   000001E0   0xD109             BNE.N    ??handleActionWithParameter_20
    330          		float value = atoff(parameter);
   \   000001E2   0x4658             MOV      R0,R11
   \   000001E4   0x.... 0x....      BL       atoff
   \   000001E8   0xEEB0 0x8A40      VMOV.F32 S16,S0
    331          		VoidFloat callbackF = (VoidFloat) current->callback;
   \   000001EC   0x68A5             LDR      R5,[R4, #+8]
    332          
    333          		// invoke callback function by reference
    334          		(*callbackF)(value);
   \   000001EE   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   000001F2   0x47A8             BLX      R5
    335          		return;
   \   000001F4   0xE049             B.N      ??handleActionWithParameter_1
    336          	}
    337          
    338          	if (current->parameterType == FLOAT_FLOAT_PARAMETER || current->parameterType == FLOAT_FLOAT_PARAMETER_P) {
   \                     ??handleActionWithParameter_20:
   \   000001F6   0x7920             LDRB     R0,[R4, #+4]
   \   000001F8   0x280E             CMP      R0,#+14
   \   000001FA   0xD002             BEQ.N    ??handleActionWithParameter_21
   \   000001FC   0x7920             LDRB     R0,[R4, #+4]
   \   000001FE   0x280F             CMP      R0,#+15
   \   00000200   0xD129             BNE.N    ??handleActionWithParameter_22
    339          		int spaceIndex = findEndOfToken(parameter);
   \                     ??handleActionWithParameter_21:
   \   00000202   0x4658             MOV      R0,R11
   \   00000204   0x.... 0x....      BL       findEndOfToken
   \   00000208   0x0005             MOVS     R5,R0
    340          		if (spaceIndex == -1)
   \   0000020A   0xF115 0x0F01      CMN      R5,#+1
   \   0000020E   0xD03C             BEQ.N    ??handleActionWithParameter_1
    341          			return;
    342          		parameter[spaceIndex] = 0;
   \                     ??handleActionWithParameter_23:
   \   00000210   0x2000             MOVS     R0,#+0
   \   00000212   0xF805 0x000B      STRB     R0,[R5, R11]
    343          		float value1 = atoff(parameter);
   \   00000216   0x4658             MOV      R0,R11
   \   00000218   0x.... 0x....      BL       atoff
   \   0000021C   0xEEB0 0x8A40      VMOV.F32 S16,S0
    344          		parameter += spaceIndex + 1;
   \   00000220   0xEB15 0x000B      ADDS     R0,R5,R11
   \   00000224   0xF110 0x0B01      ADDS     R11,R0,#+1
    345          		float value2 = atoff(parameter);
   \   00000228   0x4658             MOV      R0,R11
   \   0000022A   0x.... 0x....      BL       atoff
   \   0000022E   0xEEF0 0x8A40      VMOV.F32 S17,S0
    346          		if (current->parameterType == FLOAT_FLOAT_PARAMETER) {
   \   00000232   0x7920             LDRB     R0,[R4, #+4]
   \   00000234   0x280E             CMP      R0,#+14
   \   00000236   0xD106             BNE.N    ??handleActionWithParameter_24
    347          			VoidFloatFloat callbackS = (VoidFloatFloat) current->callback;
   \   00000238   0x68A6             LDR      R6,[R4, #+8]
    348          			(*callbackS)(value1, value2);
   \   0000023A   0xEEF0 0x0A68      VMOV.F32 S1,S17
   \   0000023E   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000242   0x47B0             BLX      R6
   \   00000244   0xE006             B.N      ??handleActionWithParameter_25
    349          		} else {
    350          			VoidFloatFloatVoidPtr callbackS = (VoidFloatFloatVoidPtr) current->callback;
   \                     ??handleActionWithParameter_24:
   \   00000246   0x68A6             LDR      R6,[R4, #+8]
    351          			(*callbackS)(value1, value2, current->param);
   \   00000248   0x68E0             LDR      R0,[R4, #+12]
   \   0000024A   0xEEF0 0x0A68      VMOV.F32 S1,S17
   \   0000024E   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000252   0x47B0             BLX      R6
    352          		}
    353          		return;
   \                     ??handleActionWithParameter_25:
   \   00000254   0xE019             B.N      ??handleActionWithParameter_1
    354          	}
    355          
    356          	int value = atoi(parameter);
   \                     ??handleActionWithParameter_22:
   \   00000256   0x4658             MOV      R0,R11
   \   00000258   0x.... 0x....      BL       atoi
   \   0000025C   0x0005             MOVS     R5,R0
    357          	if (absI(value) == ERROR_CODE) {
   \   0000025E   0x0028             MOVS     R0,R5
   \   00000260   0x.... 0x....      BL       absI
   \   00000264   0x....             LDR.N    R1,??DataTable9_9  ;; 0x128ce430
   \   00000266   0x4288             CMP      R0,R1
   \   00000268   0xD104             BNE.N    ??handleActionWithParameter_26
    358          		print("invalid integer [%s]\r\n", parameter);
   \   0000026A   0x4659             MOV      R1,R11
   \   0000026C   0x....             LDR.N    R0,??DataTable9_11
   \   0000026E   0x.... 0x....      BL       print
    359          		return;
   \   00000272   0xE00A             B.N      ??handleActionWithParameter_1
    360          	}
    361          
    362          	if (current->parameterType == ONE_PARAMETER_P) {
   \                     ??handleActionWithParameter_26:
   \   00000274   0x7920             LDRB     R0,[R4, #+4]
   \   00000276   0x2803             CMP      R0,#+3
   \   00000278   0xD104             BNE.N    ??handleActionWithParameter_27
    363          		VoidIntVoidPtr callback1 = (VoidIntVoidPtr) current->callback;
   \   0000027A   0x68A6             LDR      R6,[R4, #+8]
    364          		// invoke callback function by reference
    365          		(*callback1)(value, current->param);
   \   0000027C   0x68E1             LDR      R1,[R4, #+12]
   \   0000027E   0x0028             MOVS     R0,R5
   \   00000280   0x47B0             BLX      R6
   \   00000282   0xE002             B.N      ??handleActionWithParameter_28
    366          
    367          	} else {
    368          		VoidInt callback1 = (VoidInt) current->callback;
   \                     ??handleActionWithParameter_27:
   \   00000284   0x68A6             LDR      R6,[R4, #+8]
    369          		// invoke callback function by reference
    370          		(*callback1)(value);
   \   00000286   0x0028             MOVS     R0,R5
   \   00000288   0x47B0             BLX      R6
    371          	}
    372          
    373          }
   \                     ??handleActionWithParameter_28:
   \                     ??handleActionWithParameter_1:
   \   0000028A   0xB002             ADD      SP,SP,#+8
   \   0000028C   0xECBD 0x8B02      VPOP     {D8}
   \   00000290   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    374          
    375          /**
    376           * @return Number of space-separated tokens in the string
    377           */

   \                                 In section .text, align 2, keep-with-next
    378          int tokenLength(const char *msgp) {
   \                     tokenLength:
   \   00000000   0x0001             MOVS     R1,R0
    379          	int result = 0;
   \   00000002   0x2000             MOVS     R0,#+0
    380          	while (*msgp) {
   \                     ??tokenLength_0:
   \   00000004   0x780A             LDRB     R2,[R1, #+0]
   \   00000006   0x2A00             CMP      R2,#+0
   \   00000008   0xD006             BEQ.N    ??tokenLength_1
    381          		char ch = *msgp++;
   \   0000000A   0x780A             LDRB     R2,[R1, #+0]
   \   0000000C   0x1C49             ADDS     R1,R1,#+1
    382          		if (ch == ' ') {
   \   0000000E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000010   0x2A20             CMP      R2,#+32
   \   00000012   0xD001             BEQ.N    ??tokenLength_1
    383          			break;
    384          		}
    385          		result++;
   \                     ??tokenLength_2:
   \   00000014   0x1C40             ADDS     R0,R0,#+1
   \   00000016   0xE7F5             B.N      ??tokenLength_0
    386          	}
    387          	return result;
   \                     ??tokenLength_1:
   \   00000018   0x4770             BX       LR               ;; return
    388          }
    389          

   \                                 In section .text, align 2, keep-with-next
    390          void initConsoleLogic(Logging *sharedLogger) {
   \                     initConsoleLogic:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    391          	logging = sharedLogger;
   \   00000004   0x....             LDR.N    R0,??DataTable9_5
   \   00000006   0x6004             STR      R4,[R0, #+0]
    392          //	resetConsoleActions();
    393          	addConsoleAction("help", helpCommand);
   \   00000008   0x....             LDR.N    R1,??DataTable9_12
   \   0000000A   0x....             LDR.N    R0,??DataTable9_13
   \   0000000C   0x.... 0x....      BL       addConsoleAction
    394          	addConsoleActionI("echo", echo);
   \   00000010   0x....             LDR.N    R1,??DataTable9_14
   \   00000012   0x....             LDR.N    R0,??DataTable9_15
   \   00000014   0x.... 0x....      BL       addConsoleActionI
    395          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    396          
    397          /**
    398           * @return NULL if input line validation failed, reference to line payload if validation succeeded.
    399           * @see sendOutConfirmation() for command confirmation processing.
    400           */

   \                                 In section .text, align 2, keep-with-next
    401          char *validateSecureLine(char *line) {
   \                     validateSecureLine:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    402          	if (line == NULL)
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD101             BNE.N    ??validateSecureLine_0
    403          		return NULL;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xE02D             B.N      ??validateSecureLine_1
    404          	if (strncmp(SECURE_LINE_PREFIX, line, SECURE_LINE_PREFIX_LENGTH) == 0) {
   \                     ??validateSecureLine_0:
   \   0000000C   0x2204             MOVS     R2,#+4
   \   0000000E   0x0021             MOVS     R1,R4
   \   00000010   0x....             LDR.N    R0,??DataTable9_16
   \   00000012   0x.... 0x....      BL       strncmp
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD125             BNE.N    ??validateSecureLine_2
    405          		// COM protocol looses bytes, this is a super-naive error detection
    406          
    407          //		print("Got secure mode request header [%s]\r\n", line);
    408          		line += SECURE_LINE_PREFIX_LENGTH;
   \   0000001A   0x1D24             ADDS     R4,R4,#+4
    409          //		print("Got secure mode request command [%s]\r\n", line);
    410          
    411          		char *divider = line;
   \   0000001C   0x0025             MOVS     R5,R4
    412          		while (*divider != '!') {
   \                     ??validateSecureLine_3:
   \   0000001E   0x7828             LDRB     R0,[R5, #+0]
   \   00000020   0x2821             CMP      R0,#+33
   \   00000022   0xD00A             BEQ.N    ??validateSecureLine_4
    413          			if (*divider == '\0') {
   \   00000024   0x7828             LDRB     R0,[R5, #+0]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD105             BNE.N    ??validateSecureLine_5
    414          				print("Divider not found [%s]\r\n", line);
   \   0000002A   0x0021             MOVS     R1,R4
   \   0000002C   0x....             LDR.N    R0,??DataTable9_17
   \   0000002E   0x.... 0x....      BL       print
    415          				return NULL;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xE018             B.N      ??validateSecureLine_1
    416          			}
    417          			divider++;
   \                     ??validateSecureLine_5:
   \   00000036   0x1C6D             ADDS     R5,R5,#+1
   \   00000038   0xE7F1             B.N      ??validateSecureLine_3
    418          		}
    419          		*divider++ = 0; // replacing divider symbol with zero
   \                     ??validateSecureLine_4:
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x7028             STRB     R0,[R5, #+0]
   \   0000003E   0x1C6D             ADDS     R5,R5,#+1
    420          		int expectedLength = atoi(line);
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0x.... 0x....      BL       atoi
   \   00000046   0x0006             MOVS     R6,R0
    421          		line = divider;
   \   00000048   0x002C             MOVS     R4,R5
    422          		int actualLength = strlen(line);
   \   0000004A   0x0020             MOVS     R0,R4
   \   0000004C   0x.... 0x....      BL       strlen
   \   00000050   0x0007             MOVS     R7,R0
    423          		if (expectedLength != actualLength) {
   \   00000052   0x42BE             CMP      R6,R7
   \   00000054   0xD007             BEQ.N    ??validateSecureLine_2
    424          			print("Error detected: expected %d but got %d in [%s]\r\n", expectedLength, actualLength, line);
   \   00000056   0x0023             MOVS     R3,R4
   \   00000058   0x003A             MOVS     R2,R7
   \   0000005A   0x0031             MOVS     R1,R6
   \   0000005C   0x....             LDR.N    R0,??DataTable9_18
   \   0000005E   0x.... 0x....      BL       print
    425          			return NULL;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0xE000             B.N      ??validateSecureLine_1
    426          		}
    427          	}
    428          	return line;
   \                     ??validateSecureLine_2:
   \   00000066   0x0020             MOVS     R0,R4
   \                     ??validateSecureLine_1:
   \   00000068   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    429          }
    430          

   \                                 In section .bss, align 4
    431          static char confirmation[200];
   \                     confirmation:
   \   00000000                      DS8 200

   \                                 In section .bss, align 4
    432          static char handleBuffer[200];
   \                     handleBuffer:
   \   00000000                      DS8 200
    433          

   \                                 In section .text, align 2, keep-with-next
    434          static bool handleConsoleLineInternal(const char *commandLine, int lineLength) {
   \                     _Z25handleConsoleLineInternalPKci:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    435          	strncpy(handleBuffer, commandLine, sizeof(handleBuffer) - 1);
   \   00000008   0x22C7             MOVS     R2,#+199
   \   0000000A   0x0021             MOVS     R1,R4
   \   0000000C   0x....             LDR.N    R0,??DataTable9_19
   \   0000000E   0x.... 0x....      BL       strncpy
    436          	handleBuffer[sizeof(handleBuffer) - 1] = 0; // we want this to be null-terminated for sure
   \   00000012   0x....             LDR.N    R0,??DataTable9_19
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0xF880 0x10C7      STRB     R1,[R0, #+199]
    437          	char *line = handleBuffer;
   \   0000001A   0x....             LDR.N    R6,??DataTable9_19
    438          	int firstTokenLength = tokenLength(line);
   \   0000001C   0x0030             MOVS     R0,R6
   \   0000001E   0x.... 0x....      BL       tokenLength
   \   00000022   0x0007             MOVS     R7,R0
    439          
    440          //	print("processing [%s] with %d actions\r\n", line, consoleActionCount);
    441          
    442          	if (firstTokenLength == lineLength) {
   \   00000024   0x42AF             CMP      R7,R5
   \   00000026   0xD125             BNE.N    ??handleConsoleLineInternal_0
    443          		// no-param actions are processed here
    444          		for (int i = 0; i < consoleActionCount; i++) {
   \   00000028   0xF05F 0x0800      MOVS     R8,#+0
   \                     ??handleConsoleLineInternal_1:
   \   0000002C   0x....             LDR.N    R0,??DataTable9_1
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x4580             CMP      R8,R0
   \   00000032   0xDA3F             BGE.N    ??handleConsoleLineInternal_2
    445          			TokenCallback *current = &consoleActions[i];
   \   00000034   0x....             LDR.N    R0,??DataTable9_3
   \   00000036   0xEB10 0x1908      ADDS     R9,R0,R8, LSL #+4
    446          			if (strEqual(line, current->token)) {
   \   0000003A   0xF8D9 0x1000      LDR      R1,[R9, #+0]
   \   0000003E   0x0030             MOVS     R0,R6
   \   00000040   0x.... 0x....      BL       strEqual
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD012             BEQ.N    ??handleConsoleLineInternal_3
    447          				if (current->parameterType == NO_PARAMETER) {
   \   00000048   0xF899 0x0004      LDRB     R0,[R9, #+4]
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD103             BNE.N    ??handleConsoleLineInternal_4
    448          					(*current->callback)();
   \   00000050   0xF8D9 0x0008      LDR      R0,[R9, #+8]
   \   00000054   0x4780             BLX      R0
   \   00000056   0xE008             B.N      ??handleConsoleLineInternal_5
    449          				} else if (current->parameterType == NO_PARAMETER_P) {
   \                     ??handleConsoleLineInternal_4:
   \   00000058   0xF899 0x0004      LDRB     R0,[R9, #+4]
   \   0000005C   0x2801             CMP      R0,#+1
   \   0000005E   0xD104             BNE.N    ??handleConsoleLineInternal_5
    450          					VoidPtr cb = (VoidPtr) current->callback;
   \   00000060   0xF8D9 0xA008      LDR      R10,[R9, #+8]
    451          					(*cb)(current->param);
   \   00000064   0xF8D9 0x000C      LDR      R0,[R9, #+12]
   \   00000068   0x47D0             BLX      R10
    452          				}
    453          				return true;
   \                     ??handleConsoleLineInternal_5:
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0xE023             B.N      ??handleConsoleLineInternal_6
    454          			}
    455          		}
   \                     ??handleConsoleLineInternal_3:
   \   0000006E   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000072   0xE7DB             B.N      ??handleConsoleLineInternal_1
    456          	} else {
    457          		char *ptr = line + firstTokenLength;
   \                     ??handleConsoleLineInternal_0:
   \   00000074   0xEB17 0x0806      ADDS     R8,R7,R6
    458          		ptr[0] = 0; // change space into line end
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0xF888 0x0000      STRB     R0,[R8, #+0]
    459          		ptr++; // start from next symbol
   \   0000007E   0xF118 0x0801      ADDS     R8,R8,#+1
    460          
    461          		for (int i = 0; i < consoleActionCount; i++) {
   \   00000082   0xF05F 0x0900      MOVS     R9,#+0
   \                     ??handleConsoleLineInternal_7:
   \   00000086   0x....             LDR.N    R0,??DataTable9_1
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0x4581             CMP      R9,R0
   \   0000008C   0xDA12             BGE.N    ??handleConsoleLineInternal_2
    462          			TokenCallback *current = &consoleActions[i];
   \   0000008E   0x....             LDR.N    R0,??DataTable9_3
   \   00000090   0xEB10 0x1A09      ADDS     R10,R0,R9, LSL #+4
    463          			if (strEqual(line, current->token)) {
   \   00000094   0xF8DA 0x1000      LDR      R1,[R10, #+0]
   \   00000098   0x0030             MOVS     R0,R6
   \   0000009A   0x.... 0x....      BL       strEqual
   \   0000009E   0x2800             CMP      R0,#+0
   \   000000A0   0xD005             BEQ.N    ??handleConsoleLineInternal_8
    464          				handleActionWithParameter(current, ptr);
   \   000000A2   0x4641             MOV      R1,R8
   \   000000A4   0x4650             MOV      R0,R10
   \   000000A6   0x.... 0x....      BL       _Z25handleActionWithParameterP13TokenCallbackPc
    465          				return true;
   \   000000AA   0x2001             MOVS     R0,#+1
   \   000000AC   0xE003             B.N      ??handleConsoleLineInternal_6
    466          			}
    467          		}
   \                     ??handleConsoleLineInternal_8:
   \   000000AE   0xF119 0x0901      ADDS     R9,R9,#+1
   \   000000B2   0xE7E8             B.N      ??handleConsoleLineInternal_7
    468          	}
    469          	return false;
   \                     ??handleConsoleLineInternal_2:
   \   000000B4   0x2000             MOVS     R0,#+0
   \                     ??handleConsoleLineInternal_6:
   \   000000B6   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    470          }
    471          
    472          #if (EFI_PROD_CODE || EFI_SIMULATOR) || defined(__DOXYGEN__)

   \                                 In section .text, align 2, keep-with-next
    473          static void sendOutConfirmation(const char *command, int length) {
   \                     _Z19sendOutConfirmationPKci:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    474          	scheduleMsg(logging, "%s%d", command, length);
   \   00000006   0x002B             MOVS     R3,R5
   \   00000008   0x0022             MOVS     R2,R4
   \   0000000A   0x....             LDR.N    R1,??DataTable9_20
   \   0000000C   0x....             LDR.N    R0,??DataTable9_5
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x.... 0x....      BL       scheduleMsg
    475          }
   \   00000014   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    476          #endif
    477          
    478          /**
    479           * @brief This function takes care of one command line once we have it
    480           */

   \                                 In section .text, align 2, keep-with-next
    481          void handleConsoleLine(char *line) {
   \                     handleConsoleLine:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    482          	line = validateSecureLine(line);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       validateSecureLine
   \   0000000A   0x0004             MOVS     R4,R0
    483          	if (line == NULL)
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD027             BEQ.N    ??handleConsoleLine_0
    484          		return; // error detected
    485          
    486          	int lineLength = strlen(line);
   \                     ??handleConsoleLine_1:
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       strlen
   \   00000016   0x0005             MOVS     R5,R0
    487          	if (lineLength > 100) {
   \   00000018   0x2D65             CMP      R5,#+101
   \   0000001A   0xDB03             BLT.N    ??handleConsoleLine_2
    488          		// todo: better max size logic
    489          		// todo: better reaction to excessive line
    490          		print("Long line?\r\n");
   \   0000001C   0x....             LDR.N    R0,??DataTable9_21
   \   0000001E   0x.... 0x....      BL       print
    491          		return;
   \   00000022   0xE01D             B.N      ??handleConsoleLine_0
    492          	}
    493          
    494          	strcpy(confirmation, "confirmation_");
   \                     ??handleConsoleLine_2:
   \   00000024   0x....             LDR.N    R1,??DataTable9_22
   \   00000026   0x....             LDR.N    R0,??DataTable9_23
   \   00000028   0x.... 0x....      BL       strcpy
    495          	strcat(confirmation, line);
   \   0000002C   0x0021             MOVS     R1,R4
   \   0000002E   0x.... 0x....      BL       strcat
    496          	strcat(confirmation, ":");
   \   00000032   0x....             ADR.N    R1,??DataTable9  ;; ":"
   \   00000034   0x....             LDR.N    R0,??DataTable9_23
   \   00000036   0x.... 0x....      BL       strcat
    497          
    498          #if EFI_PROD_CODE || EFI_SIMULATOR
    499          	sendOutConfirmation(confirmation, lineLength);
   \   0000003A   0x0029             MOVS     R1,R5
   \   0000003C   0x.... 0x....      BL       _Z19sendOutConfirmationPKci
    500          #endif
    501          
    502          	bool isKnownComman = handleConsoleLineInternal(line, lineLength);
   \   00000040   0x0029             MOVS     R1,R5
   \   00000042   0x0020             MOVS     R0,R4
   \   00000044   0x.... 0x....      BL       _Z25handleConsoleLineInternalPKci
   \   00000048   0x0006             MOVS     R6,R0
    503          
    504          	if (!isKnownComman) {
   \   0000004A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000004C   0x2E00             CMP      R6,#+0
   \   0000004E   0xD107             BNE.N    ??handleConsoleLine_3
    505          		scheduleMsg(logging, "unknown [%s]", line);
   \   00000050   0x0022             MOVS     R2,R4
   \   00000052   0x....             LDR.N    R1,??DataTable9_24
   \   00000054   0x....             LDR.N    R0,??DataTable9_5
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0x.... 0x....      BL       scheduleMsg
    506          		helpCommand();
   \   0000005C   0x.... 0x....      BL       helpCommand
    507          	}
    508          }
   \                     ??handleConsoleLine_3:
   \                     ??handleConsoleLine_0:
   \   00000060   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x3A 0x00          DC8      ":",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x........         DC32     consoleActionCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x........         DC32     `?<Constant "Too many console actions">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x........         DC32     consoleActions

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x........         DC32     `?<Constant "%d actions available">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x........         DC32     logging

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x........         DC32     `?<Constant "  %s: %d parameters">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   0x........         DC32     `?<Constant "For more visit http:/...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   0x........         DC32     `?<Constant "got value: %d\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   0x128CE430         DC32     0x128ce430

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \   00000000   0x........         DC32     `?<Constant "not an integer [%s]">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \   00000000   0x........         DC32     `?<Constant "invalid integer [%s]\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_12:
   \   00000000   0x........         DC32     helpCommand

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_13:
   \   00000000   0x........         DC32     `?<Constant "help">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_14:
   \   00000000   0x........         DC32     _Z4echoi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_15:
   \   00000000   0x........         DC32     `?<Constant "echo">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_16:
   \   00000000   0x........         DC32     `?<Constant "sec!">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_17:
   \   00000000   0x........         DC32     `?<Constant "Divider not found [%s]\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_18:
   \   00000000   0x........         DC32     `?<Constant "Error detected: expec...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_19:
   \   00000000   0x........         DC32     handleBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_20:
   \   00000000   0x........         DC32     `?<Constant "%s%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_21:
   \   00000000   0x........         DC32     `?<Constant "Long line?\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_22:
   \   00000000   0x........         DC32     `?<Constant "confirmation_">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_23:
   \   00000000   0x........         DC32     confirmation

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_24:
   \   00000000   0x........         DC32     `?<Constant "unknown [%s]">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "Too many console actions">`:
   \   00000000   0x54 0x6F          DC8 "Too many console actions"
   \              0x6F 0x20    
   \              0x6D 0x61    
   \              0x6E 0x79    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x73 0x6F    
   \              0x6C 0x65    
   \              0x20 0x61    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x73    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "%d actions available">`:
   \   00000000   0x25 0x64          DC8 "%d actions available"
   \              0x20 0x61    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x73    
   \              0x20 0x61    
   \              0x76 0x61    
   \              0x69 0x6C    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "  %s: %d parameters">`:
   \   00000000   0x20 0x20          DC8 "  %s: %d parameters"
   \              0x25 0x73    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x70    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "For more visit http:/...">`:
   \   00000000   0x46 0x6F          DC8 46H, 6FH, 72H, 20H, 6DH, 6FH, 72H, 65H
   \              0x72 0x20    
   \              0x6D 0x6F    
   \              0x72 0x65    
   \   00000008   0x20 0x76          DC8 20H, 76H, 69H, 73H, 69H, 74H, 20H, 68H
   \              0x69 0x73    
   \              0x69 0x74    
   \              0x20 0x68    
   \   00000010   0x74 0x74          DC8 74H, 74H, 70H, 3AH, 2FH, 2FH, 72H, 75H
   \              0x70 0x3A    
   \              0x2F 0x2F    
   \              0x72 0x75    
   \   00000018   0x73 0x65          DC8 73H, 65H, 66H, 69H, 2EH, 63H, 6FH, 6DH
   \              0x66 0x69    
   \              0x2E 0x63    
   \              0x6F 0x6D    
   \   00000020   0x2F 0x77          DC8 2FH, 77H, 69H, 6BH, 69H, 2FH, 69H, 6EH
   \              0x69 0x6B    
   \              0x69 0x2F    
   \              0x69 0x6E    
   \   00000028   0x64 0x65          DC8 64H, 65H, 78H, 2EH, 70H, 68H, 70H, 3FH
   \              0x78 0x2E    
   \              0x70 0x68    
   \              0x70 0x3F    
   \   00000030   0x74 0x69          DC8 74H, 69H, 74H, 6CH, 65H, 3DH, 4DH, 61H
   \              0x74 0x6C    
   \              0x65 0x3D    
   \              0x4D 0x61    
   \   00000038   0x6E 0x75          DC8 6EH, 75H, 61H, 6CH, 3AH, 53H, 6FH, 66H
   \              0x61 0x6C    
   \              0x3A 0x53    
   \              0x6F 0x66    
   \   00000040   0x74 0x77          DC8 74H, 77H, 61H, 72H, 65H, 3AH, 64H, 65H
   \              0x61 0x72    
   \              0x65 0x3A    
   \              0x64 0x65    
   \   00000048   0x76 0x5F          DC8 76H, 5FH, 63H, 6FH, 6EH, 73H, 6FH, 6CH
   \              0x63 0x6F    
   \              0x6E 0x73    
   \              0x6F 0x6C    
   \   00000050   0x65 0x5F          DC8 65H, 5FH, 63H, 6FH, 6DH, 6DH, 61H, 6EH
   \              0x63 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \   00000058   0x64 0x73          DC8 64H, 73H, 0
   \              0x00         
   \   0000005B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "got value: %d\\r\\n">`:
   \   00000000   0x67 0x6F          DC8 "got value: %d\015\012"
   \              0x74 0x20    
   \              0x76 0x61    
   \              0x6C 0x75    
   \              0x65 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "not an integer [%s]">`:
   \   00000000   0x6E 0x6F          DC8 "not an integer [%s]"
   \              0x74 0x20    
   \              0x61 0x6E    
   \              0x20 0x69    
   \              0x6E 0x74    
   \              0x65 0x67    
   \              0x65 0x72    
   \              0x20 0x5B    
   \              0x25 0x73    
   \              0x5D 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "invalid integer [%s]\\r\\n">`:
   \   00000000   0x69 0x6E          DC8 "invalid integer [%s]\015\012"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x69 0x6E    
   \              0x74 0x65    
   \              0x67 0x65    
   \              0x72 0x20    
   \              0x5B 0x25    
   \              0x73 0x5D    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "help">`:
   \   00000000   0x68 0x65          DC8 "help"
   \              0x6C 0x70    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "echo">`:
   \   00000000   0x65 0x63          DC8 "echo"
   \              0x68 0x6F    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "sec!">`:
   \   00000000   0x73 0x65          DC8 "sec!"
   \              0x63 0x21    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Divider not found [%s]\\r\\n">`:
   \   00000000   0x44 0x69          DC8 "Divider not found [%s]\015\012"
   \              0x76 0x69    
   \              0x64 0x65    
   \              0x72 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x75 0x6E    
   \              0x64 0x20    
   \              0x5B 0x25    
   \              0x73 0x5D    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Error detected: expec...">`:
   \   00000000   0x45 0x72          DC8 "Error detected: expected %d but got %d in [%s]\015\012"
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x64 0x65    
   \              0x74 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x3A 0x20    
   \              0x65 0x78    
   \              0x70 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x62 0x75    
   \              0x74 0x20    
   \              0x67 0x6F    
   \              0x74 0x20    
   \              0x25 0x64    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x5B 0x25    
   \              0x73 0x5D    
   \              0x0D 0x0A    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "%s%d">`:
   \   00000000   0x25 0x73          DC8 "%s%d"
   \              0x25 0x64    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Long line?\\r\\n">`:
   \   00000000   0x4C 0x6F          DC8 "Long line?\015\012"
   \              0x6E 0x67    
   \              0x20 0x6C    
   \              0x69 0x6E    
   \              0x65 0x3F    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "confirmation_">`:
   \   00000000   0x63 0x6F          DC8 "confirmation_"
   \              0x6E 0x66    
   \              0x69 0x72    
   \              0x6D 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x5F 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 2
   \   00000000   0x3A 0x00          DC8 ":"

   \                                 In section .rodata, align 4
   \                     `?<Constant "unknown [%s]">`:
   \   00000000   0x75 0x6E          DC8 "unknown [%s]"
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x5B 0x25    
   \              0x73 0x5D    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   addConsoleAction
        16   -> doAddAction(char const *, action_type_e, Void, void *)
      16   addConsoleActionF
        16   -> doAddAction(char const *, action_type_e, Void, void *)
      16   addConsoleActionFF
        16   -> doAddAction(char const *, action_type_e, Void, void *)
      16   addConsoleActionFFP
        16   -> doAddAction(char const *, action_type_e, Void, void *)
      16   addConsoleActionI
        16   -> doAddAction(char const *, action_type_e, Void, void *)
      16   addConsoleActionII
        16   -> doAddAction(char const *, action_type_e, Void, void *)
      16   addConsoleActionIIP
        16   -> doAddAction(char const *, action_type_e, Void, void *)
      16   addConsoleActionIP
        16   -> doAddAction(char const *, action_type_e, Void, void *)
      16   addConsoleActionP
        16   -> doAddAction(char const *, action_type_e, Void, void *)
      16   addConsoleActionS
        16   -> doAddAction(char const *, action_type_e, Void, void *)
      16   addConsoleActionSP
        16   -> doAddAction(char const *, action_type_e, Void, void *)
      16   addConsoleActionSS
        16   -> doAddAction(char const *, action_type_e, Void, void *)
      16   addConsoleActionSSP
        16   -> doAddAction(char const *, action_type_e, Void, void *)
      16   addConsoleActionSSS
        16   -> doAddAction(char const *, action_type_e, Void, void *)
      16   addConsoleActionSSSSS
        16   -> doAddAction(char const *, action_type_e, Void, void *)
      24   doAddAction(char const *, action_type_e, Void, void *)
        24   -> firmwareError
       8   echo(int)
         8   -> print
       8   findEndOfToken
         8   -> indexOf
       0   getParameterCount(action_type_e)
      56   handleActionWithParameter(TokenCallback *, char *)
        56   -- Indirect call
        56   -> absI
        56   -> atoff
        56   -> atoi
        56   -> findEndOfToken
        56   -> print
        56   -> scheduleMsg
      16   handleConsoleLine
        16   -> handleConsoleLineInternal(char const *, int)
        16   -> helpCommand
        16   -> print
        16   -> scheduleMsg
        16   -> sendOutConfirmation(char const *, int)
        16   -> strcat
        16   -> strcpy
        16   -> strlen
        16   -> validateSecureLine
      32   handleConsoleLineInternal(char const *, int)
        32   -- Indirect call
        32   -> handleActionWithParameter(TokenCallback *, char *)
        32   -> strEqual
        32   -> strncpy
        32   -> tokenLength
      16   helpCommand
        16   -> getParameterCount(action_type_e)
        16   -> isBoardTestMode
        16   -> printBoardTestState
        16   -> scheduleMsg
       8   initConsoleLogic
         8   -> addConsoleAction
         8   -> addConsoleActionI
       0   resetConsoleActions
      16   sendOutConfirmation(char const *, int)
        16   -> scheduleMsg
       0   tokenLength
       8   unquote
         8   -> strlen
      24   validateSecureLine
        24   -> atoi
        24   -> print
        24   -> strlen
        24   -> strncmp


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?<Constant "  %s: %d parameters">
      24  ?<Constant "%d actions available">
       8  ?<Constant "%s%d">
       2  ?<Constant ":">
      28  ?<Constant "Divider not found [%s]\r\n">
      52  ?<Constant "Error detected: expec...">
      92  ?<Constant "For more visit http:/...">
      16  ?<Constant "Long line?\r\n">
      28  ?<Constant "Too many console actions">
      16  ?<Constant "confirmation_">
       8  ?<Constant "echo">
      16  ?<Constant "got value: %d\r\n">
       8  ?<Constant "help">
      24  ?<Constant "invalid integer [%s]\r\n">
      20  ?<Constant "not an integer [%s]">
       8  ?<Constant "sec!">
      16  ?<Constant "unknown [%s]">
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_12
       4  ??DataTable9_13
       4  ??DataTable9_14
       4  ??DataTable9_15
       4  ??DataTable9_16
       4  ??DataTable9_17
       4  ??DataTable9_18
       4  ??DataTable9_19
       4  ??DataTable9_2
       4  ??DataTable9_20
       4  ??DataTable9_21
       4  ??DataTable9_22
       4  ??DataTable9_23
       4  ??DataTable9_24
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
      20  addConsoleAction
      20  addConsoleActionF
      20  addConsoleActionFF
      22  addConsoleActionFFP
      20  addConsoleActionI
      20  addConsoleActionII
      22  addConsoleActionIIP
      22  addConsoleActionIP
      22  addConsoleActionP
      20  addConsoleActionS
      22  addConsoleActionSP
      20  addConsoleActionSS
      22  addConsoleActionSSP
      20  addConsoleActionSSS
      20  addConsoleActionSSSSS
     200  confirmation
       4  consoleActionCount
    3136  consoleActions
      68  doAddAction(char const *, action_type_e, Void, void *)
      16  echo(int)
      46  findEndOfToken
      70  getParameterCount(action_type_e)
     660  handleActionWithParameter(TokenCallback *, char *)
     200  handleBuffer
      98  handleConsoleLine
     186  handleConsoleLineInternal(char const *, int)
     100  helpCommand
      26  initConsoleLogic
       4  logging
      10  resetConsoleActions
      22  sendOutConfirmation(char const *, int)
      26  tokenLength
      44  unquote
     106  validateSecureLine

 
 3 544 bytes in section .bss
   386 bytes in section .rodata
 1 890 bytes in section .text
 
 1 890 bytes of CODE  memory
   386 bytes of CONST memory
 3 544 bytes of DATA  memory

Errors: none
Warnings: none
