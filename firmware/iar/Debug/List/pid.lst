###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:57 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\math #
#                       \pid.cpp                                              #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\math #
#                       \pid.cpp -lCN F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\Debug\List\ -lA F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\Debug\List\ -o F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\Debug\Obj\ --no_cse --no_unroll --no_inline  #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\p #
#                       id.lst                                                #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\pi #
#                       d.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\math\pid.cpp
      1          /**
      2           * @file pid.cpp
      3           *
      4           * http://en.wikipedia.org/wiki/PID_controller
      5           *
      6           * @date Sep 16, 2014
      7           * @author Andrey Belomutskiy, (c) 2012-2015
      8           */
      9          
     10          #include "pid.h"
     11          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __vfp Pid::subobject Pid(float, float, float, float, float)
   \                     _ZN3PidC2Efffff:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN3PidC1Efffff
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     12          Pid::Pid(float pFactor, float iFactor, float dFactor, float minResult, float maxResult) {
     13          	this->pFactor = pFactor;
   \                     _ZN3PidC1Efffff:
   \   00000000   0xED80 0x0A00      VSTR     S0,[R0, #0]
     14          	this->iFactor = iFactor;
   \   00000004   0xEDC0 0x0A01      VSTR     S1,[R0, #+4]
     15          	this->dFactor = dFactor;
   \   00000008   0xED80 0x1A02      VSTR     S2,[R0, #+8]
     16          	this->minResult = minResult;
   \   0000000C   0xEDC0 0x1A03      VSTR     S3,[R0, #+12]
     17          	this->maxResult = maxResult;
   \   00000010   0xED80 0x2A04      VSTR     S4,[R0, #+16]
     18          
     19          	iTerm = 0;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x6141             STR      R1,[R0, #+20]
     20          	prevError = 0;
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x6181             STR      R1,[R0, #+24]
     21          }
   \   0000001C   0x4770             BX       LR               ;; return
     22          

   \                                 In section .text, align 2, keep-with-next
     23          float Pid::getValue(float target, float input, float dTime) {
   \                     _ZN3Pid8getValueEfff:
   \   00000000   0xEEF0 0x1A40      VMOV.F32 S3,S0
     24          	float error = target - input;
   \   00000004   0xEE31 0x2AE0      VSUB.F32 S4,S3,S1
     25          
     26          	float pTerm = pFactor * error;
   \   00000008   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000000C   0xEE60 0x2A02      VMUL.F32 S5,S0,S4
     27          	iTerm += iFactor * dTime * error;
   \   00000010   0xED90 0x0A01      VLDR     S0,[R0, #+4]
   \   00000014   0xEE20 0x0A01      VMUL.F32 S0,S0,S2
   \   00000018   0xED90 0x3A05      VLDR     S6,[R0, #+20]
   \   0000001C   0xEE00 0x3A02      VMLA.F32 S6,S0,S4
   \   00000020   0xED80 0x3A05      VSTR     S6,[R0, #+20]
     28          	float dTerm = dFactor / dTime * (error - prevError);
   \   00000024   0xED90 0x0A02      VLDR     S0,[R0, #+8]
   \   00000028   0xEE80 0x0A01      VDIV.F32 S0,S0,S2
   \   0000002C   0xED90 0x3A06      VLDR     S6,[R0, #+24]
   \   00000030   0xEE32 0x3A43      VSUB.F32 S6,S4,S6
   \   00000034   0xEE20 0x3A03      VMUL.F32 S6,S0,S6
     29          
     30          	prevError = error;
   \   00000038   0xED80 0x2A06      VSTR     S4,[R0, #+24]
     31          
     32          	float result = pTerm + iTerm + dTerm;
   \   0000003C   0xED90 0x0A05      VLDR     S0,[R0, #+20]
   \   00000040   0xEE32 0x0A80      VADD.F32 S0,S5,S0
   \   00000044   0xEE30 0x0A03      VADD.F32 S0,S0,S6
     33          	if (result > maxResult) {
   \   00000048   0xEDD0 0x3A04      VLDR     S7,[R0, #+16]
   \   0000004C   0xEEF4 0x3A40      VCMP.F32 S7,S0
   \   00000050   0xEEF1 0xFA10      FMSTAT   
   \   00000054   0xD504             BPL.N    ??getValue_0
     34          //		iTerm -= result - maxResult;
     35          		result = maxResult;
   \   00000056   0xEDD0 0x3A04      VLDR     S7,[R0, #+16]
   \   0000005A   0xEEB0 0x0A63      VMOV.F32 S0,S7
   \   0000005E   0xE00A             B.N      ??getValue_1
     36          	} else if (result < minResult) {
   \                     ??getValue_0:
   \   00000060   0xEDD0 0x3A03      VLDR     S7,[R0, #+12]
   \   00000064   0xEEB4 0x0A63      VCMP.F32 S0,S7
   \   00000068   0xEEF1 0xFA10      FMSTAT   
   \   0000006C   0xD503             BPL.N    ??getValue_1
     37          //		iTerm += minResult - result;
     38          		result = minResult;
   \   0000006E   0xEDD0 0x3A03      VLDR     S7,[R0, #+12]
   \   00000072   0xEEB0 0x0A63      VMOV.F32 S0,S7
     39          	}
     40          	return result;
   \                     ??getValue_1:
   \   00000076   0x4770             BX       LR               ;; return
     41          }
     42          

   \                                 In section .text, align 2, keep-with-next
     43          void Pid::updateFactors(float pFactor, float iFactor, float dFactor) {
   \                     _ZN3Pid13updateFactorsEfff:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B04      VPUSH    {D8-D9}
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   0000000C   0xEEF0 0x8A60      VMOV.F32 S17,S1
   \   00000010   0xEEB0 0x9A41      VMOV.F32 S18,S2
     44          	this->pFactor = pFactor;
   \   00000014   0xED84 0x8A00      VSTR     S16,[R4, #0]
     45          	this->iFactor = iFactor;
   \   00000018   0xEDC4 0x8A01      VSTR     S17,[R4, #+4]
     46          	this->dFactor = dFactor;
   \   0000001C   0xED84 0x9A02      VSTR     S18,[R4, #+8]
     47          	reset();
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       _ZN3Pid5resetEv
     48          }
   \   00000026   0xECBD 0x8B04      VPOP     {D8-D9}
   \   0000002A   0xBD10             POP      {R4,PC}          ;; return
     49          

   \                                 In section .text, align 2, keep-with-next
     50          void Pid::reset(void) {
     51          	iTerm = 0;
   \                     _ZN3Pid5resetEv:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x6141             STR      R1,[R0, #+20]
     52          	prevError = 0;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6181             STR      R1,[R0, #+24]
     53          }
   \   00000008   0x4770             BX       LR               ;; return
     54          

   \                                 In section .text, align 2, keep-with-next
     55          float Pid::getP(void) {
     56          	return pFactor;
   \                     _ZN3Pid4getPEv:
   \   00000000   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000004   0x4770             BX       LR               ;; return
     57          }
     58          

   \                                 In section .text, align 2, keep-with-next
     59          float Pid::getI(void) {
     60          	return iFactor;
   \                     _ZN3Pid4getIEv:
   \   00000000   0xED90 0x0A01      VLDR     S0,[R0, #+4]
   \   00000004   0x4770             BX       LR               ;; return
     61          }
     62          

   \                                 In section .text, align 2, keep-with-next
     63          float Pid::getIntegration(void) {
     64          	return iTerm;
   \                     _ZN3Pid14getIntegrationEv:
   \   00000000   0xED90 0x0A05      VLDR     S0,[R0, #+20]
   \   00000004   0x4770             BX       LR               ;; return
     65          }
     66          

   \                                 In section .text, align 2, keep-with-next
     67          float Pid::getD(void) {
     68          	return dFactor;
   \                     _ZN3Pid4getDEv:
   \   00000000   0xED90 0x0A02      VLDR     S0,[R0, #+8]
   \   00000004   0x4770             BX       LR               ;; return
     69          }
     70          
     71          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Pid::Pid(float, float, float, float, float)
       0   Pid::getD()
       0   Pid::getI()
       0   Pid::getIntegration()
       0   Pid::getP()
       0   Pid::getValue(float, float, float)
       0   Pid::reset()
       8   Pid::subobject Pid(float, float, float, float, float)
         8   -> Pid::Pid(float, float, float, float, float)
      24   Pid::updateFactors(float, float, float)
        24   -> Pid::reset()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      30  Pid::Pid(float, float, float, float, float)
       6  Pid::getD()
       6  Pid::getI()
       6  Pid::getIntegration()
       6  Pid::getP()
     120  Pid::getValue(float, float, float)
      10  Pid::reset()
      12  Pid::subobject Pid(float, float, float, float, float)
      44  Pid::updateFactors(float, float, float)

 
 240 bytes in section .text
 
 240 bytes of CODE memory

Errors: none
Warnings: none
