###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:26 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\s #
#                       rc\rtc.c                                              #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\s #
#                       rc\rtc.c -lCN F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\Debug\List\ -lA F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\Debug\List\ -o F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\Debug\Obj\ --no_cse --no_unroll --no_inline  #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\ -On #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\r #
#                       tc.lst                                                #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\rt #
#                       c.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\src\rtc.c
      1          /*
      2              ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
      3                           2011,2012,2013 Giovanni Di Sirio.
      4          
      5              This file is part of ChibiOS/RT.
      6          
      7              ChibiOS/RT is free software; you can redistribute it and/or modify
      8              it under the terms of the GNU General Public License as published by
      9              the Free Software Foundation; either version 3 of the License, or
     10              (at your option) any later version.
     11          
     12              ChibiOS/RT is distributed in the hope that it will be useful,
     13              but WITHOUT ANY WARRANTY; without even the implied warranty of
     14              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     15              GNU General Public License for more details.
     16          
     17              You should have received a copy of the GNU General Public License
     18              along with this program.  If not, see <http://www.gnu.org/licenses/>.
     19          
     20                                                ---
     21          
     22              A special exception to the GPL can be applied should you wish to distribute
     23              a combined work that includes ChibiOS/RT, without being obliged to provide
     24              the source code for any proprietary components. See the file exception.txt
     25              for full details of how and when the exception can be applied.
     26          */
     27          /*
     28             Concepts and parts of this file have been contributed by Uladzimir Pylinsky
     29             aka barthess.
     30           */
     31          
     32          /**
     33           * @file    rtc.c
     34           * @brief   RTC Driver code.
     35           *
     36           * @addtogroup RTC
     37           * @{
     38           */
     39          
     40          #include "ch.h"
     41          #include "hal.h"
     42          
     43          #if HAL_USE_RTC || defined(__DOXYGEN__)
     44          
     45          /*===========================================================================*/
     46          /* Driver local definitions.                                                 */
     47          /*===========================================================================*/
     48          
     49          /*===========================================================================*/
     50          /* Driver exported variables.                                                */
     51          /*===========================================================================*/
     52          
     53          /*===========================================================================*/
     54          /* Driver local variables and types.                                         */
     55          /*===========================================================================*/
     56          
     57          /*===========================================================================*/
     58          /* Driver local functions.                                                   */
     59          /*===========================================================================*/
     60          
     61          /*===========================================================================*/
     62          /* Driver exported functions.                                                */
     63          /*===========================================================================*/
     64          
     65          /**
     66           * @brief   RTC Driver initialization.
     67           * @note    This function is implicitly invoked by @p halInit(), there is
     68           *          no need to explicitly initialize the driver.
     69           *
     70           * @init
     71           */

   \                                 In section .text, align 2, keep-with-next
     72          void rtcInit(void) {
   \                     rtcInit:
   \   00000000   0xB580             PUSH     {R7,LR}
     73          
     74            rtc_lld_init();
   \   00000002   0x.... 0x....      BL       rtc_lld_init
     75          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     76          
     77          /**
     78           * @brief   Set current time.
     79           *
     80           * @param[in] rtcp      pointer to RTC driver structure
     81           * @param[in] timespec  pointer to a @p RTCTime structure
     82           *
     83           * @api
     84           */

   \                                 In section .text, align 2, keep-with-next
     85          void rtcSetTime(RTCDriver *rtcp, const RTCTime *timespec) {
   \                     rtcSetTime:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     86          
     87            chDbgCheck((rtcp != NULL) && (timespec != NULL), "rtcSetTime");
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD001             BEQ.N    ??rtcSetTime_0
   \   0000000A   0x2D00             CMP      R5,#+0
   \   0000000C   0xD104             BNE.N    ??rtcSetTime_1
   \                     ??rtcSetTime_0:
   \   0000000E   0x2257             MOVS     R2,#+87
   \   00000010   0x....             LDR.N    R1,??DataTable4
   \   00000012   0x....             LDR.N    R0,??DataTable4_1
   \   00000014   0x.... 0x....      BL       chDbgPanic3
     88          
     89            chSysLock();
   \                     ??rtcSetTime_1:
   \   00000018   0x2020             MOVS     R0,#+32
   \   0000001A   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000001E   0x.... 0x....      BL       dbg_check_lock
     90            rtcSetTimeI(rtcp, timespec);
   \   00000022   0x0029             MOVS     R1,R5
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       rtc_lld_set_time
     91            chSysUnlock();
   \   0000002A   0x.... 0x....      BL       dbg_check_unlock
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xF380 0x8811      MSR      BASEPRI,R0
     92          }
   \   00000034   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     93          
     94          /**
     95           * @brief   Get current time.
     96           *
     97           * @param[in] rtcp      pointer to RTC driver structure
     98           * @param[out] timespec pointer to a @p RTCTime structure
     99           *
    100           * @api
    101           */

   \                                 In section .text, align 2, keep-with-next
    102          void rtcGetTime(RTCDriver *rtcp, RTCTime *timespec) {
   \                     rtcGetTime:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    103          
    104            chDbgCheck((rtcp != NULL) && (timespec != NULL), "rtcGetTime");
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD001             BEQ.N    ??rtcGetTime_0
   \   0000000A   0x2D00             CMP      R5,#+0
   \   0000000C   0xD104             BNE.N    ??rtcGetTime_1
   \                     ??rtcGetTime_0:
   \   0000000E   0x2268             MOVS     R2,#+104
   \   00000010   0x....             LDR.N    R1,??DataTable4
   \   00000012   0x....             LDR.N    R0,??DataTable4_2
   \   00000014   0x.... 0x....      BL       chDbgPanic3
    105          
    106            chSysLock();
   \                     ??rtcGetTime_1:
   \   00000018   0x2020             MOVS     R0,#+32
   \   0000001A   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000001E   0x.... 0x....      BL       dbg_check_lock
    107            rtcGetTimeI(rtcp, timespec);
   \   00000022   0x0029             MOVS     R1,R5
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       rtc_lld_get_time
    108            chSysUnlock();
   \   0000002A   0x.... 0x....      BL       dbg_check_unlock
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xF380 0x8811      MSR      BASEPRI,R0
    109          }
   \   00000034   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    110          
    111          #if (RTC_ALARMS > 0) || defined(__DOXYGEN__)
    112          /**
    113           * @brief   Set alarm time.
    114           *
    115           * @param[in] rtcp      pointer to RTC driver structure
    116           * @param[in] alarm     alarm identifier
    117           * @param[in] alarmspec pointer to a @p RTCAlarm structure or @p NULL
    118           *
    119           * @api
    120           */

   \                                 In section .text, align 2, keep-with-next
    121          void rtcSetAlarm(RTCDriver *rtcp,
    122                           rtcalarm_t alarm,
    123                           const RTCAlarm *alarmspec) {
   \                     rtcSetAlarm:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    124          
    125            chDbgCheck((rtcp != NULL) && (alarm < RTC_ALARMS), "rtcSetAlarm");
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD001             BEQ.N    ??rtcSetAlarm_0
   \   0000000C   0x2D02             CMP      R5,#+2
   \   0000000E   0xD304             BCC.N    ??rtcSetAlarm_1
   \                     ??rtcSetAlarm_0:
   \   00000010   0x227D             MOVS     R2,#+125
   \   00000012   0x....             LDR.N    R1,??DataTable4
   \   00000014   0x....             LDR.N    R0,??DataTable4_3
   \   00000016   0x.... 0x....      BL       chDbgPanic3
    126          
    127            chSysLock();
   \                     ??rtcSetAlarm_1:
   \   0000001A   0x2020             MOVS     R0,#+32
   \   0000001C   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000020   0x.... 0x....      BL       dbg_check_lock
    128            rtcSetAlarmI(rtcp, alarm, alarmspec);
   \   00000024   0x0032             MOVS     R2,R6
   \   00000026   0x0029             MOVS     R1,R5
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x.... 0x....      BL       rtc_lld_set_alarm
    129            chSysUnlock();
   \   0000002E   0x.... 0x....      BL       dbg_check_unlock
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xF380 0x8811      MSR      BASEPRI,R0
    130          }
   \   00000038   0xBD70             POP      {R4-R6,PC}       ;; return
    131          
    132          /**
    133           * @brief   Get current alarm.
    134           * @note    If an alarm has not been set then the returned alarm specification
    135           *          is not meaningful.
    136           *
    137           * @param[in] rtcp      pointer to RTC driver structure
    138           * @param[in] alarm     alarm identifier
    139           * @param[out] alarmspec pointer to a @p RTCAlarm structure
    140           *
    141           * @api
    142           */

   \                                 In section .text, align 2, keep-with-next
    143          void rtcGetAlarm(RTCDriver *rtcp,
    144                           rtcalarm_t alarm,
    145                           RTCAlarm *alarmspec) {
   \                     rtcGetAlarm:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    146          
    147            chDbgCheck((rtcp != NULL) && (alarm < RTC_ALARMS) && (alarmspec != NULL),
    148                       "rtcGetAlarm");
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD003             BEQ.N    ??rtcGetAlarm_0
   \   0000000C   0x2D02             CMP      R5,#+2
   \   0000000E   0xD201             BCS.N    ??rtcGetAlarm_0
   \   00000010   0x2E00             CMP      R6,#+0
   \   00000012   0xD104             BNE.N    ??rtcGetAlarm_1
   \                     ??rtcGetAlarm_0:
   \   00000014   0x2294             MOVS     R2,#+148
   \   00000016   0x....             LDR.N    R1,??DataTable4
   \   00000018   0x....             LDR.N    R0,??DataTable4_4
   \   0000001A   0x.... 0x....      BL       chDbgPanic3
    149          
    150            chSysLock();
   \                     ??rtcGetAlarm_1:
   \   0000001E   0x2020             MOVS     R0,#+32
   \   00000020   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000024   0x.... 0x....      BL       dbg_check_lock
    151            rtcGetAlarmI(rtcp, alarm, alarmspec);
   \   00000028   0x0032             MOVS     R2,R6
   \   0000002A   0x0029             MOVS     R1,R5
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x.... 0x....      BL       rtc_lld_get_alarm
    152            chSysUnlock();
   \   00000032   0x.... 0x....      BL       dbg_check_unlock
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xF380 0x8811      MSR      BASEPRI,R0
    153          }
   \   0000003C   0xBD70             POP      {R4-R6,PC}       ;; return
    154          #endif /* RTC_ALARMS > 0 */
    155          
    156          #if RTC_SUPPORTS_CALLBACKS || defined(__DOXYGEN__)
    157          /**
    158           * @brief   Enables or disables RTC callbacks.
    159           * @details This function enables or disables the callback, use a @p NULL
    160           *          pointer in order to disable it.
    161           *
    162           * @param[in] rtcp      pointer to RTC driver structure
    163           * @param[in] callback  callback function pointer or @p NULL
    164           *
    165           * @api
    166           */
    167          void rtcSetCallback(RTCDriver *rtcp, rtccb_t callback) {
    168          
    169            chDbgCheck((rtcp != NULL), "rtcSetCallback");
    170          
    171            chSysLock();
    172            rtcSetCallbackI(rtcp, callback);
    173            chSysUnlock();
    174          }
    175          #endif /* RTC_SUPPORTS_CALLBACKS */
    176          
    177          /**
    178           * @brief   Get current time in format suitable for usage in FatFS.
    179           *
    180           * @param[in] rtcp      pointer to RTC driver structure
    181           * @return              FAT time value.
    182           *
    183           * @api
    184           */

   \                                 In section .text, align 2, keep-with-next
    185          uint32_t rtcGetTimeFat(RTCDriver *rtcp) {
   \                     rtcGetTimeFat:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    186          
    187            chDbgCheck((rtcp != NULL), "rtcSetTime");
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD104             BNE.N    ??rtcGetTimeFat_0
   \   00000008   0x22BB             MOVS     R2,#+187
   \   0000000A   0x....             LDR.N    R1,??DataTable4
   \   0000000C   0x....             LDR.N    R0,??DataTable4_1
   \   0000000E   0x.... 0x....      BL       chDbgPanic3
    188            return rtc_lld_get_time_fat(rtcp);
   \                     ??rtcGetTimeFat_0:
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       rtc_lld_get_time_fat
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    189          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     `?<Constant "F:\\\\stuff\\\\rusefi_sourc...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     `?<Constant "\\"rtcSetTime\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     `?<Constant "\\"rtcGetTime\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     `?<Constant "\\"rtcSetAlarm\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     `?<Constant "\\"rtcGetAlarm\\"()">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"rtcSetTime\\"()">`:
   \   00000000   0x22 0x72          DC8 "\"rtcSetTime\"()"
   \              0x74 0x63    
   \              0x53 0x65    
   \              0x74 0x54    
   \              0x69 0x6D    
   \              0x65 0x22    
   \              0x28 0x29    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "F:\\\\stuff\\\\rusefi_sourc...">`:
   \   00000000   0x46 0x3A          DC8 46H, 3AH, 5CH, 73H, 74H, 75H, 66H, 66H
   \              0x5C 0x73    
   \              0x74 0x75    
   \              0x66 0x66    
   \   00000008   0x5C 0x72          DC8 5CH, 72H, 75H, 73H, 65H, 66H, 69H, 5FH
   \              0x75 0x73    
   \              0x65 0x66    
   \              0x69 0x5F    
   \   00000010   0x73 0x6F          DC8 73H, 6FH, 75H, 72H, 63H, 65H, 66H, 6FH
   \              0x75 0x72    
   \              0x63 0x65    
   \              0x66 0x6F    
   \   00000018   0x72 0x67          DC8 72H, 67H, 65H, 5CH, 66H, 69H, 72H, 6DH
   \              0x65 0x5C    
   \              0x66 0x69    
   \              0x72 0x6D    
   \   00000020   0x77 0x61          DC8 77H, 61H, 72H, 65H, 5CH, 63H, 68H, 69H
   \              0x72 0x65    
   \              0x5C 0x63    
   \              0x68 0x69    
   \   00000028   0x62 0x69          DC8 62H, 69H, 6FH, 73H, 5CH, 6FH, 73H, 5CH
   \              0x6F 0x73    
   \              0x5C 0x6F    
   \              0x73 0x5C    
   \   00000030   0x68 0x61          DC8 68H, 61H, 6CH, 5CH, 73H, 72H, 63H, 5CH
   \              0x6C 0x5C    
   \              0x73 0x72    
   \              0x63 0x5C    
   \   00000038   0x72 0x74          DC8 72H, 74H, 63H, 2EH, 63H, 0
   \              0x63 0x2E    
   \              0x63 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"rtcGetTime\\"()">`:
   \   00000000   0x22 0x72          DC8 "\"rtcGetTime\"()"
   \              0x74 0x63    
   \              0x47 0x65    
   \              0x74 0x54    
   \              0x69 0x6D    
   \              0x65 0x22    
   \              0x28 0x29    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"rtcSetAlarm\\"()">`:
   \   00000000   0x22 0x72          DC8 "\"rtcSetAlarm\"()"
   \              0x74 0x63    
   \              0x53 0x65    
   \              0x74 0x41    
   \              0x6C 0x61    
   \              0x72 0x6D    
   \              0x22 0x28    
   \              0x29 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"rtcGetAlarm\\"()">`:
   \   00000000   0x22 0x72          DC8 "\"rtcGetAlarm\"()"
   \              0x74 0x63    
   \              0x47 0x65    
   \              0x74 0x41    
   \              0x6C 0x61    
   \              0x72 0x6D    
   \              0x22 0x28    
   \              0x29 0x00    
    190          
    191          #endif /* HAL_USE_RTC */
    192          
    193          /** @} */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   rtcGetAlarm
        16   -> chDbgPanic3
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
        16   -> rtc_lld_get_alarm
      16   rtcGetTime
        16   -> chDbgPanic3
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
        16   -> rtc_lld_get_time
       8   rtcGetTimeFat
         8   -> chDbgPanic3
         8   -> rtc_lld_get_time_fat
       8   rtcInit
         8   -> rtc_lld_init
      16   rtcSetAlarm
        16   -> chDbgPanic3
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
        16   -> rtc_lld_set_alarm
      16   rtcSetTime
        16   -> chDbgPanic3
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
        16   -> rtc_lld_set_time


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      64  ?<Constant "F:\\stuff\\rusefi_sourc...">
      16  ?<Constant "\"rtcGetAlarm\"()">
      16  ?<Constant "\"rtcGetTime\"()">
      16  ?<Constant "\"rtcSetAlarm\"()">
      16  ?<Constant "\"rtcSetTime\"()">
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
      62  rtcGetAlarm
      54  rtcGetTime
      26  rtcGetTimeFat
       8  rtcInit
      58  rtcSetAlarm
      54  rtcSetTime

 
 128 bytes in section .rodata
 282 bytes in section .text
 
 282 bytes of CODE  memory
 128 bytes of CONST memory

Errors: none
Warnings: none
