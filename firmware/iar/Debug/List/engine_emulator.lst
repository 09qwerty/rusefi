###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:46 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\development\engi #
#                       ne_emulator.cpp                                       #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\development\engi #
#                       ne_emulator.cpp -lCN F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\Debug\List\ -lA F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\Debug\List\ -o                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\   #
#                       --no_cse --no_unroll --no_inline --no_code_motion     #
#                       --no_tbaa --no_clustering --no_scheduling --debug     #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\e #
#                       ngine_emulator.lst                                    #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\en #
#                       gine_emulator.o                                       #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\development\engine_emulator.cpp
      1          /**
      2           * @file	engine_emulator.cpp
      3           * @brief	Entry point for all the emulation and analysis code
      4           *
      5           * @date Mar 15, 2013
      6           * @author Andrey Belomutskiy, (c) 2012-2015
      7           */
      8          
      9          #include "main.h"
     10          #include "engine_emulator.h"
     11          
     12          #include "advance_map.h"
     13          #include "fuel_math.h"
     14          
     15          #include "status_loop.h"
     16          #include "wave_analyzer.h"
     17          #include "pin_repository.h"
     18          #include "pwm_generator_logic.h"
     19          
     20          #include "poten.h"
     21          #include "trigger_emulator.h"
     22          
     23          extern bool hasFirmwareErrorFlag;
     24          
     25          static THD_WORKING_AREA(eeThreadStack, UTILITY_THREAD_STACK_SIZE);
     26          
     27          #define DIAG_PORT GPIOD
     28          #define DIAG_PIN 0
     29          

   \                                 In section .text, align 2, keep-with-next
     30          void setDiag(int value) {
   \                     _Z7setDiagi:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     31          	print("Setting diag: %d\r\n", value);
   \   00000004   0x0021             MOVS     R1,R4
   \   00000006   0x....             LDR.N    R0,??DataTable3
   \   00000008   0x.... 0x....      BL       print
     32          	palWritePad(DIAG_PORT, DIAG_PIN, value);
   \   0000000C   0x43E0             MVNS     R0,R4
   \   0000000E   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000012   0xF014 0x0101      ANDS     R1,R4,#0x1
   \   00000016   0xEA51 0x4000      ORRS     R0,R1,R0, LSL #+16
   \   0000001A   0x....             LDR.N    R1,??DataTable3_1  ;; 0x40020c18
   \   0000001C   0x6008             STR      R0,[R1, #+0]
     33          }
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
     34          
     35          #define PERIOD 3000
     36          

   \                                 In section .text, align 2, keep-with-next
     37          void emulate(Engine *engine) {
   \                     _Z7emulateP6Engine:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     38          	print("Emulating...\r\n");
   \   00000004   0x....             LDR.N    R0,??DataTable3_2
   \   00000006   0x.... 0x....      BL       print
     39          	setDiag(1);
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       _Z7setDiagi
     40          	chThdSleep(1);
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x.... 0x....      BL       chThdSleep
     41          	setFullLog(1);
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       _Z10setFullLogi
     42          
     43          	for (int i = 400; i <= 1300; i++) {
   \   0000001C   0xF44F 0x75C8      MOV      R5,#+400
   \                     ??emulate_0:
   \   00000020   0xF240 0x5015      MOVW     R0,#+1301
   \   00000024   0x4285             CMP      R5,R0
   \   00000026   0xDA10             BGE.N    ??emulate_1
     44          		if (i % 50 != 0)
   \   00000028   0x2032             MOVS     R0,#+50
   \   0000002A   0xFB95 0xF1F0      SDIV     R1,R5,R0
   \   0000002E   0xFB00 0x5011      MLS      R0,R0,R1,R5
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD107             BNE.N    ??emulate_2
     45          			continue;
     46          		setTriggerEmulatorRPM(i, engine);
   \                     ??emulate_3:
   \   00000036   0x0021             MOVS     R1,R4
   \   00000038   0x0028             MOVS     R0,R5
   \   0000003A   0x.... 0x....      BL       _Z21setTriggerEmulatorRPMiP6Engine
     47          		chThdSleepMilliseconds(PERIOD);
   \   0000003E   0xF640 0x30B8      MOVW     R0,#+3000
   \   00000042   0x.... 0x....      BL       chThdSleep
     48          	}
   \                     ??emulate_2:
   \   00000046   0x1C6D             ADDS     R5,R5,#+1
   \   00000048   0xE7EA             B.N      ??emulate_0
     49          
     50          	setTriggerEmulatorRPM(0, engine);
   \                     ??emulate_1:
   \   0000004A   0x0021             MOVS     R1,R4
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x.... 0x....      BL       _Z21setTriggerEmulatorRPMiP6Engine
     51          
     52          	setFullLog(0);
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x.... 0x....      BL       _Z10setFullLogi
     53          	setDiag(0);
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x.... 0x....      BL       _Z7setDiagi
     54          	chThdSleep(1);
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0x.... 0x....      BL       chThdSleep
     55          	print("Emulation DONE!\r\n");
   \   00000064   0x....             LDR.N    R0,??DataTable3_3
   \   00000066   0x.... 0x....      BL       print
     56          }
   \   0000006A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     57          

   \                                 In section .bss, align 4
     58          static int flag = FALSE;
   \                     flag:
   \   00000000                      DS8 4
     59          
     60          static msg_t eeThread(Engine *engine) {
     61          	chRegSetThreadName("Engine");
     62          
     63          	while (TRUE) {
     64          		while (!flag)
     65          			chThdSleepMilliseconds(200);
     66          		flag = FALSE;
     67          		emulate(engine);
     68          	}
     69          #if defined __GNUC__
     70          	return (msg_t)NULL;
     71          #endif
     72          }
     73          

   \                                 In section .text, align 2, keep-with-next
     74          void startEmulator(void) {
     75          	flag = TRUE;
   \                     _Z13startEmulatorv:
   \   00000000   0x....             LDR.N    R0,??DataTable3_4
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x6001             STR      R1,[R0, #+0]
     76          }
   \   00000006   0x4770             BX       LR               ;; return
     77          
     78          //static void printAdvance(int rpm, int maf100) {
     79          //	float advance = getAdvance(rpm, maf100 / 100.0);
     80          //	print("advance for %d rpm %d maf100: %f\r\n", rpm, maf100, advance);
     81          //}
     82          
     83          static void initECUstimulator(Engine *engine) {
     84          	mySetPadMode("TEN", DIAG_PORT, DIAG_PIN,
     85          	PAL_MODE_OUTPUT_PUSHPULL);
     86          
     87          	addConsoleActionI("diag", setDiag);
     88          	addConsoleAction("emu", startEmulator);
     89          //	addConsoleActionII("ad", printAdvance);
     90          
     91          	setDiag(1);
     92          
     93          	chThdCreateStatic(eeThreadStack, sizeof(eeThreadStack), NORMALPRIO, (tfunc_t) eeThread, engine);
     94          }
     95          

   \                                 In section .text, align 2, keep-with-next
     96          void initEngineEmulator(Logging *sharedLogger, Engine *engine) {
   \                     _Z18initEngineEmulatorP7LoggingP6Engine:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     97          	if (hasFirmwareError())
   \   00000006   0x....             LDR.N    R0,??DataTable3_5
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD109             BNE.N    ??initEngineEmulator_0
     98          		return;
     99          
    100          #if EFI_POTENTIOMETER
    101          	initPotentiometers(sharedLogger, &engine->engineConfiguration->bc);
   \                     ??initEngineEmulator_1:
   \   0000000E   0x6A68             LDR      R0,[R5, #+36]
   \   00000010   0xF510 0x711C      ADDS     R1,R0,#+624
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x.... 0x....      BL       _Z18initPotentiometersP7LoggingP21board_configuration_s
    102          #endif /* EFI_POTENTIOMETER */
    103          
    104          	//initECUstimulator();
    105          	initTriggerEmulator(sharedLogger, engine);
   \   0000001A   0x0029             MOVS     R1,R5
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      BL       _Z19initTriggerEmulatorP7LoggingP6Engine
    106          }
   \                     ??initEngineEmulator_0:
   \   00000022   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     `?<Constant "Setting diag: %d\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x40020C18         DC32     0x40020c18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     `?<Constant "Emulating...\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     `?<Constant "Emulation DONE!\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     hasFirmwareErrorFlag

   \                                 In section .rodata, align 4
   \                     `?<Constant "Setting diag: %d\\r\\n">`:
   \   00000000   0x53 0x65          DC8 "Setting diag: %d\015\012"
   \              0x74 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x64 0x69    
   \              0x61 0x67    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Emulating...\\r\\n">`:
   \   00000000   0x45 0x6D          DC8 "Emulating...\015\012"
   \              0x75 0x6C    
   \              0x61 0x74    
   \              0x69 0x6E    
   \              0x67 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Emulation DONE!\\r\\n">`:
   \   00000000   0x45 0x6D          DC8 "Emulation DONE!\015\012"
   \              0x75 0x6C    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x44 0x4F    
   \              0x4E 0x45    
   \              0x21 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   emulate(Engine *)
        16   -> chThdSleep
        16   -> print
        16   -> setDiag(int)
        16   -> setFullLog(int)
        16   -> setTriggerEmulatorRPM(int, Engine *)
      16   initEngineEmulator(Logging *, Engine *)
        16   -> initPotentiometers(Logging *, board_configuration_s *)
        16   -> initTriggerEmulator(Logging *, Engine *)
       8   setDiag(int)
         8   -> print
       0   startEmulator()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "Emulating...\r\n">
      20  ?<Constant "Emulation DONE!\r\n">
      20  ?<Constant "Setting diag: %d\r\n">
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
     108  emulate(Engine *)
       4  flag
      36  initEngineEmulator(Logging *, Engine *)
      32  setDiag(int)
       8  startEmulator()

 
   4 bytes in section .bss
  56 bytes in section .rodata
 208 bytes in section .text
 
 208 bytes of CODE  memory
  56 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: 2
