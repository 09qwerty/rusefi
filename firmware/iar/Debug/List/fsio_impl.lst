###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:08:48 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\core #
#                       \fsio_impl.cpp                                        #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\core #
#                       \fsio_impl.cpp -lCN F:\stuff\rusefi_sourceforge\firmw #
#                       are\iar\Debug\List\ -lA F:\stuff\rusefi_sourceforge\f #
#                       irmware\iar\Debug\List\ -o                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\   #
#                       --no_cse --no_unroll --no_inline --no_code_motion     #
#                       --no_tbaa --no_clustering --no_scheduling --debug     #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\f #
#                       sio_impl.lst                                          #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\fs #
#                       io_impl.o                                             #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\core\fsio_impl.cpp
      1          /**
      2           * @file fsio_impl.cpp
      3           * @brief FSIO as it's used for GPIO
      4           *
      5           * @date Oct 5, 2014
      6           * @author Andrey Belomutskiy, (c) 2012-2015
      7           */
      8          
      9          #include "main.h"
     10          
     11          #if EFI_FSIO || defined(__DOXYGEN__)
     12          
     13          #include "fsio_impl.h"
     14          #include "allsensors.h"
     15          #include "rpm_calculator.h"
     16          #include "efiGpio.h"
     17          
     18          #define NO_PWM 0
     19          
     20          /**
     21           * Here we define all rusEfi-specific methods
     22           */

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine:
   \   00000000   0xB580             PUSH     {R7,LR}
     23          static LENameOrdinalPair leRpm(LE_METHOD_RPM, "rpm");
   \   00000002   0x....             ADR.N    R2,??DataTable1  ;; "rpm"
   \   00000004   0x2164             MOVS     R1,#+100
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   0000000A   0x.... 0x....      BL       _ZN17LENameOrdinalPairC1E11le_action_ePKc
     24          static LENameOrdinalPair leTps(LE_METHOD_TPS, "tps");
   \   0000000E   0x....             ADR.N    R2,??DataTable1_1  ;; "tps"
   \   00000010   0x216A             MOVS     R1,#+106
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable15_2
   \   00000016   0x.... 0x....      BL       _ZN17LENameOrdinalPairC1E11le_action_ePKc
     25          static LENameOrdinalPair leMaf(LE_METHOD_MAF, "maf");
   \   0000001A   0x....             ADR.N    R2,??DataTable1_2  ;; "maf"
   \   0000001C   0x216B             MOVS     R1,#+107
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000022   0x.... 0x....      BL       _ZN17LENameOrdinalPairC1E11le_action_ePKc
     26          static LENameOrdinalPair leVBatt(LE_METHOD_VBATT, "vbatt");
   \   00000026   0x.... 0x....      LDR.W    R2,??DataTable16_2
   \   0000002A   0x216D             MOVS     R1,#+109
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable16_3
   \   00000030   0x.... 0x....      BL       _ZN17LENameOrdinalPairC1E11le_action_ePKc
     27          static LENameOrdinalPair leFan(LE_METHOD_FAN, "fan");
   \   00000034   0x....             ADR.N    R2,??DataTable2  ;; "fan"
   \   00000036   0x2166             MOVS     R1,#+102
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable16_4
   \   0000003C   0x.... 0x....      BL       _ZN17LENameOrdinalPairC1E11le_action_ePKc
     28          static LENameOrdinalPair leCoolant(LE_METHOD_COOLANT, "coolant");
   \   00000040   0x.... 0x....      LDR.W    R2,??DataTable16_5
   \   00000044   0x2165             MOVS     R1,#+101
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   0000004A   0x.... 0x....      BL       _ZN17LENameOrdinalPairC1E11le_action_ePKc
     29          static LENameOrdinalPair leAcToggle(LE_METHOD_AC_TOGGLE, "ac_on_switch");
   \   0000004E   0x.... 0x....      LDR.W    R2,??DataTable16_7
   \   00000052   0x216E             MOVS     R1,#+110
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable16_8
   \   00000058   0x.... 0x....      BL       _ZN17LENameOrdinalPairC1E11le_action_ePKc
     30          static LENameOrdinalPair leFanOnSetting(LE_METHOD_FAN_ON_SETTING, "fan_on_setting");
   \   0000005C   0x.... 0x....      LDR.W    R2,??DataTable16_9
   \   00000060   0x2168             MOVS     R1,#+104
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable16_10
   \   00000066   0x.... 0x....      BL       _ZN17LENameOrdinalPairC1E11le_action_ePKc
     31          static LENameOrdinalPair leFanOffSetting(LE_METHOD_FAN_OFF_SETTING, "fan_off_setting");
   \   0000006A   0x.... 0x....      LDR.W    R2,??DataTable16_11
   \   0000006E   0x2169             MOVS     R1,#+105
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable16_12
   \   00000074   0x.... 0x....      BL       _ZN17LENameOrdinalPairC1E11le_action_ePKc
     32          static LENameOrdinalPair leTimeSinceBoot(LE_METHOD_TIME_SINCE_BOOT, "time_since_boot");
   \   00000078   0x.... 0x....      LDR.W    R2,??DataTable16_13
   \   0000007C   0x2167             MOVS     R1,#+103
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable16_14
   \   00000082   0x.... 0x....      BL       _ZN17LENameOrdinalPairC1E11le_action_ePKc
     33          static LENameOrdinalPair leFsioSetting(LE_METHOD_FSIO_SETTING, "fsio_setting");
   \   00000086   0x.... 0x....      LDR.W    R2,??DataTable16_15
   \   0000008A   0x216F             MOVS     R1,#+111
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable16_16
   \   00000090   0x.... 0x....      BL       _ZN17LENameOrdinalPairC1E11le_action_ePKc
     34          static LENameOrdinalPair leKnock(LE_METHOD_KNOCK, "knock");
   \   00000094   0x.... 0x....      LDR.W    R2,??DataTable16_17
   \   00000098   0x2170             MOVS     R1,#+112
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable16_18
   \   0000009E   0x.... 0x....      BL       _ZN17LENameOrdinalPairC1E11le_action_ePKc
     35          
     36          #define LE_EVAL_POOL_SIZE 32
     37          
     38          extern engine_pins_s enginePins;
     39          
     40          static LECalculator evalCalc;
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable16_19
   \   000000A6   0x.... 0x....      BL       _ZN12LECalculatorC1Ev
     41          static LEElement evalPoolElements[LE_EVAL_POOL_SIZE];
   \   000000AA   0x2320             MOVS     R3,#+32
   \   000000AC   0x2210             MOVS     R2,#+16
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable16_20
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable16_21
   \   000000B6   0x.... 0x....      BL       __aeabi_vec_ctor_nocookie_nodtor
     42          static LEElementPool evalPool(evalPoolElements, LE_EVAL_POOL_SIZE);
   \   000000BA   0x2220             MOVS     R2,#+32
   \   000000BC   0x.... 0x....      LDR.W    R1,??DataTable16_21
   \   000000C0   0x.... 0x....      LDR.W    R0,??DataTable16_22
   \   000000C4   0x.... 0x....      BL       _ZN13LEElementPoolC1EP9LEElementi
     43          
     44          #define SYS_ELEMENT_POOL_SIZE 128
     45          #define UD_ELEMENT_POOL_SIZE 128
     46          
     47          static LEElement sysElements[SYS_ELEMENT_POOL_SIZE];
   \   000000C8   0x2380             MOVS     R3,#+128
   \   000000CA   0x2210             MOVS     R2,#+16
   \   000000CC   0x.... 0x....      LDR.W    R1,??DataTable16_20
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable16_23
   \   000000D4   0x.... 0x....      BL       __aeabi_vec_ctor_nocookie_nodtor
     48          LEElementPool sysPool(sysElements, SYS_ELEMENT_POOL_SIZE);
   \   000000D8   0x2280             MOVS     R2,#+128
   \   000000DA   0x.... 0x....      LDR.W    R1,??DataTable16_23
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable16_24
   \   000000E2   0x.... 0x....      BL       _ZN13LEElementPoolC1EP9LEElementi
     49          
     50          static LEElement userElements[UD_ELEMENT_POOL_SIZE];
   \   000000E6   0x2380             MOVS     R3,#+128
   \   000000E8   0x2210             MOVS     R2,#+16
   \   000000EA   0x.... 0x....      LDR.W    R1,??DataTable16_20
   \   000000EE   0x.... 0x....      LDR.W    R0,??DataTable16_25
   \   000000F2   0x.... 0x....      BL       __aeabi_vec_ctor_nocookie_nodtor
     51          LEElementPool userPool(userElements, UD_ELEMENT_POOL_SIZE);
   \   000000F6   0x2280             MOVS     R2,#+128
   \   000000F8   0x.... 0x....      LDR.W    R1,??DataTable16_25
   \   000000FC   0x.... 0x....      LDR.W    R0,??DataTable16_26
   \   00000100   0x.... 0x....      BL       _ZN13LEElementPoolC1EP9LEElementi
   \   00000104   0x2310             MOVS     R3,#+16
   \   00000106   0x2270             MOVS     R2,#+112
   \   00000108   0x.... 0x....      LDR.W    R1,??DataTable16_27
   \   0000010C   0x.... 0x....      LDR.W    R0,??DataTable16_28
   \   00000110   0x.... 0x....      BL       __aeabi_vec_ctor_nocookie_nodtor
   \   00000114   0x.... 0x....      LDR.W    R0,??DataTable16_29
   \   00000118   0x.... 0x....      BL       _ZN12LECalculatorC1Ev
   \   0000011C   0x2310             MOVS     R3,#+16
   \   0000011E   0x2210             MOVS     R2,#+16
   \   00000120   0x.... 0x....      LDR.W    R1,??DataTable16_30
   \   00000124   0x.... 0x....      LDR.W    R0,??DataTable17_1
   \   00000128   0x.... 0x....      BL       __aeabi_vec_ctor_nocookie_nodtor
   \   0000012C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     leRpm:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
   \                     leTps:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
   \                     leMaf:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
   \                     leVBatt:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
   \                     leFan:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
   \                     leCoolant:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
   \                     leAcToggle:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
   \                     leFanOnSetting:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
   \                     leFanOffSetting:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
   \                     leTimeSinceBoot:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
   \                     leFsioSetting:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
   \                     leKnock:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
   \                     evalCalc:
   \   00000000                      DS8 652

   \                                 In section .bss, align 4
   \                     evalPoolElements:
   \   00000000                      DS8 512

   \                                 In section .bss, align 4
   \                     evalPool:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
   \                     sysElements:
   \   00000000                      DS8 2048

   \                                 In section .bss, align 4
   \                     sysPool:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
   \                     userElements:
   \   00000000                      DS8 2048

   \                                 In section .bss, align 4
   \                     userPool:
   \   00000000                      DS8 12

   \                                 In section .ccm, align 4
     52          static LEElement * fsioLogics[LE_COMMAND_COUNT] CCM_OPTIONAL;
   \                     fsioLogics:
   \   00000000                      DS8 64
     53          

   \                                 In section .bss, align 4
     54          static LEElement * acRelayLogic;
   \                     acRelayLogic:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     55          static LEElement * fuelPumpLogic;
   \                     fuelPumpLogic:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     56          static LEElement * radiatorFanLogic;
   \                     radiatorFanLogic:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     57          static LEElement * alternatorLogic;
   \                     alternatorLogic:
   \   00000000                      DS8 4
     58          
     59          EXTERN_ENGINE
     60          ;
     61          
     62          #if EFI_PROD_CODE || EFI_SIMULATOR

   \                                 In section .bss, align 4
     63          static Logging *logger;
   \                     logger:
   \   00000000                      DS8 4
     64          

   \                                 In section .text, align 4, keep-with-next
     65          float getLEValue(Engine *engine, calc_stack_t *s, le_action_e action) {
   \                     _Z10getLEValueP6EngineP7FLStackIfLi32EE11le_action_e:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     66          	engine_configuration_s *engineConfiguration = engine->engineConfiguration;
   \   00000008   0x6A67             LDR      R7,[R4, #+36]
     67          	efiAssert(engine!=NULL, "getLEValue", NAN);
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD106             BNE.N    ??getLEValue_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable16_31
   \   00000012   0x.... 0x....      BL       firmwareError
   \   00000016   0xED9F 0x....      VLDR.W   S0,??DataTable6  ;; 0x7fffffff
   \   0000001A   0xE04A             B.N      ??getLEValue_1
     68          	switch (action) {
   \                     ??getLEValue_0:
   \   0000001C   0x0030             MOVS     R0,R6
   \   0000001E   0x2864             CMP      R0,#+100
   \   00000020   0xD026             BEQ.N    ??getLEValue_2
   \   00000022   0x2865             CMP      R0,#+101
   \   00000024   0xD01E             BEQ.N    ??getLEValue_3
   \   00000026   0x2866             CMP      R0,#+102
   \   00000028   0xD00C             BEQ.N    ??getLEValue_4
   \   0000002A   0x2867             CMP      R0,#+103
   \   0000002C   0xD028             BEQ.N    ??getLEValue_5
   \   0000002E   0x2868             CMP      R0,#+104
   \   00000030   0xD030             BEQ.N    ??getLEValue_6
   \   00000032   0x2869             CMP      R0,#+105
   \   00000034   0xD02B             BEQ.N    ??getLEValue_7
   \   00000036   0x286C             CMP      R0,#+108
   \   00000038   0xD017             BEQ.N    ??getLEValue_8
   \   0000003A   0x286D             CMP      R0,#+109
   \   0000003C   0xD02D             BEQ.N    ??getLEValue_9
   \   0000003E   0x286E             CMP      R0,#+110
   \   00000040   0xD009             BEQ.N    ??getLEValue_10
   \   00000042   0xE02D             B.N      ??getLEValue_11
     69          	case LE_METHOD_FAN:
     70          		return enginePins.fanRelay.getLogicValue();
   \                     ??getLEValue_4:
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable16_32
   \   00000048   0x.... 0x....      BL       _ZN9OutputPin13getLogicValueEv
   \   0000004C   0xEE00 0x0A10      VMOV     S0,R0
   \   00000050   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   00000054   0xE02D             B.N      ??getLEValue_1
     71          	case LE_METHOD_AC_TOGGLE:
     72          		return getAcToggle(PASS_ENGINE_PARAMETER_F);
   \                     ??getLEValue_10:
   \   00000056   0x.... 0x....      BL       _Z11getAcTogglev
   \   0000005A   0xEE00 0x0A10      VMOV     S0,R0
   \   0000005E   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   00000062   0xE026             B.N      ??getLEValue_1
     73          	case LE_METHOD_COOLANT:
     74          		return getCoolantTemperature(PASS_ENGINE_PARAMETER_F);
   \                     ??getLEValue_3:
   \   00000064   0x.... 0x....      BL       _Z21getCoolantTemperaturev
   \   00000068   0xE023             B.N      ??getLEValue_1
     75          	case LE_METHOD_INTAKE_AIR:
     76          		return getIntakeAirTemperature(PASS_ENGINE_PARAMETER_F);
   \                     ??getLEValue_8:
   \   0000006A   0x.... 0x....      BL       _Z23getIntakeAirTemperaturev
   \   0000006E   0xE020             B.N      ??getLEValue_1
     77          	case LE_METHOD_RPM:
     78          		return engine->rpmCalculator.rpm();
   \                     ??getLEValue_2:
   \   00000070   0x0020             MOVS     R0,R4
   \   00000072   0x.... 0x....      BL       _ZN13RpmCalculator3rpmEv
   \   00000076   0xEE00 0x0A10      VMOV     S0,R0
   \   0000007A   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000007E   0xE018             B.N      ??getLEValue_1
     79          	case LE_METHOD_TIME_SINCE_BOOT:
     80          		return getTimeNowSeconds();
   \                     ??getLEValue_5:
   \   00000080   0x.... 0x....      BL       getTimeNowSeconds
   \   00000084   0xEE00 0x0A10      VMOV     S0,R0
   \   00000088   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000008C   0xE011             B.N      ??getLEValue_1
     81          	case LE_METHOD_FAN_OFF_SETTING:
     82          		return engineConfiguration->fanOffTemperature;
   \                     ??getLEValue_7:
   \   0000008E   0xED97 0x0A78      VLDR     S0,[R7, #+480]
   \   00000092   0xE00E             B.N      ??getLEValue_1
     83          	case LE_METHOD_FAN_ON_SETTING:
     84          		return engineConfiguration->fanOnTemperature;
   \                     ??getLEValue_6:
   \   00000094   0xED97 0x0A77      VLDR     S0,[R7, #+476]
   \   00000098   0xE00B             B.N      ??getLEValue_1
     85          	case LE_METHOD_VBATT:
     86          		return getVBatt(PASS_ENGINE_PARAMETER_F);
   \                     ??getLEValue_9:
   \   0000009A   0x.... 0x....      BL       _Z8getVBattv
   \   0000009E   0xE008             B.N      ??getLEValue_1
     87          	default:
     88          		warning(OBD_PCM_Processor_Fault, "FSIO unexpected %d", action);
   \                     ??getLEValue_11:
   \   000000A0   0x0032             MOVS     R2,R6
   \   000000A2   0x.... 0x....      LDR.W    R1,??DataTable16_33
   \   000000A6   0xF240 0x205E      MOVW     R0,#+606
   \   000000AA   0x.... 0x....      BL       warning
     89          		return NAN;
   \   000000AE   0xED9F 0x....      VLDR.W   S0,??DataTable6  ;; 0x7fffffff
   \                     ??getLEValue_1:
   \   000000B2   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     90          	}
     91          }
     92          
     93          #endif
     94          
     95          #if EFI_PROD_CODE || defined(__DOXYGEN__)
     96          
     97          #include "pin_repository.h"
     98          #include "pwm_generator.h"
     99          // todo: that's about bench test mode, wrong header for sure!
    100          #include "injector_central.h"
    101          

   \                                 In section .text, align 2, keep-with-next
    102          static void setFsioInputPin(const char *indexStr, const char *pinName) {
   \                     _Z15setFsioInputPinPKcS0_:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    103          	int index = atoi(indexStr) - 1;
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       atoi
   \   0000000C   0x1E46             SUBS     R6,R0,#+1
    104          	if (index < 0 || index >= LE_COMMAND_COUNT) {
   \   0000000E   0x2E00             CMP      R6,#+0
   \   00000010   0xD401             BMI.N    ??setFsioInputPin_0
   \   00000012   0x2E10             CMP      R6,#+16
   \   00000014   0xDB08             BLT.N    ??setFsioInputPin_1
    105          		scheduleMsg(logger, "invalid index %d", index);
   \                     ??setFsioInputPin_0:
   \   00000016   0x0032             MOVS     R2,R6
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable17_2
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x.... 0x....      BL       scheduleMsg
    106          		return;
   \   00000026   0xE021             B.N      ??setFsioInputPin_2
    107          	}
    108          	brain_pin_e pin = parseBrainPin(pinName);
   \                     ??setFsioInputPin_1:
   \   00000028   0x0028             MOVS     R0,R5
   \   0000002A   0x.... 0x....      BL       _Z13parseBrainPinPKc
   \   0000002E   0x0007             MOVS     R7,R0
    109          	// todo: extract method - code duplication with other 'set_xxx_pin' methods?
    110          	if (pin == GPIO_INVALID) {
   \   00000030   0x2F51             CMP      R7,#+81
   \   00000032   0xD108             BNE.N    ??setFsioInputPin_3
    111          		scheduleMsg(logger, "invalid pin name [%s]", pinName);
   \   00000034   0x002A             MOVS     R2,R5
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable17_4
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x.... 0x....      BL       scheduleMsg
    112          		return;
   \   00000044   0xE012             B.N      ??setFsioInputPin_2
    113          	}
    114          	boardConfiguration->fsioDigitalInputs[index] = pin;
   \                     ??setFsioInputPin_3:
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable17_5
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   00000050   0xF8C0 0x7324      STR      R7,[R0, #+804]
    115          	scheduleMsg(logger, "FSIO input pin #%d [%s]", (index + 1), hwPortname(pin));
   \   00000054   0x0038             MOVS     R0,R7
   \   00000056   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   0000005A   0x0003             MOVS     R3,R0
   \   0000005C   0x1C72             ADDS     R2,R6,#+1
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable17_6
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x.... 0x....      BL       scheduleMsg
    116          }
   \                     ??setFsioInputPin_2:
   \   0000006C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    117          

   \                                 In section .text, align 2, keep-with-next
    118          static void setFsioOutputPin(const char *indexStr, const char *pinName) {
   \                     _Z16setFsioOutputPinPKcS0_:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    119          	int index = atoi(indexStr) - 1;
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       atoi
   \   0000000C   0x1E46             SUBS     R6,R0,#+1
    120          	if (index < 0 || index >= LE_COMMAND_COUNT) {
   \   0000000E   0x2E00             CMP      R6,#+0
   \   00000010   0xD401             BMI.N    ??setFsioOutputPin_0
   \   00000012   0x2E10             CMP      R6,#+16
   \   00000014   0xDB08             BLT.N    ??setFsioOutputPin_1
    121          		scheduleMsg(logger, "invalid index %d", index);
   \                     ??setFsioOutputPin_0:
   \   00000016   0x0032             MOVS     R2,R6
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable17_2
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x.... 0x....      BL       scheduleMsg
    122          		return;
   \   00000026   0xE021             B.N      ??setFsioOutputPin_2
    123          	}
    124          	brain_pin_e pin = parseBrainPin(pinName);
   \                     ??setFsioOutputPin_1:
   \   00000028   0x0028             MOVS     R0,R5
   \   0000002A   0x.... 0x....      BL       _Z13parseBrainPinPKc
   \   0000002E   0x0007             MOVS     R7,R0
    125          	// todo: extract method - code duplication with other 'set_xxx_pin' methods?
    126          	if (pin == GPIO_INVALID) {
   \   00000030   0x2F51             CMP      R7,#+81
   \   00000032   0xD108             BNE.N    ??setFsioOutputPin_3
    127          		scheduleMsg(logger, "invalid pin name [%s]", pinName);
   \   00000034   0x002A             MOVS     R2,R5
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable17_4
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x.... 0x....      BL       scheduleMsg
    128          		return;
   \   00000044   0xE012             B.N      ??setFsioOutputPin_2
    129          	}
    130          	boardConfiguration->fsioPins[index] = pin;
   \                     ??setFsioOutputPin_3:
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable17_5
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   00000050   0xF8C0 0x71C4      STR      R7,[R0, #+452]
    131          	scheduleMsg(logger, "FSIO output pin #%d [%s]", (index + 1), hwPortname(pin));
   \   00000054   0x0038             MOVS     R0,R7
   \   00000056   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   0000005A   0x0003             MOVS     R3,R0
   \   0000005C   0x1C72             ADDS     R2,R6,#+1
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable17_7
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x.... 0x....      BL       scheduleMsg
    132          }
   \                     ??setFsioOutputPin_2:
   \   0000006C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    133          #endif
    134          

   \                                 In section .text, align 2, keep-with-next
    135          void setFsioExt(int index, brain_pin_e pin, const char * exp, int freq DECLARE_ENGINE_PARAMETER_S) {
   \                     _Z10setFsioExti11brain_pin_ePKci:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    136          	boardConfiguration->fsioPins[index] = pin;
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable17_5
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000016   0xF8C0 0x51C4      STR      R5,[R0, #+452]
    137          	int len = strlen(exp);
   \   0000001A   0x0030             MOVS     R0,R6
   \   0000001C   0x.... 0x....      BL       strlen
   \   00000020   0x4680             MOV      R8,R0
    138          	if (len >= LE_COMMAND_LENGTH) {
   \   00000022   0xF1B8 0x0FC8      CMP      R8,#+200
   \   00000026   0xDA11             BGE.N    ??setFsioExt_0
    139          		return;
    140          	}
    141          	strcpy(config->le_formulas[index], exp);
   \                     ??setFsioExt_1:
   \   00000028   0x0031             MOVS     R1,R6
   \   0000002A   0x20C8             MOVS     R0,#+200
   \   0000002C   0x.... 0x....      LDR.W    R2,??DataTable17_8
   \   00000030   0x6812             LDR      R2,[R2, #+0]
   \   00000032   0xFB00 0x2004      MLA      R0,R0,R4,R2
   \   00000036   0xF600 0x00A8      ADDW     R0,R0,#+2216
   \   0000003A   0x.... 0x....      BL       strcpy
    142          	boardConfiguration->fsioFrequency[index] = freq;
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable17_5
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xEB10 0x0044      ADDS     R0,R0,R4, LSL #+1
   \   00000048   0xF8A0 0x7268      STRH     R7,[R0, #+616]
    143          }
   \                     ??setFsioExt_0:
   \   0000004C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    144          

   \                                 In section .text, align 2, keep-with-next
    145          void setFsio(int index, brain_pin_e pin, const char * exp DECLARE_ENGINE_PARAMETER_S) {
   \                     _Z7setFsioi11brain_pin_ePKc:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    146          	setFsioExt(index, pin, exp, NO_PWM PASS_ENGINE_PARAMETER);
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x0032             MOVS     R2,R6
   \   0000000C   0x0029             MOVS     R1,R5
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       _Z10setFsioExti11brain_pin_ePKci
    147          }
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
    148          

   \                                 In section .text, align 2, keep-with-next
    149          void applyFsioConfiguration(DECLARE_ENGINE_PARAMETER_F) {
   \                     _Z22applyFsioConfigurationv:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    150          	for (int i = 0; i < LE_COMMAND_COUNT; i++) {
   \   00000002   0x2400             MOVS     R4,#+0
   \                     ??applyFsioConfiguration_0:
   \   00000004   0x2C10             CMP      R4,#+16
   \   00000006   0xDA25             BGE.N    ??applyFsioConfiguration_1
    151          		brain_pin_e brainPin = boardConfiguration->fsioPins[i];
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable17_5
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000012   0xF8D0 0x51C4      LDR      R5,[R0, #+452]
    152          
    153          		if (brainPin != GPIO_UNASSIGNED) {
   \   00000016   0x2D50             CMP      R5,#+80
   \   00000018   0xD01A             BEQ.N    ??applyFsioConfiguration_2
    154          			const char *formula = config->le_formulas[i];
   \   0000001A   0x20C8             MOVS     R0,#+200
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable17_8
   \   00000020   0x6809             LDR      R1,[R1, #+0]
   \   00000022   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000026   0xF600 0x06A8      ADDW     R6,R0,#+2216
    155          			LEElement *logic = userPool.parseExpression(formula);
   \   0000002A   0x0031             MOVS     R1,R6
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable16_26
   \   00000030   0x.... 0x....      BL       _ZN13LEElementPool15parseExpressionEPKc
   \   00000034   0x0007             MOVS     R7,R0
    156          			if (logic == NULL) {
   \   00000036   0x2F00             CMP      R7,#+0
   \   00000038   0xD106             BNE.N    ??applyFsioConfiguration_3
    157          				warning(OBD_PCM_Processor_Fault, "parsing [%s]", formula);
   \   0000003A   0x0032             MOVS     R2,R6
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable17_9
   \   00000040   0xF240 0x205E      MOVW     R0,#+606
   \   00000044   0x.... 0x....      BL       warning
    158          			}
    159          
    160          			fsioLogics[i] = logic;
   \                     ??applyFsioConfiguration_3:
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable17_10
   \   0000004C   0xF840 0x7024      STR      R7,[R0, R4, LSL #+2]
    161          		}
    162          	}
   \                     ??applyFsioConfiguration_2:
   \   00000050   0x1C64             ADDS     R4,R4,#+1
   \   00000052   0xE7D7             B.N      ??applyFsioConfiguration_0
    163          }
   \                     ??applyFsioConfiguration_1:
   \   00000054   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    164          
    165          #if EFI_PROD_CODE || defined(__DOXYGEN__)
    166          

   \                                 In section .ccm, align 8
    167          static SimplePwm fsioPwm[LE_COMMAND_COUNT] CCM_OPTIONAL;
   \                     fsioPwm:
   \   00000000                      DS8 1792
    168          

   \                                 In section .bss, align 4
    169          static LECalculator calc;
   \                     calc:
   \   00000000                      DS8 652
    170          extern LEElement * fsioLogics[LE_COMMAND_COUNT];
    171          
    172          // that's crazy, but what's an alternative? we need const char *, a shared buffer would not work for pin repository

   \                                 In section .text, align 2, keep-with-next
    173          static const char *getGpioPinName(int index) {
   \                     _Z14getGpioPinNamei:
   \   00000000   0x0001             MOVS     R1,R0
    174          	switch (index) {
   \   00000002   0x2900             CMP      R1,#+0
   \   00000004   0xD017             BEQ.N    ??getGpioPinName_0
   \   00000006   0x2902             CMP      R1,#+2
   \   00000008   0xD02D             BEQ.N    ??getGpioPinName_1
   \   0000000A   0xD317             BCC.N    ??getGpioPinName_2
   \   0000000C   0x2904             CMP      R1,#+4
   \   0000000E   0xD030             BEQ.N    ??getGpioPinName_3
   \   00000010   0xD32C             BCC.N    ??getGpioPinName_4
   \   00000012   0x2906             CMP      R1,#+6
   \   00000014   0xD033             BEQ.N    ??getGpioPinName_5
   \   00000016   0xD32F             BCC.N    ??getGpioPinName_6
   \   00000018   0x2908             CMP      R1,#+8
   \   0000001A   0xD036             BEQ.N    ??getGpioPinName_7
   \   0000001C   0xD332             BCC.N    ??getGpioPinName_8
   \   0000001E   0x290A             CMP      R1,#+10
   \   00000020   0xD00F             BEQ.N    ??getGpioPinName_9
   \   00000022   0xD335             BCC.N    ??getGpioPinName_10
   \   00000024   0x290C             CMP      R1,#+12
   \   00000026   0xD012             BEQ.N    ??getGpioPinName_11
   \   00000028   0xD30E             BCC.N    ??getGpioPinName_12
   \   0000002A   0x290E             CMP      R1,#+14
   \   0000002C   0xD015             BEQ.N    ??getGpioPinName_13
   \   0000002E   0xD311             BCC.N    ??getGpioPinName_14
   \   00000030   0x290F             CMP      R1,#+15
   \   00000032   0xD015             BEQ.N    ??getGpioPinName_15
   \   00000034   0xE02F             B.N      ??getGpioPinName_16
    175          	case 0:
    176          		return "GPIO_0";
   \                     ??getGpioPinName_0:
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable17_11
   \   0000003A   0xE02D             B.N      ??getGpioPinName_17
    177          	case 1:
    178          		return "GPIO_1";
   \                     ??getGpioPinName_2:
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable17_12
   \   00000040   0xE02A             B.N      ??getGpioPinName_17
    179          	case 10:
    180          		return "GPIO_10";
   \                     ??getGpioPinName_9:
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable17_13
   \   00000046   0xE027             B.N      ??getGpioPinName_17
    181          	case 11:
    182          		return "GPIO_11";
   \                     ??getGpioPinName_12:
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable17_14
   \   0000004C   0xE024             B.N      ??getGpioPinName_17
    183          	case 12:
    184          		return "GPIO_12";
   \                     ??getGpioPinName_11:
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable17_15
   \   00000052   0xE021             B.N      ??getGpioPinName_17
    185          	case 13:
    186          		return "GPIO_13";
   \                     ??getGpioPinName_14:
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable17_16
   \   00000058   0xE01E             B.N      ??getGpioPinName_17
    187          	case 14:
    188          		return "GPIO_14";
   \                     ??getGpioPinName_13:
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable17_17
   \   0000005E   0xE01B             B.N      ??getGpioPinName_17
    189          	case 15:
    190          		return "GPIO_15";
   \                     ??getGpioPinName_15:
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable17_18
   \   00000064   0xE018             B.N      ??getGpioPinName_17
    191          	case 2:
    192          		return "GPIO_2";
   \                     ??getGpioPinName_1:
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable17_19
   \   0000006A   0xE015             B.N      ??getGpioPinName_17
    193          	case 3:
    194          		return "GPIO_3";
   \                     ??getGpioPinName_4:
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable17_20
   \   00000070   0xE012             B.N      ??getGpioPinName_17
    195          	case 4:
    196          		return "GPIO_4";
   \                     ??getGpioPinName_3:
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable17_21
   \   00000076   0xE00F             B.N      ??getGpioPinName_17
    197          	case 5:
    198          		return "GPIO_5";
   \                     ??getGpioPinName_6:
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable17_22
   \   0000007C   0xE00C             B.N      ??getGpioPinName_17
    199          	case 6:
    200          		return "GPIO_6";
   \                     ??getGpioPinName_5:
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable17_23
   \   00000082   0xE009             B.N      ??getGpioPinName_17
    201          	case 7:
    202          		return "GPIO_7";
   \                     ??getGpioPinName_8:
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable17_24
   \   00000088   0xE006             B.N      ??getGpioPinName_17
    203          	case 8:
    204          		return "GPIO_8";
   \                     ??getGpioPinName_7:
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable17_25
   \   0000008E   0xE003             B.N      ??getGpioPinName_17
    205          	case 9:
    206          		return "GPIO_9";
   \                     ??getGpioPinName_10:
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable17_26
   \   00000094   0xE000             B.N      ??getGpioPinName_17
    207          	}
    208          	return NULL;
   \                     ??getGpioPinName_16:
   \   00000096   0x2000             MOVS     R0,#+0
   \                     ??getGpioPinName_17:
   \   00000098   0x4770             BX       LR               ;; return
    209          }
    210          

   \                                 In section .bss, align 4
    211          static OutputPin fsioOutputs[LE_COMMAND_COUNT];
   \                     fsioOutputs:
   \   00000000                      DS8 256
    212          

   \                                 In section .text, align 2, keep-with-next
    213          static void handleFsio(Engine *engine, int index) {
   \                     _Z10handleFsioP6Enginei:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
    214          	if (boardConfiguration->fsioPins[index] == GPIO_UNASSIGNED)
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable17_5
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xEB10 0x0085      ADDS     R0,R0,R5, LSL #+2
   \   00000014   0xF8D0 0x01C4      LDR      R0,[R0, #+452]
   \   00000018   0x2850             CMP      R0,#+80
   \   0000001A   0xD03E             BEQ.N    ??handleFsio_0
    215          		return;
    216          
    217          	bool_t isPwmMode = boardConfiguration->fsioFrequency[index] != NO_PWM;
   \                     ??handleFsio_1:
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable17_5
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xEB10 0x0045      ADDS     R0,R0,R5, LSL #+1
   \   00000026   0xF9B0 0x0268      LDRSH    R0,[R0, #+616]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD001             BEQ.N    ??handleFsio_2
   \   0000002E   0x2601             MOVS     R6,#+1
   \   00000030   0xE000             B.N      ??handleFsio_3
   \                     ??handleFsio_2:
   \   00000032   0x2600             MOVS     R6,#+0
    218          
    219          	float fvalue = calc.getValue2(fsioLogics[index], engine);
   \                     ??handleFsio_3:
   \   00000034   0x0022             MOVS     R2,R4
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable17_10
   \   0000003A   0xF850 0x1025      LDR      R1,[R0, R5, LSL #+2]
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable16_29
   \   00000042   0x.... 0x....      BL       _ZN12LECalculator9getValue2EP9LEElementP6Engine
   \   00000046   0xEEB0 0x8A40      VMOV.F32 S16,S0
    220          	engine->engineConfiguration2->fsioLastValue[index] = fvalue;
   \   0000004A   0x6AA0             LDR      R0,[R4, #+40]
   \   0000004C   0xEB10 0x0085      ADDS     R0,R0,R5, LSL #+2
   \   00000050   0xF500 0x503C      ADD      R0,R0,#+12032
   \   00000054   0x3010             ADDS     R0,R0,#+16
   \   00000056   0xED80 0x8A00      VSTR     S16,[R0, #0]
    221          
    222          	if (isPwmMode) {
   \   0000005A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000005C   0x2E00             CMP      R6,#+0
   \   0000005E   0xD009             BEQ.N    ??handleFsio_4
    223          		fsioPwm[index].setSimplePwmDutyCycle(fvalue);
   \   00000060   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000064   0x2070             MOVS     R0,#+112
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable16_28
   \   0000006A   0xFB00 0x1005      MLA      R0,R0,R5,R1
   \   0000006E   0x.... 0x....      BL       _ZN9SimplePwm21setSimplePwmDutyCycleEf
   \   00000072   0xE012             B.N      ??handleFsio_5
    224          	} else {
    225          		int value = (int) fvalue;
   \                     ??handleFsio_4:
   \   00000074   0xEEBD 0x0AC8      VCVT.S32.F32 S0,S16
   \   00000078   0xEE10 0x7A10      VMOV     R7,S0
    226          		if (value != fsioOutputs[index].getLogicValue()) {
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable17_1
   \   00000080   0xEB10 0x1005      ADDS     R0,R0,R5, LSL #+4
   \   00000084   0x.... 0x....      BL       _ZN9OutputPin13getLogicValueEv
   \   00000088   0x4287             CMP      R7,R0
   \   0000008A   0xD006             BEQ.N    ??handleFsio_5
    227          			//		scheduleMsg(logger, "setting %s %s", getIo_pin_e(pin), boolToString(value));
    228          			fsioOutputs[index].setValue(value);
   \   0000008C   0x0039             MOVS     R1,R7
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable17_1
   \   00000092   0xEB10 0x1005      ADDS     R0,R0,R5, LSL #+4
   \   00000096   0x.... 0x....      BL       _ZN9OutputPin8setValueEi
    229          		}
    230          	}
    231          }
   \                     ??handleFsio_5:
   \                     ??handleFsio_0:
   \   0000009A   0xECBD 0x8B02      VPOP     {D8}
   \   0000009E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    232          
    233          

   \                                 In section .text, align 2, keep-with-next
    234          static const char * action2String(le_action_e action) {
   \                     _Z13action2String11le_action_e:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    235          	static char buffer[10];
    236          	switch(action) {
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x2864             CMP      R0,#+100
   \   00000008   0xD008             BEQ.N    ??action2String_0
   \   0000000A   0x2865             CMP      R0,#+101
   \   0000000C   0xD008             BEQ.N    ??action2String_1
   \   0000000E   0x2866             CMP      R0,#+102
   \   00000010   0xD00E             BEQ.N    ??action2String_2
   \   00000012   0x2868             CMP      R0,#+104
   \   00000014   0xD006             BEQ.N    ??action2String_3
   \   00000016   0x2869             CMP      R0,#+105
   \   00000018   0xD007             BEQ.N    ??action2String_4
   \   0000001A   0xE00B             B.N      ??action2String_5
    237          		case LE_METHOD_RPM:
    238          			return "RPM";
   \                     ??action2String_0:
   \   0000001C   0x....             ADR.N    R0,??DataTable10  ;; "RPM"
   \   0000001E   0xE010             B.N      ??action2String_6
    239          		case LE_METHOD_COOLANT:
    240          			return "CLT";
   \                     ??action2String_1:
   \   00000020   0x....             ADR.N    R0,??DataTable10_1  ;; "CLT"
   \   00000022   0xE00E             B.N      ??action2String_6
    241          		case LE_METHOD_FAN_ON_SETTING:
    242          			return "fan_on";
   \                     ??action2String_3:
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable17_27
   \   00000028   0xE00B             B.N      ??action2String_6
    243          		case LE_METHOD_FAN_OFF_SETTING:
    244          			return "fan_off";
   \                     ??action2String_4:
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable17_28
   \   0000002E   0xE008             B.N      ??action2String_6
    245          		case LE_METHOD_FAN:
    246          			return "fan";
   \                     ??action2String_2:
   \   00000030   0x....             ADR.N    R0,??DataTable11  ;; "fan"
   \   00000032   0xE006             B.N      ??action2String_6
    247          		default: {
    248          			// this is here to make compiler happy
    249          		}
    250          	}
    251          	itoa10(buffer, (int)action);
   \                     ??action2String_5:
   \   00000034   0x0021             MOVS     R1,R4
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable17_29
   \   0000003A   0x.... 0x....      BL       itoa10
    252          	return buffer;
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable17_29
   \                     ??action2String_6:
   \   00000042   0xBD10             POP      {R4,PC}          ;; return
    253          }

   \                                 In section .bss, align 4
   \                     ??buffer:
   \   00000000                      DS8 12
    254          

   \                                 In section .text, align 2, keep-with-next
    255          static void setPinState(const char * msg, OutputPin *pin, LEElement *element, Engine *engine) {
   \                     _Z11setPinStatePKcP9OutputPinP9LEElementP6Engine:
   \   00000000   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    256          	if (element == NULL) {
   \   0000000C   0x2E00             CMP      R6,#+0
   \   0000000E   0xD107             BNE.N    ??setPinState_0
    257          		warning(OBD_PCM_Processor_Fault, "invalid expression for %s", msg);
   \   00000010   0x0022             MOVS     R2,R4
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable17_30
   \   00000016   0xF240 0x205E      MOVW     R0,#+606
   \   0000001A   0x.... 0x....      BL       warning
   \   0000001E   0xE04E             B.N      ??setPinState_1
    258          	} else {
    259          		int value = calc.getValue2(element, engine);
   \                     ??setPinState_0:
   \   00000020   0x003A             MOVS     R2,R7
   \   00000022   0x0031             MOVS     R1,R6
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable16_29
   \   00000028   0x.... 0x....      BL       _ZN12LECalculator9getValue2EP9LEElementP6Engine
   \   0000002C   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000030   0xEE10 0x8A10      VMOV     R8,S0
    260          		if (pin->isInitialized() && value != pin->getLogicValue()) {
   \   00000034   0x0028             MOVS     R0,R5
   \   00000036   0x.... 0x....      BL       _ZN9OutputPin13isInitializedEv
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD03F             BEQ.N    ??setPinState_1
   \   0000003E   0x0028             MOVS     R0,R5
   \   00000040   0x.... 0x....      BL       _ZN9OutputPin13getLogicValueEv
   \   00000044   0x4580             CMP      R8,R0
   \   00000046   0xD03A             BEQ.N    ??setPinState_1
    261          			if (isRunningBenchTest()) {
   \   00000048   0x.... 0x....      BL       _Z18isRunningBenchTestv
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD136             BNE.N    ??setPinState_2
    262          				return; // let's not mess with bench testing
    263          			}
    264          
    265          			for (int i = 0;i < calc.currentCalculationLogPosition;i++) {
   \                     ??setPinState_3:
   \   00000050   0xF05F 0x0900      MOVS     R9,#+0
   \                     ??setPinState_4:
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable16_29
   \   00000058   0xF8D0 0x0200      LDR      R0,[R0, #+512]
   \   0000005C   0x4581             CMP      R9,R0
   \   0000005E   0xDA1C             BGE.N    ??setPinState_5
    266          				scheduleMsg(logger, "calc %d: action %s value %f", i, action2String(calc.calcLogAction[i]), calc.calcLogValue[i]);
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable16_29
   \   00000064   0xF850 0x0029      LDR      R0,[R0, R9, LSL #+2]
   \   00000068   0x.... 0x....      BL       _Z13action2String11le_action_e
   \   0000006C   0x4682             MOV      R10,R0
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable16_29
   \   00000072   0xEB10 0x0089      ADDS     R0,R0,R9, LSL #+2
   \   00000076   0xF8D0 0x0100      LDR      R0,[R0, #+256]
   \   0000007A   0x.... 0x....      BL       __aeabi_f2d
   \   0000007E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000082   0x4653             MOV      R3,R10
   \   00000084   0x464A             MOV      R2,R9
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable17_31
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
   \   00000090   0x.... 0x....      BL       scheduleMsg
    267          			}
   \   00000094   0xF119 0x0901      ADDS     R9,R9,#+1
   \   00000098   0xE7DC             B.N      ??setPinState_4
    268          
    269          			scheduleMsg(logger, "setPin %s %s", msg, value ? "on" : "off");
   \                     ??setPinState_5:
   \   0000009A   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000009E   0xD001             BEQ.N    ??setPinState_6
   \   000000A0   0x....             ADR.N    R3,??DataTable13  ;; 0x6F, 0x6E, 0x00, 0x00
   \   000000A2   0xE000             B.N      ??setPinState_7
   \                     ??setPinState_6:
   \   000000A4   0x....             ADR.N    R3,??DataTable13_1  ;; "off"
   \                     ??setPinState_7:
   \   000000A6   0x0022             MOVS     R2,R4
   \   000000A8   0x.... 0x....      LDR.W    R1,??DataTable17_32
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0x.... 0x....      BL       scheduleMsg
    270          			pin->setValue(value);
   \   000000B6   0x4641             MOV      R1,R8
   \   000000B8   0x0028             MOVS     R0,R5
   \   000000BA   0x.... 0x....      BL       _ZN9OutputPin8setValueEi
    271          		}
    272          	}
    273          }
   \                     ??setPinState_1:
   \                     ??setPinState_2:
   \   000000BE   0xE8BD 0x87F3      POP      {R0,R1,R4-R10,PC}  ;; return
    274          

   \                                 In section .text, align 2, keep-with-next
    275          static void showFsio(const char *msg, LEElement *element) {
   \                     _Z8showFsioPKcP9LEElement:
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    276          	if (msg != NULL)
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD006             BEQ.N    ??showFsio_0
    277          		scheduleMsg(logger, "%s:", msg);
   \   0000000A   0x0022             MOVS     R2,R4
   \   0000000C   0x....             ADR.N    R1,??DataTable13_2  ;; "%s:"
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x.... 0x....      BL       scheduleMsg
    278          	while (element != NULL) {
   \                     ??showFsio_0:
   \   00000018   0x2D00             CMP      R5,#+0
   \   0000001A   0xD010             BEQ.N    ??showFsio_1
    279          		scheduleMsg(logger, "action %d: fValue=%f iValue=%d", element->action, element->fValue, element->iValue);
   \   0000001C   0x68A8             LDR      R0,[R5, #+8]
   \   0000001E   0x9002             STR      R0,[SP, #+8]
   \   00000020   0x6868             LDR      R0,[R5, #+4]
   \   00000022   0x.... 0x....      BL       __aeabi_f2d
   \   00000026   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000002A   0x682A             LDR      R2,[R5, #+0]
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable17_33
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0x.... 0x....      BL       scheduleMsg
    280          		element = element->next;
   \   0000003A   0x68ED             LDR      R5,[R5, #+12]
   \   0000003C   0xE7EC             B.N      ??showFsio_0
    281          	}
    282          	scheduleMsg(logger, "<end>");
   \                     ??showFsio_1:
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable17_34
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0x.... 0x....      BL       scheduleMsg
    283          }
   \   0000004C   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    284          

   \                                 In section .text, align 2, keep-with-next
    285          static void showFsioInfo(void) {
   \                     _Z12showFsioInfov:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xB084             SUB      SP,SP,#+16
    286          	scheduleMsg(logger, "sys used %d/user used %d", sysPool.getSize(), userPool.getSize());
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable16_26
   \   0000000C   0x.... 0x....      BL       _ZN13LEElementPool7getSizeEv
   \   00000010   0x0004             MOVS     R4,R0
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable16_24
   \   00000016   0x.... 0x....      BL       _ZN13LEElementPool7getSizeEv
   \   0000001A   0x0002             MOVS     R2,R0
   \   0000001C   0x0023             MOVS     R3,R4
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable17_35
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x.... 0x....      BL       scheduleMsg
    287          	showFsio("a/c", acRelayLogic);
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable17_36
   \   00000030   0x6801             LDR      R1,[R0, #+0]
   \   00000032   0x....             ADR.N    R0,??DataTable14  ;; "a/c"
   \   00000034   0x.... 0x....      BL       _Z8showFsioPKcP9LEElement
    288          	showFsio("fuel", fuelPumpLogic);
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable17_37
   \   0000003C   0x6801             LDR      R1,[R0, #+0]
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable17_38
   \   00000042   0x.... 0x....      BL       _Z8showFsioPKcP9LEElement
    289          	showFsio("fan", radiatorFanLogic);
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable17_39
   \   0000004A   0x6801             LDR      R1,[R0, #+0]
   \   0000004C   0x....             ADR.N    R0,??DataTable11  ;; "fan"
   \   0000004E   0x.... 0x....      BL       _Z8showFsioPKcP9LEElement
    290          	showFsio("alt", alternatorLogic);
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable17_40
   \   00000056   0x6801             LDR      R1,[R0, #+0]
   \   00000058   0x....             ADR.N    R0,??DataTable15  ;; "alt"
   \   0000005A   0x.... 0x....      BL       _Z8showFsioPKcP9LEElement
    291          
    292          	for (int i = 0; i < LE_COMMAND_COUNT; i++) {
   \   0000005E   0x2400             MOVS     R4,#+0
   \                     ??showFsioInfo_0:
   \   00000060   0x2C10             CMP      R4,#+16
   \   00000062   0xDA3B             BGE.N    ??showFsioInfo_1
    293          		char * exp = config->le_formulas[i];
   \   00000064   0x20C8             MOVS     R0,#+200
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable17_8
   \   0000006A   0x6809             LDR      R1,[R1, #+0]
   \   0000006C   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000070   0xF600 0x05A8      ADDW     R5,R0,#+2216
    294          		if (exp[0] != 0) {
   \   00000074   0x7828             LDRB     R0,[R5, #+0]
   \   00000076   0x2800             CMP      R0,#+0
   \   00000078   0xD02E             BEQ.N    ??showFsioInfo_2
    295          			/**
    296          			 * in case of FSIO user interface indexes are starting with 0, the argument for that
    297          			 * is the fact that the target audience is more software developers
    298          			 */
    299          			scheduleMsg(logger, "FSIO #%d [%s] at %s@%dHz value=%f", i, exp,
    300          					hwPortname(boardConfiguration->fsioPins[i]), boardConfiguration->fsioFrequency[i],
    301          					engineConfiguration2->fsioLastValue[i]);
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable17_5
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000084   0xF8D0 0x01C4      LDR      R0,[R0, #+452]
   \   00000088   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   0000008C   0x0006             MOVS     R6,R0
   \   0000008E   0xF642 0x7010      MOVW     R0,#+12048
   \   00000092   0x.... 0x....      LDR.W    R1,??DataTable17_41
   \   00000096   0x6809             LDR      R1,[R1, #+0]
   \   00000098   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   0000009C   0x5840             LDR      R0,[R0, R1]
   \   0000009E   0x.... 0x....      BL       __aeabi_f2d
   \   000000A2   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable17_5
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0xEB10 0x0044      ADDS     R0,R0,R4, LSL #+1
   \   000000B0   0xF9B0 0x0268      LDRSH    R0,[R0, #+616]
   \   000000B4   0x9001             STR      R0,[SP, #+4]
   \   000000B6   0x9600             STR      R6,[SP, #+0]
   \   000000B8   0x002B             MOVS     R3,R5
   \   000000BA   0x0022             MOVS     R2,R4
   \   000000BC   0x.... 0x....      LDR.W    R1,??DataTable17_42
   \   000000C0   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   000000C4   0x6800             LDR      R0,[R0, #+0]
   \   000000C6   0x.... 0x....      BL       scheduleMsg
    302          //			scheduleMsg(logger, "user-defined #%d value=%f", i, engine->engineConfiguration2->fsioLastValue[i]);
    303          			showFsio(NULL, fsioLogics[i]);
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable17_10
   \   000000CE   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x.... 0x....      BL       _Z8showFsioPKcP9LEElement
    304          		}
    305          	}
   \                     ??showFsioInfo_2:
   \   000000D8   0x1C64             ADDS     R4,R4,#+1
   \   000000DA   0xE7C1             B.N      ??showFsioInfo_0
    306          	for (int i = 0; i < LE_COMMAND_COUNT; i++) {
   \                     ??showFsioInfo_1:
   \   000000DC   0x2400             MOVS     R4,#+0
   \                     ??showFsioInfo_3:
   \   000000DE   0x2C10             CMP      R4,#+16
   \   000000E0   0xDA1C             BGE.N    ??showFsioInfo_4
    307          		float v = boardConfiguration->fsio_setting[i];
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable17_5
   \   000000E6   0x6800             LDR      R0,[R0, #+0]
   \   000000E8   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   000000EC   0xED90 0x8AA5      VLDR     S16,[R0, #+660]
    308          		if (!cisnan(v)) {
   \   000000F0   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   000000F4   0x.... 0x....      BL       __iar_FDtest
   \   000000F8   0x2802             CMP      R0,#+2
   \   000000FA   0xD00D             BEQ.N    ??showFsioInfo_5
    309          			scheduleMsg(logger, "user property #%d: %f", i + 1, v);
   \   000000FC   0xEE18 0x0A10      VMOV     R0,S16
   \   00000100   0x.... 0x....      BL       __aeabi_f2d
   \   00000104   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000108   0x1C62             ADDS     R2,R4,#+1
   \   0000010A   0x.... 0x....      LDR.W    R1,??DataTable17_43
   \   0000010E   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   00000112   0x6800             LDR      R0,[R0, #+0]
   \   00000114   0x.... 0x....      BL       scheduleMsg
    310          		}
    311          	}
   \                     ??showFsioInfo_5:
   \   00000118   0x1C64             ADDS     R4,R4,#+1
   \   0000011A   0xE7E0             B.N      ??showFsioInfo_3
    312          	for (int i = 0; i < LE_COMMAND_COUNT; i++) {
   \                     ??showFsioInfo_4:
   \   0000011C   0x2400             MOVS     R4,#+0
   \                     ??showFsioInfo_6:
   \   0000011E   0x2C10             CMP      R4,#+16
   \   00000120   0xDA16             BGE.N    ??showFsioInfo_7
    313          		brain_pin_e inputPin = boardConfiguration->fsioDigitalInputs[i];
   \   00000122   0x.... 0x....      LDR.W    R0,??DataTable17_5
   \   00000126   0x6800             LDR      R0,[R0, #+0]
   \   00000128   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   0000012C   0xF8D0 0x5324      LDR      R5,[R0, #+804]
    314          		if (inputPin != GPIO_UNASSIGNED) {
   \   00000130   0x2D50             CMP      R5,#+80
   \   00000132   0xD00B             BEQ.N    ??showFsioInfo_8
    315          			scheduleMsg(logger, "FSIO digital input #%d: %s", i, hwPortname(inputPin));
   \   00000134   0x0028             MOVS     R0,R5
   \   00000136   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   0000013A   0x0003             MOVS     R3,R0
   \   0000013C   0x0022             MOVS     R2,R4
   \   0000013E   0x.... 0x....      LDR.W    R1,??DataTable17_44
   \   00000142   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   00000146   0x6800             LDR      R0,[R0, #+0]
   \   00000148   0x.... 0x....      BL       scheduleMsg
    316          		}
    317          	}
   \                     ??showFsioInfo_8:
   \   0000014C   0x1C64             ADDS     R4,R4,#+1
   \   0000014E   0xE7E6             B.N      ??showFsioInfo_6
    318          
    319          }
   \                     ??showFsioInfo_7:
   \   00000150   0xB004             ADD      SP,SP,#+16
   \   00000152   0xECBD 0x8B02      VPOP     {D8}
   \   00000156   0xBD70             POP      {R4-R6,PC}       ;; return
    320          
    321          /**
    322           * set_fsio_setting 0 0.11
    323           */

   \                                 In section .text, align 2, keep-with-next
    324          static void setFsioSetting(float indexF, float value) {
   \                     _Z14setFsioSettingff:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   0000000A   0xEEF0 0x8A60      VMOV.F32 S17,S1
    325          	int index = indexF;
   \   0000000E   0xEEBD 0x0AC8      VCVT.S32.F32 S0,S16
   \   00000012   0xEE10 0x4A10      VMOV     R4,S0
    326          	if (index < 0 || index >= LE_COMMAND_COUNT) {
   \   00000016   0x2C00             CMP      R4,#+0
   \   00000018   0xD401             BMI.N    ??setFsioSetting_0
   \   0000001A   0x2C10             CMP      R4,#+16
   \   0000001C   0xDB08             BLT.N    ??setFsioSetting_1
    327          		scheduleMsg(logger, "invalid index %d", index);
   \                     ??setFsioSetting_0:
   \   0000001E   0x0022             MOVS     R2,R4
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable17_2
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x.... 0x....      BL       scheduleMsg
    328          		return;
   \   0000002E   0xE00A             B.N      ??setFsioSetting_2
    329          	}
    330          	engineConfiguration->bc.fsio_setting[index] = value;
   \                     ??setFsioSetting_1:
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable17_45
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   0000003A   0xF200 0x5004      ADDW     R0,R0,#+1284
   \   0000003E   0xEDC0 0x8A00      VSTR     S17,[R0, #0]
    331          	showFsioInfo();
   \   00000042   0x.... 0x....      BL       _Z12showFsioInfov
    332          }
   \                     ??setFsioSetting_2:
   \   00000046   0xECBD 0x8B02      VPOP     {D8}
   \   0000004A   0xBD10             POP      {R4,PC}          ;; return
    333          

   \                                 In section .text, align 2, keep-with-next
    334          static void setFsioFrequency(int index, int frequency) {
   \                     _Z16setFsioFrequencyii:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    335          	index--;
   \   00000006   0x1E64             SUBS     R4,R4,#+1
    336          	if (index < 0 || index >= LE_COMMAND_COUNT) {
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD401             BMI.N    ??setFsioFrequency_0
   \   0000000C   0x2C10             CMP      R4,#+16
   \   0000000E   0xDB08             BLT.N    ??setFsioFrequency_1
    337          		scheduleMsg(logger, "invalid index %d", index);
   \                     ??setFsioFrequency_0:
   \   00000010   0x0022             MOVS     R2,R4
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable17_2
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x.... 0x....      BL       scheduleMsg
    338          		return;
   \   00000020   0xE00F             B.N      ??setFsioFrequency_2
    339          	}
    340          	boardConfiguration->fsioFrequency[index] = frequency;
   \                     ??setFsioFrequency_1:
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable17_5
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xEB10 0x0044      ADDS     R0,R0,R4, LSL #+1
   \   0000002C   0xF8A0 0x5268      STRH     R5,[R0, #+616]
    341          	scheduleMsg(logger, "Setting FSIO frequency %d on #%d", frequency, index + 1);
   \   00000030   0x1C63             ADDS     R3,R4,#+1
   \   00000032   0x002A             MOVS     R2,R5
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable17_46
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x.... 0x....      BL       scheduleMsg
    342          }
   \                     ??setFsioFrequency_2:
   \   00000042   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    343          

   \                                 In section .text, align 2, keep-with-next
    344          static void setFsioExpression(const char *indexStr, const char *quotedLine, Engine *engine) {
   \                     _Z17setFsioExpressionPKcS0_P6Engine:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    345          	int index = atoi(indexStr) - 1;
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       atoi
   \   00000010   0x1E47             SUBS     R7,R0,#+1
    346          	if (index < 0 || index >= LE_COMMAND_COUNT) {
   \   00000012   0x2F00             CMP      R7,#+0
   \   00000014   0xD401             BMI.N    ??setFsioExpression_0
   \   00000016   0x2F10             CMP      R7,#+16
   \   00000018   0xDB08             BLT.N    ??setFsioExpression_1
    347          		scheduleMsg(logger, "invalid index %d", index);
   \                     ??setFsioExpression_0:
   \   0000001A   0x003A             MOVS     R2,R7
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable17_2
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x.... 0x....      BL       scheduleMsg
    348          		return;
   \   0000002A   0xE028             B.N      ??setFsioExpression_2
    349          	}
    350          	char * l = unquote((char*) quotedLine);
   \                     ??setFsioExpression_1:
   \   0000002C   0x0028             MOVS     R0,R5
   \   0000002E   0x.... 0x....      BL       unquote
   \   00000032   0x4680             MOV      R8,R0
    351          	if (strlen(l) > LE_COMMAND_LENGTH - 1) {
   \   00000034   0x4640             MOV      R0,R8
   \   00000036   0x.... 0x....      BL       strlen
   \   0000003A   0x28C8             CMP      R0,#+200
   \   0000003C   0xD30A             BCC.N    ??setFsioExpression_3
    352          		scheduleMsg(logger, "Too long %d", strlen(l));
   \   0000003E   0x4640             MOV      R0,R8
   \   00000040   0x.... 0x....      BL       strlen
   \   00000044   0x0002             MOVS     R2,R0
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable17_47
   \   0000004A   0x....             LDR.N    R0,??DataTable17_3
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0x.... 0x....      BL       scheduleMsg
    353          		return;
   \   00000052   0xE014             B.N      ??setFsioExpression_2
    354          	}
    355          
    356          	scheduleMsg(logger, "setting user out #%d to [%s]", index + 1, l);
   \                     ??setFsioExpression_3:
   \   00000054   0x4643             MOV      R3,R8
   \   00000056   0x1C7A             ADDS     R2,R7,#+1
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable17_48
   \   0000005C   0x....             LDR.N    R0,??DataTable17_3
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0x.... 0x....      BL       scheduleMsg
    357          	strcpy(engine->config->le_formulas[index], l);
   \   00000064   0x4641             MOV      R1,R8
   \   00000066   0x20C8             MOVS     R0,#+200
   \   00000068   0x6A32             LDR      R2,[R6, #+32]
   \   0000006A   0xFB00 0x2007      MLA      R0,R0,R7,R2
   \   0000006E   0xF600 0x00A8      ADDW     R0,R0,#+2216
   \   00000072   0x.... 0x....      BL       strcpy
    358          	// this would apply the changes
    359          	applyFsioConfiguration(PASS_ENGINE_PARAMETER_F);
   \   00000076   0x.... 0x....      BL       _Z22applyFsioConfigurationv
    360          	showFsioInfo();
   \   0000007A   0x.... 0x....      BL       _Z12showFsioInfov
    361          }
   \                     ??setFsioExpression_2:
   \   0000007E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    362          

   \                                 In section .text, align 2, keep-with-next
    363          static void eval(char *line, Engine *engine) {
   \                     _Z4evalPcP6Engine:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
    364          	line = unquote(line);
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       unquote
   \   00000010   0x0004             MOVS     R4,R0
    365          	scheduleMsg(logger, "Parsing [%s]", line);
   \   00000012   0x0022             MOVS     R2,R4
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable17_49
   \   00000018   0x....             LDR.N    R0,??DataTable17_3
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x.... 0x....      BL       scheduleMsg
    366          	evalPool.reset();
   \   00000020   0x....             LDR.N    R0,??DataTable16_22
   \   00000022   0x.... 0x....      BL       _ZN13LEElementPool5resetEv
    367          	LEElement * e = evalPool.parseExpression(line);
   \   00000026   0x0021             MOVS     R1,R4
   \   00000028   0x....             LDR.N    R0,??DataTable16_22
   \   0000002A   0x.... 0x....      BL       _ZN13LEElementPool15parseExpressionEPKc
   \   0000002E   0x0006             MOVS     R6,R0
    368          	if (e == NULL) {
   \   00000030   0x2E00             CMP      R6,#+0
   \   00000032   0xD106             BNE.N    ??eval_0
    369          		scheduleMsg(logger, "parsing failed");
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable17_50
   \   00000038   0x....             LDR.N    R0,??DataTable17_3
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x.... 0x....      BL       scheduleMsg
   \   00000040   0xE011             B.N      ??eval_1
    370          	} else {
    371          		float result = evalCalc.getValue2(e, engine);
   \                     ??eval_0:
   \   00000042   0x002A             MOVS     R2,R5
   \   00000044   0x0031             MOVS     R1,R6
   \   00000046   0x....             LDR.N    R0,??DataTable16_19
   \   00000048   0x.... 0x....      BL       _ZN12LECalculator9getValue2EP9LEElementP6Engine
   \   0000004C   0xEEB0 0x8A40      VMOV.F32 S16,S0
    372          		scheduleMsg(logger, "Eval result: %f", result);
   \   00000050   0xEE18 0x0A10      VMOV     R0,S16
   \   00000054   0x.... 0x....      BL       __aeabi_f2d
   \   00000058   0x0002             MOVS     R2,R0
   \   0000005A   0x000B             MOVS     R3,R1
   \   0000005C   0x....             LDR.N    R1,??DataTable17_51
   \   0000005E   0x....             LDR.N    R0,??DataTable17_3
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0x.... 0x....      BL       scheduleMsg
    373          	}
    374          }
   \                     ??eval_1:
   \   00000066   0xECBD 0x8B02      VPOP     {D8}
   \   0000006A   0xBD70             POP      {R4-R6,PC}       ;; return
    375          

   \                                 In section .text, align 2, keep-with-next
    376          void runFsio(void) {
   \                     _Z7runFsiov:
   \   00000000   0xB510             PUSH     {R4,LR}
    377          	for (int i = 0; i < LE_COMMAND_COUNT; i++) {
   \   00000002   0x2400             MOVS     R4,#+0
   \                     ??runFsio_0:
   \   00000004   0x2C10             CMP      R4,#+16
   \   00000006   0xDA06             BGE.N    ??runFsio_1
    378          		handleFsio(engine, i);
   \   00000008   0x0021             MOVS     R1,R4
   \   0000000A   0x....             LDR.N    R0,??DataTable17_52
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x.... 0x....      BL       _Z10handleFsioP6Enginei
    379          	}
   \   00000012   0x1C64             ADDS     R4,R4,#+1
   \   00000014   0xE7F6             B.N      ??runFsio_0
    380          
    381          #if EFI_FUEL_PUMP
    382          	if (boardConfiguration->fuelPumpPin != GPIO_UNASSIGNED && engineConfiguration->isFuelPumpEnabled) {
   \                     ??runFsio_1:
   \   00000016   0x....             LDR.N    R0,??DataTable17_5
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x6980             LDR      R0,[R0, #+24]
   \   0000001C   0x2850             CMP      R0,#+80
   \   0000001E   0xD010             BEQ.N    ??runFsio_2
   \   00000020   0x....             LDR.N    R0,??DataTable17_45
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF890 0x05E4      LDRB     R0,[R0, #+1508]
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x09C0             LSRS     R0,R0,#+7
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD007             BEQ.N    ??runFsio_2
    383          		setPinState("pump", &enginePins.fuelPumpRelay, fuelPumpLogic, engine);
   \   00000032   0x....             LDR.N    R0,??DataTable17_52
   \   00000034   0x6803             LDR      R3,[R0, #+0]
   \   00000036   0x....             LDR.N    R0,??DataTable17_37
   \   00000038   0x6802             LDR      R2,[R0, #+0]
   \   0000003A   0x....             LDR.N    R1,??DataTable17_53
   \   0000003C   0x....             LDR.N    R0,??DataTable17_54
   \   0000003E   0x.... 0x....      BL       _Z11setPinStatePKcP9OutputPinP9LEElementP6Engine
    384          	}
    385          #endif
    386          
    387          	/**
    388          	 * main relay is always on if ECU is on, that's a good enough initial implementation
    389          	 */
    390          	if (boardConfiguration->mainRelayPin != GPIO_UNASSIGNED)
   \                     ??runFsio_2:
   \   00000042   0x....             LDR.N    R0,??DataTable17_5
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0xF8D0 0x0134      LDR      R0,[R0, #+308]
   \   0000004A   0x2850             CMP      R0,#+80
   \   0000004C   0xD003             BEQ.N    ??runFsio_3
    391          		enginePins.mainRelay.setValue(true);
   \   0000004E   0x2101             MOVS     R1,#+1
   \   00000050   0x....             LDR.N    R0,??DataTable17_55
   \   00000052   0x.... 0x....      BL       _ZN9OutputPin8setValueEi
    392          
    393          	enginePins.o2heater.setValue(engine->rpmCalculator.isRunning());
   \                     ??runFsio_3:
   \   00000056   0x....             LDR.N    R0,??DataTable17_52
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x.... 0x....      BL       _ZN13RpmCalculator9isRunningEv
   \   0000005E   0x0001             MOVS     R1,R0
   \   00000060   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000062   0x....             LDR.N    R0,??DataTable17_56
   \   00000064   0x.... 0x....      BL       _ZN9OutputPin8setValueEi
    394          
    395          	if (boardConfiguration->acRelayPin != GPIO_UNASSIGNED) {
   \   00000068   0x....             LDR.N    R0,??DataTable17_5
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0xF8D0 0x0260      LDR      R0,[R0, #+608]
   \   00000070   0x2850             CMP      R0,#+80
   \   00000072   0xD007             BEQ.N    ??runFsio_4
    396          		setPinState("A/C", &enginePins.acRelay, acRelayLogic, engine);
   \   00000074   0x....             LDR.N    R0,??DataTable17_52
   \   00000076   0x6803             LDR      R3,[R0, #+0]
   \   00000078   0x....             LDR.N    R0,??DataTable17_36
   \   0000007A   0x6802             LDR      R2,[R0, #+0]
   \   0000007C   0x....             LDR.N    R1,??DataTable17_57
   \   0000007E   0x....             ADR.N    R0,??DataTable16  ;; "A/C"
   \   00000080   0x.... 0x....      BL       _Z11setPinStatePKcP9OutputPinP9LEElementP6Engine
    397          	}
    398          
    399          //	if (boardConfiguration->alternatorControlPin != GPIO_UNASSIGNED) {
    400          //		setPinState("alternator", &enginePins.alternatorField, alternatorLogic, engine);
    401          //	}
    402          
    403          	if (boardConfiguration->fanPin != GPIO_UNASSIGNED) {
   \                     ??runFsio_4:
   \   00000084   0x....             LDR.N    R0,??DataTable17_5
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0xF8D0 0x0090      LDR      R0,[R0, #+144]
   \   0000008C   0x2850             CMP      R0,#+80
   \   0000008E   0xD007             BEQ.N    ??runFsio_5
    404          		setPinState("fan", &enginePins.fanRelay, radiatorFanLogic, engine);
   \   00000090   0x....             LDR.N    R0,??DataTable17_52
   \   00000092   0x6803             LDR      R3,[R0, #+0]
   \   00000094   0x....             LDR.N    R0,??DataTable17_39
   \   00000096   0x6802             LDR      R2,[R0, #+0]
   \   00000098   0x....             LDR.N    R1,??DataTable16_32
   \   0000009A   0x....             ADR.N    R0,??DataTable17  ;; "fan"
   \   0000009C   0x.... 0x....      BL       _Z11setPinStatePKcP9OutputPinP9LEElementP6Engine
    405          	}
    406          
    407          }
   \                     ??runFsio_5:
   \   000000A0   0xBD10             POP      {R4,PC}          ;; return
    408          

   \                                 In section .bss, align 4
    409          static pin_output_mode_e defa = OM_DEFAULT;
   \                     defa:
   \   00000000                      DS8 4
    410          

   \                                 In section .text, align 2, keep-with-next
    411          void initFsioImpl(Logging *sharedLogger, Engine *engine) {
   \                     _Z12initFsioImplP7LoggingP6Engine:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
    412          	logger = sharedLogger;
   \   0000000A   0x....             LDR.N    R0,??DataTable17_3
   \   0000000C   0x6004             STR      R4,[R0, #+0]
    413          	for (int i = 0; i < LE_COMMAND_COUNT; i++) {
   \   0000000E   0x2000             MOVS     R0,#+0
   \                     ??initFsioImpl_0:
   \   00000010   0x2810             CMP      R0,#+16
   \   00000012   0xDA05             BGE.N    ??initFsioImpl_1
    414          		fsioLogics[i] = NULL;
   \   00000014   0x....             LDR.N    R1,??DataTable17_10
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
    415          	}
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0xE7F7             B.N      ??initFsioImpl_0
    416          
    417          
    418          #if EFI_FUEL_PUMP
    419          	fuelPumpLogic = sysPool.parseExpression(FUEL_PUMP_LOGIC);
   \                     ??initFsioImpl_1:
   \   00000020   0x....             LDR.N    R1,??DataTable17_58
   \   00000022   0x....             LDR.N    R0,??DataTable17_59
   \   00000024   0x.... 0x....      BL       _ZN13LEElementPool15parseExpressionEPKc
   \   00000028   0x....             LDR.N    R1,??DataTable17_37
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    420          #endif
    421          
    422          	acRelayLogic = sysPool.parseExpression(AC_RELAY_LOGIC);
   \   0000002C   0x....             LDR.N    R1,??DataTable17_60
   \   0000002E   0x....             LDR.N    R0,??DataTable17_59
   \   00000030   0x.... 0x....      BL       _ZN13LEElementPool15parseExpressionEPKc
   \   00000034   0x....             LDR.N    R1,??DataTable17_36
   \   00000036   0x6008             STR      R0,[R1, #+0]
    423          	radiatorFanLogic = sysPool.parseExpression(FAN_CONTROL_LOGIC);
   \   00000038   0x....             LDR.N    R1,??DataTable17_61
   \   0000003A   0x....             LDR.N    R0,??DataTable17_59
   \   0000003C   0x.... 0x....      BL       _ZN13LEElementPool15parseExpressionEPKc
   \   00000040   0x....             LDR.N    R1,??DataTable17_39
   \   00000042   0x6008             STR      R0,[R1, #+0]
    424          
    425          	alternatorLogic = sysPool.parseExpression(ALTERNATOR_LOGIC);
   \   00000044   0x....             LDR.N    R1,??DataTable17_62
   \   00000046   0x....             LDR.N    R0,??DataTable17_59
   \   00000048   0x.... 0x....      BL       _ZN13LEElementPool15parseExpressionEPKc
   \   0000004C   0x....             LDR.N    R1,??DataTable17_40
   \   0000004E   0x6008             STR      R0,[R1, #+0]
    426          
    427          #if EFI_PROD_CODE || defined(__DOXYGEN__)
    428          	for (int i = 0; i < LE_COMMAND_COUNT; i++) {
   \   00000050   0x2600             MOVS     R6,#+0
   \                     ??initFsioImpl_2:
   \   00000052   0x2E10             CMP      R6,#+16
   \   00000054   0xDA36             BGE.N    ??initFsioImpl_3
    429          		brain_pin_e brainPin = boardConfiguration->fsioPins[i];
   \   00000056   0x....             LDR.N    R0,??DataTable17_5
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   0000005E   0xF8D0 0x71C4      LDR      R7,[R0, #+452]
    430          
    431          		if (brainPin != GPIO_UNASSIGNED) {
   \   00000062   0x2F50             CMP      R7,#+80
   \   00000064   0xD02C             BEQ.N    ??initFsioImpl_4
    432          			int frequency = boardConfiguration->fsioFrequency[i];
   \   00000066   0x....             LDR.N    R0,??DataTable17_5
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0xEB10 0x0046      ADDS     R0,R0,R6, LSL #+1
   \   0000006E   0xF9B0 0x8268      LDRSH    R8,[R0, #+616]
    433          			if (frequency == 0) {
   \   00000072   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000076   0xD10F             BNE.N    ??initFsioImpl_5
    434          				outputPinRegisterExt2(getGpioPinName(i), &fsioOutputs[i], boardConfiguration->fsioPins[i], &defa);
   \   00000078   0x0030             MOVS     R0,R6
   \   0000007A   0x.... 0x....      BL       _Z14getGpioPinNamei
   \   0000007E   0x....             LDR.N    R3,??DataTable17_63
   \   00000080   0x....             LDR.N    R1,??DataTable17_5
   \   00000082   0x6809             LDR      R1,[R1, #+0]
   \   00000084   0xEB11 0x0186      ADDS     R1,R1,R6, LSL #+2
   \   00000088   0xF8D1 0x21C4      LDR      R2,[R1, #+452]
   \   0000008C   0x....             LDR.N    R1,??DataTable17_1
   \   0000008E   0xEB11 0x1106      ADDS     R1,R1,R6, LSL #+4
   \   00000092   0x.... 0x....      BL       _Z21outputPinRegisterExt2PKcP9OutputPin11brain_pin_eP17pin_output_mode_e
   \   00000096   0xE013             B.N      ??initFsioImpl_4
    435          			} else {
    436          				startSimplePwmExt(&fsioPwm[i], "FSIO", brainPin, &fsioOutputs[i], frequency, 0.5f, applyPinState);
   \                     ??initFsioImpl_5:
   \   00000098   0x....             LDR.N    R0,??DataTable17_64
   \   0000009A   0x9000             STR      R0,[SP, #+0]
   \   0000009C   0xEEF6 0x0A00      VMOV.F32 S1,#0.5
   \   000000A0   0xEE00 0x8A10      VMOV     S0,R8
   \   000000A4   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000000A8   0x....             LDR.N    R0,??DataTable17_1
   \   000000AA   0xEB10 0x1306      ADDS     R3,R0,R6, LSL #+4
   \   000000AE   0x003A             MOVS     R2,R7
   \   000000B0   0x....             LDR.N    R1,??DataTable17_65
   \   000000B2   0x2070             MOVS     R0,#+112
   \   000000B4   0x.... 0x....      LDR.W    R12,??DataTable17_66
   \   000000B8   0xFB00 0xC006      MLA      R0,R0,R6,R12
   \   000000BC   0x.... 0x....      BL       _Z17startSimplePwmExtP9PwmConfigPKc11brain_pin_eP9OutputPinffPFvS0_iE
    437          			}
    438          		}
    439          	}
   \                     ??initFsioImpl_4:
   \   000000C0   0x1C76             ADDS     R6,R6,#+1
   \   000000C2   0xE7C6             B.N      ??initFsioImpl_2
    440          
    441          	for (int i = 0; i < LE_COMMAND_COUNT; i++) {
   \                     ??initFsioImpl_3:
   \   000000C4   0x2600             MOVS     R6,#+0
   \                     ??initFsioImpl_6:
   \   000000C6   0x2E10             CMP      R6,#+16
   \   000000C8   0xDA16             BGE.N    ??initFsioImpl_7
    442          		brain_pin_e inputPin = boardConfiguration->fsioDigitalInputs[i];
   \   000000CA   0x....             LDR.N    R0,??DataTable17_5
   \   000000CC   0x6800             LDR      R0,[R0, #+0]
   \   000000CE   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   000000D2   0xF8D0 0x7324      LDR      R7,[R0, #+804]
    443          
    444          		if (inputPin != GPIO_UNASSIGNED) {
   \   000000D6   0x2F50             CMP      R7,#+80
   \   000000D8   0xD00C             BEQ.N    ??initFsioImpl_8
    445          			mySetPadMode2("FSIO input", inputPin, getInputMode(engineConfiguration->fsioInputModes[i]));
   \   000000DA   0x....             LDR.N    R0,??DataTable17_45
   \   000000DC   0x6800             LDR      R0,[R0, #+0]
   \   000000DE   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   000000E2   0xF8D0 0x0614      LDR      R0,[R0, #+1556]
   \   000000E6   0x.... 0x....      BL       _Z12getInputMode16pin_input_mode_e
   \   000000EA   0x0002             MOVS     R2,R0
   \   000000EC   0x0039             MOVS     R1,R7
   \   000000EE   0x....             LDR.N    R0,??DataTable17_67
   \   000000F0   0x.... 0x....      BL       _Z13mySetPadMode2PKc11brain_pin_ej
    446          		}
    447          	}
   \                     ??initFsioImpl_8:
   \   000000F4   0x1C76             ADDS     R6,R6,#+1
   \   000000F6   0xE7E6             B.N      ??initFsioImpl_6
    448          
    449          #endif /* EFI_PROD_CODE */
    450          
    451          	addConsoleActionSSP("set_fsio_expression", (VoidCharPtrCharPtrVoidPtr) setFsioExpression, engine);
   \                     ??initFsioImpl_7:
   \   000000F8   0x002A             MOVS     R2,R5
   \   000000FA   0x....             LDR.N    R1,??DataTable17_68
   \   000000FC   0x....             LDR.N    R0,??DataTable17_69
   \   000000FE   0x.... 0x....      BL       addConsoleActionSSP
    452          	addConsoleActionSS("set_fsio_output_pin", (VoidCharPtrCharPtr) setFsioOutputPin);
   \   00000102   0x....             LDR.N    R1,??DataTable17_70
   \   00000104   0x....             LDR.N    R0,??DataTable17_71
   \   00000106   0x.... 0x....      BL       addConsoleActionSS
    453          	addConsoleActionII("set_fsio_output_frequency", (VoidIntInt) setFsioFrequency);
   \   0000010A   0x....             LDR.N    R1,??DataTable17_72
   \   0000010C   0x....             LDR.N    R0,??DataTable17_73
   \   0000010E   0x.... 0x....      BL       addConsoleActionII
    454          
    455          	addConsoleActionFF("set_fsio_setting", setFsioSetting);
   \   00000112   0x....             LDR.N    R1,??DataTable17_74
   \   00000114   0x....             LDR.N    R0,??DataTable17_75
   \   00000116   0x.... 0x....      BL       addConsoleActionFF
    456          
    457          	addConsoleActionSS("set_fsio_input_pin", (VoidCharPtrCharPtr) setFsioInputPin);
   \   0000011A   0x....             LDR.N    R1,??DataTable17_76
   \   0000011C   0x....             LDR.N    R0,??DataTable17_77
   \   0000011E   0x.... 0x....      BL       addConsoleActionSS
    458          	addConsoleAction("fsioinfo", showFsioInfo);
   \   00000122   0x....             LDR.N    R1,??DataTable17_78
   \   00000124   0x....             LDR.N    R0,??DataTable17_79
   \   00000126   0x.... 0x....      BL       addConsoleAction
    459          
    460          	addConsoleActionSP("eval", (VoidCharPtrVoidPtr) eval, engine);
   \   0000012A   0x002A             MOVS     R2,R5
   \   0000012C   0x....             LDR.N    R1,??DataTable17_80
   \   0000012E   0x....             LDR.N    R0,??DataTable17_81
   \   00000130   0x.... 0x....      BL       addConsoleActionSP
    461          }
   \   00000134   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x72 0x70          DC8      "rpm"
   \              0x6D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x74 0x70          DC8      "tps"
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x6D 0x61          DC8      "maf"
   \              0x66 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x66 0x61          DC8      "fan"
   \              0x6E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x7FFFFFFF         DC32     0x7fffffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x52 0x50          DC8      "RPM"
   \              0x4D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x43 0x4C          DC8      "CLT"
   \              0x54 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x66 0x61          DC8      "fan"
   \              0x6E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x6F 0x6E          DC8      0x6F, 0x6E, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x6F 0x66          DC8      "off"
   \              0x66 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x25 0x73          DC8      "%s:"
   \              0x3A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x61 0x2F          DC8      "a/c"
   \              0x63 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x61 0x6C          DC8      "alt"
   \              0x74 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   0x........         DC32     leRpm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \   00000000   0x........         DC32     leTps

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x41 0x2F          DC8      "A/C"
   \              0x43 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0x........         DC32     leMaf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   0x........         DC32     `?<Constant "vbatt">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   0x........         DC32     leVBatt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   0x........         DC32     leFan

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \   00000000   0x........         DC32     `?<Constant "coolant">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_6:
   \   00000000   0x........         DC32     leCoolant

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_7:
   \   00000000   0x........         DC32     `?<Constant "ac_on_switch">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_8:
   \   00000000   0x........         DC32     leAcToggle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_9:
   \   00000000   0x........         DC32     `?<Constant "fan_on_setting">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_10:
   \   00000000   0x........         DC32     leFanOnSetting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_11:
   \   00000000   0x........         DC32     `?<Constant "fan_off_setting">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_12:
   \   00000000   0x........         DC32     leFanOffSetting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_13:
   \   00000000   0x........         DC32     `?<Constant "time_since_boot">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_14:
   \   00000000   0x........         DC32     leTimeSinceBoot

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_15:
   \   00000000   0x........         DC32     `?<Constant "fsio_setting">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_16:
   \   00000000   0x........         DC32     leFsioSetting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_17:
   \   00000000   0x........         DC32     `?<Constant "knock">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_18:
   \   00000000   0x........         DC32     leKnock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_19:
   \   00000000   0x........         DC32     evalCalc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_20:
   \   00000000   0x........         DC32     _ZN9LEElementC1Ev

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_21:
   \   00000000   0x........         DC32     evalPoolElements

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_22:
   \   00000000   0x........         DC32     evalPool

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_23:
   \   00000000   0x........         DC32     sysElements

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_24:
   \   00000000   0x........         DC32     sysPool

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_25:
   \   00000000   0x........         DC32     userElements

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_26:
   \   00000000   0x........         DC32     userPool

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_27:
   \   00000000   0x........         DC32     _ZN9SimplePwmC1Ev

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_28:
   \   00000000   0x........         DC32     fsioPwm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_29:
   \   00000000   0x........         DC32     calc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_30:
   \   00000000   0x........         DC32     _ZN9OutputPinC1Ev

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_31:
   \   00000000   0x........         DC32     `?<Constant "getLEValue">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_32:
   \   00000000   0x........         DC32     enginePins+0x10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_33:
   \   00000000   0x........         DC32     `?<Constant "FSIO unexpected %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x66 0x61          DC8      "fan"
   \              0x6E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x........         DC32     fsioOutputs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x........         DC32     `?<Constant "invalid index %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0x........         DC32     logger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \   00000000   0x........         DC32     `?<Constant "invalid pin name [%s]">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_5:
   \   00000000   0x........         DC32     boardConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_6:
   \   00000000   0x........         DC32     `?<Constant "FSIO input pin #%d [%s]">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_7:
   \   00000000   0x........         DC32     `?<Constant "FSIO output pin #%d [%s]">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_8:
   \   00000000   0x........         DC32     config

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_9:
   \   00000000   0x........         DC32     `?<Constant "parsing [%s]">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_10:
   \   00000000   0x........         DC32     fsioLogics

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_11:
   \   00000000   0x........         DC32     `?<Constant "GPIO_0">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_12:
   \   00000000   0x........         DC32     `?<Constant "GPIO_1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_13:
   \   00000000   0x........         DC32     `?<Constant "GPIO_10">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_14:
   \   00000000   0x........         DC32     `?<Constant "GPIO_11">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_15:
   \   00000000   0x........         DC32     `?<Constant "GPIO_12">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_16:
   \   00000000   0x........         DC32     `?<Constant "GPIO_13">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_17:
   \   00000000   0x........         DC32     `?<Constant "GPIO_14">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_18:
   \   00000000   0x........         DC32     `?<Constant "GPIO_15">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_19:
   \   00000000   0x........         DC32     `?<Constant "GPIO_2">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_20:
   \   00000000   0x........         DC32     `?<Constant "GPIO_3">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_21:
   \   00000000   0x........         DC32     `?<Constant "GPIO_4">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_22:
   \   00000000   0x........         DC32     `?<Constant "GPIO_5">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_23:
   \   00000000   0x........         DC32     `?<Constant "GPIO_6">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_24:
   \   00000000   0x........         DC32     `?<Constant "GPIO_7">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_25:
   \   00000000   0x........         DC32     `?<Constant "GPIO_8">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_26:
   \   00000000   0x........         DC32     `?<Constant "GPIO_9">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_27:
   \   00000000   0x........         DC32     `?<Constant "fan_on">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_28:
   \   00000000   0x........         DC32     `?<Constant "fan_off">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_29:
   \   00000000   0x........         DC32     ??buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_30:
   \   00000000   0x........         DC32     `?<Constant "invalid expression fo...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_31:
   \   00000000   0x........         DC32     `?<Constant "calc %d: action %s va...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_32:
   \   00000000   0x........         DC32     `?<Constant "setPin %s %s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_33:
   \   00000000   0x........         DC32     `?<Constant "action %d: fValue=%f ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_34:
   \   00000000   0x........         DC32     `?<Constant "<end>">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_35:
   \   00000000   0x........         DC32     `?<Constant "sys used %d/user used %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_36:
   \   00000000   0x........         DC32     acRelayLogic

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_37:
   \   00000000   0x........         DC32     fuelPumpLogic

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_38:
   \   00000000   0x........         DC32     `?<Constant "fuel">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_39:
   \   00000000   0x........         DC32     radiatorFanLogic

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_40:
   \   00000000   0x........         DC32     alternatorLogic

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_41:
   \   00000000   0x........         DC32     engineConfiguration2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_42:
   \   00000000   0x........         DC32     `?<Constant "FSIO #%d [%s] at %s@%...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_43:
   \   00000000   0x........         DC32     `?<Constant "user property #%d: %f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_44:
   \   00000000   0x........         DC32     `?<Constant "FSIO digital input #%...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_45:
   \   00000000   0x........         DC32     engineConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_46:
   \   00000000   0x........         DC32     `?<Constant "Setting FSIO frequenc...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_47:
   \   00000000   0x........         DC32     `?<Constant "Too long %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_48:
   \   00000000   0x........         DC32     `?<Constant "setting user out #%d ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_49:
   \   00000000   0x........         DC32     `?<Constant "Parsing [%s]">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_50:
   \   00000000   0x........         DC32     `?<Constant "parsing failed">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_51:
   \   00000000   0x........         DC32     `?<Constant "Eval result: %f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_52:
   \   00000000   0x........         DC32     engine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_53:
   \   00000000   0x........         DC32     enginePins+0x30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_54:
   \   00000000   0x........         DC32     `?<Constant "pump">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_55:
   \   00000000   0x........         DC32     enginePins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_56:
   \   00000000   0x........         DC32     enginePins+0x40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_57:
   \   00000000   0x........         DC32     enginePins+0x20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_58:
   \   00000000   0x........         DC32     `?<Constant "time_since_boot 4 < r...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_59:
   \   00000000   0x........         DC32     sysPool

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_60:
   \   00000000   0x........         DC32     `?<Constant "ac_on_switch">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_61:
   \   00000000   0x........         DC32     `?<Constant "fan coolant fan_off_s...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_62:
   \   00000000   0x........         DC32     `?<Constant "vbatt 14.5 <">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_63:
   \   00000000   0x........         DC32     defa

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_64:
   \   00000000   0x........         DC32     _Z13applyPinStateP9PwmConfigi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_65:
   \   00000000   0x........         DC32     `?<Constant "FSIO">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_66:
   \   00000000   0x........         DC32     fsioPwm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_67:
   \   00000000   0x........         DC32     `?<Constant "FSIO input">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_68:
   \   00000000   0x........         DC32     _Z17setFsioExpressionPKcS0_P6Engine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_69:
   \   00000000   0x........         DC32     `?<Constant "set_fsio_expression">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_70:
   \   00000000   0x........         DC32     _Z16setFsioOutputPinPKcS0_

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_71:
   \   00000000   0x........         DC32     `?<Constant "set_fsio_output_pin">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_72:
   \   00000000   0x........         DC32     _Z16setFsioFrequencyii

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_73:
   \   00000000   0x........         DC32     `?<Constant "set_fsio_output_frequ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_74:
   \   00000000   0x........         DC32     _Z14setFsioSettingff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_75:
   \   00000000   0x........         DC32     `?<Constant "set_fsio_setting">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_76:
   \   00000000   0x........         DC32     _Z15setFsioInputPinPKcS0_

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_77:
   \   00000000   0x........         DC32     `?<Constant "set_fsio_input_pin">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_78:
   \   00000000   0x........         DC32     _Z12showFsioInfov

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_79:
   \   00000000   0x........         DC32     `?<Constant "fsioinfo">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_80:
   \   00000000   0x........         DC32     _Z4evalPcP6Engine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_81:
   \   00000000   0x........         DC32     `?<Constant "eval">`

   \                                 In section .init_array, align 4, keep-with-next, root
   \   00000000   0x........         DC32    RELOC_ARM_TARGET1 __sti__routine

   \                                 In section .rodata, align 4
   \                     `?<Constant "getLEValue">`:
   \   00000000   0x67 0x65          DC8 "getLEValue"
   \              0x74 0x4C    
   \              0x45 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "FSIO unexpected %d">`:
   \   00000000   0x46 0x53          DC8 "FSIO unexpected %d"
   \              0x49 0x4F    
   \              0x20 0x75    
   \              0x6E 0x65    
   \              0x78 0x70    
   \              0x65 0x63    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x25 0x64    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "invalid index %d">`:
   \   00000000   0x69 0x6E          DC8 "invalid index %d"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x69 0x6E    
   \              0x64 0x65    
   \              0x78 0x20    
   \              0x25 0x64    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "invalid pin name [%s]">`:
   \   00000000   0x69 0x6E          DC8 "invalid pin name [%s]"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x70 0x69    
   \              0x6E 0x20    
   \              0x6E 0x61    
   \              0x6D 0x65    
   \              0x20 0x5B    
   \              0x25 0x73    
   \              0x5D 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "FSIO input pin #%d [%s]">`:
   \   00000000   0x46 0x53          DC8 "FSIO input pin #%d [%s]"
   \              0x49 0x4F    
   \              0x20 0x69    
   \              0x6E 0x70    
   \              0x75 0x74    
   \              0x20 0x70    
   \              0x69 0x6E    
   \              0x20 0x23    
   \              0x25 0x64    
   \              0x20 0x5B    
   \              0x25 0x73    
   \              0x5D 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "FSIO output pin #%d [%s]">`:
   \   00000000   0x46 0x53          DC8 "FSIO output pin #%d [%s]"
   \              0x49 0x4F    
   \              0x20 0x6F    
   \              0x75 0x74    
   \              0x70 0x75    
   \              0x74 0x20    
   \              0x70 0x69    
   \              0x6E 0x20    
   \              0x23 0x25    
   \              0x64 0x20    
   \              0x5B 0x25    
   \              0x73 0x5D    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "parsing [%s]">`:
   \   00000000   0x70 0x61          DC8 "parsing [%s]"
   \              0x72 0x73    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x5B 0x25    
   \              0x73 0x5D    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPIO_0">`:
   \   00000000   0x47 0x50          DC8 "GPIO_0"
   \              0x49 0x4F    
   \              0x5F 0x30    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPIO_1">`:
   \   00000000   0x47 0x50          DC8 "GPIO_1"
   \              0x49 0x4F    
   \              0x5F 0x31    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPIO_10">`:
   \   00000000   0x47 0x50          DC8 "GPIO_10"
   \              0x49 0x4F    
   \              0x5F 0x31    
   \              0x30 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPIO_11">`:
   \   00000000   0x47 0x50          DC8 "GPIO_11"
   \              0x49 0x4F    
   \              0x5F 0x31    
   \              0x31 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPIO_12">`:
   \   00000000   0x47 0x50          DC8 "GPIO_12"
   \              0x49 0x4F    
   \              0x5F 0x31    
   \              0x32 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPIO_13">`:
   \   00000000   0x47 0x50          DC8 "GPIO_13"
   \              0x49 0x4F    
   \              0x5F 0x31    
   \              0x33 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPIO_14">`:
   \   00000000   0x47 0x50          DC8 "GPIO_14"
   \              0x49 0x4F    
   \              0x5F 0x31    
   \              0x34 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPIO_15">`:
   \   00000000   0x47 0x50          DC8 "GPIO_15"
   \              0x49 0x4F    
   \              0x5F 0x31    
   \              0x35 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPIO_2">`:
   \   00000000   0x47 0x50          DC8 "GPIO_2"
   \              0x49 0x4F    
   \              0x5F 0x32    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPIO_3">`:
   \   00000000   0x47 0x50          DC8 "GPIO_3"
   \              0x49 0x4F    
   \              0x5F 0x33    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPIO_4">`:
   \   00000000   0x47 0x50          DC8 "GPIO_4"
   \              0x49 0x4F    
   \              0x5F 0x34    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPIO_5">`:
   \   00000000   0x47 0x50          DC8 "GPIO_5"
   \              0x49 0x4F    
   \              0x5F 0x35    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPIO_6">`:
   \   00000000   0x47 0x50          DC8 "GPIO_6"
   \              0x49 0x4F    
   \              0x5F 0x36    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPIO_7">`:
   \   00000000   0x47 0x50          DC8 "GPIO_7"
   \              0x49 0x4F    
   \              0x5F 0x37    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPIO_8">`:
   \   00000000   0x47 0x50          DC8 "GPIO_8"
   \              0x49 0x4F    
   \              0x5F 0x38    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPIO_9">`:
   \   00000000   0x47 0x50          DC8 "GPIO_9"
   \              0x49 0x4F    
   \              0x5F 0x39    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x52 0x50          DC8 "RPM"
   \              0x4D 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x43 0x4C          DC8 "CLT"
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "fan_on">`:
   \   00000000   0x66 0x61          DC8 "fan_on"
   \              0x6E 0x5F    
   \              0x6F 0x6E    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "fan_off">`:
   \   00000000   0x66 0x61          DC8 "fan_off"
   \              0x6E 0x5F    
   \              0x6F 0x66    
   \              0x66 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x66 0x61          DC8 "fan"
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "invalid expression fo...">`:
   \   00000000   0x69 0x6E          DC8 "invalid expression for %s"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x65 0x78    
   \              0x70 0x72    
   \              0x65 0x73    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x25    
   \              0x73 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "calc %d: action %s va...">`:
   \   00000000   0x63 0x61          DC8 "calc %d: action %s value %f"
   \              0x6C 0x63    
   \              0x20 0x25    
   \              0x64 0x3A    
   \              0x20 0x61    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x25 0x73    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x20 0x25    
   \              0x66 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "setPin %s %s">`:
   \   00000000   0x73 0x65          DC8 "setPin %s %s"
   \              0x74 0x50    
   \              0x69 0x6E    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x25 0x73    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x6F 0x6E          DC8 "on"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x6F 0x66          DC8 "off"
   \              0x66 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x73          DC8 "%s:"
   \              0x3A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "action %d: fValue=%f ...">`:
   \   00000000   0x61 0x63          DC8 "action %d: fValue=%f iValue=%d"
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x25    
   \              0x64 0x3A    
   \              0x20 0x66    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x3D    
   \              0x25 0x66    
   \              0x20 0x69    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "<end>">`:
   \   00000000   0x3C 0x65          DC8 "<end>"
   \              0x6E 0x64    
   \              0x3E 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "sys used %d/user used %d">`:
   \   00000000   0x73 0x79          DC8 "sys used %d/user used %d"
   \              0x73 0x20    
   \              0x75 0x73    
   \              0x65 0x64    
   \              0x20 0x25    
   \              0x64 0x2F    
   \              0x75 0x73    
   \              0x65 0x72    
   \              0x20 0x75    
   \              0x73 0x65    
   \              0x64 0x20    
   \              0x25 0x64    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x61 0x2F          DC8 "a/c"
   \              0x63 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "fuel">`:
   \   00000000   0x66 0x75          DC8 "fuel"
   \              0x65 0x6C    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x61 0x6C          DC8 "alt"
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "FSIO #%d [%s] at %s@%...">`:
   \   00000000   0x46 0x53          DC8 "FSIO #%d [%s] at %s@%dHz value=%f"
   \              0x49 0x4F    
   \              0x20 0x23    
   \              0x25 0x64    
   \              0x20 0x5B    
   \              0x25 0x73    
   \              0x5D 0x20    
   \              0x61 0x74    
   \              0x20 0x25    
   \              0x73 0x40    
   \              0x25 0x64    
   \              0x48 0x7A    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x3D 0x25    
   \              0x66 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "user property #%d: %f">`:
   \   00000000   0x75 0x73          DC8 "user property #%d: %f"
   \              0x65 0x72    
   \              0x20 0x70    
   \              0x72 0x6F    
   \              0x70 0x65    
   \              0x72 0x74    
   \              0x79 0x20    
   \              0x23 0x25    
   \              0x64 0x3A    
   \              0x20 0x25    
   \              0x66 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "FSIO digital input #%...">`:
   \   00000000   0x46 0x53          DC8 "FSIO digital input #%d: %s"
   \              0x49 0x4F    
   \              0x20 0x64    
   \              0x69 0x67    
   \              0x69 0x74    
   \              0x61 0x6C    
   \              0x20 0x69    
   \              0x6E 0x70    
   \              0x75 0x74    
   \              0x20 0x23    
   \              0x25 0x64    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Setting FSIO frequenc...">`:
   \   00000000   0x53 0x65          DC8 "Setting FSIO frequency %d on #%d"
   \              0x74 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x46 0x53    
   \              0x49 0x4F    
   \              0x20 0x66    
   \              0x72 0x65    
   \              0x71 0x75    
   \              0x65 0x6E    
   \              0x63 0x79    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x6F 0x6E    
   \              0x20 0x23    
   \              0x25 0x64    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Too long %d">`:
   \   00000000   0x54 0x6F          DC8 "Too long %d"
   \              0x6F 0x20    
   \              0x6C 0x6F    
   \              0x6E 0x67    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "setting user out #%d ...">`:
   \   00000000   0x73 0x65          DC8 "setting user out #%d to [%s]"
   \              0x74 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x75 0x73    
   \              0x65 0x72    
   \              0x20 0x6F    
   \              0x75 0x74    
   \              0x20 0x23    
   \              0x25 0x64    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x5B 0x25    
   \              0x73 0x5D    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Parsing [%s]">`:
   \   00000000   0x50 0x61          DC8 "Parsing [%s]"
   \              0x72 0x73    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x5B 0x25    
   \              0x73 0x5D    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "parsing failed">`:
   \   00000000   0x70 0x61          DC8 "parsing failed"
   \              0x72 0x73    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Eval result: %f">`:
   \   00000000   0x45 0x76          DC8 "Eval result: %f"
   \              0x61 0x6C    
   \              0x20 0x72    
   \              0x65 0x73    
   \              0x75 0x6C    
   \              0x74 0x3A    
   \              0x20 0x25    
   \              0x66 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "pump">`:
   \   00000000   0x70 0x75          DC8 "pump"
   \              0x6D 0x70    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x41 0x2F          DC8 "A/C"
   \              0x43 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "time_since_boot 4 < r...">`:
   \   00000000   0x74 0x69          DC8 "time_since_boot 4 < rpm 0 > OR"
   \              0x6D 0x65    
   \              0x5F 0x73    
   \              0x69 0x6E    
   \              0x63 0x65    
   \              0x5F 0x62    
   \              0x6F 0x6F    
   \              0x74 0x20    
   \              0x34 0x20    
   \              0x3C 0x20    
   \              0x72 0x70    
   \              0x6D 0x20    
   \              0x30 0x20    
   \              0x3E 0x20    
   \              0x4F 0x52    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "ac_on_switch">`:
   \   00000000   0x61 0x63          DC8 "ac_on_switch"
   \              0x5F 0x6F    
   \              0x6E 0x5F    
   \              0x73 0x77    
   \              0x69 0x74    
   \              0x63 0x68    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "fan coolant fan_off_s...">`:
   \   00000000   0x66 0x61          DC8 66H, 61H, 6EH, 20H, 63H, 6FH, 6FH, 6CH
   \              0x6E 0x20    
   \              0x63 0x6F    
   \              0x6F 0x6C    
   \   00000008   0x61 0x6E          DC8 61H, 6EH, 74H, 20H, 66H, 61H, 6EH, 5FH
   \              0x74 0x20    
   \              0x66 0x61    
   \              0x6E 0x5F    
   \   00000010   0x6F 0x66          DC8 6FH, 66H, 66H, 5FH, 73H, 65H, 74H, 74H
   \              0x66 0x5F    
   \              0x73 0x65    
   \              0x74 0x74    
   \   00000018   0x69 0x6E          DC8 69H, 6EH, 67H, 20H, 3EH, 20H, 26H, 20H
   \              0x67 0x20    
   \              0x3E 0x20    
   \              0x26 0x20    
   \   00000020   0x63 0x6F          DC8 63H, 6FH, 6FH, 6CH, 61H, 6EH, 74H, 20H
   \              0x6F 0x6C    
   \              0x61 0x6E    
   \              0x74 0x20    
   \   00000028   0x66 0x61          DC8 66H, 61H, 6EH, 5FH, 6FH, 6EH, 5FH, 73H
   \              0x6E 0x5F    
   \              0x6F 0x6E    
   \              0x5F 0x73    
   \   00000030   0x65 0x74          DC8 65H, 74H, 74H, 69H, 6EH, 67H, 20H, 3EH
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x3E    
   \   00000038   0x20 0x4F          DC8 20H, 4FH, 52H, 0
   \              0x52 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "vbatt 14.5 <">`:
   \   00000000   0x76 0x62          DC8 "vbatt 14.5 <"
   \              0x61 0x74    
   \              0x74 0x20    
   \              0x31 0x34    
   \              0x2E 0x35    
   \              0x20 0x3C    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "FSIO">`:
   \   00000000   0x46 0x53          DC8 "FSIO"
   \              0x49 0x4F    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "FSIO input">`:
   \   00000000   0x46 0x53          DC8 "FSIO input"
   \              0x49 0x4F    
   \              0x20 0x69    
   \              0x6E 0x70    
   \              0x75 0x74    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "set_fsio_expression">`:
   \   00000000   0x73 0x65          DC8 "set_fsio_expression"
   \              0x74 0x5F    
   \              0x66 0x73    
   \              0x69 0x6F    
   \              0x5F 0x65    
   \              0x78 0x70    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x69 0x6F    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "set_fsio_output_pin">`:
   \   00000000   0x73 0x65          DC8 "set_fsio_output_pin"
   \              0x74 0x5F    
   \              0x66 0x73    
   \              0x69 0x6F    
   \              0x5F 0x6F    
   \              0x75 0x74    
   \              0x70 0x75    
   \              0x74 0x5F    
   \              0x70 0x69    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "set_fsio_output_frequ...">`:
   \   00000000   0x73 0x65          DC8 "set_fsio_output_frequency"
   \              0x74 0x5F    
   \              0x66 0x73    
   \              0x69 0x6F    
   \              0x5F 0x6F    
   \              0x75 0x74    
   \              0x70 0x75    
   \              0x74 0x5F    
   \              0x66 0x72    
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x6E 0x63    
   \              0x79 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "set_fsio_setting">`:
   \   00000000   0x73 0x65          DC8 "set_fsio_setting"
   \              0x74 0x5F    
   \              0x66 0x73    
   \              0x69 0x6F    
   \              0x5F 0x73    
   \              0x65 0x74    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "set_fsio_input_pin">`:
   \   00000000   0x73 0x65          DC8 "set_fsio_input_pin"
   \              0x74 0x5F    
   \              0x66 0x73    
   \              0x69 0x6F    
   \              0x5F 0x69    
   \              0x6E 0x70    
   \              0x75 0x74    
   \              0x5F 0x70    
   \              0x69 0x6E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "fsioinfo">`:
   \   00000000   0x66 0x73          DC8 "fsioinfo"
   \              0x69 0x6F    
   \              0x69 0x6E    
   \              0x66 0x6F    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "eval">`:
   \   00000000   0x65 0x76          DC8 "eval"
   \              0x61 0x6C    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x72 0x70          DC8 "rpm"
   \              0x6D 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x74 0x70          DC8 "tps"
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x6D 0x61          DC8 "maf"
   \              0x66 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "vbatt">`:
   \   00000000   0x76 0x62          DC8 "vbatt"
   \              0x61 0x74    
   \              0x74 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "coolant">`:
   \   00000000   0x63 0x6F          DC8 "coolant"
   \              0x6F 0x6C    
   \              0x61 0x6E    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "fan_on_setting">`:
   \   00000000   0x66 0x61          DC8 "fan_on_setting"
   \              0x6E 0x5F    
   \              0x6F 0x6E    
   \              0x5F 0x73    
   \              0x65 0x74    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "fan_off_setting">`:
   \   00000000   0x66 0x61          DC8 "fan_off_setting"
   \              0x6E 0x5F    
   \              0x6F 0x66    
   \              0x66 0x5F    
   \              0x73 0x65    
   \              0x74 0x74    
   \              0x69 0x6E    
   \              0x67 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "time_since_boot">`:
   \   00000000   0x74 0x69          DC8 "time_since_boot"
   \              0x6D 0x65    
   \              0x5F 0x73    
   \              0x69 0x6E    
   \              0x63 0x65    
   \              0x5F 0x62    
   \              0x6F 0x6F    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "fsio_setting">`:
   \   00000000   0x66 0x73          DC8 "fsio_setting"
   \              0x69 0x6F    
   \              0x5F 0x73    
   \              0x65 0x74    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "knock">`:
   \   00000000   0x6B 0x6E          DC8 "knock"
   \              0x6F 0x63    
   \              0x6B 0x00    
   \   00000006   0x00 0x00          DC8 0, 0
    462          
    463          #endif
    464          
    465          #endif /* EFI_FSIO */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   __sti__routine()
         8   -> LECalculator::LECalculator()
         8   -> LEElementPool::LEElementPool(LEElement *, int)
         8   -> LENameOrdinalPair::LENameOrdinalPair(le_action_e, char const *)
         8   -> __aeabi_vec_ctor_nocookie_nodtor
       8   action2String(le_action_e)
         8   -> itoa10
      24   applyFsioConfiguration()
        24   -> LEElementPool::parseExpression(char const *)
        24   -> warning
      24   eval(char *, Engine *)
        24   -> LECalculator::getValue2(LEElement *, Engine *)
        24   -> LEElementPool::parseExpression(char const *)
        24   -> LEElementPool::reset()
        24   -> __aeabi_f2d
        24   -> scheduleMsg
        24   -> unquote
       0   getGpioPinName(int)
      24   getLEValue(Engine *, calc_stack_t *, le_action_e)
        24   -> OutputPin::getLogicValue()
        24   -> RpmCalculator::rpm()
        24   -> firmwareError
        24   -> getAcToggle()
        24   -> getCoolantTemperature()
        24   -> getIntakeAirTemperature()
        24   -> getTimeNowSeconds
        24   -> getVBatt()
        24   -> warning
      32   handleFsio(Engine *, int)
        32   -> LECalculator::getValue2(LEElement *, Engine *)
        32   -> OutputPin::getLogicValue()
        32   -> OutputPin::setValue(int)
        32   -> SimplePwm::setSimplePwmDutyCycle(float)
      32   initFsioImpl(Logging *, Engine *)
        32   -> LEElementPool::parseExpression(char const *)
        32   -> addConsoleAction
        32   -> addConsoleActionFF
        32   -> addConsoleActionII
        32   -> addConsoleActionSP
        32   -> addConsoleActionSS
        32   -> addConsoleActionSSP
        32   -> getGpioPinName(int)
        32   -> getInputMode(pin_input_mode_e)
        32   -> mySetPadMode2(char const *, brain_pin_e, iomode_t)
        32   -> outputPinRegisterExt2(char const *, OutputPin *, brain_pin_e, pin_output_mode_e *)
        32   -> startSimplePwmExt(PwmConfig *, char const *, brain_pin_e, OutputPin *, float, float, pwm_gen_callback *)
       8   runFsio()
         8   -> OutputPin::setValue(int)
         8   -> RpmCalculator::isRunning()
         8   -> handleFsio(Engine *, int)
         8   -> setPinState(char const *, OutputPin *, LEElement *, Engine *)
      16   setFsio(int, brain_pin_e, char const *)
        16   -> setFsioExt(int, brain_pin_e, char const *, int)
      24   setFsioExpression(char const *, char const *, Engine *)
        24   -> applyFsioConfiguration()
        24   -> atoi
        24   -> scheduleMsg
        24   -> showFsioInfo()
        24   -> strcpy
        24   -> strlen
        24   -> unquote
      24   setFsioExt(int, brain_pin_e, char const *, int)
        24   -> strcpy
        24   -> strlen
      16   setFsioFrequency(int, int)
        16   -> scheduleMsg
      24   setFsioInputPin(char const *, char const *)
        24   -> atoi
        24   -> hwPortname(brain_pin_e)
        24   -> parseBrainPin(char const *)
        24   -> scheduleMsg
      24   setFsioOutputPin(char const *, char const *)
        24   -> atoi
        24   -> hwPortname(brain_pin_e)
        24   -> parseBrainPin(char const *)
        24   -> scheduleMsg
      16   setFsioSetting(float, float)
        16   -> scheduleMsg
        16   -> showFsioInfo()
      40   setPinState(char const *, OutputPin *, LEElement *, Engine *)
        40   -> LECalculator::getValue2(LEElement *, Engine *)
        40   -> OutputPin::getLogicValue()
        40   -> OutputPin::isInitialized()
        40   -> OutputPin::setValue(int)
        40   -> __aeabi_f2d
        40   -> action2String(le_action_e)
        40   -> isRunningBenchTest()
        40   -> scheduleMsg
        40   -> warning
      24   showFsio(char const *, LEElement *)
        24   -> __aeabi_f2d
        24   -> scheduleMsg
      40   showFsioInfo()
        40   -> LEElementPool::getSize()
        40   -> __aeabi_f2d
        40   -> __iar_FDtest
        40   -> hwPortname(brain_pin_e)
        40   -> scheduleMsg
        40   -> showFsio(char const *, LEElement *)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "%s:">
       8  ?<Constant "<end>">
       4  ?<Constant "A/C">
       4  ?<Constant "CLT">
      16  ?<Constant "Eval result: %f">
      36  ?<Constant "FSIO #%d [%s] at %s@%...">
      28  ?<Constant "FSIO digital input #%...">
      24  ?<Constant "FSIO input pin #%d [%s]">
      12  ?<Constant "FSIO input">
      28  ?<Constant "FSIO output pin #%d [%s]">
      20  ?<Constant "FSIO unexpected %d">
       8  ?<Constant "FSIO">
       8  ?<Constant "GPIO_0">
       8  ?<Constant "GPIO_1">
       8  ?<Constant "GPIO_10">
       8  ?<Constant "GPIO_11">
       8  ?<Constant "GPIO_12">
       8  ?<Constant "GPIO_13">
       8  ?<Constant "GPIO_14">
       8  ?<Constant "GPIO_15">
       8  ?<Constant "GPIO_2">
       8  ?<Constant "GPIO_3">
       8  ?<Constant "GPIO_4">
       8  ?<Constant "GPIO_5">
       8  ?<Constant "GPIO_6">
       8  ?<Constant "GPIO_7">
       8  ?<Constant "GPIO_8">
       8  ?<Constant "GPIO_9">
      16  ?<Constant "Parsing [%s]">
       4  ?<Constant "RPM">
      36  ?<Constant "Setting FSIO frequenc...">
      12  ?<Constant "Too long %d">
       4  ?<Constant "a/c">
      16  ?<Constant "ac_on_switch">
      32  ?<Constant "action %d: fValue=%f ...">
       4  ?<Constant "alt">
      28  ?<Constant "calc %d: action %s va...">
       8  ?<Constant "coolant">
       8  ?<Constant "eval">
      60  ?<Constant "fan coolant fan_off_s...">
       4  ?<Constant "fan">
       8  ?<Constant "fan_off">
      16  ?<Constant "fan_off_setting">
       8  ?<Constant "fan_on">
      16  ?<Constant "fan_on_setting">
      16  ?<Constant "fsio_setting">
      12  ?<Constant "fsioinfo">
       8  ?<Constant "fuel">
      12  ?<Constant "getLEValue">
      28  ?<Constant "invalid expression fo...">
      20  ?<Constant "invalid index %d">
      24  ?<Constant "invalid pin name [%s]">
       8  ?<Constant "knock">
       4  ?<Constant "maf">
       4  ?<Constant "off">
       4  ?<Constant "on">
      16  ?<Constant "parsing [%s]">
      16  ?<Constant "parsing failed">
       8  ?<Constant "pump">
       4  ?<Constant "rpm">
      16  ?<Constant "setPin %s %s">
      20  ?<Constant "set_fsio_expression">
      20  ?<Constant "set_fsio_input_pin">
      28  ?<Constant "set_fsio_output_frequ...">
      20  ?<Constant "set_fsio_output_pin">
      20  ?<Constant "set_fsio_setting">
      32  ?<Constant "setting user out #%d ...">
      28  ?<Constant "sys used %d/user used %d">
      32  ?<Constant "time_since_boot 4 < r...">
      16  ?<Constant "time_since_boot">
       4  ?<Constant "tps">
      24  ?<Constant "user property #%d: %f">
      16  ?<Constant "vbatt 14.5 <">
       8  ?<Constant "vbatt">
       4  ??DataTable1
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable11
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_2
       4  ??DataTable14
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_2
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_10
       4  ??DataTable16_11
       4  ??DataTable16_12
       4  ??DataTable16_13
       4  ??DataTable16_14
       4  ??DataTable16_15
       4  ??DataTable16_16
       4  ??DataTable16_17
       4  ??DataTable16_18
       4  ??DataTable16_19
       4  ??DataTable16_2
       4  ??DataTable16_20
       4  ??DataTable16_21
       4  ??DataTable16_22
       4  ??DataTable16_23
       4  ??DataTable16_24
       4  ??DataTable16_25
       4  ??DataTable16_26
       4  ??DataTable16_27
       4  ??DataTable16_28
       4  ??DataTable16_29
       4  ??DataTable16_3
       4  ??DataTable16_30
       4  ??DataTable16_31
       4  ??DataTable16_32
       4  ??DataTable16_33
       4  ??DataTable16_4
       4  ??DataTable16_5
       4  ??DataTable16_6
       4  ??DataTable16_7
       4  ??DataTable16_8
       4  ??DataTable16_9
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_10
       4  ??DataTable17_11
       4  ??DataTable17_12
       4  ??DataTable17_13
       4  ??DataTable17_14
       4  ??DataTable17_15
       4  ??DataTable17_16
       4  ??DataTable17_17
       4  ??DataTable17_18
       4  ??DataTable17_19
       4  ??DataTable17_2
       4  ??DataTable17_20
       4  ??DataTable17_21
       4  ??DataTable17_22
       4  ??DataTable17_23
       4  ??DataTable17_24
       4  ??DataTable17_25
       4  ??DataTable17_26
       4  ??DataTable17_27
       4  ??DataTable17_28
       4  ??DataTable17_29
       4  ??DataTable17_3
       4  ??DataTable17_30
       4  ??DataTable17_31
       4  ??DataTable17_32
       4  ??DataTable17_33
       4  ??DataTable17_34
       4  ??DataTable17_35
       4  ??DataTable17_36
       4  ??DataTable17_37
       4  ??DataTable17_38
       4  ??DataTable17_39
       4  ??DataTable17_4
       4  ??DataTable17_40
       4  ??DataTable17_41
       4  ??DataTable17_42
       4  ??DataTable17_43
       4  ??DataTable17_44
       4  ??DataTable17_45
       4  ??DataTable17_46
       4  ??DataTable17_47
       4  ??DataTable17_48
       4  ??DataTable17_49
       4  ??DataTable17_5
       4  ??DataTable17_50
       4  ??DataTable17_51
       4  ??DataTable17_52
       4  ??DataTable17_53
       4  ??DataTable17_54
       4  ??DataTable17_55
       4  ??DataTable17_56
       4  ??DataTable17_57
       4  ??DataTable17_58
       4  ??DataTable17_59
       4  ??DataTable17_6
       4  ??DataTable17_60
       4  ??DataTable17_61
       4  ??DataTable17_62
       4  ??DataTable17_63
       4  ??DataTable17_64
       4  ??DataTable17_65
       4  ??DataTable17_66
       4  ??DataTable17_67
       4  ??DataTable17_68
       4  ??DataTable17_69
       4  ??DataTable17_7
       4  ??DataTable17_70
       4  ??DataTable17_71
       4  ??DataTable17_72
       4  ??DataTable17_73
       4  ??DataTable17_74
       4  ??DataTable17_75
       4  ??DataTable17_76
       4  ??DataTable17_77
       4  ??DataTable17_78
       4  ??DataTable17_79
       4  ??DataTable17_8
       4  ??DataTable17_80
       4  ??DataTable17_81
       4  ??DataTable17_9
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable2
       4  ??DataTable6
     302  __sti__routine()
       4  acRelayLogic
      68  action2String(le_action_e)
       4  alternatorLogic
      86  applyFsioConfiguration()
      12  buffer
     652  calc
       4  defa
     108  eval(char *, Engine *)
     652  evalCalc
      12  evalPool
     512  evalPoolElements
      64  fsioLogics
     256  fsioOutputs
    1792  fsioPwm
       4  fuelPumpLogic
     154  getGpioPinName(int)
     180  getLEValue(Engine *, calc_stack_t *, le_action_e)
     160  handleFsio(Engine *, int)
     312  initFsioImpl(Logging *, Engine *)
      12  leAcToggle
      12  leCoolant
      12  leFan
      12  leFanOffSetting
      12  leFanOnSetting
      12  leFsioSetting
      12  leKnock
      12  leMaf
      12  leRpm
      12  leTimeSinceBoot
      12  leTps
      12  leVBatt
       4  logger
       4  radiatorFanLogic
     162  runFsio()
      22  setFsio(int, brain_pin_e, char const *)
     130  setFsioExpression(char const *, char const *, Engine *)
      80  setFsioExt(int, brain_pin_e, char const *, int)
      68  setFsioFrequency(int, int)
     110  setFsioInputPin(char const *, char const *)
     110  setFsioOutputPin(char const *, char const *)
      76  setFsioSetting(float, float)
     194  setPinState(char const *, OutputPin *, LEElement *, Engine *)
      78  showFsio(char const *, LEElement *)
     344  showFsioInfo()
    2048  sysElements
      12  sysPool
    2048  userElements
      12  userPool
       4  -- Other

 
 6 384 bytes in section .bss
 1 856 bytes in section .ccm
     4 bytes in section .init_array
 1 068 bytes in section .rodata
 3 268 bytes in section .text
 
 3 272 bytes of CODE  memory
 1 068 bytes of CONST memory
 8 240 bytes of DATA  memory

Errors: none
Warnings: 6
