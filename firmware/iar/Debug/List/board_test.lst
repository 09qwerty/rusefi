###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:08 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\hw_layer\board_t #
#                       est.cpp                                               #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\hw_layer\board_t #
#                       est.cpp -lCN F:\stuff\rusefi_sourceforge\firmware\iar #
#                       \Debug\List\ -lA F:\stuff\rusefi_sourceforge\firmware #
#                       \iar\Debug\List\ -o F:\stuff\rusefi_sourceforge\firmw #
#                       are\iar\Debug\Obj\ --no_cse --no_unroll --no_inline   #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\b #
#                       oard_test.lst                                         #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\bo #
#                       ard_test.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\hw_layer\board_test.cpp
      1          /**
      2           * @file	board_test.cpp
      3           * @brief	This is a simple board testing utility
      4           *
      5           * By default this is enabled by grounding PB0
      6           *
      7           * @date Mar 12, 2014
      8           * @author Andrey Belomutskiy, (c) 2012-2015
      9           *
     10           * This file is part of rusEfi - see http://rusefi.com
     11           *
     12           * rusEfi is free software; you can redistribute it and/or modify it under the terms of
     13           * the GNU General Public License as published by the Free Software Foundation; either
     14           * version 3 of the License, or (at your option) any later version.
     15           *
     16           * rusEfi is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
     17           * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     18           * GNU General Public License for more details.
     19           *
     20           * You should have received a copy of the GNU General Public License along with this program.
     21           * If not, see <http://www.gnu.org/licenses/>.
     22           */
     23          
     24          #include "main.h"
     25          #include "board_test.h"
     26          #include "rusefi_enums.h"
     27          #include "pin_repository.h"
     28          #include "gpio_helper.h"
     29          #include "adc_inputs.h"
     30          #include "AdcConfiguration.h"
     31          

   \                                 In section .bss, align 4
     32          static volatile int stepCoutner = 0;
   \                     stepCoutner:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
     33          static volatile brain_pin_e currentPin = GPIO_UNASSIGNED;
   \                     currentPin:
   \   00000000   0x00000050         DC32 80
     34          

   \                                 In section .text, align 2, keep-with-next
     35          static bool isTimeForNextStep(int copy) {
     36          	return copy != stepCoutner;
   \                     _Z17isTimeForNextStepi:
   \   00000000   0x....             LDR.N    R1,??DataTable11_2
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x4288             CMP      R0,R1
   \   00000006   0xD001             BEQ.N    ??isTimeForNextStep_0
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xE000             B.N      ??isTimeForNextStep_1
   \                     ??isTimeForNextStep_0:
   \   0000000C   0x2000             MOVS     R0,#+0
   \                     ??isTimeForNextStep_1:
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x4770             BX       LR               ;; return
     37          }
     38          
     39          #if HAL_USE_ADC || defined(__DOXYGEN__)
     40          extern AdcDevice slowAdc;
     41          extern AdcDevice fastAdc;
     42          

   \                                 In section .text, align 4, keep-with-next
     43          static void processAdcPin(AdcDevice *adc, int index) {
   \                     _Z13processAdcPinP9AdcDevicei:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xED2D 0x8B02      VPUSH    {D8}
   \   00000008   0xB082             SUB      SP,SP,#+8
   \   0000000A   0x4681             MOV      R9,R0
   \   0000000C   0x4688             MOV      R8,R1
     44          	adc_channel_e hwIndex = adc->getAdcHardwareIndexByInternalIndex(index);
   \   0000000E   0x4641             MOV      R1,R8
   \   00000010   0x4648             MOV      R0,R9
   \   00000012   0x.... 0x....      BL       _ZN9AdcDevice34getAdcHardwareIndexByInternalIndexEi
   \   00000016   0x0004             MOVS     R4,R0
     45          	GPIO_TypeDef* port = getAdcChannelPort(hwIndex);
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x.... 0x....      BL       _Z17getAdcChannelPort13adc_channel_e
   \   0000001E   0x0005             MOVS     R5,R0
     46          	int pin = getAdcChannelPin(hwIndex);
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       _Z16getAdcChannelPin13adc_channel_e
   \   00000026   0x0006             MOVS     R6,R0
     47          
     48          	int copy = stepCoutner;
   \   00000028   0x....             LDR.N    R0,??DataTable11_2
   \   0000002A   0xF8D0 0xA000      LDR      R10,[R0, #+0]
     49          
     50          	int c = 0;
   \   0000002E   0x2700             MOVS     R7,#+0
     51          
     52          	while (!isTimeForNextStep(copy)) {
   \                     ??processAdcPin_0:
   \   00000030   0x4650             MOV      R0,R10
   \   00000032   0x.... 0x....      BL       _Z17isTimeForNextStepi
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD12B             BNE.N    ??processAdcPin_1
     53          		print("ch%d hwIndex=%d %s%d\r\n", index, hwIndex, portname(port), pin);
   \   0000003A   0x0028             MOVS     R0,R5
   \   0000003C   0x.... 0x....      BL       _Z8portnameP12GPIO_TypeDef
   \   00000040   0x9600             STR      R6,[SP, #+0]
   \   00000042   0x0003             MOVS     R3,R0
   \   00000044   0x0022             MOVS     R2,R4
   \   00000046   0x4641             MOV      R1,R8
   \   00000048   0x....             LDR.N    R0,??DataTable11_3
   \   0000004A   0x.... 0x....      BL       print
     54          		int adcValue = adc->getAdcValueByIndex(index);
   \   0000004E   0x4641             MOV      R1,R8
   \   00000050   0x4648             MOV      R0,R9
   \   00000052   0x.... 0x....      BL       _ZN9AdcDevice18getAdcValueByIndexEi
   \   00000056   0xEE08 0x0A10      VMOV     S16,R0
     55          
     56          //		print("ADC%d val= %d%s", hwIndex, value, DELIMETER);
     57          		float volts = adcToVolts(adcValue) * 2;
   \   0000005A   0xEEB8 0x0AC8      VCVT.F32.S32 S0,S16
   \   0000005E   0xEDDF 0x....      VLDR.W   S1,??DataTable10  ;; 0x3a400c01
   \   00000062   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000066   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   0000006A   0xEE60 0x8A20      VMUL.F32 S17,S0,S1
     58          		print("v=%f  adc=%d  c=%d (hit 'n'<ENTER> for next step\r\n", volts, adcValue, c++);
   \   0000006E   0x9701             STR      R7,[SP, #+4]
   \   00000070   0xED8D 0x8A00      VSTR     S16,[SP, #+0]
   \   00000074   0xEE18 0x0A90      VMOV     R0,S17
   \   00000078   0x.... 0x....      BL       __aeabi_f2d
   \   0000007C   0x0002             MOVS     R2,R0
   \   0000007E   0x000B             MOVS     R3,R1
   \   00000080   0x....             LDR.N    R0,??DataTable11_4
   \   00000082   0x.... 0x....      BL       print
   \   00000086   0x1C7F             ADDS     R7,R7,#+1
     59          
     60          		chThdSleepMilliseconds(300);
   \   00000088   0xF44F 0x7096      MOV      R0,#+300
   \   0000008C   0x.... 0x....      BL       chThdSleep
   \   00000090   0xE7CE             B.N      ??processAdcPin_0
     61          
     62          	}
     63          }
   \                     ??processAdcPin_1:
   \   00000092   0xB002             ADD      SP,SP,#+8
   \   00000094   0xECBD 0x8B02      VPOP     {D8}
   \   00000098   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
     64          #endif

   \                                 In section .bss, align 4
     65          static volatile int currentIndex = 0;
   \                     currentIndex:
   \   00000000                      DS8 4
     66          

   \                                 In section .text, align 2, keep-with-next
     67          static void waitForKey(void) {
   \                     _Z10waitForKeyv:
   \   00000000   0xB510             PUSH     {R4,LR}
     68          	print("Please hit N<ENTER> to continue\r\n");
   \   00000002   0x....             LDR.N    R0,??DataTable11_5
   \   00000004   0x.... 0x....      BL       print
     69          	int copy = stepCoutner;
   \   00000008   0x....             LDR.N    R0,??DataTable11_2
   \   0000000A   0x6804             LDR      R4,[R0, #+0]
     70          	while (!isTimeForNextStep(copy)) {
   \                     ??waitForKey_0:
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       _Z17isTimeForNextStepi
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD103             BNE.N    ??waitForKey_1
     71          		chThdSleepMilliseconds(200);
   \   00000016   0x20C8             MOVS     R0,#+200
   \   00000018   0x.... 0x....      BL       chThdSleep
   \   0000001C   0xE7F6             B.N      ??waitForKey_0
     72          	}
     73          }
   \                     ??waitForKey_1:
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
     74          

   \                                 In section .text, align 2, keep-with-next
     75          static void nextStep(void) {
     76          	stepCoutner++;
   \                     _Z8nextStepv:
   \   00000000   0x....             LDR.N    R0,??DataTable11_2
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \   00000006   0x....             LDR.N    R1,??DataTable11_2
   \   00000008   0x6008             STR      R0,[R1, #+0]
     77          }
   \   0000000A   0x4770             BX       LR               ;; return
     78          

   \                                 In section .text, align 2, keep-with-next
     79          static void setIndex(int index) {
   \                     _Z8setIndexi:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     80          	currentIndex = index;
   \   00000004   0x....             LDR.N    R0,??DataTable11_6
   \   00000006   0x6004             STR      R4,[R0, #+0]
     81          	nextStep();
   \   00000008   0x.... 0x....      BL       _Z8nextStepv
     82          }
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return
     83          

   \                                 In section .data, align 4
     84          static brain_pin_e BLINK_PINS[] = { GPIOE_8, // HIGH DRIVER 1
   \                     BLINK_PINS:
   \   00000000   0x00000048         DC32 72, 74, 76, 78, 41, 39, 46, 47, 70, 45, 68, 69, 66, 67, 64, 65, 24
   \              0x0000004A   
   \              0x0000004C   
   \              0x0000004E   
   \              0x00000029   
   \              0x00000027   
   \              0x0000002E   
   \              0x0000002F   
   \              0x00000046   
   \              0x0000002D   
   \              0x00000044   
   \              0x00000045   
   \              0x00000042   
   \              0x00000043   
   \              0x00000040   
   \              0x00000041   
   \              0x00000018   
   \   00000044   0x00000019         DC32 25, 51, 53, 55, 23
   \              0x00000033   
   \              0x00000035   
   \              0x00000037   
   \              0x00000017   
     85          		GPIOE_10, // HIGH DRIVER 2
     86          		GPIOE_12, // HIGH DRIVER 3
     87          		GPIOE_14, // HIGH DRIVER 4
     88          		GPIOC_9, // HIGH DRIVER 5
     89          		GPIOC_7, // HIGH DRIVER 6
     90          		// index = 6
     91          		GPIOC_14, // OUT 1
     92          		GPIOC_15, // OUT2
     93          		GPIOE_6,  // OUT3
     94          		GPIOC_13, // OUT4
     95          		GPIOE_4, // OUT5
     96          		GPIOE_5, // OUT6
     97          		GPIOE_2, // OUT7
     98          		GPIOE_3, // OUT8
     99          		GPIOE_0, // OUT9
    100          		GPIOE_1, // OUT10
    101          		GPIOB_8, // OUT11
    102          		GPIOB_9, // OUT12
    103          		GPIOD_3, // Frankenso PE1 reroute
    104          		GPIOD_5, // Frankenso PE0 reroute
    105          		GPIOD_7, // OUT3 Frankenso
    106          		GPIOB_7, // OUT12 Frankenso
    107          		};
    108          

   \                                 In section .data, align 4
    109          int pinsCount = sizeof(BLINK_PINS) / sizeof(brain_pin_e);
   \                     pinsCount:
   \   00000000   0x00000016         DC32 22
    110          

   \                                 In section .bss, align 8
    111          static THD_WORKING_AREA(btThreadStack, UTILITY_THREAD_STACK_SIZE);
   \                     btThreadStack:
   \   00000000                      DS8 712
    112          

   \                                 In section .text, align 2, keep-with-next
    113          static void setCurrentPinValue(bool value) {
   \                     _Z18setCurrentPinValueb:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    114          	GPIO_TypeDef *hwPort = getHwPort(currentPin);
   \   00000004   0x....             LDR.N    R0,??DataTable11_7
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x.... 0x....      BL       _Z9getHwPort11brain_pin_e
   \   0000000C   0x0005             MOVS     R5,R0
    115          	uint32_t hwPin = getHwPin(currentPin);
   \   0000000E   0x....             LDR.N    R0,??DataTable11_7
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       _Z8getHwPin11brain_pin_e
    116          	palWritePad(hwPort, hwPin, value);
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x43E1             MVNS     R1,R4
   \   0000001A   0xF011 0x0101      ANDS     R1,R1,#0x1
   \   0000001E   0xF110 0x0210      ADDS     R2,R0,#+16
   \   00000022   0x4091             LSLS     R1,R1,R2
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0xFA14 0xF200      LSLS     R2,R4,R0
   \   0000002A   0x4311             ORRS     R1,R2,R1
   \   0000002C   0x61A9             STR      R1,[R5, #+24]
    117          }
   \   0000002E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    118          

   \                                 In section .text, align 2, keep-with-next
    119          static msg_t ivThread(int param) {
   \                     _Z8ivThreadi:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    120          	(void) param;
    121          	chRegSetThreadName("board test blinking");
   \   00000004   0x....             LDR.N    R0,??DataTable11_8
   \   00000006   0x6980             LDR      R0,[R0, #+24]
   \   00000008   0x....             LDR.N    R1,??DataTable11_9
   \   0000000A   0x6181             STR      R1,[R0, #+24]
    122          
    123          	int value = 0;
   \   0000000C   0x2500             MOVS     R5,#+0
    124          
    125          	while (TRUE) {
    126          		chThdSleepMilliseconds(250);
   \                     ??ivThread_0:
   \   0000000E   0x20FA             MOVS     R0,#+250
   \   00000010   0x.... 0x....      BL       chThdSleep
    127          		value = 1 - value;
   \   00000014   0xF1D5 0x0501      RSBS     R5,R5,#+1
    128          		setCurrentPinValue(value);
   \   00000018   0x2D00             CMP      R5,#+0
   \   0000001A   0xD001             BEQ.N    ??ivThread_1
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xE000             B.N      ??ivThread_2
   \                     ??ivThread_1:
   \   00000020   0x2000             MOVS     R0,#+0
   \                     ??ivThread_2:
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x.... 0x....      BL       _Z18setCurrentPinValueb
   \   00000028   0xE7F1             B.N      ??ivThread_0
    129          	}
    130          #if defined __GNUC__
    131          	return 0;
    132          #endif        
    133          }
    134          

   \                                 In section .bss, align 1
    135          static bool is_board_test_mode = false;
   \                     is_board_test_mode:
   \   00000000                      DS8 1
    136          

   \                                 In section .text, align 2, keep-with-next
    137          bool isBoardTestMode(void) {
    138          	return is_board_test_mode;
   \                     isBoardTestMode:
   \   00000000   0x....             LDR.N    R0,??DataTable11_10
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    139          }
    140          

   \                                 In section .text, align 2, keep-with-next
    141          void printBoardTestState(void) {
   \                     printBoardTestState:
   \   00000000   0xB510             PUSH     {R4,LR}
    142          	print("Current index=%d\r\n", currentIndex);
   \   00000002   0x....             LDR.N    R0,??DataTable11_6
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x....             LDR.N    R0,??DataTable11_11
   \   00000008   0x.... 0x....      BL       print
    143          	print("'n' for next step and 'set X' to return to step X\r\n");
   \   0000000C   0x....             LDR.N    R0,??DataTable11_12
   \   0000000E   0x.... 0x....      BL       print
    144          #if HAL_USE_ADC || defined(__DOXYGEN__)
    145          	print("ADC count: slow %d/fast %d\r\n", slowAdc.size(), fastAdc.size());
   \   00000012   0x....             LDR.N    R0,??DataTable11_13
   \   00000014   0x.... 0x....      BL       _ZN9AdcDevice4sizeEv
   \   00000018   0x0004             MOVS     R4,R0
   \   0000001A   0x....             LDR.N    R0,??DataTable11_14
   \   0000001C   0x.... 0x....      BL       _ZN9AdcDevice4sizeEv
   \   00000020   0x0001             MOVS     R1,R0
   \   00000022   0x0022             MOVS     R2,R4
   \   00000024   0x....             LDR.N    R0,??DataTable11_15
   \   00000026   0x.... 0x....      BL       print
    146          #endif
    147          
    148          	if (currentPin != GPIO_UNASSIGNED) {
   \   0000002A   0x....             LDR.N    R0,??DataTable11_7
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x2850             CMP      R0,#+80
   \   00000030   0xD007             BEQ.N    ??printBoardTestState_0
    149          		print("Blinking %s\r\n", hwPortname(currentPin));
   \   00000032   0x....             LDR.N    R0,??DataTable11_7
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   0000003A   0x0001             MOVS     R1,R0
   \   0000003C   0x....             LDR.N    R0,??DataTable11_16
   \   0000003E   0x.... 0x....      BL       print
    150          	}
    151          }
   \                     ??printBoardTestState_0:
   \   00000042   0xBD10             POP      {R4,PC}          ;; return
    152          

   \                                 In section .text, align 2, keep-with-next
    153          static void btInitOutputPins() {
   \                     _Z16btInitOutputPinsv:
   \   00000000   0xB510             PUSH     {R4,LR}
    154          	for (int i = 0; i < pinsCount; i++) {
   \   00000002   0x2400             MOVS     R4,#+0
   \                     ??btInitOutputPins_0:
   \   00000004   0x....             LDR.N    R0,??DataTable11_17
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xDA0C             BGE.N    ??btInitOutputPins_1
    155          		currentPin = BLINK_PINS[i];
   \   0000000C   0x....             LDR.N    R0,??DataTable11_18
   \   0000000E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000012   0x....             LDR.N    R1,??DataTable11_7
   \   00000014   0x6008             STR      R0,[R1, #+0]
    156          		mySetPadMode2("test", currentPin, PAL_STM32_MODE_OUTPUT);
   \   00000016   0x2201             MOVS     R2,#+1
   \   00000018   0x....             LDR.N    R0,??DataTable11_7
   \   0000001A   0x6801             LDR      R1,[R0, #+0]
   \   0000001C   0x....             LDR.N    R0,??DataTable11_19
   \   0000001E   0x.... 0x....      BL       _Z13mySetPadMode2PKc11brain_pin_ej
    157          	}
   \   00000022   0x1C64             ADDS     R4,R4,#+1
   \   00000024   0xE7EE             B.N      ??btInitOutputPins_0
    158          }
   \                     ??btInitOutputPins_1:
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    159          

   \                                 In section .text, align 2, keep-with-next
    160          static void blinkAllOutputPins() {
   \                     _Z18blinkAllOutputPinsv:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    161          	int msgCounter = 0;
   \   00000002   0x2400             MOVS     R4,#+0
    162          	for (int k = 0; k < 6; k++) {
   \   00000004   0x2500             MOVS     R5,#+0
   \                     ??blinkAllOutputPins_0:
   \   00000006   0x2D06             CMP      R5,#+6
   \   00000008   0xDA22             BGE.N    ??blinkAllOutputPins_1
    163          		for (int i = 0; i < pinsCount; i++) {
   \   0000000A   0x2600             MOVS     R6,#+0
   \                     ??blinkAllOutputPins_2:
   \   0000000C   0x....             LDR.N    R0,??DataTable11_17
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x4286             CMP      R6,R0
   \   00000012   0xDA13             BGE.N    ??blinkAllOutputPins_3
    164          			currentPin = BLINK_PINS[i];
   \   00000014   0x....             LDR.N    R0,??DataTable11_18
   \   00000016   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   0000001A   0x....             LDR.N    R1,??DataTable11_7
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    165          			setCurrentPinValue(k % 2);
   \   0000001E   0x2002             MOVS     R0,#+2
   \   00000020   0xFB95 0xF1F0      SDIV     R1,R5,R0
   \   00000024   0xFB01 0x5110      MLS      R1,R1,R0,R5
   \   00000028   0x2900             CMP      R1,#+0
   \   0000002A   0xD001             BEQ.N    ??blinkAllOutputPins_4
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0xE000             B.N      ??blinkAllOutputPins_5
   \                     ??blinkAllOutputPins_4:
   \   00000030   0x2000             MOVS     R0,#+0
   \                     ??blinkAllOutputPins_5:
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0x.... 0x....      BL       _Z18setCurrentPinValueb
    166          		}
   \   00000038   0x1C76             ADDS     R6,R6,#+1
   \   0000003A   0xE7E7             B.N      ??blinkAllOutputPins_2
    167          		print("blinking %d\r\n", msgCounter++);
   \                     ??blinkAllOutputPins_3:
   \   0000003C   0x0021             MOVS     R1,R4
   \   0000003E   0x....             LDR.N    R0,??DataTable11_20
   \   00000040   0x.... 0x....      BL       print
   \   00000044   0x1C64             ADDS     R4,R4,#+1
    168          		chThdSleepMilliseconds(250);
   \   00000046   0x20FA             MOVS     R0,#+250
   \   00000048   0x.... 0x....      BL       chThdSleep
    169          	}
   \   0000004C   0x1C6D             ADDS     R5,R5,#+1
   \   0000004E   0xE7DA             B.N      ??blinkAllOutputPins_0
    170          	currentPin = GPIO_UNASSIGNED;
   \                     ??blinkAllOutputPins_1:
   \   00000050   0x....             LDR.N    R0,??DataTable11_7
   \   00000052   0x2150             MOVS     R1,#+80
   \   00000054   0x6001             STR      R1,[R0, #+0]
    171          	/**
    172          	 * Now let's blink all pins one by one
    173          	 */
    174          	for (int k = 0; k < 2; k++) {
   \   00000056   0x2500             MOVS     R5,#+0
   \                     ??blinkAllOutputPins_6:
   \   00000058   0x2D02             CMP      R5,#+2
   \   0000005A   0xDA1F             BGE.N    ??blinkAllOutputPins_7
    175          		for (int i = 0; i < pinsCount; i++) {
   \   0000005C   0x2600             MOVS     R6,#+0
   \                     ??blinkAllOutputPins_8:
   \   0000005E   0x....             LDR.N    R0,??DataTable11_17
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0x4286             CMP      R6,R0
   \   00000064   0xDA18             BGE.N    ??blinkAllOutputPins_9
    176          			if (currentPin != GPIO_UNASSIGNED)
   \   00000066   0x....             LDR.N    R0,??DataTable11_7
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0x2850             CMP      R0,#+80
   \   0000006C   0xD002             BEQ.N    ??blinkAllOutputPins_10
    177          				setCurrentPinValue(false); // turn off previous pin
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x.... 0x....      BL       _Z18setCurrentPinValueb
    178          
    179          			currentPin = BLINK_PINS[i];
   \                     ??blinkAllOutputPins_10:
   \   00000074   0x....             LDR.N    R0,??DataTable11_18
   \   00000076   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   0000007A   0x....             LDR.N    R1,??DataTable11_7
   \   0000007C   0x6008             STR      R0,[R1, #+0]
    180          			setCurrentPinValue(true);
   \   0000007E   0x2001             MOVS     R0,#+1
   \   00000080   0x.... 0x....      BL       _Z18setCurrentPinValueb
    181          			print("blinking %d!\r\n", msgCounter++);
   \   00000084   0x0021             MOVS     R1,R4
   \   00000086   0x....             LDR.N    R0,??DataTable11_21
   \   00000088   0x.... 0x....      BL       print
   \   0000008C   0x1C64             ADDS     R4,R4,#+1
    182          			chThdSleepMilliseconds(250);
   \   0000008E   0x20FA             MOVS     R0,#+250
   \   00000090   0x.... 0x....      BL       chThdSleep
    183          		}
   \   00000094   0x1C76             ADDS     R6,R6,#+1
   \   00000096   0xE7E2             B.N      ??blinkAllOutputPins_8
    184          	}
   \                     ??blinkAllOutputPins_9:
   \   00000098   0x1C6D             ADDS     R5,R5,#+1
   \   0000009A   0xE7DD             B.N      ??blinkAllOutputPins_6
    185          	setCurrentPinValue(false);
   \                     ??blinkAllOutputPins_7:
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x.... 0x....      BL       _Z18setCurrentPinValueb
    186          	currentPin = GPIO_UNASSIGNED;
   \   000000A2   0x....             LDR.N    R0,??DataTable11_7
   \   000000A4   0x2150             MOVS     R1,#+80
   \   000000A6   0x6001             STR      R1,[R0, #+0]
    187          }
   \   000000A8   0xBD70             POP      {R4-R6,PC}       ;; return
    188          

   \                                 In section .text, align 2, keep-with-next
    189          void initBoardTest(void) {
   \                     _Z13initBoardTestv:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    190          	is_board_test_mode = true;
   \   00000004   0x....             LDR.N    R0,??DataTable11_10
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x7001             STRB     R1,[R0, #+0]
    191          	addConsoleAction("n", nextStep);
   \   0000000A   0x....             LDR.N    R1,??DataTable11_22
   \   0000000C   0x....             ADR.N    R0,??DataTable11  ;; "n"
   \   0000000E   0x.... 0x....      BL       addConsoleAction
    192          	addConsoleActionI("set", setIndex);
   \   00000012   0x....             LDR.N    R1,??DataTable11_23
   \   00000014   0x....             ADR.N    R0,??DataTable11_1  ;; "set"
   \   00000016   0x.... 0x....      BL       addConsoleActionI
    193          
    194          	btInitOutputPins();
   \   0000001A   0x.... 0x....      BL       _Z16btInitOutputPinsv
    195          	blinkAllOutputPins();
   \   0000001E   0x.... 0x....      BL       _Z18blinkAllOutputPinsv
    196          
    197          	chThdCreateStatic(btThreadStack, sizeof(btThreadStack), NORMALPRIO, (tfunc_t) ivThread, NULL);
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x9000             STR      R0,[SP, #+0]
   \   00000026   0x....             LDR.N    R3,??DataTable11_24
   \   00000028   0x2240             MOVS     R2,#+64
   \   0000002A   0xF44F 0x7132      MOV      R1,#+712
   \   0000002E   0x....             LDR.N    R0,??DataTable11_25
   \   00000030   0x.... 0x....      BL       chThdCreateStatic
    198          	// this code is ugly as hell, I had no time to think. Todo: refactor
    199          
    200          #if HAL_USE_ADC || defined(__DOXYGEN__)
    201          	/**
    202          	 * in board test mode all currently enabled ADC channels are running in slow mode
    203          	 */
    204          	while (currentIndex < slowAdc.size()) {
   \                     ??initBoardTest_0:
   \   00000034   0x....             LDR.N    R0,??DataTable11_6
   \   00000036   0x6804             LDR      R4,[R0, #+0]
   \   00000038   0x....             LDR.N    R0,??DataTable11_14
   \   0000003A   0x.... 0x....      BL       _ZN9AdcDevice4sizeEv
   \   0000003E   0x4284             CMP      R4,R0
   \   00000040   0xDA0A             BGE.N    ??initBoardTest_1
    205          		processAdcPin(&slowAdc, currentIndex);
   \   00000042   0x....             LDR.N    R0,??DataTable11_6
   \   00000044   0x6801             LDR      R1,[R0, #+0]
   \   00000046   0x....             LDR.N    R0,??DataTable11_14
   \   00000048   0x.... 0x....      BL       _Z13processAdcPinP9AdcDevicei
    206          		currentIndex++;
   \   0000004C   0x....             LDR.N    R0,??DataTable11_6
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x1C40             ADDS     R0,R0,#+1
   \   00000052   0x....             LDR.N    R1,??DataTable11_6
   \   00000054   0x6008             STR      R0,[R1, #+0]
   \   00000056   0xE7ED             B.N      ??initBoardTest_0
    207          	}
    208          #endif
    209          
    210          	currentIndex = 0;
   \                     ??initBoardTest_1:
   \   00000058   0x....             LDR.N    R0,??DataTable11_6
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0x6001             STR      R1,[R0, #+0]
    211          
    212          	while (currentIndex < pinsCount) {
   \                     ??initBoardTest_2:
   \   0000005E   0x....             LDR.N    R0,??DataTable11_6
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0x....             LDR.N    R1,??DataTable11_17
   \   00000064   0x6809             LDR      R1,[R1, #+0]
   \   00000066   0x4288             CMP      R0,R1
   \   00000068   0xDA10             BGE.N    ??initBoardTest_3
    213          		currentPin = BLINK_PINS[currentIndex];
   \   0000006A   0x....             LDR.N    R0,??DataTable11_6
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0x....             LDR.N    R1,??DataTable11_18
   \   00000070   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   00000074   0x....             LDR.N    R1,??DataTable11_7
   \   00000076   0x6008             STR      R0,[R1, #+0]
    214          
    215          		printBoardTestState();
   \   00000078   0x.... 0x....      BL       printBoardTestState
    216          
    217          		currentIndex++;
   \   0000007C   0x....             LDR.N    R0,??DataTable11_6
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0x1C40             ADDS     R0,R0,#+1
   \   00000082   0x....             LDR.N    R1,??DataTable11_6
   \   00000084   0x6008             STR      R0,[R1, #+0]
    218          		waitForKey();
   \   00000086   0x.... 0x....      BL       _Z10waitForKeyv
   \   0000008A   0xE7E8             B.N      ??initBoardTest_2
    219          	}
    220          	// no buffered logger still, just plain old stdout
    221          	while (1) {
    222          		print("Board test done, thank you! Time to remove that jumper and reboot\r\n");
   \                     ??initBoardTest_3:
   \   0000008C   0x....             LDR.N    R0,??DataTable11_26
   \   0000008E   0x.... 0x....      BL       print
    223          		print("Bye!\r\n");
   \   00000092   0x....             LDR.N    R0,??DataTable11_27
   \   00000094   0x.... 0x....      BL       print
    224          		chThdSleepSeconds(1);
   \   00000098   0xF44F 0x707A      MOV      R0,#+1000
   \   0000009C   0x.... 0x....      BL       chThdSleep
   \   000000A0   0xE7F4             B.N      ??initBoardTest_3
    225          	}
    226          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x3A400C01         DC32     0x3a400c01

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x6E 0x00          DC8      "n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x73 0x65          DC8      "set"
   \              0x74 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     stepCoutner

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x........         DC32     `?<Constant "ch%d hwIndex=%d %s%d\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x........         DC32     `?<Constant "v=%f  adc=%d  c=%d (h...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x........         DC32     `?<Constant "Please hit N<ENTER> t...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x........         DC32     currentIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   0x........         DC32     currentPin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \   00000000   0x........         DC32     rlist

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \   00000000   0x........         DC32     `?<Constant "board test blinking">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \   00000000   0x........         DC32     is_board_test_mode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_11:
   \   00000000   0x........         DC32     `?<Constant "Current index=%d\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_12:
   \   00000000   0x........         DC32     `?<Constant "\\'n\\' for next step and...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_13:
   \   00000000   0x........         DC32     fastAdc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_14:
   \   00000000   0x........         DC32     slowAdc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_15:
   \   00000000   0x........         DC32     `?<Constant "ADC count: slow %d/fa...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_16:
   \   00000000   0x........         DC32     `?<Constant "Blinking %s\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_17:
   \   00000000   0x........         DC32     pinsCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_18:
   \   00000000   0x........         DC32     BLINK_PINS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_19:
   \   00000000   0x........         DC32     `?<Constant "test">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_20:
   \   00000000   0x........         DC32     `?<Constant "blinking %d\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_21:
   \   00000000   0x........         DC32     `?<Constant "blinking %d!\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_22:
   \   00000000   0x........         DC32     _Z8nextStepv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_23:
   \   00000000   0x........         DC32     _Z8setIndexi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_24:
   \   00000000   0x........         DC32     _Z8ivThreadi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_25:
   \   00000000   0x........         DC32     btThreadStack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_26:
   \   00000000   0x........         DC32     `?<Constant "Board test done, than...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_27:
   \   00000000   0x........         DC32     `?<Constant "Bye!\\r\\n">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "ch%d hwIndex=%d %s%d\\r\\n">`:
   \   00000000   0x63 0x68          DC8 "ch%d hwIndex=%d %s%d\015\012"
   \              0x25 0x64    
   \              0x20 0x68    
   \              0x77 0x49    
   \              0x6E 0x64    
   \              0x65 0x78    
   \              0x3D 0x25    
   \              0x64 0x20    
   \              0x25 0x73    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "v=%f  adc=%d  c=%d (h...">`:
   \   00000000   0x76 0x3D          DC8 76H, 3DH, 25H, 66H, 20H, 20H, 61H, 64H
   \              0x25 0x66    
   \              0x20 0x20    
   \              0x61 0x64    
   \   00000008   0x63 0x3D          DC8 63H, 3DH, 25H, 64H, 20H, 20H, 63H, 3DH
   \              0x25 0x64    
   \              0x20 0x20    
   \              0x63 0x3D    
   \   00000010   0x25 0x64          DC8 25H, 64H, 20H, 28H, 68H, 69H, 74H, 20H
   \              0x20 0x28    
   \              0x68 0x69    
   \              0x74 0x20    
   \   00000018   0x27 0x6E          DC8 27H, 6EH, 27H, 3CH, 45H, 4EH, 54H, 45H
   \              0x27 0x3C    
   \              0x45 0x4E    
   \              0x54 0x45    
   \   00000020   0x52 0x3E          DC8 52H, 3EH, 20H, 66H, 6FH, 72H, 20H, 6EH
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x6E    
   \   00000028   0x65 0x78          DC8 65H, 78H, 74H, 20H, 73H, 74H, 65H, 70H
   \              0x74 0x20    
   \              0x73 0x74    
   \              0x65 0x70    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Please hit N<ENTER> t...">`:
   \   00000000   0x50 0x6C          DC8 "Please hit N<ENTER> to continue\015\012"
   \              0x65 0x61    
   \              0x73 0x65    
   \              0x20 0x68    
   \              0x69 0x74    
   \              0x20 0x4E    
   \              0x3C 0x45    
   \              0x4E 0x54    
   \              0x45 0x52    
   \              0x3E 0x20    
   \              0x74 0x6F    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x74 0x69    
   \              0x6E 0x75    
   \              0x65 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "board test blinking">`:
   \   00000000   0x62 0x6F          DC8 "board test blinking"
   \              0x61 0x72    
   \              0x64 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x20 0x62    
   \              0x6C 0x69    
   \              0x6E 0x6B    
   \              0x69 0x6E    
   \              0x67 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Current index=%d\\r\\n">`:
   \   00000000   0x43 0x75          DC8 "Current index=%d\015\012"
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x69 0x6E    
   \              0x64 0x65    
   \              0x78 0x3D    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\'n\\' for next step and...">`:
   \   00000000   0x27 0x6E          DC8 27H, 6EH, 27H, 20H, 66H, 6FH, 72H, 20H
   \              0x27 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \   00000008   0x6E 0x65          DC8 6EH, 65H, 78H, 74H, 20H, 73H, 74H, 65H
   \              0x78 0x74    
   \              0x20 0x73    
   \              0x74 0x65    
   \   00000010   0x70 0x20          DC8 70H, 20H, 61H, 6EH, 64H, 20H, 27H, 73H
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x27 0x73    
   \   00000018   0x65 0x74          DC8 65H, 74H, 20H, 58H, 27H, 20H, 74H, 6FH
   \              0x20 0x58    
   \              0x27 0x20    
   \              0x74 0x6F    
   \   00000020   0x20 0x72          DC8 20H, 72H, 65H, 74H, 75H, 72H, 6EH, 20H
   \              0x65 0x74    
   \              0x75 0x72    
   \              0x6E 0x20    
   \   00000028   0x74 0x6F          DC8 74H, 6FH, 20H, 73H, 74H, 65H, 70H, 20H
   \              0x20 0x73    
   \              0x74 0x65    
   \              0x70 0x20    
   \   00000030   0x58 0x0D          DC8 58H, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "ADC count: slow %d/fa...">`:
   \   00000000   0x41 0x44          DC8 "ADC count: slow %d/fast %d\015\012"
   \              0x43 0x20    
   \              0x63 0x6F    
   \              0x75 0x6E    
   \              0x74 0x3A    
   \              0x20 0x73    
   \              0x6C 0x6F    
   \              0x77 0x20    
   \              0x25 0x64    
   \              0x2F 0x66    
   \              0x61 0x73    
   \              0x74 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Blinking %s\\r\\n">`:
   \   00000000   0x42 0x6C          DC8 "Blinking %s\015\012"
   \              0x69 0x6E    
   \              0x6B 0x69    
   \              0x6E 0x67    
   \              0x20 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "test">`:
   \   00000000   0x74 0x65          DC8 "test"
   \              0x73 0x74    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "blinking %d\\r\\n">`:
   \   00000000   0x62 0x6C          DC8 "blinking %d\015\012"
   \              0x69 0x6E    
   \              0x6B 0x69    
   \              0x6E 0x67    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "blinking %d!\\r\\n">`:
   \   00000000   0x62 0x6C          DC8 "blinking %d!\015\012"
   \              0x69 0x6E    
   \              0x6B 0x69    
   \              0x6E 0x67    
   \              0x20 0x25    
   \              0x64 0x21    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 2
   \   00000000   0x6E 0x00          DC8 "n"

   \                                 In section .rodata, align 4
   \   00000000   0x73 0x65          DC8 "set"
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Board test done, than...">`:
   \   00000000   0x42 0x6F          DC8 42H, 6FH, 61H, 72H, 64H, 20H, 74H, 65H
   \              0x61 0x72    
   \              0x64 0x20    
   \              0x74 0x65    
   \   00000008   0x73 0x74          DC8 73H, 74H, 20H, 64H, 6FH, 6EH, 65H, 2CH
   \              0x20 0x64    
   \              0x6F 0x6E    
   \              0x65 0x2C    
   \   00000010   0x20 0x74          DC8 20H, 74H, 68H, 61H, 6EH, 6BH, 20H, 79H
   \              0x68 0x61    
   \              0x6E 0x6B    
   \              0x20 0x79    
   \   00000018   0x6F 0x75          DC8 6FH, 75H, 21H, 20H, 54H, 69H, 6DH, 65H
   \              0x21 0x20    
   \              0x54 0x69    
   \              0x6D 0x65    
   \   00000020   0x20 0x74          DC8 20H, 74H, 6FH, 20H, 72H, 65H, 6DH, 6FH
   \              0x6F 0x20    
   \              0x72 0x65    
   \              0x6D 0x6F    
   \   00000028   0x76 0x65          DC8 76H, 65H, 20H, 74H, 68H, 61H, 74H, 20H
   \              0x20 0x74    
   \              0x68 0x61    
   \              0x74 0x20    
   \   00000030   0x6A 0x75          DC8 6AH, 75H, 6DH, 70H, 65H, 72H, 20H, 61H
   \              0x6D 0x70    
   \              0x65 0x72    
   \              0x20 0x61    
   \   00000038   0x6E 0x64          DC8 6EH, 64H, 20H, 72H, 65H, 62H, 6FH, 6FH
   \              0x20 0x72    
   \              0x65 0x62    
   \              0x6F 0x6F    
   \   00000040   0x74 0x0D          DC8 74H, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Bye!\\r\\n">`:
   \   00000000   0x42 0x79          DC8 "Bye!\015\012"
   \              0x65 0x21    
   \              0x0D 0x0A    
   \              0x00         
   \   00000007   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   blinkAllOutputPins()
        16   -> chThdSleep
        16   -> print
        16   -> setCurrentPinValue(bool)
       8   btInitOutputPins()
         8   -> mySetPadMode2(char const *, brain_pin_e, iomode_t)
      16   initBoardTest()
        16   -> AdcDevice::size()
        16   -> addConsoleAction
        16   -> addConsoleActionI
        16   -> blinkAllOutputPins()
        16   -> btInitOutputPins()
        16   -> chThdCreateStatic
        16   -> chThdSleep
        16   -> print
        16   -> printBoardTestState
        16   -> processAdcPin(AdcDevice *, int)
        16   -> waitForKey()
       0   isBoardTestMode
       0   isTimeForNextStep(int)
      16   ivThread(int)
        16   -> chThdSleep
        16   -> setCurrentPinValue(bool)
       0   nextStep()
       8   printBoardTestState
         8   -> AdcDevice::size()
         8   -> hwPortname(brain_pin_e)
         8   -> print
      48   processAdcPin(AdcDevice *, int)
        48   -> AdcDevice::getAdcHardwareIndexByInternalIndex(int)
        48   -> AdcDevice::getAdcValueByIndex(int)
        48   -> __aeabi_f2d
        48   -> chThdSleep
        48   -> getAdcChannelPin(adc_channel_e)
        48   -> getAdcChannelPort(adc_channel_e)
        48   -> isTimeForNextStep(int)
        48   -> portname(GPIO_TypeDef *)
        48   -> print
      16   setCurrentPinValue(bool)
        16   -> getHwPin(brain_pin_e)
        16   -> getHwPort(brain_pin_e)
       8   setIndex(int)
         8   -> nextStep()
       8   waitForKey()
         8   -> chThdSleep
         8   -> isTimeForNextStep(int)
         8   -> print


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      32  ?<Constant "ADC count: slow %d/fa...">
      16  ?<Constant "Blinking %s\r\n">
      68  ?<Constant "Board test done, than...">
       8  ?<Constant "Bye!\r\n">
      20  ?<Constant "Current index=%d\r\n">
      36  ?<Constant "Please hit N<ENTER> t...">
      52  ?<Constant "\'n\' for next step and...">
      16  ?<Constant "blinking %d!\r\n">
      16  ?<Constant "blinking %d\r\n">
      20  ?<Constant "board test blinking">
      24  ?<Constant "ch%d hwIndex=%d %s%d\r\n">
       2  ?<Constant "n">
       4  ?<Constant "set">
       8  ?<Constant "test">
      52  ?<Constant "v=%f  adc=%d  c=%d (h...">
       4  ??DataTable10
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_11
       4  ??DataTable11_12
       4  ??DataTable11_13
       4  ??DataTable11_14
       4  ??DataTable11_15
       4  ??DataTable11_16
       4  ??DataTable11_17
       4  ??DataTable11_18
       4  ??DataTable11_19
       4  ??DataTable11_2
       4  ??DataTable11_20
       4  ??DataTable11_21
       4  ??DataTable11_22
       4  ??DataTable11_23
       4  ??DataTable11_24
       4  ??DataTable11_25
       4  ??DataTable11_26
       4  ??DataTable11_27
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
      88  BLINK_PINS
     170  blinkAllOutputPins()
      40  btInitOutputPins()
     712  btThreadStack
       4  currentIndex
       4  currentPin
     162  initBoardTest()
       6  isBoardTestMode
      18  isTimeForNextStep(int)
       1  is_board_test_mode
      42  ivThread(int)
      12  nextStep()
       4  pinsCount
      68  printBoardTestState
     156  processAdcPin(AdcDevice *, int)
      48  setCurrentPinValue(bool)
      14  setIndex(int)
       4  stepCoutner
      32  waitForKey()

 
 721 bytes in section .bss
  96 bytes in section .data
 374 bytes in section .rodata
 884 bytes in section .text
 
 884 bytes of CODE  memory
 374 bytes of CONST memory
 817 bytes of DATA  memory

Errors: none
Warnings: none
