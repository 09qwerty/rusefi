###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:01 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\s #
#                       rc\icu.c                                              #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\s #
#                       rc\icu.c -lCN F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\Debug\List\ -lA F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\Debug\List\ -o F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\Debug\Obj\ --no_cse --no_unroll --no_inline  #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\ -On #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\i #
#                       cu.lst                                                #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\ic #
#                       u.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\src\icu.c
      1          /*
      2              ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
      3                           2011,2012,2013 Giovanni Di Sirio.
      4          
      5              This file is part of ChibiOS/RT.
      6          
      7              ChibiOS/RT is free software; you can redistribute it and/or modify
      8              it under the terms of the GNU General Public License as published by
      9              the Free Software Foundation; either version 3 of the License, or
     10              (at your option) any later version.
     11          
     12              ChibiOS/RT is distributed in the hope that it will be useful,
     13              but WITHOUT ANY WARRANTY; without even the implied warranty of
     14              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     15              GNU General Public License for more details.
     16          
     17              You should have received a copy of the GNU General Public License
     18              along with this program.  If not, see <http://www.gnu.org/licenses/>.
     19          
     20                                                ---
     21          
     22              A special exception to the GPL can be applied should you wish to distribute
     23              a combined work that includes ChibiOS/RT, without being obliged to provide
     24              the source code for any proprietary components. See the file exception.txt
     25              for full details of how and when the exception can be applied.
     26          */
     27          
     28          /**
     29           * @file    icu.c
     30           * @brief   ICU Driver code.
     31           *
     32           * @addtogroup ICU
     33           * @{
     34           */
     35          
     36          #include "ch.h"
     37          #include "hal.h"
     38          
     39          #if HAL_USE_ICU || defined(__DOXYGEN__)
     40          
     41          /*===========================================================================*/
     42          /* Driver local definitions.                                                 */
     43          /*===========================================================================*/
     44          
     45          /*===========================================================================*/
     46          /* Driver exported variables.                                                */
     47          /*===========================================================================*/
     48          
     49          /*===========================================================================*/
     50          /* Driver local variables and types.                                         */
     51          /*===========================================================================*/
     52          
     53          /*===========================================================================*/
     54          /* Driver local functions.                                                   */
     55          /*===========================================================================*/
     56          
     57          /*===========================================================================*/
     58          /* Driver exported functions.                                                */
     59          /*===========================================================================*/
     60          
     61          /**
     62           * @brief   ICU Driver initialization.
     63           * @note    This function is implicitly invoked by @p halInit(), there is
     64           *          no need to explicitly initialize the driver.
     65           *
     66           * @init
     67           */

   \                                 In section .text, align 2, keep-with-next
     68          void icuInit(void) {
   \                     icuInit:
   \   00000000   0xB580             PUSH     {R7,LR}
     69          
     70            icu_lld_init();
   \   00000002   0x.... 0x....      BL       icu_lld_init
     71          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     72          
     73          /**
     74           * @brief   Initializes the standard part of a @p ICUDriver structure.
     75           *
     76           * @param[out] icup     pointer to the @p ICUDriver object
     77           *
     78           * @init
     79           */

   \                                 In section .text, align 2, keep-with-next
     80          void icuObjectInit(ICUDriver *icup) {
     81          
     82            icup->state  = ICU_STOP;
   \                     icuObjectInit:
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x7001             STRB     R1,[R0, #+0]
     83            icup->config = NULL;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6041             STR      R1,[R0, #+4]
     84          }
   \   00000008   0x4770             BX       LR               ;; return
     85          
     86          /**
     87           * @brief   Configures and activates the ICU peripheral.
     88           *
     89           * @param[in] icup      pointer to the @p ICUDriver object
     90           * @param[in] config    pointer to the @p ICUConfig object
     91           *
     92           * @api
     93           */

   \                                 In section .text, align 2, keep-with-next
     94          void icuStart(ICUDriver *icup, const ICUConfig *config) {
   \                     icuStart:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     95          
     96            chDbgCheck((icup != NULL) && (config != NULL), "icuStart");
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD001             BEQ.N    ??icuStart_0
   \   0000000A   0x2D00             CMP      R5,#+0
   \   0000000C   0xD104             BNE.N    ??icuStart_1
   \                     ??icuStart_0:
   \   0000000E   0x2260             MOVS     R2,#+96
   \   00000010   0x....             LDR.N    R1,??DataTable3
   \   00000012   0x....             LDR.N    R0,??DataTable3_1
   \   00000014   0x.... 0x....      BL       chDbgPanic3
     97          
     98            chSysLock();
   \                     ??icuStart_1:
   \   00000018   0x2020             MOVS     R0,#+32
   \   0000001A   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000001E   0x.... 0x....      BL       dbg_check_lock
     99            chDbgAssert((icup->state == ICU_STOP) || (icup->state == ICU_READY),
    100                        "icuStart(), #1", "invalid state");
   \   00000022   0x7820             LDRB     R0,[R4, #+0]
   \   00000024   0x2801             CMP      R0,#+1
   \   00000026   0xD005             BEQ.N    ??icuStart_2
   \   00000028   0x7820             LDRB     R0,[R4, #+0]
   \   0000002A   0x2802             CMP      R0,#+2
   \   0000002C   0xD002             BEQ.N    ??icuStart_2
   \   0000002E   0x....             LDR.N    R0,??DataTable3_2
   \   00000030   0x.... 0x....      BL       chDbgPanic
    101            icup->config = config;
   \                     ??icuStart_2:
   \   00000034   0x6065             STR      R5,[R4, #+4]
    102            icu_lld_start(icup);
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0x.... 0x....      BL       icu_lld_start
    103            icup->state = ICU_READY;
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0x7020             STRB     R0,[R4, #+0]
    104            chSysUnlock();
   \   00000040   0x.... 0x....      BL       dbg_check_unlock
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0xF380 0x8811      MSR      BASEPRI,R0
    105          }
   \   0000004A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    106          
    107          /**
    108           * @brief   Deactivates the ICU peripheral.
    109           *
    110           * @param[in] icup      pointer to the @p ICUDriver object
    111           *
    112           * @api
    113           */

   \                                 In section .text, align 2, keep-with-next
    114          void icuStop(ICUDriver *icup) {
   \                     icuStop:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    115          
    116            chDbgCheck(icup != NULL, "icuStop");
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD104             BNE.N    ??icuStop_0
   \   00000008   0x2274             MOVS     R2,#+116
   \   0000000A   0x....             LDR.N    R1,??DataTable3
   \   0000000C   0x....             LDR.N    R0,??DataTable3_3
   \   0000000E   0x.... 0x....      BL       chDbgPanic3
    117          
    118            chSysLock();
   \                     ??icuStop_0:
   \   00000012   0x2020             MOVS     R0,#+32
   \   00000014   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000018   0x.... 0x....      BL       dbg_check_lock
    119            chDbgAssert((icup->state == ICU_STOP) || (icup->state == ICU_READY),
    120                        "icuStop(), #1", "invalid state");
   \   0000001C   0x7820             LDRB     R0,[R4, #+0]
   \   0000001E   0x2801             CMP      R0,#+1
   \   00000020   0xD005             BEQ.N    ??icuStop_1
   \   00000022   0x7820             LDRB     R0,[R4, #+0]
   \   00000024   0x2802             CMP      R0,#+2
   \   00000026   0xD002             BEQ.N    ??icuStop_1
   \   00000028   0x....             LDR.N    R0,??DataTable3_4
   \   0000002A   0x.... 0x....      BL       chDbgPanic
    121            icu_lld_stop(icup);
   \                     ??icuStop_1:
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0x.... 0x....      BL       icu_lld_stop
    122            icup->state = ICU_STOP;
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x7020             STRB     R0,[R4, #+0]
    123            chSysUnlock();
   \   00000038   0x.... 0x....      BL       dbg_check_unlock
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xF380 0x8811      MSR      BASEPRI,R0
    124          }
   \   00000042   0xBD10             POP      {R4,PC}          ;; return
    125          
    126          /**
    127           * @brief   Enables the input capture.
    128           *
    129           * @param[in] icup      pointer to the @p ICUDriver object
    130           *
    131           * @api
    132           */

   \                                 In section .text, align 2, keep-with-next
    133          void icuEnable(ICUDriver *icup) {
   \                     icuEnable:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    134          
    135            chDbgCheck(icup != NULL, "icuEnable");
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD104             BNE.N    ??icuEnable_0
   \   00000008   0x2287             MOVS     R2,#+135
   \   0000000A   0x....             LDR.N    R1,??DataTable3
   \   0000000C   0x....             LDR.N    R0,??DataTable3_5
   \   0000000E   0x.... 0x....      BL       chDbgPanic3
    136          
    137            chSysLock();
   \                     ??icuEnable_0:
   \   00000012   0x2020             MOVS     R0,#+32
   \   00000014   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000018   0x.... 0x....      BL       dbg_check_lock
    138            chDbgAssert(icup->state == ICU_READY, "icuEnable(), #1", "invalid state");
   \   0000001C   0x7820             LDRB     R0,[R4, #+0]
   \   0000001E   0x2802             CMP      R0,#+2
   \   00000020   0xD002             BEQ.N    ??icuEnable_1
   \   00000022   0x....             LDR.N    R0,??DataTable3_6
   \   00000024   0x.... 0x....      BL       chDbgPanic
    139            icu_lld_enable(icup);
   \                     ??icuEnable_1:
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x.... 0x....      BL       icu_lld_enable
    140            icup->state = ICU_WAITING;
   \   0000002E   0x2003             MOVS     R0,#+3
   \   00000030   0x7020             STRB     R0,[R4, #+0]
    141            chSysUnlock();
   \   00000032   0x.... 0x....      BL       dbg_check_unlock
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xF380 0x8811      MSR      BASEPRI,R0
    142          }
   \   0000003C   0xBD10             POP      {R4,PC}          ;; return
    143          
    144          /**
    145           * @brief   Disables the input capture.
    146           *
    147           * @param[in] icup      pointer to the @p ICUDriver object
    148           *
    149           * @api
    150           */

   \                                 In section .text, align 2, keep-with-next
    151          void icuDisable(ICUDriver *icup) {
   \                     icuDisable:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    152          
    153            chDbgCheck(icup != NULL, "icuDisable");
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD104             BNE.N    ??icuDisable_0
   \   00000008   0x2299             MOVS     R2,#+153
   \   0000000A   0x....             LDR.N    R1,??DataTable3
   \   0000000C   0x....             LDR.N    R0,??DataTable3_7
   \   0000000E   0x.... 0x....      BL       chDbgPanic3
    154          
    155            chSysLock();
   \                     ??icuDisable_0:
   \   00000012   0x2020             MOVS     R0,#+32
   \   00000014   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000018   0x.... 0x....      BL       dbg_check_lock
    156            chDbgAssert((icup->state == ICU_READY) || (icup->state == ICU_WAITING) ||
    157                        (icup->state == ICU_ACTIVE) || (icup->state == ICU_IDLE),
    158                        "icuDisable(), #1", "invalid state");
   \   0000001C   0x7820             LDRB     R0,[R4, #+0]
   \   0000001E   0x2802             CMP      R0,#+2
   \   00000020   0xD00B             BEQ.N    ??icuDisable_1
   \   00000022   0x7820             LDRB     R0,[R4, #+0]
   \   00000024   0x2803             CMP      R0,#+3
   \   00000026   0xD008             BEQ.N    ??icuDisable_1
   \   00000028   0x7820             LDRB     R0,[R4, #+0]
   \   0000002A   0x2804             CMP      R0,#+4
   \   0000002C   0xD005             BEQ.N    ??icuDisable_1
   \   0000002E   0x7820             LDRB     R0,[R4, #+0]
   \   00000030   0x2805             CMP      R0,#+5
   \   00000032   0xD002             BEQ.N    ??icuDisable_1
   \   00000034   0x....             LDR.N    R0,??DataTable3_8
   \   00000036   0x.... 0x....      BL       chDbgPanic
    159            icu_lld_disable(icup);
   \                     ??icuDisable_1:
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x.... 0x....      BL       icu_lld_disable
    160            icup->state = ICU_READY;
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0x7020             STRB     R0,[R4, #+0]
    161            chSysUnlock();
   \   00000044   0x.... 0x....      BL       dbg_check_unlock
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xF380 0x8811      MSR      BASEPRI,R0
    162          }
   \   0000004E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     `?<Constant "F:\\\\stuff\\\\rusefi_sourc...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     `?<Constant "\\"icuStart\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     `?<Constant "icuStart(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     `?<Constant "\\"icuStop\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     `?<Constant "icuStop(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     `?<Constant "\\"icuEnable\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     `?<Constant "icuEnable(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     `?<Constant "\\"icuDisable\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     `?<Constant "icuDisable(), #1">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"icuStart\\"()">`:
   \   00000000   0x22 0x69          DC8 "\"icuStart\"()"
   \              0x63 0x75    
   \              0x53 0x74    
   \              0x61 0x72    
   \              0x74 0x22    
   \              0x28 0x29    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "F:\\\\stuff\\\\rusefi_sourc...">`:
   \   00000000   0x46 0x3A          DC8 46H, 3AH, 5CH, 73H, 74H, 75H, 66H, 66H
   \              0x5C 0x73    
   \              0x74 0x75    
   \              0x66 0x66    
   \   00000008   0x5C 0x72          DC8 5CH, 72H, 75H, 73H, 65H, 66H, 69H, 5FH
   \              0x75 0x73    
   \              0x65 0x66    
   \              0x69 0x5F    
   \   00000010   0x73 0x6F          DC8 73H, 6FH, 75H, 72H, 63H, 65H, 66H, 6FH
   \              0x75 0x72    
   \              0x63 0x65    
   \              0x66 0x6F    
   \   00000018   0x72 0x67          DC8 72H, 67H, 65H, 5CH, 66H, 69H, 72H, 6DH
   \              0x65 0x5C    
   \              0x66 0x69    
   \              0x72 0x6D    
   \   00000020   0x77 0x61          DC8 77H, 61H, 72H, 65H, 5CH, 63H, 68H, 69H
   \              0x72 0x65    
   \              0x5C 0x63    
   \              0x68 0x69    
   \   00000028   0x62 0x69          DC8 62H, 69H, 6FH, 73H, 5CH, 6FH, 73H, 5CH
   \              0x6F 0x73    
   \              0x5C 0x6F    
   \              0x73 0x5C    
   \   00000030   0x68 0x61          DC8 68H, 61H, 6CH, 5CH, 73H, 72H, 63H, 5CH
   \              0x6C 0x5C    
   \              0x73 0x72    
   \              0x63 0x5C    
   \   00000038   0x69 0x63          DC8 69H, 63H, 75H, 2EH, 63H, 0
   \              0x75 0x2E    
   \              0x63 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "icuStart(), #1">`:
   \   00000000   0x69 0x63          DC8 "icuStart(), #1"
   \              0x75 0x53    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x28 0x29    
   \              0x2C 0x20    
   \              0x23 0x31    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"icuStop\\"()">`:
   \   00000000   0x22 0x69          DC8 "\"icuStop\"()"
   \              0x63 0x75    
   \              0x53 0x74    
   \              0x6F 0x70    
   \              0x22 0x28    
   \              0x29 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "icuStop(), #1">`:
   \   00000000   0x69 0x63          DC8 "icuStop(), #1"
   \              0x75 0x53    
   \              0x74 0x6F    
   \              0x70 0x28    
   \              0x29 0x2C    
   \              0x20 0x23    
   \              0x31 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"icuEnable\\"()">`:
   \   00000000   0x22 0x69          DC8 "\"icuEnable\"()"
   \              0x63 0x75    
   \              0x45 0x6E    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x22 0x28    
   \              0x29 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "icuEnable(), #1">`:
   \   00000000   0x69 0x63          DC8 "icuEnable(), #1"
   \              0x75 0x45    
   \              0x6E 0x61    
   \              0x62 0x6C    
   \              0x65 0x28    
   \              0x29 0x2C    
   \              0x20 0x23    
   \              0x31 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"icuDisable\\"()">`:
   \   00000000   0x22 0x69          DC8 "\"icuDisable\"()"
   \              0x63 0x75    
   \              0x44 0x69    
   \              0x73 0x61    
   \              0x62 0x6C    
   \              0x65 0x22    
   \              0x28 0x29    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "icuDisable(), #1">`:
   \   00000000   0x69 0x63          DC8 "icuDisable(), #1"
   \              0x75 0x44    
   \              0x69 0x73    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x28 0x29    
   \              0x2C 0x20    
   \              0x23 0x31    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    163          
    164          #endif /* HAL_USE_ICU */
    165          
    166          /** @} */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   icuDisable
         8   -> chDbgPanic
         8   -> chDbgPanic3
         8   -> dbg_check_lock
         8   -> dbg_check_unlock
         8   -> icu_lld_disable
       8   icuEnable
         8   -> chDbgPanic
         8   -> chDbgPanic3
         8   -> dbg_check_lock
         8   -> dbg_check_unlock
         8   -> icu_lld_enable
       8   icuInit
         8   -> icu_lld_init
       0   icuObjectInit
      16   icuStart
        16   -> chDbgPanic
        16   -> chDbgPanic3
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
        16   -> icu_lld_start
       8   icuStop
         8   -> chDbgPanic
         8   -> chDbgPanic3
         8   -> dbg_check_lock
         8   -> dbg_check_unlock
         8   -> icu_lld_stop


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      64  ?<Constant "F:\\stuff\\rusefi_sourc...">
      16  ?<Constant "\"icuDisable\"()">
      16  ?<Constant "\"icuEnable\"()">
      16  ?<Constant "\"icuStart\"()">
      12  ?<Constant "\"icuStop\"()">
      20  ?<Constant "icuDisable(), #1">
      16  ?<Constant "icuEnable(), #1">
      16  ?<Constant "icuStart(), #1">
      16  ?<Constant "icuStop(), #1">
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
      80  icuDisable
      62  icuEnable
       8  icuInit
      10  icuObjectInit
      76  icuStart
      68  icuStop

 
 192 bytes in section .rodata
 340 bytes in section .text
 
 340 bytes of CODE  memory
 192 bytes of CONST memory

Errors: none
Warnings: none
