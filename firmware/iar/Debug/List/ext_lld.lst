###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:49 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\p #
#                       latforms\STM32\ext_lld.c                              #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\p #
#                       latforms\STM32\ext_lld.c -lCN                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\  #
#                       -lA F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Li #
#                       st\ -o F:\stuff\rusefi_sourceforge\firmware\iar\Debug #
#                       \Obj\ --no_cse --no_unroll --no_inline                #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\ -On #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\e #
#                       xt_lld.lst                                            #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\ex #
#                       t_lld.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\platforms\STM32\ext_lld.c
      1          /*
      2              ChibiOS/RT - Copyright (C) 2006-2013 Giovanni Di Sirio
      3          
      4              Licensed under the Apache License, Version 2.0 (the "License");
      5              you may not use this file except in compliance with the License.
      6              You may obtain a copy of the License at
      7          
      8                  http://www.apache.org/licenses/LICENSE-2.0
      9          
     10              Unless required by applicable law or agreed to in writing, software
     11              distributed under the License is distributed on an "AS IS" BASIS,
     12              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     13              See the License for the specific language governing permissions and
     14              limitations under the License.
     15          */
     16          
     17          /**
     18           * @file    STM32/ext_lld.c
     19           * @brief   STM32 EXT subsystem low level driver source.
     20           *
     21           * @addtogroup EXT
     22           * @{
     23           */
     24          
     25          #include "ch.h"
     26          #include "hal.h"
     27          
     28          #if HAL_USE_EXT || defined(__DOXYGEN__)
     29          
     30          #include "ext_lld_isr.h"
     31          
     32          /*===========================================================================*/
     33          /* Driver local definitions.                                                 */
     34          /*===========================================================================*/
     35          
     36          /*===========================================================================*/
     37          /* Driver exported variables.                                                */
     38          /*===========================================================================*/
     39          
     40          /**
     41           * @brief   EXTD1 driver identifier.
     42           */

   \                                 In section .bss, align 4
     43          EXTDriver EXTD1;
   \                     EXTD1:
   \   00000000                      DS8 8
     44          
     45          /*===========================================================================*/
     46          /* Driver local variables and types.                                         */
     47          /*===========================================================================*/
     48          
     49          /*===========================================================================*/
     50          /* Driver local functions.                                                   */
     51          /*===========================================================================*/
     52          
     53          /*===========================================================================*/
     54          /* Driver interrupt handlers.                                                */
     55          /*===========================================================================*/
     56          
     57          /*===========================================================================*/
     58          /* Driver exported functions.                                                */
     59          /*===========================================================================*/
     60          
     61          /**
     62           * @brief   Low level EXT driver initialization.
     63           *
     64           * @notapi
     65           */

   \                                 In section .text, align 2, keep-with-next
     66          void ext_lld_init(void) {
   \                     ext_lld_init:
   \   00000000   0xB580             PUSH     {R7,LR}
     67          
     68            /* Driver initialization.*/
     69            extObjectInit(&EXTD1);
   \   00000002   0x....             LDR.N    R0,??DataTable3
   \   00000004   0x.... 0x....      BL       extObjectInit
     70          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
     71          
     72          /**
     73           * @brief   Configures and activates the EXT peripheral.
     74           *
     75           * @param[in] extp      pointer to the @p EXTDriver object
     76           *
     77           * @notapi
     78           */

   \                                 In section .text, align 2, keep-with-next
     79          void ext_lld_start(EXTDriver *extp) {
   \                     ext_lld_start:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     80            unsigned i;
     81          
     82            if (extp->state == EXT_STOP)
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD101             BNE.N    ??ext_lld_start_0
     83              ext_lld_exti_irq_enable();
   \   0000000A   0x.... 0x....      BL       ext_lld_exti_irq_enable
     84          
     85            /* Configuration of automatic channels.*/
     86            for (i = 0; i < EXT_MAX_CHANNELS; i++)
   \                     ??ext_lld_start_0:
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x0005             MOVS     R5,R0
   \                     ??ext_lld_start_1:
   \   00000012   0x2D17             CMP      R5,#+23
   \   00000014   0xD20F             BCS.N    ??ext_lld_start_2
     87              if (extp->config->channels[i].mode & EXT_CH_MODE_AUTOSTART)
   \   00000016   0x6860             LDR      R0,[R4, #+4]
   \   00000018   0xF810 0x0035      LDRB     R0,[R0, R5, LSL #+3]
   \   0000001C   0x0740             LSLS     R0,R0,#+29
   \   0000001E   0xD504             BPL.N    ??ext_lld_start_3
     88                ext_lld_channel_enable(extp, i);
   \   00000020   0x0029             MOVS     R1,R5
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x.... 0x....      BL       ext_lld_channel_enable
   \   00000028   0xE003             B.N      ??ext_lld_start_4
     89              else
     90                ext_lld_channel_disable(extp, i);
   \                     ??ext_lld_start_3:
   \   0000002A   0x0029             MOVS     R1,R5
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x.... 0x....      BL       ext_lld_channel_disable
   \                     ??ext_lld_start_4:
   \   00000032   0x1C6D             ADDS     R5,R5,#+1
   \   00000034   0xE7ED             B.N      ??ext_lld_start_1
     91          }
   \                     ??ext_lld_start_2:
   \   00000036   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     92          
     93          /**
     94           * @brief   Deactivates the EXT peripheral.
     95           *
     96           * @param[in] extp      pointer to the @p EXTDriver object
     97           *
     98           * @notapi
     99           */

   \                                 In section .text, align 2, keep-with-next
    100          void ext_lld_stop(EXTDriver *extp) {
   \                     ext_lld_stop:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    101          
    102            if (extp->state == EXT_ACTIVE)
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0x2802             CMP      R0,#+2
   \   00000008   0xD101             BNE.N    ??ext_lld_stop_0
    103              ext_lld_exti_irq_disable();
   \   0000000A   0x.... 0x....      BL       ext_lld_exti_irq_disable
    104          
    105            EXTI->EMR = 0;
   \                     ??ext_lld_stop_0:
   \   0000000E   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40013c04
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x6001             STR      R1,[R0, #+0]
    106            EXTI->IMR = 0;
   \   00000014   0x....             LDR.N    R0,??DataTable3_2  ;; 0x40013c00
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x6001             STR      R1,[R0, #+0]
    107            EXTI->PR  = 0xFFFFFFFF;
   \   0000001A   0x....             LDR.N    R0,??DataTable3_3  ;; 0x40013c14
   \   0000001C   0xF05F 0x31FF      MOVS     R1,#-1
   \   00000020   0x6001             STR      R1,[R0, #+0]
    108          #if STM32_EXTI_NUM_CHANNELS > 32
    109            EXTI->PR2 = 0xFFFFFFFF;
    110          #endif
    111          }
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    112          
    113          /**
    114           * @brief   Enables an EXT channel.
    115           *
    116           * @param[in] extp      pointer to the @p EXTDriver object
    117           * @param[in] channel   channel to be enabled
    118           *
    119           * @notapi
    120           */

   \                                 In section .text, align 2, keep-with-next
    121          void ext_lld_channel_enable(EXTDriver *extp, expchannel_t channel) {
   \                     ext_lld_channel_enable:
   \   00000000   0xB430             PUSH     {R4,R5}
    122          
    123            /* Setting the associated GPIO for external channels.*/
    124            if (channel < 16) {
   \   00000002   0x2910             CMP      R1,#+16
   \   00000004   0xD219             BCS.N    ??ext_lld_channel_enable_0
    125              uint32_t n = channel >> 2;
   \   00000006   0x088A             LSRS     R2,R1,#+2
    126              uint32_t mask = ~(0xF << ((channel & 3) * 4));
   \   00000008   0x230F             MOVS     R3,#+15
   \   0000000A   0xF011 0x0403      ANDS     R4,R1,#0x3
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0x00A4             LSLS     R4,R4,#+2
   \   00000012   0x40A3             LSLS     R3,R3,R4
   \   00000014   0x43DB             MVNS     R3,R3
    127              uint32_t port = ((extp->config->channels[channel].mode &
    128                                EXT_MODE_GPIO_MASK) >>
    129                               EXT_MODE_GPIO_OFF) << ((channel & 3) * 4);
   \   00000016   0x6844             LDR      R4,[R0, #+4]
   \   00000018   0xF854 0x4031      LDR      R4,[R4, R1, LSL #+3]
   \   0000001C   0xF3C4 0x1403      UBFX     R4,R4,#+4,#+4
   \   00000020   0xF011 0x0503      ANDS     R5,R1,#0x3
   \   00000024   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000026   0x00AD             LSLS     R5,R5,#+2
   \   00000028   0x40AC             LSLS     R4,R4,R5
    130          
    131          #if defined(STM32F10X_LD_VL) || defined(STM32F10X_MD_VL) ||                 \
    132              defined(STM32F10X_HD_VL) || defined(STM32F10X_LD)    ||                 \
    133              defined(STM32F10X_MD)    || defined(STM32F10X_HD)    ||                 \
    134              defined(STM32F10X_XL)    || defined(STM32F10X_CL)
    135              AFIO->EXTICR[n] = (AFIO->EXTICR[n] & mask) | port;
    136          #else /* !defined(STM32F1XX) */
    137              SYSCFG->EXTICR[n] = (SYSCFG->EXTICR[n] & mask) | port;
   \   0000002A   0x....             LDR.N    R5,??DataTable3_4  ;; 0x40013808
   \   0000002C   0xF855 0x5022      LDR      R5,[R5, R2, LSL #+2]
   \   00000030   0x402B             ANDS     R3,R3,R5
   \   00000032   0x4323             ORRS     R3,R4,R3
   \   00000034   0x....             LDR.N    R4,??DataTable3_4  ;; 0x40013808
   \   00000036   0xF844 0x3022      STR      R3,[R4, R2, LSL #+2]
    138          #endif /* !defined(STM32F1XX) */
    139            }
    140          
    141          #if STM32_EXTI_NUM_CHANNELS > 32
    142            if (channel < 32) {
    143          #endif
    144              /* Programming edge registers.*/
    145              if (extp->config->channels[channel].mode & EXT_CH_MODE_RISING_EDGE)
   \                     ??ext_lld_channel_enable_0:
   \   0000003A   0x6842             LDR      R2,[R0, #+4]
   \   0000003C   0xF812 0x2031      LDRB     R2,[R2, R1, LSL #+3]
   \   00000040   0x07D2             LSLS     R2,R2,#+31
   \   00000042   0xD507             BPL.N    ??ext_lld_channel_enable_1
    146                EXTI->RTSR |= (1 << channel);
   \   00000044   0x....             LDR.N    R2,??DataTable3_5  ;; 0x40013c08
   \   00000046   0x6812             LDR      R2,[R2, #+0]
   \   00000048   0x2301             MOVS     R3,#+1
   \   0000004A   0x408B             LSLS     R3,R3,R1
   \   0000004C   0x431A             ORRS     R2,R3,R2
   \   0000004E   0x....             LDR.N    R3,??DataTable3_5  ;; 0x40013c08
   \   00000050   0x601A             STR      R2,[R3, #+0]
   \   00000052   0xE006             B.N      ??ext_lld_channel_enable_2
    147              else
    148                EXTI->RTSR &= ~(1 << channel);
   \                     ??ext_lld_channel_enable_1:
   \   00000054   0x....             LDR.N    R2,??DataTable3_5  ;; 0x40013c08
   \   00000056   0x6812             LDR      R2,[R2, #+0]
   \   00000058   0x2301             MOVS     R3,#+1
   \   0000005A   0x408B             LSLS     R3,R3,R1
   \   0000005C   0x439A             BICS     R2,R2,R3
   \   0000005E   0x....             LDR.N    R3,??DataTable3_5  ;; 0x40013c08
   \   00000060   0x601A             STR      R2,[R3, #+0]
    149              if (extp->config->channels[channel].mode & EXT_CH_MODE_FALLING_EDGE)
   \                     ??ext_lld_channel_enable_2:
   \   00000062   0x6842             LDR      R2,[R0, #+4]
   \   00000064   0xF812 0x2031      LDRB     R2,[R2, R1, LSL #+3]
   \   00000068   0x0792             LSLS     R2,R2,#+30
   \   0000006A   0xD507             BPL.N    ??ext_lld_channel_enable_3
    150                EXTI->FTSR |= (1 << channel);
   \   0000006C   0x....             LDR.N    R2,??DataTable3_6  ;; 0x40013c0c
   \   0000006E   0x6812             LDR      R2,[R2, #+0]
   \   00000070   0x2301             MOVS     R3,#+1
   \   00000072   0x408B             LSLS     R3,R3,R1
   \   00000074   0x431A             ORRS     R2,R3,R2
   \   00000076   0x....             LDR.N    R3,??DataTable3_6  ;; 0x40013c0c
   \   00000078   0x601A             STR      R2,[R3, #+0]
   \   0000007A   0xE006             B.N      ??ext_lld_channel_enable_4
    151              else
    152                EXTI->FTSR &= ~(1 << channel);
   \                     ??ext_lld_channel_enable_3:
   \   0000007C   0x....             LDR.N    R2,??DataTable3_6  ;; 0x40013c0c
   \   0000007E   0x6812             LDR      R2,[R2, #+0]
   \   00000080   0x2301             MOVS     R3,#+1
   \   00000082   0x408B             LSLS     R3,R3,R1
   \   00000084   0x439A             BICS     R2,R2,R3
   \   00000086   0x....             LDR.N    R3,??DataTable3_6  ;; 0x40013c0c
   \   00000088   0x601A             STR      R2,[R3, #+0]
    153          
    154              /* Programming interrupt and event registers.*/
    155              if (extp->config->channels[channel].cb != NULL) {
   \                     ??ext_lld_channel_enable_4:
   \   0000008A   0x6842             LDR      R2,[R0, #+4]
   \   0000008C   0xEB12 0x02C1      ADDS     R2,R2,R1, LSL #+3
   \   00000090   0x6852             LDR      R2,[R2, #+4]
   \   00000092   0x2A00             CMP      R2,#+0
   \   00000094   0xD00E             BEQ.N    ??ext_lld_channel_enable_5
    156                EXTI->IMR |= (1 << channel);
   \   00000096   0x....             LDR.N    R2,??DataTable3_2  ;; 0x40013c00
   \   00000098   0x6812             LDR      R2,[R2, #+0]
   \   0000009A   0x2301             MOVS     R3,#+1
   \   0000009C   0x408B             LSLS     R3,R3,R1
   \   0000009E   0x431A             ORRS     R2,R3,R2
   \   000000A0   0x....             LDR.N    R3,??DataTable3_2  ;; 0x40013c00
   \   000000A2   0x601A             STR      R2,[R3, #+0]
    157                EXTI->EMR &= ~(1 << channel);
   \   000000A4   0x....             LDR.N    R2,??DataTable3_1  ;; 0x40013c04
   \   000000A6   0x6812             LDR      R2,[R2, #+0]
   \   000000A8   0x2301             MOVS     R3,#+1
   \   000000AA   0x408B             LSLS     R3,R3,R1
   \   000000AC   0x439A             BICS     R2,R2,R3
   \   000000AE   0x....             LDR.N    R3,??DataTable3_1  ;; 0x40013c04
   \   000000B0   0x601A             STR      R2,[R3, #+0]
   \   000000B2   0xE00D             B.N      ??ext_lld_channel_enable_6
    158              }
    159              else {
    160                EXTI->EMR |= (1 << channel);
   \                     ??ext_lld_channel_enable_5:
   \   000000B4   0x....             LDR.N    R2,??DataTable3_1  ;; 0x40013c04
   \   000000B6   0x6812             LDR      R2,[R2, #+0]
   \   000000B8   0x2301             MOVS     R3,#+1
   \   000000BA   0x408B             LSLS     R3,R3,R1
   \   000000BC   0x431A             ORRS     R2,R3,R2
   \   000000BE   0x....             LDR.N    R3,??DataTable3_1  ;; 0x40013c04
   \   000000C0   0x601A             STR      R2,[R3, #+0]
    161                EXTI->IMR &= ~(1 << channel);
   \   000000C2   0x....             LDR.N    R2,??DataTable3_2  ;; 0x40013c00
   \   000000C4   0x6812             LDR      R2,[R2, #+0]
   \   000000C6   0x2301             MOVS     R3,#+1
   \   000000C8   0x408B             LSLS     R3,R3,R1
   \   000000CA   0x439A             BICS     R2,R2,R3
   \   000000CC   0x....             LDR.N    R3,??DataTable3_2  ;; 0x40013c00
   \   000000CE   0x601A             STR      R2,[R3, #+0]
    162              }
    163          #if STM32_EXTI_NUM_CHANNELS > 32
    164            }
    165            else {
    166              /* Programming edge registers.*/
    167              if (extp->config->channels[channel].mode & EXT_CH_MODE_RISING_EDGE)
    168                EXTI->RTSR2 |= (1 << (32 - channel));
    169              else
    170                EXTI->RTSR2 &= ~(1 << (32 - channel));
    171              if (extp->config->channels[channel].mode & EXT_CH_MODE_FALLING_EDGE)
    172                EXTI->FTSR2 |= (1 << (32 - channel));
    173              else
    174                EXTI->FTSR2 &= ~(1 << (32 - channel));
    175          
    176              /* Programming interrupt and event registers.*/
    177              if (extp->config->channels[channel].cb != NULL) {
    178                EXTI->IMR2 |= (1 << (32 - channel));
    179                EXTI->EMR2 &= ~(1 << (32 - channel));
    180              }
    181              else {
    182                EXTI->EMR2 |= (1 << (32 - channel));
    183                EXTI->IMR2 &= ~(1 << (32 - channel));
    184              }
    185            }
    186          #endif
    187          }
   \                     ??ext_lld_channel_enable_6:
   \   000000D0   0xBC30             POP      {R4,R5}
   \   000000D2   0x4770             BX       LR               ;; return
    188          
    189          /**
    190           * @brief   Disables an EXT channel.
    191           *
    192           * @param[in] extp      pointer to the @p EXTDriver object
    193           * @param[in] channel   channel to be disabled
    194           *
    195           * @notapi
    196           */

   \                                 In section .text, align 2, keep-with-next
    197          void ext_lld_channel_disable(EXTDriver *extp, expchannel_t channel) {
    198          
    199            (void)extp;
    200          
    201          #if STM32_EXTI_NUM_CHANNELS > 32
    202            if (channel < 32) {
    203          #endif
    204              EXTI->IMR   &= ~(1 << channel);
   \                     ext_lld_channel_disable:
   \   00000000   0x....             LDR.N    R2,??DataTable3_2  ;; 0x40013c00
   \   00000002   0x6812             LDR      R2,[R2, #+0]
   \   00000004   0x2301             MOVS     R3,#+1
   \   00000006   0x408B             LSLS     R3,R3,R1
   \   00000008   0x439A             BICS     R2,R2,R3
   \   0000000A   0x....             LDR.N    R3,??DataTable3_2  ;; 0x40013c00
   \   0000000C   0x601A             STR      R2,[R3, #+0]
    205              EXTI->EMR   &= ~(1 << channel);
   \   0000000E   0x....             LDR.N    R2,??DataTable3_1  ;; 0x40013c04
   \   00000010   0x6812             LDR      R2,[R2, #+0]
   \   00000012   0x2301             MOVS     R3,#+1
   \   00000014   0x408B             LSLS     R3,R3,R1
   \   00000016   0x439A             BICS     R2,R2,R3
   \   00000018   0x....             LDR.N    R3,??DataTable3_1  ;; 0x40013c04
   \   0000001A   0x601A             STR      R2,[R3, #+0]
    206              EXTI->RTSR  &= ~(1 << channel);
   \   0000001C   0x....             LDR.N    R2,??DataTable3_5  ;; 0x40013c08
   \   0000001E   0x6812             LDR      R2,[R2, #+0]
   \   00000020   0x2301             MOVS     R3,#+1
   \   00000022   0x408B             LSLS     R3,R3,R1
   \   00000024   0x439A             BICS     R2,R2,R3
   \   00000026   0x....             LDR.N    R3,??DataTable3_5  ;; 0x40013c08
   \   00000028   0x601A             STR      R2,[R3, #+0]
    207              EXTI->FTSR  &= ~(1 << channel);
   \   0000002A   0x....             LDR.N    R2,??DataTable3_6  ;; 0x40013c0c
   \   0000002C   0x6812             LDR      R2,[R2, #+0]
   \   0000002E   0x2301             MOVS     R3,#+1
   \   00000030   0x408B             LSLS     R3,R3,R1
   \   00000032   0x439A             BICS     R2,R2,R3
   \   00000034   0x....             LDR.N    R3,??DataTable3_6  ;; 0x40013c0c
   \   00000036   0x601A             STR      R2,[R3, #+0]
    208              EXTI->PR     =  (1 << channel);
   \   00000038   0x2201             MOVS     R2,#+1
   \   0000003A   0x408A             LSLS     R2,R2,R1
   \   0000003C   0x....             LDR.N    R3,??DataTable3_3  ;; 0x40013c14
   \   0000003E   0x601A             STR      R2,[R3, #+0]
    209          #if STM32_EXTI_NUM_CHANNELS > 32
    210            }
    211            else {
    212              EXTI->IMR2  &= ~(1 << (32 - channel));
    213              EXTI->EMR2  &= ~(1 << (32 - channel));
    214              EXTI->RTSR2 &= ~(1 << (32 - channel));
    215              EXTI->FTSR2 &= ~(1 << (32 - channel));
    216              EXTI->PR2    =  (1 << (32 - channel));
    217            }
    218          #endif
    219          }
   \   00000040   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     EXTD1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x40013C04         DC32     0x40013c04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x40013C00         DC32     0x40013c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x40013C14         DC32     0x40013c14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x40013808         DC32     0x40013808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x40013C08         DC32     0x40013c08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x40013C0C         DC32     0x40013c0c
    220          
    221          #endif /* HAL_USE_EXT */
    222          
    223          /** @} */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   ext_lld_channel_disable
       8   ext_lld_channel_enable
       8   ext_lld_init
         8   -> extObjectInit
      16   ext_lld_start
        16   -> ext_lld_channel_disable
        16   -> ext_lld_channel_enable
        16   -> ext_lld_exti_irq_enable
       8   ext_lld_stop
         8   -> ext_lld_exti_irq_disable


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       8  EXTD1
      66  ext_lld_channel_disable
     212  ext_lld_channel_enable
      10  ext_lld_init
      56  ext_lld_start
      36  ext_lld_stop

 
   8 bytes in section .bss
 408 bytes in section .text
 
 408 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
