###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:47 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\erro #
#                       r_handling.cpp                                        #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\erro #
#                       r_handling.cpp -lCN F:\stuff\rusefi_sourceforge\firmw #
#                       are\iar\Debug\List\ -lA F:\stuff\rusefi_sourceforge\f #
#                       irmware\iar\Debug\List\ -o                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\   #
#                       --no_cse --no_unroll --no_inline --no_code_motion     #
#                       --no_tbaa --no_clustering --no_scheduling --debug     #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\e #
#                       rror_handling.lst                                     #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\er #
#                       ror_handling.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\error_handling.cpp
      1          /**
      2           * @file error_handling.cpp
      3           *
      4           * @date Apr 1, 2014
      5           * @author Andrey Belomutskiy, (c) 2012-2015
      6           */
      7          
      8          #include "main.h"
      9          #include "error_handling.h"
     10          #include "io_pins.h"
     11          #include "memstreams.h"
     12          #include "efilib2.h"
     13          
     14          #if EFI_HD44780_LCD
     15          #include "lcd_HD44780.h"
     16          #endif /* EFI_HD44780_LCD */
     17          

   \                                 In section .data, align 4
     18          static time_t timeOfPreviousWarning = -10;
   \                     timeOfPreviousWarning:
   \   00000000   0xFFFFFFF6         DC32 4294967286

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine:
   \   00000000   0xB580             PUSH     {R7,LR}
     19          static LoggingWithStorage logger("error handling");
   \   00000002   0x....             LDR.N    R1,??DataTable8_1
   \   00000004   0x....             LDR.N    R0,??DataTable8_2
   \   00000006   0x.... 0x....      BL       _ZN18LoggingWithStorageC1EPKc
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     logger:
   \   00000000                      DS8 260
     20          
     21          #define WARNING_PREFIX "WARNING: "
     22          
     23          extern int warningEnabled;
     24          extern bool_t main_loop_started;
     25          

   \                                 In section .bss, align 4
     26          const char *dbg_panic_file;
   \                     dbg_panic_file:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     27          int dbg_panic_line;
   \                     dbg_panic_line:
   \   00000000                      DS8 4
     28          

   \                                 In section .text, align 2, keep-with-next
     29          void chDbgPanic3(const char *msg, const char * file, int line) {
   \                     chDbgPanic3:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     30          	if (hasFatalError())
   \   00000008   0x....             LDR.N    R0,??DataTable8_3
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD11E             BNE.N    ??chDbgPanic3_0
     31          		return;
     32          	dbg_panic_file = file;
   \                     ??chDbgPanic3_1:
   \   00000010   0x....             LDR.N    R0,??DataTable8_4
   \   00000012   0x6005             STR      R5,[R0, #+0]
     33          	dbg_panic_line = line;
   \   00000014   0x....             LDR.N    R0,??DataTable8_5
   \   00000016   0x6006             STR      R6,[R0, #+0]
     34          #if CH_DBG_SYSTEM_STATE_CHECK
     35          	dbg_panic_msg = msg;
   \   00000018   0x....             LDR.N    R0,??DataTable8_3
   \   0000001A   0x6004             STR      R4,[R0, #+0]
     36          #endif /* CH_DBG_SYSTEM_STATE_CHECK */
     37          
     38          	ON_FATAL_ERROR();
   \   0000001C   0x....             LDR.N    R0,??DataTable8_6  ;; 0x40020c18
   \   0000001E   0xF44F 0x4180      MOV      R1,#+16384
   \   00000022   0x6001             STR      R1,[R0, #+0]
   \   00000024   0x.... 0x....      BL       _Z14turnAllPinsOffv
     39          #if EFI_HD44780_LCD
     40          	lcdShowFatalMessage((char *) msg);
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x.... 0x....      BL       lcdShowFatalMessage
     41          #endif /* EFI_HD44780_LCD */
     42          
     43          	if (!main_loop_started) {
   \   0000002E   0x....             LDR.N    R0,??DataTable8_7
   \   00000030   0x7800             LDRB     R0,[R0, #+0]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD10B             BNE.N    ??chDbgPanic3_2
     44          		print("fatal %s %s:%d\r\n", msg, file, line);
   \   00000036   0x0033             MOVS     R3,R6
   \   00000038   0x002A             MOVS     R2,R5
   \   0000003A   0x0021             MOVS     R1,R4
   \   0000003C   0x....             LDR.N    R0,??DataTable8_8
   \   0000003E   0x.... 0x....      BL       print
     45          		chThdSleepSeconds(1);
   \   00000042   0xF44F 0x707A      MOV      R0,#+1000
   \   00000046   0x.... 0x....      BL       chThdSleep
     46          		chSysHalt();
   \   0000004A   0x.... 0x....      BL       port_halt
     47          	}
     48          }
   \                     ??chDbgPanic3_2:
   \                     ??chDbgPanic3_0:
   \   0000004E   0xBD70             POP      {R4-R6,PC}       ;; return
     49          
     50          #define WARNING_BUFFER_SIZE 80

   \                                 In section .bss, align 4
     51          static char warningBuffer[WARNING_BUFFER_SIZE];
   \                     warningBuffer:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
     52          static MemoryStream warningStream;
   \                     warningStream:
   \   00000000                      DS8 20
     53          
     54          /**
     55           * OBD_PCM_Processor_Fault is the general error code for now
     56           *
     57           * @returns TRUE in case there are too many warnings
     58           */

   \                                 In section .text, align 2, keep-with-next
     59          int warning(obd_code_e code, const char *fmt, ...) {
   \                     warning:
   \   00000000   0xB40C             PUSH     {R2,R3}
   \   00000002   0xB5F8             PUSH     {R3-R7,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     60                  UNUSED(code);
     61            
     62          	int now = getTimeNowSeconds();
   \   00000008   0x.... 0x....      BL       getTimeNowSeconds
   \   0000000C   0x0006             MOVS     R6,R0
     63          	if (absI(now - timeOfPreviousWarning) < 10 || !warningEnabled)
   \   0000000E   0x....             LDR.N    R0,??DataTable8_9
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x1A30             SUBS     R0,R6,R0
   \   00000014   0x.... 0x....      BL       absI
   \   00000018   0x280A             CMP      R0,#+10
   \   0000001A   0xDB03             BLT.N    ??warning_0
   \   0000001C   0x....             LDR.N    R0,??DataTable8_10
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD101             BNE.N    ??warning_1
     64          		return true; // we just had another warning, let's not spam
   \                     ??warning_0:
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0xE027             B.N      ??warning_2
     65          	timeOfPreviousWarning = now;
   \                     ??warning_1:
   \   00000028   0x....             LDR.N    R0,??DataTable8_9
   \   0000002A   0x6006             STR      R6,[R0, #+0]
     66          
     67          	resetLogging(&logger); // todo: is 'reset' really needed here?
   \   0000002C   0x....             LDR.N    R0,??DataTable8_2
   \   0000002E   0x.... 0x....      BL       resetLogging
     68          	appendMsgPrefix(&logger);
   \   00000032   0x....             LDR.N    R0,??DataTable8_2
   \   00000034   0x.... 0x....      BL       appendMsgPrefix
     69          
     70          	va_list ap;
     71          	va_start(ap, fmt);
   \   00000038   0xA806             ADD      R0,SP,#+24
   \   0000003A   0x0007             MOVS     R7,R0
     72          	append(&logger, WARNING_PREFIX);
   \   0000003C   0x....             LDR.N    R1,??DataTable8_11
   \   0000003E   0x....             LDR.N    R0,??DataTable8_2
   \   00000040   0x.... 0x....      BL       append
     73          	warningStream.eos = 0; // reset
   \   00000044   0x....             LDR.N    R0,??DataTable8_12
   \   00000046   0x2100             MOVS     R1,#+0
   \   00000048   0x60C1             STR      R1,[R0, #+12]
     74          	chvprintf((BaseSequentialStream *) &warningStream, fmt, ap);
   \   0000004A   0x003A             MOVS     R2,R7
   \   0000004C   0x0029             MOVS     R1,R5
   \   0000004E   0x....             LDR.N    R0,??DataTable8_12
   \   00000050   0x.... 0x....      BL       chvprintf
     75          	warningStream.buffer[warningStream.eos] = 0;
   \   00000054   0x....             LDR.N    R0,??DataTable8_12
   \   00000056   0x68C0             LDR      R0,[R0, #+12]
   \   00000058   0x....             LDR.N    R1,??DataTable8_12
   \   0000005A   0x6849             LDR      R1,[R1, #+4]
   \   0000005C   0x2200             MOVS     R2,#+0
   \   0000005E   0x5442             STRB     R2,[R0, R1]
     76          	va_end(ap);
     77          
     78          	append(&logger, warningBuffer);
   \   00000060   0x....             LDR.N    R1,??DataTable8_13
   \   00000062   0x....             LDR.N    R0,??DataTable8_2
   \   00000064   0x.... 0x....      BL       append
     79          	append(&logger, DELIMETER);
   \   00000068   0x....             ADR.N    R1,??DataTable8  ;; ","
   \   0000006A   0x....             LDR.N    R0,??DataTable8_2
   \   0000006C   0x.... 0x....      BL       append
     80          	scheduleLogging(&logger);
   \   00000070   0x....             LDR.N    R0,??DataTable8_2
   \   00000072   0x.... 0x....      BL       scheduleLogging
     81          
     82          	return FALSE;
   \   00000076   0x2000             MOVS     R0,#+0
   \                     ??warning_2:
   \   00000078   0xBCF2             POP      {R1,R4-R7}
   \   0000007A   0xF85D 0xFB0C      LDR      PC,[SP], #+12    ;; return
     83          }
     84          

   \                                 In section .text, align 2, keep-with-next
     85          char *getWarninig(void) {
     86          	return warningBuffer;
   \                     getWarninig:
   \   00000000   0x....             LDR.N    R0,??DataTable8_13
   \   00000002   0x4770             BX       LR               ;; return
     87          }
     88          

   \                                 In section .bss, align 4
     89          uint32_t lastLockTime;
   \                     lastLockTime:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     90          uint32_t maxLockTime = 0;
   \                     maxLockTime:
   \   00000000                      DS8 4
     91          

   \                                 In section .bss, align 1
     92          bool isInsideTriggerHandler = false;
   \                     isInsideTriggerHandler:
   \   00000000                      DS8 1
     93          

   \                                 In section .text, align 2, keep-with-next
     94          void onLockHook(void) {
     95          	lastLockTime = GET_TIMESTAMP();
   \                     _Z10onLockHookv:
   \   00000000   0x....             LDR.N    R0,??DataTable8_14
   \   00000002   0x....             LDR.N    R1,??DataTable8_15  ;; 0xe0001004
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x6001             STR      R1,[R0, #+0]
     96          }
   \   00000008   0x4770             BX       LR               ;; return
     97          

   \                                 In section .text, align 2, keep-with-next
     98          void onUnlockHook(void) {
     99          	uint32_t t = GET_TIMESTAMP() - lastLockTime;
   \                     _Z12onUnlockHookv:
   \   00000000   0x....             LDR.N    R0,??DataTable8_15  ;; 0xe0001004
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x....             LDR.N    R1,??DataTable8_14
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x1A40             SUBS     R0,R0,R1
    100          	if (t > maxLockTime) {
   \   0000000A   0x....             LDR.N    R1,??DataTable8_16
   \   0000000C   0x6809             LDR      R1,[R1, #+0]
   \   0000000E   0x4281             CMP      R1,R0
   \   00000010   0xD201             BCS.N    ??onUnlockHook_0
    101          		maxLockTime = t;
   \   00000012   0x....             LDR.N    R1,??DataTable8_16
   \   00000014   0x6008             STR      R0,[R1, #+0]
    102          	}
    103          //	if (t > 2800) {
    104          //		// un-comment this if you want a nice stop for a breakpoint
    105          //		maxLockTime = t + 1;
    106          //	}
    107          }
   \                     ??onUnlockHook_0:
   \   00000016   0x4770             BX       LR               ;; return
    108          

   \                                 In section .text, align 2, keep-with-next
    109          void initErrorHandling(void) {
   \                     initErrorHandling:
   \   00000000   0xB580             PUSH     {R7,LR}
    110          	msObjectInit(&warningStream, (uint8_t *) warningBuffer, WARNING_BUFFER_SIZE, 0);
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2250             MOVS     R2,#+80
   \   00000006   0x....             LDR.N    R1,??DataTable8_13
   \   00000008   0x....             LDR.N    R0,??DataTable8_12
   \   0000000A   0x.... 0x....      BL       msObjectInit
    111          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
    112          
    113          extern VTList vtlist;
    114          extern bool_t main_loop_started;
    115          

   \                                 In section .text, align 2, keep-with-next
    116          int getVtSizeEstimate(void) {
    117          	VirtualTimer *first = vtlist.vt_next;
   \                     getVtSizeEstimate:
   \   00000000   0x....             LDR.N    R0,??DataTable8_17
   \   00000002   0x6801             LDR      R1,[R0, #+0]
    118          	VirtualTimer *cur = first->vt_next;
   \   00000004   0x680A             LDR      R2,[R1, #+0]
    119          	int c = 0;
   \   00000006   0x2000             MOVS     R0,#+0
    120          	while (c++ < 20 && cur != first) {
   \                     ??getVtSizeEstimate_0:
   \   00000008   0x0003             MOVS     R3,R0
   \   0000000A   0x1C58             ADDS     R0,R3,#+1
   \   0000000C   0x2B14             CMP      R3,#+20
   \   0000000E   0xDA03             BGE.N    ??getVtSizeEstimate_1
   \   00000010   0x428A             CMP      R2,R1
   \   00000012   0xD001             BEQ.N    ??getVtSizeEstimate_1
    121          		cur = cur->vt_next;
   \   00000014   0x6812             LDR      R2,[R2, #+0]
   \   00000016   0xE7F7             B.N      ??getVtSizeEstimate_0
    122          	}
    123          	return c;
   \                     ??getVtSizeEstimate_1:
   \   00000018   0x4770             BX       LR               ;; return
    124          }
    125          

   \                                 In section .bss, align 4
    126          int globalVt;
   \                     globalVt:
   \   00000000                      DS8 4
    127          

   \                                 In section .bss, align 4
    128          int allReady = 0;
   \                     allReady:
   \   00000000                      DS8 4

   \                                 In section .text, align 2, keep-with-next
    129          void assertVtList(void) {
   \                     assertVtList:
   \   00000000   0xB580             PUSH     {R7,LR}
    130          	if (!main_loop_started)
   \   00000002   0x....             LDR.N    R0,??DataTable8_7
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD00C             BEQ.N    ??assertVtList_0
    131          		return;
    132          	globalVt = getVtSizeEstimate();
   \                     ??assertVtList_1:
   \   0000000A   0x.... 0x....      BL       getVtSizeEstimate
   \   0000000E   0x....             LDR.N    R1,??DataTable8_18
   \   00000010   0x6008             STR      R0,[R1, #+0]
    133          	//efiAssertVoid(globalVt > 3, "VT list?");
    134          	if(globalVt <=3 ) {
   \   00000012   0x....             LDR.N    R0,??DataTable8_18
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x2804             CMP      R0,#+4
   \   00000018   0xDA04             BGE.N    ??assertVtList_2
    135          		allReady++;
   \   0000001A   0x....             LDR.N    R0,??DataTable8_19
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \   00000020   0x....             LDR.N    R1,??DataTable8_19
   \   00000022   0x6008             STR      R0,[R1, #+0]
    136          	}
    137          }
   \                     ??assertVtList_2:
   \                     ??assertVtList_0:
   \   00000024   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x2C 0x00          DC8      ",",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     `?<Constant "error handling">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     logger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x........         DC32     dbg_panic_msg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     dbg_panic_file

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x........         DC32     dbg_panic_line

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x40020C18         DC32     0x40020c18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x........         DC32     main_loop_started

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x........         DC32     `?<Constant "fatal %s %s:%d\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x........         DC32     timeOfPreviousWarning

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   0x........         DC32     warningEnabled

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   0x........         DC32     `?<Constant "WARNING: ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   0x........         DC32     warningStream

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   0x........         DC32     warningBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   0x........         DC32     lastLockTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \   00000000   0xE0001004         DC32     0xe0001004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_16:
   \   00000000   0x........         DC32     maxLockTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_17:
   \   00000000   0x........         DC32     vtlist

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_18:
   \   00000000   0x........         DC32     globalVt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_19:
   \   00000000   0x........         DC32     allReady

   \                                 In section .init_array, align 4, keep-with-next, root
   \   00000000   0x........         DC32    RELOC_ARM_TARGET1 __sti__routine

   \                                 In section .rodata, align 4
   \                     `?<Constant "fatal %s %s:%d\\r\\n">`:
   \   00000000   0x66 0x61          DC8 "fatal %s %s:%d\015\012"
   \              0x74 0x61    
   \              0x6C 0x20    
   \              0x25 0x73    
   \              0x20 0x25    
   \              0x73 0x3A    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "WARNING: ">`:
   \   00000000   0x57 0x41          DC8 "WARNING: "
   \              0x52 0x4E    
   \              0x49 0x4E    
   \              0x47 0x3A    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 2
   \   00000000   0x2C 0x00          DC8 ","

   \                                 In section .rodata, align 4
   \                     `?<Constant "error handling">`:
   \   00000000   0x65 0x72          DC8 "error handling"
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x68 0x61    
   \              0x6E 0x64    
   \              0x6C 0x69    
   \              0x6E 0x67    
   \              0x00         
   \   0000000F   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   __sti__routine()
         8   -> LoggingWithStorage::LoggingWithStorage(char const *)
       8   assertVtList
         8   -> getVtSizeEstimate
      16   chDbgPanic3
        16   -> chThdSleep
        16   -> lcdShowFatalMessage
        16   -> port_halt
        16   -> print
        16   -> turnAllPinsOff()
       0   getVtSizeEstimate
       0   getWarninig
       8   initErrorHandling
         8   -> msObjectInit
       0   onLockHook()
       0   onUnlockHook()
      32   warning
        32   -> absI
        32   -> append
        32   -> appendMsgPrefix
        32   -> chvprintf
        32   -> getTimeNowSeconds
        32   -> resetLogging
        32   -> scheduleLogging


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant ",">
      12  ?<Constant "WARNING: ">
      16  ?<Constant "error handling">
      20  ?<Constant "fatal %s %s:%d\r\n">
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_13
       4  ??DataTable8_14
       4  ??DataTable8_15
       4  ??DataTable8_16
       4  ??DataTable8_17
       4  ??DataTable8_18
       4  ??DataTable8_19
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
      12  __sti__routine()
       4  allReady
      38  assertVtList
      80  chDbgPanic3
       4  dbg_panic_file
       4  dbg_panic_line
      26  getVtSizeEstimate
       4  getWarninig
       4  globalVt
      16  initErrorHandling
       1  isInsideTriggerHandler
       4  lastLockTime
     260  logger
       4  maxLockTime
      10  onLockHook()
      24  onUnlockHook()
       4  timeOfPreviousWarning
     126  warning
      80  warningBuffer
      20  warningStream
       4  -- Other

 
 385 bytes in section .bss
   4 bytes in section .data
   4 bytes in section .init_array
  50 bytes in section .rodata
 416 bytes in section .text
 
 420 bytes of CODE  memory
  50 bytes of CONST memory
 389 bytes of DATA  memory

Errors: none
Warnings: 1
