###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:16 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\hw_layer\gpio_he #
#                       lper.cpp                                              #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\hw_layer\gpio_he #
#                       lper.cpp -lCN F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\Debug\List\ -lA F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\Debug\List\ -o F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\Debug\Obj\ --no_cse --no_unroll --no_inline  #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\g #
#                       pio_helper.lst                                        #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\gp #
#                       io_helper.o                                           #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\hw_layer\gpio_helper.cpp
      1          /**
      2           * @file    gpio_helper.c
      3           * @brief   General I/O helper
      4           *
      5           * @date Aug 25, 2013
      6           * @author Andrey Belomutskiy, (c) 2012-2015
      7           *
      8           * This file is part of rusEfi - see http://rusefi.com
      9           *
     10           * rusEfi is free software; you can redistribute it and/or modify it under the terms of
     11           * the GNU General Public License as published by the Free Software Foundation; either
     12           * version 3 of the License, or (at your option) any later version.
     13           *
     14           * rusEfi is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
     15           * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     16           * GNU General Public License for more details.
     17           *
     18           * You should have received a copy of the GNU General Public License along with this program.
     19           * If not, see <http://www.gnu.org/licenses/>.
     20           */
     21          
     22          #ifndef GPIO_HELPER_C_
     23          #define GPIO_HELPER_C_
     24          
     25          #include <hal.h>
     26          
     27          #include "pin_repository.h"
     28          #include "gpio_helper.h"
     29          
     30          /**
     31           * @brief Initialize the hardware output pin while also assigning it a logical name
     32           */

   \                                 In section .text, align 2, keep-with-next
     33          void initOutputPinExt(const char *msg, OutputPin *outputPin, GPIO_TypeDef *port, uint32_t pinNumber, iomode_t mode) {
   \                     _Z16initOutputPinExtPKcP9OutputPinP12GPIO_TypeDefjj:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0xF8DD 0x8018      LDR      R8,[SP, #+24]
     34          	if (outputPin->port != NULL) {
   \   00000010   0x6828             LDR      R0,[R5, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD006             BEQ.N    ??initOutputPinExt_0
     35          		/**
     36          		 * here we check if another physical pin is already assigned to this logical output
     37          		 */
     38          // todo: need to clear '&outputs' in io_pins.c
     39          		firmwareError("outputPin [%s] already assigned to %x%d", msg, outputPin->port, outputPin->pin);
   \   00000016   0x686B             LDR      R3,[R5, #+4]
   \   00000018   0x682A             LDR      R2,[R5, #+0]
   \   0000001A   0x0021             MOVS     R1,R4
   \   0000001C   0x....             LDR.N    R0,??DataTable0
   \   0000001E   0x.... 0x....      BL       firmwareError
     40          		return;
   \   00000022   0xE00A             B.N      ??initOutputPinExt_1
     41          	}
     42          	outputPin->currentLogicValue = INITIAL_PIN_STATE;
   \                     ??initOutputPinExt_0:
   \   00000024   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000028   0x60E8             STR      R0,[R5, #+12]
     43          	outputPin->port = port;
   \   0000002A   0x602E             STR      R6,[R5, #+0]
     44          	outputPin->pin = pinNumber;
   \   0000002C   0x606F             STR      R7,[R5, #+4]
     45          
     46          	mySetPadMode(msg, port, pinNumber, mode);
   \   0000002E   0x4643             MOV      R3,R8
   \   00000030   0x003A             MOVS     R2,R7
   \   00000032   0x0031             MOVS     R1,R6
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x.... 0x....      BL       _Z12mySetPadModePKcP12GPIO_TypeDefjj
     47          }
   \                     ??initOutputPinExt_1:
   \   0000003A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
     48          

   \                                 In section .text, align 2, keep-with-next
     49          void initOutputPin(const char *msg, OutputPin *outputPin, GPIO_TypeDef *port, uint32_t pinNumber) {
   \                     _Z13initOutputPinPKcP9OutputPinP12GPIO_TypeDefj:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
     50          	initOutputPinExt(msg, outputPin, port, pinNumber, PAL_MODE_OUTPUT_PUSHPULL);
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   \   0000000E   0x003B             MOVS     R3,R7
   \   00000010   0x0032             MOVS     R2,R6
   \   00000012   0x0029             MOVS     R1,R5
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x.... 0x....      BL       _Z16initOutputPinExtPKcP9OutputPinP12GPIO_TypeDefjj
     51          }
   \   0000001A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     `?<Constant "outputPin [%s] alread...">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "outputPin [%s] alread...">`:
   \   00000000   0x6F 0x75          DC8 "outputPin [%s] already assigned to %x%d"
   \              0x74 0x70    
   \              0x75 0x74    
   \              0x50 0x69    
   \              0x6E 0x20    
   \              0x5B 0x25    
   \              0x73 0x5D    
   \              0x20 0x61    
   \              0x6C 0x72    
   \              0x65 0x61    
   \              0x64 0x79    
   \              0x20 0x61    
   \              0x73 0x73    
   \              0x69 0x67    
   \              0x6E 0x65    
   \              0x64 0x20    
   \              0x74 0x6F    
   \              0x20 0x25    
   \              0x78 0x25    
   \              0x64 0x00    
     52          
     53          #endif /* GPIO_HELPER_C_ */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   initOutputPin(char const *, OutputPin *, GPIO_TypeDef *, uint32_t)
        24   -> initOutputPinExt(char const *, OutputPin *, GPIO_TypeDef *, uint32_t, iomode_t)
      24   initOutputPinExt(char const *, OutputPin *, GPIO_TypeDef *, uint32_t, iomode_t)
        24   -> firmwareError
        24   -> mySetPadMode(char const *, ioportid_t, uint32_t, iomode_t)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      40  ?<Constant "outputPin [%s] alread...">
       4  ??DataTable0
      28  initOutputPin(char const *, OutputPin *, GPIO_TypeDef *, uint32_t)
      62  initOutputPinExt(char const *, OutputPin *, GPIO_TypeDef *, uint32_t, iomode_t)

 
 40 bytes in section .rodata
 94 bytes in section .text
 
 94 bytes of CODE  memory
 40 bytes of CONST memory

Errors: none
Warnings: none
