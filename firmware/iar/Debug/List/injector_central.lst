###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:31 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\inje #
#                       ctor_central.cpp                                      #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\inje #
#                       ctor_central.cpp -lCN F:\stuff\rusefi_sourceforge\fir #
#                       mware\iar\Debug\List\ -lA                             #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\  #
#                       -o F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj #
#                       \ --no_cse --no_unroll --no_inline --no_code_motion   #
#                       --no_tbaa --no_clustering --no_scheduling --debug     #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\i #
#                       njector_central.lst                                   #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\in #
#                       jector_central.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\injector_central.cpp
      1          /**
      2           * @file    injector_central.cpp
      3           * @brief	Utility methods related to fuel injection.
      4           *
      5           *
      6           * @date Sep 8, 2013
      7           * @author Andrey Belomutskiy, (c) 2012-2015
      8           *
      9           * This file is part of rusEfi - see http://rusefi.com
     10           *
     11           * rusEfi is free software; you can redistribute it and/or modify it under the terms of
     12           * the GNU General Public License as published by the Free Software Foundation; either
     13           * version 3 of the License, or (at your option) any later version.
     14           *
     15           * rusEfi is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
     16           * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     17           * GNU General Public License for more details.
     18           *
     19           * You should have received a copy of the GNU General Public License along with this program.
     20           * If not, see <http://www.gnu.org/licenses/>.
     21           */
     22          
     23          // todo: rename this file
     24          #include "main.h"
     25          
     26          #if EFI_ENGINE_CONTROL || defined(__DOXYGEN__)
     27          
     28          #include "injector_central.h"
     29          #include "io_pins.h"
     30          #include "signal_executor.h"
     31          #include "main_trigger_callback.h"
     32          #include "engine_configuration.h"
     33          #include "pin_repository.h"
     34          #include "efiGpio.h"
     35          

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine:
   \   00000000   0xB580             PUSH     {R7,LR}
     36          static LoggingWithStorage logger("InjectorCentral");
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable21
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   0000000A   0x.... 0x....      BL       _ZN18LoggingWithStorageC1EPKc
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     logger:
   \   00000000                      DS8 260
     37          EXTERN_ENGINE
     38          ;
     39          

   \                                 In section .bss, align 1
     40          static bool_t isRunningBench = false;
   \                     isRunningBench:
   \   00000000                      DS8 1
     41          

   \                                 In section .bss, align 4
     42          static int is_injector_enabled[MAX_INJECTOR_COUNT];
   \                     is_injector_enabled:
   \   00000000                      DS8 48
     43          
     44          extern engine_pins_s enginePins;
     45          

   \                                 In section .text, align 2, keep-with-next
     46          bool_t isRunningBenchTest(void) {
     47          	return isRunningBench;
   \                     _Z18isRunningBenchTestv:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
     48          }
     49          

   \                                 In section .text, align 2, keep-with-next
     50          void assertCylinderId(int cylinderId, const char *msg) {
   \                     _Z16assertCylinderIdiPKc:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     51          	int isValid = cylinderId >= 1 && cylinderId <= engineConfiguration->specs.cylindersCount;
   \   00000006   0x2C01             CMP      R4,#+1
   \   00000008   0xDB08             BLT.N    ??assertCylinderId_0
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable21_3
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF8D0 0x0194      LDR      R0,[R0, #+404]
   \   00000014   0x42A0             CMP      R0,R4
   \   00000016   0xDB01             BLT.N    ??assertCylinderId_0
   \   00000018   0x2601             MOVS     R6,#+1
   \   0000001A   0xE000             B.N      ??assertCylinderId_1
   \                     ??assertCylinderId_0:
   \   0000001C   0x2600             MOVS     R6,#+0
   \                     ??assertCylinderId_1:
   \   0000001E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
     52          	if (!isValid) {
   \   00000020   0x2E00             CMP      R6,#+0
   \   00000022   0xD10A             BNE.N    ??assertCylinderId_2
     53          		// we are here only in case of a fatal issue - at this point it is fine to make some blocking i-o
     54          		//scheduleSimpleMsg(&logger, "cid=", cylinderId);
     55          		print("ERROR [%s] cid=%d\r\n", msg, cylinderId);
   \   00000024   0x0022             MOVS     R2,R4
   \   00000026   0x0029             MOVS     R1,R5
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable21_4
   \   0000002C   0x.... 0x....      BL       print
     56          		efiAssertVoid(false, "Cylinder ID");
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable21_5
   \   00000034   0x.... 0x....      BL       firmwareError
   \   00000038   0xE7FF             B.N      ??assertCylinderId_3
     57          	}
     58          }
   \                     ??assertCylinderId_2:
   \                     ??assertCylinderId_3:
   \   0000003A   0xBD70             POP      {R4-R6,PC}       ;; return
     59          
     60          /**
     61           * @param cylinderId - from 1 to NUMBER_OF_CYLINDERS
     62           */

   \                                 In section .text, align 2, keep-with-next
     63          int isInjectorEnabled(int cylinderId) {
   \                     _Z17isInjectorEnabledi:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     64          	assertCylinderId(cylinderId, "isInjectorEnabled");
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable21_6
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       _Z16assertCylinderIdiPKc
     65          	return is_injector_enabled[cylinderId - 1];
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable21_7
   \   00000012   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000016   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
     66          }
     67          

   \                                 In section .text, align 2, keep-with-next
     68          static void printStatus(void) {
   \                     _Z11printStatusv:
   \   00000000   0xB510             PUSH     {R4,LR}
     69          	for (int id = 1; id <= engineConfiguration->specs.cylindersCount; id++) {
   \   00000002   0x2401             MOVS     R4,#+1
   \                     ??printStatus_0:
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable21_3
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF8D0 0x0194      LDR      R0,[R0, #+404]
   \   0000000E   0x42A0             CMP      R0,R4
   \   00000010   0xDB0B             BLT.N    ??printStatus_1
     70          		scheduleMsg(&logger, "injector_%d_%d", isInjectorEnabled(id));
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       _Z17isInjectorEnabledi
   \   00000018   0x0002             MOVS     R2,R0
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable21_8
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   00000022   0x.... 0x....      BL       scheduleMsg
     71          	}
   \   00000026   0x1C64             ADDS     R4,R4,#+1
   \   00000028   0xE7EC             B.N      ??printStatus_0
     72          }
   \                     ??printStatus_1:
   \   0000002A   0xBD10             POP      {R4,PC}          ;; return
     73          

   \                                 In section .text, align 2, keep-with-next
     74          static void setInjectorEnabled(int id, int value) {
   \                     _Z18setInjectorEnabledii:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     75          	efiAssertVoid(id >= 0 && id < engineConfiguration->specs.cylindersCount, "injector id");
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD406             BMI.N    ??setInjectorEnabled_0
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable21_3
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF8D0 0x0194      LDR      R0,[R0, #+404]
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xDB04             BLT.N    ??setInjectorEnabled_1
   \                     ??setInjectorEnabled_0:
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable21_9
   \   0000001C   0x.... 0x....      BL       firmwareError
   \   00000020   0xE005             B.N      ??setInjectorEnabled_2
     76          	is_injector_enabled[id] = value;
   \                     ??setInjectorEnabled_1:
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable21_7
   \   00000026   0xF840 0x5024      STR      R5,[R0, R4, LSL #+2]
     77          	printStatus();
   \   0000002A   0x.... 0x....      BL       _Z11printStatusv
     78          }
   \                     ??setInjectorEnabled_2:
   \   0000002E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     79          

   \                                 In section .text, align 4, keep-with-next
     80          static void runBench(brain_pin_e brainPin, OutputPin *output, float delayMs, float onTimeMs, float offTimeMs,
     81          		int count) {
   \                     _Z8runBench11brain_pin_eP9OutputPinfffi:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xED2D 0x8B04      VPUSH    {D8-D9}
   \   00000008   0xB084             SUB      SP,SP,#+16
   \   0000000A   0x4681             MOV      R9,R0
   \   0000000C   0x000C             MOVS     R4,R1
   \   0000000E   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   00000012   0xEEF0 0x8A60      VMOV.F32 S17,S1
   \   00000016   0xEEB0 0x9A41      VMOV.F32 S18,S2
   \   0000001A   0x4690             MOV      R8,R2
     82          	int delaySt = (int) (delayMs * CH_FREQUENCY / 1000);
   \   0000001C   0xED9F 0x....      VLDR.W   S0,??DataTable10  ;; 0x447a0000
   \   00000020   0xEE28 0x0A00      VMUL.F32 S0,S16,S0
   \   00000024   0xEDDF 0x....      VLDR.W   S1,??DataTable10  ;; 0x447a0000
   \   00000028   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   0000002C   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000030   0xEE10 0x5A10      VMOV     R5,S0
     83          	int onTimeSt = (int) (onTimeMs * CH_FREQUENCY / 1000);
   \   00000034   0xED9F 0x....      VLDR.W   S0,??DataTable10  ;; 0x447a0000
   \   00000038   0xEE28 0x0A80      VMUL.F32 S0,S17,S0
   \   0000003C   0xEDDF 0x....      VLDR.W   S1,??DataTable10  ;; 0x447a0000
   \   00000040   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   00000044   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000048   0xEE10 0x6A10      VMOV     R6,S0
     84          	int offTimeSt = (int) (offTimeMs * CH_FREQUENCY / 1000);
   \   0000004C   0xED9F 0x....      VLDR.W   S0,??DataTable10  ;; 0x447a0000
   \   00000050   0xEE29 0x0A00      VMUL.F32 S0,S18,S0
   \   00000054   0xEDDF 0x....      VLDR.W   S1,??DataTable10  ;; 0x447a0000
   \   00000058   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   0000005C   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000060   0xEE10 0x7A10      VMOV     R7,S0
     85          	if (delaySt < 0) {
   \   00000064   0x2D00             CMP      R5,#+0
   \   00000066   0xD50C             BPL.N    ??runBench_0
     86          		scheduleMsg(&logger, "Invalid delay %f", delayMs);
   \   00000068   0xEE18 0x0A10      VMOV     R0,S16
   \   0000006C   0x.... 0x....      BL       __aeabi_f2d
   \   00000070   0x0002             MOVS     R2,R0
   \   00000072   0x000B             MOVS     R3,R1
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable21_10
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   0000007C   0x.... 0x....      BL       scheduleMsg
     87          		return;
   \   00000080   0xE063             B.N      ??runBench_1
     88          	}
     89          	if (onTimeSt <= 0) {
   \                     ??runBench_0:
   \   00000082   0x2E01             CMP      R6,#+1
   \   00000084   0xDA0C             BGE.N    ??runBench_2
     90          		scheduleMsg(&logger, "Invalid onTime %f", onTimeMs);
   \   00000086   0xEE18 0x0A90      VMOV     R0,S17
   \   0000008A   0x.... 0x....      BL       __aeabi_f2d
   \   0000008E   0x0002             MOVS     R2,R0
   \   00000090   0x000B             MOVS     R3,R1
   \   00000092   0x.... 0x....      LDR.W    R1,??DataTable21_11
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   0000009A   0x.... 0x....      BL       scheduleMsg
     91          		return;
   \   0000009E   0xE054             B.N      ??runBench_1
     92          	}
     93          	if (offTimeSt <= 0) {
   \                     ??runBench_2:
   \   000000A0   0x2F01             CMP      R7,#+1
   \   000000A2   0xDA0C             BGE.N    ??runBench_3
     94          		scheduleMsg(&logger, "Invalid offTime %f", offTimeMs);
   \   000000A4   0xEE19 0x0A10      VMOV     R0,S18
   \   000000A8   0x.... 0x....      BL       __aeabi_f2d
   \   000000AC   0x0002             MOVS     R2,R0
   \   000000AE   0x000B             MOVS     R3,R1
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable21_12
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   000000B8   0x.... 0x....      BL       scheduleMsg
     95          		return;
   \   000000BC   0xE045             B.N      ??runBench_1
     96          	}
     97          	scheduleMsg(&logger, "Running bench: ON_TIME=%f ms OFF_TIME=%fms Counter=%d", onTimeMs, offTimeMs, count);
   \                     ??runBench_3:
   \   000000BE   0xF8CD 0x8008      STR      R8,[SP, #+8]
   \   000000C2   0xEE19 0x0A10      VMOV     R0,S18
   \   000000C6   0x.... 0x....      BL       __aeabi_f2d
   \   000000CA   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000000CE   0xEE18 0x0A90      VMOV     R0,S17
   \   000000D2   0x.... 0x....      BL       __aeabi_f2d
   \   000000D6   0x0002             MOVS     R2,R0
   \   000000D8   0x000B             MOVS     R3,R1
   \   000000DA   0x.... 0x....      LDR.W    R1,??DataTable21_13
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   000000E2   0x.... 0x....      BL       scheduleMsg
     98          	scheduleMsg(&logger, "output on %s", hwPortname(brainPin));
   \   000000E6   0x4648             MOV      R0,R9
   \   000000E8   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   000000EC   0x0002             MOVS     R2,R0
   \   000000EE   0x.... 0x....      LDR.W    R1,??DataTable21_14
   \   000000F2   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   000000F6   0x.... 0x....      BL       scheduleMsg
     99          
    100          	if (delaySt != 0) {
   \   000000FA   0x2D00             CMP      R5,#+0
   \   000000FC   0xD002             BEQ.N    ??runBench_4
    101          		chThdSleep(delaySt);
   \   000000FE   0x0028             MOVS     R0,R5
   \   00000100   0x.... 0x....      BL       chThdSleep
    102          	}
    103          
    104          	isRunningBench = true;
   \                     ??runBench_4:
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   00000108   0x2101             MOVS     R1,#+1
   \   0000010A   0x7001             STRB     R1,[R0, #+0]
    105          	for (int i = 0; i < count; i++) {
   \   0000010C   0xF05F 0x0A00      MOVS     R10,#+0
   \                     ??runBench_5:
   \   00000110   0x45C2             CMP      R10,R8
   \   00000112   0xDA10             BGE.N    ??runBench_6
    106          		output->setValue(true);
   \   00000114   0x2101             MOVS     R1,#+1
   \   00000116   0x0020             MOVS     R0,R4
   \   00000118   0x.... 0x....      BL       _ZN9OutputPin8setValueEi
    107          		chThdSleep(onTimeSt);
   \   0000011C   0x0030             MOVS     R0,R6
   \   0000011E   0x.... 0x....      BL       chThdSleep
    108          		output->setValue(false);
   \   00000122   0x2100             MOVS     R1,#+0
   \   00000124   0x0020             MOVS     R0,R4
   \   00000126   0x.... 0x....      BL       _ZN9OutputPin8setValueEi
    109          		chThdSleep(offTimeSt);
   \   0000012A   0x0038             MOVS     R0,R7
   \   0000012C   0x.... 0x....      BL       chThdSleep
    110          	}
   \   00000130   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   00000134   0xE7EC             B.N      ??runBench_5
    111          	scheduleMsg(&logger, "Done!");
   \                     ??runBench_6:
   \   00000136   0x.... 0x....      LDR.W    R1,??DataTable21_15
   \   0000013A   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   0000013E   0x.... 0x....      BL       scheduleMsg
    112          	isRunningBench = false;
   \   00000142   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   00000146   0x2100             MOVS     R1,#+0
   \   00000148   0x7001             STRB     R1,[R0, #+0]
    113          }
   \                     ??runBench_1:
   \   0000014A   0xB004             ADD      SP,SP,#+16
   \   0000014C   0xECBD 0x8B04      VPOP     {D8-D9}
   \   00000150   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    114          

   \                                 In section .bss, align 1
    115          static volatile bool_t needToRunBench = false;
   \                     needToRunBench:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
    116          static float onTime;
   \                     onTime:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    117          static float offTime;
   \                     offTime:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    118          static float delayMs;
   \                     delayMs:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    119          static int count;
   \                     count:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    120          static brain_pin_e brainPin;
   \                     brainPin:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    121          static OutputPin* pinX;
   \                     pinX:
   \   00000000                      DS8 4
    122          

   \                                 In section .text, align 2, keep-with-next
    123          static void pinbench(const char *delayStr, const char *onTimeStr, const char *offTimeStr, const char *countStr,
    124          		OutputPin* pinParam, brain_pin_e brainPinParam) {
   \                     _Z8pinbenchPKcS0_S0_S0_P9OutputPin11brain_pin_e:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0xF8DD 0x8020      LDR      R8,[SP, #+32]
   \   00000010   0xF8DD 0x9024      LDR      R9,[SP, #+36]
    125          	delayMs = atoff(delayStr);
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x.... 0x....      BL       atoff
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable21_16
   \   0000001E   0xED80 0x0A00      VSTR     S0,[R0, #0]
    126          	onTime = atoff(onTimeStr);
   \   00000022   0x0028             MOVS     R0,R5
   \   00000024   0x.... 0x....      BL       atoff
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable21_17
   \   0000002C   0xED80 0x0A00      VSTR     S0,[R0, #0]
    127          	offTime = atoff(offTimeStr);
   \   00000030   0x0030             MOVS     R0,R6
   \   00000032   0x.... 0x....      BL       atoff
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable21_18
   \   0000003A   0xED80 0x0A00      VSTR     S0,[R0, #0]
    128          	count = atoi(countStr);
   \   0000003E   0x0038             MOVS     R0,R7
   \   00000040   0x.... 0x....      BL       atoi
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable21_19
   \   00000048   0x6008             STR      R0,[R1, #+0]
    129          
    130          	brainPin = brainPinParam;
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable21_20
   \   0000004E   0xF8C0 0x9000      STR      R9,[R0, #+0]
    131          	pinX = pinParam;
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable21_21
   \   00000056   0xF8C0 0x8000      STR      R8,[R0, #+0]
    132          	needToRunBench = true;
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable21_22
   \   0000005E   0x2101             MOVS     R1,#+1
   \   00000060   0x7001             STRB     R1,[R0, #+0]
    133          }
   \   00000062   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    134          
    135          /**
    136           * delay 100, cylinder #2, 5ms ON, 1000ms OFF, repeat 2 times
    137           * fuelbench2 100 2 5 1000 2
    138           */

   \                                 In section .text, align 2, keep-with-next
    139          static void fuelbench2(const char *delayStr, const char *indexStr, const char * onTimeStr, const char *offTimeStr,
    140          		const char *countStr) {
   \                     _Z10fuelbench2PKcS0_S0_S0_S0_:
   \   00000000   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0xF8DD 0x8028      LDR      R8,[SP, #+40]
    141          	int index = atoi(indexStr);
   \   00000010   0x0028             MOVS     R0,R5
   \   00000012   0x.... 0x....      BL       atoi
   \   00000016   0x4681             MOV      R9,R0
    142          	if (index < 1 || index > engineConfiguration->specs.cylindersCount) {
   \   00000018   0xF1B9 0x0F01      CMP      R9,#+1
   \   0000001C   0xDB06             BLT.N    ??fuelbench2_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable21_3
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF8D0 0x0194      LDR      R0,[R0, #+404]
   \   00000028   0x4548             CMP      R0,R9
   \   0000002A   0xDA07             BGE.N    ??fuelbench2_1
    143          		scheduleMsg(&logger, "Invalid index: %d", index);
   \                     ??fuelbench2_0:
   \   0000002C   0x464A             MOV      R2,R9
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable21_23
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   00000036   0x.... 0x....      BL       scheduleMsg
    144          		return;
   \   0000003A   0xE015             B.N      ??fuelbench2_2
    145          	}
    146          	brain_pin_e b = boardConfiguration->injectionPins[index - 1];
   \                     ??fuelbench2_1:
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable21_24
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0xEB10 0x0089      ADDS     R0,R0,R9, LSL #+2
   \   00000046   0xF8D0 0xA01C      LDR      R10,[R0, #+28]
    147          	pinbench(delayStr, onTimeStr, offTimeStr, countStr, &enginePins.injectors[index - 1], b);
   \   0000004A   0xF8CD 0xA004      STR      R10,[SP, #+4]
   \   0000004E   0x2014             MOVS     R0,#+20
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable21_25
   \   00000054   0xFB00 0x1009      MLA      R0,R0,R9,R1
   \   00000058   0x304C             ADDS     R0,R0,#+76
   \   0000005A   0x9000             STR      R0,[SP, #+0]
   \   0000005C   0x4643             MOV      R3,R8
   \   0000005E   0x003A             MOVS     R2,R7
   \   00000060   0x0031             MOVS     R1,R6
   \   00000062   0x0020             MOVS     R0,R4
   \   00000064   0x.... 0x....      BL       _Z8pinbenchPKcS0_S0_S0_P9OutputPin11brain_pin_e
    148          }
   \                     ??fuelbench2_2:
   \   00000068   0xE8BD 0x87F3      POP      {R0,R1,R4-R10,PC}  ;; return
    149          

   \                                 In section .text, align 2, keep-with-next
    150          void fanBench(void) {
   \                     _Z8fanBenchv:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    151          	pinbench("0", "3000", "100", "1", &enginePins.fanRelay, boardConfiguration->fanPin);
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable21_24
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF8D0 0x0090      LDR      R0,[R0, #+144]
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable21_26
   \   00000014   0x9000             STR      R0,[SP, #+0]
   \   00000016   0x....             ADR.N    R3,??DataTable18  ;; "1"
   \   00000018   0x....             ADR.N    R2,??DataTable18_1  ;; "100"
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable21_27
   \   0000001E   0x....             ADR.N    R0,??DataTable20  ;; "0"
   \   00000020   0x.... 0x....      BL       _Z8pinbenchPKcS0_S0_S0_P9OutputPin11brain_pin_e
    152          }
   \   00000024   0xBD07             POP      {R0-R2,PC}       ;; return
    153          
    154          extern OutputPin checkEnginePin;
    155          

   \                                 In section .text, align 2, keep-with-next
    156          void milBench(void) {
   \                     _Z8milBenchv:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    157          	pinbench("0", "3000", "100", "1", &checkEnginePin, boardConfiguration->malfunctionIndicatorPin);
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable21_24
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF8D0 0x0088      LDR      R0,[R0, #+136]
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable21_28
   \   00000014   0x9000             STR      R0,[SP, #+0]
   \   00000016   0x....             ADR.N    R3,??DataTable18  ;; "1"
   \   00000018   0x....             ADR.N    R2,??DataTable18_1  ;; "100"
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable21_27
   \   0000001E   0x....             ADR.N    R0,??DataTable20  ;; "0"
   \   00000020   0x.... 0x....      BL       _Z8pinbenchPKcS0_S0_S0_P9OutputPin11brain_pin_e
    158          }
   \   00000024   0xBD07             POP      {R0-R2,PC}       ;; return
    159          

   \                                 In section .text, align 2, keep-with-next
    160          void fuelPumpBench(void) {
   \                     _Z13fuelPumpBenchv:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    161          	pinbench("0", "3000", "100", "1", &enginePins.fuelPumpRelay, boardConfiguration->fuelPumpPin);
   \   00000004   0x....             LDR.N    R0,??DataTable21_24
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x6980             LDR      R0,[R0, #+24]
   \   0000000A   0x9001             STR      R0,[SP, #+4]
   \   0000000C   0x....             LDR.N    R0,??DataTable21_29
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0x....             ADR.N    R3,??DataTable18  ;; "1"
   \   00000012   0x....             ADR.N    R2,??DataTable18_1  ;; "100"
   \   00000014   0x....             LDR.N    R1,??DataTable21_27
   \   00000016   0x....             ADR.N    R0,??DataTable20  ;; "0"
   \   00000018   0x.... 0x....      BL       _Z8pinbenchPKcS0_S0_S0_P9OutputPin11brain_pin_e
    162          }
   \   0000001C   0xBD07             POP      {R0-R2,PC}       ;; return
    163          
    164          // fuelbench 5 1000 2

   \                                 In section .text, align 2, keep-with-next
    165          static void fuelbench(const char * onTimeStr, const char *offTimeStr, const char *countStr) {
   \                     _Z9fuelbenchPKcS0_S0_:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    166          	fuelbench2("0", "1", onTimeStr, offTimeStr, countStr);
   \   0000000A   0x9600             STR      R6,[SP, #+0]
   \   0000000C   0x002B             MOVS     R3,R5
   \   0000000E   0x0022             MOVS     R2,R4
   \   00000010   0x....             ADR.N    R1,??DataTable18  ;; "1"
   \   00000012   0x....             ADR.N    R0,??DataTable20  ;; "0"
   \   00000014   0x.... 0x....      BL       _Z10fuelbench2PKcS0_S0_S0_S0_
    167          }
   \   00000018   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    168          
    169          /**
    170           * sparkbench2 0 1 5 1000 2
    171           */

   \                                 In section .text, align 2, keep-with-next
    172          static void sparkbench2(const char *delayStr, const char *indexStr, const char * onTimeStr, const char *offTimeStr,
    173          		const char *countStr) {
   \                     _Z11sparkbench2PKcS0_S0_S0_S0_:
   \   00000000   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0xF8DD 0x8028      LDR      R8,[SP, #+40]
    174          	int index = atoi(indexStr);
   \   00000010   0x0028             MOVS     R0,R5
   \   00000012   0x.... 0x....      BL       atoi
   \   00000016   0x4681             MOV      R9,R0
    175          	if (index < 1 || index > engineConfiguration->specs.cylindersCount) {
   \   00000018   0xF1B9 0x0F01      CMP      R9,#+1
   \   0000001C   0xDB05             BLT.N    ??sparkbench2_0
   \   0000001E   0x....             LDR.N    R0,??DataTable21_3
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF8D0 0x0194      LDR      R0,[R0, #+404]
   \   00000026   0x4548             CMP      R0,R9
   \   00000028   0xDA05             BGE.N    ??sparkbench2_1
    176          		scheduleMsg(&logger, "Invalid index: %d", index);
   \                     ??sparkbench2_0:
   \   0000002A   0x464A             MOV      R2,R9
   \   0000002C   0x....             LDR.N    R1,??DataTable21_23
   \   0000002E   0x....             LDR.N    R0,??DataTable21_1
   \   00000030   0x.... 0x....      BL       scheduleMsg
    177          		return;
   \   00000034   0xE014             B.N      ??sparkbench2_2
    178          	}
    179          	brain_pin_e b = boardConfiguration->ignitionPins[index - 1];
   \                     ??sparkbench2_1:
   \   00000036   0x....             LDR.N    R0,??DataTable21_24
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xEB10 0x0089      ADDS     R0,R0,R9, LSL #+2
   \   0000003E   0xF8D0 0xA050      LDR      R10,[R0, #+80]
    180          	pinbench(delayStr, onTimeStr, offTimeStr, countStr, &enginePins.coils[index - 1], b);
   \   00000042   0xF8CD 0xA004      STR      R10,[SP, #+4]
   \   00000046   0x2014             MOVS     R0,#+20
   \   00000048   0x....             LDR.N    R1,??DataTable21_25
   \   0000004A   0xFB00 0x1009      MLA      R0,R0,R9,R1
   \   0000004E   0xF510 0x709E      ADDS     R0,R0,#+316
   \   00000052   0x9000             STR      R0,[SP, #+0]
   \   00000054   0x4643             MOV      R3,R8
   \   00000056   0x003A             MOVS     R2,R7
   \   00000058   0x0031             MOVS     R1,R6
   \   0000005A   0x0020             MOVS     R0,R4
   \   0000005C   0x.... 0x....      BL       _Z8pinbenchPKcS0_S0_S0_P9OutputPin11brain_pin_e
    181          }
   \                     ??sparkbench2_2:
   \   00000060   0xE8BD 0x87F3      POP      {R0,R1,R4-R10,PC}  ;; return
    182          
    183          /**
    184           * sparkbench 5 400 2
    185           * 5 ms ON, 400 ms OFF, two times
    186           */

   \                                 In section .text, align 2, keep-with-next
    187          static void sparkbench(const char * onTimeStr, const char *offTimeStr, const char *countStr) {
   \                     _Z10sparkbenchPKcS0_S0_:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    188          	sparkbench2("0", "1", onTimeStr, offTimeStr, countStr);
   \   0000000A   0x9600             STR      R6,[SP, #+0]
   \   0000000C   0x002B             MOVS     R3,R5
   \   0000000E   0x0022             MOVS     R2,R4
   \   00000010   0x....             ADR.N    R1,??DataTable18  ;; "1"
   \   00000012   0x....             ADR.N    R0,??DataTable20  ;; "0"
   \   00000014   0x.... 0x....      BL       _Z11sparkbench2PKcS0_S0_S0_S0_
    189          }
   \   00000018   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    190          

   \                                 In section .bss, align 8
    191          static THD_WORKING_AREA(benchThreadStack, UTILITY_THREAD_STACK_SIZE);
   \                     benchThreadStack:
   \   00000000                      DS8 712
    192          

   \                                 In section .text, align 2, keep-with-next
    193          static msg_t benchThread(int param) {
   \                     _Z11benchThreadi:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    194          	(void) param;
    195          	chRegSetThreadName("BenchThread");
   \   00000004   0x....             LDR.N    R0,??DataTable21_30
   \   00000006   0x6980             LDR      R0,[R0, #+24]
   \   00000008   0x....             LDR.N    R1,??DataTable21_31
   \   0000000A   0x6181             STR      R1,[R0, #+24]
    196          
    197          	while (true) {
    198          		while (!needToRunBench) {
   \                     ??benchThread_0:
   \                     ??benchThread_1:
   \   0000000C   0x....             LDR.N    R0,??DataTable21_22
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD103             BNE.N    ??benchThread_2
    199          			chThdSleepMilliseconds(200);
   \   00000014   0x20C8             MOVS     R0,#+200
   \   00000016   0x.... 0x....      BL       chThdSleep
   \   0000001A   0xE7F7             B.N      ??benchThread_1
    200          		}
    201          		needToRunBench = false;
   \                     ??benchThread_2:
   \   0000001C   0x....             LDR.N    R0,??DataTable21_22
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x7001             STRB     R1,[R0, #+0]
    202          		runBench(brainPin, pinX, delayMs, onTime, offTime, count);
   \   00000022   0x....             LDR.N    R0,??DataTable21_19
   \   00000024   0x6802             LDR      R2,[R0, #+0]
   \   00000026   0x....             LDR.N    R0,??DataTable21_18
   \   00000028   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   0000002C   0x....             LDR.N    R0,??DataTable21_17
   \   0000002E   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000032   0x....             LDR.N    R0,??DataTable21_16
   \   00000034   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000038   0x....             LDR.N    R0,??DataTable21_21
   \   0000003A   0x6801             LDR      R1,[R0, #+0]
   \   0000003C   0x....             LDR.N    R0,??DataTable21_20
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x.... 0x....      BL       _Z8runBench11brain_pin_eP9OutputPinfffi
   \   00000044   0xE7E2             B.N      ??benchThread_0
    203          	}
    204          #if defined __GNUC__
    205          	return 0;
    206          #endif
    207          }
    208          
    209          extern engine_configuration_s activeConfiguration;
    210          

   \                                 In section .text, align 2, keep-with-next
    211          static void unregister(brain_pin_e currentPin, OutputPin *output) {
   \                     _Z10unregister11brain_pin_eP9OutputPin:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    212          	if (currentPin == GPIO_UNASSIGNED)
   \   00000006   0x2C50             CMP      R4,#+80
   \   00000008   0xD00D             BEQ.N    ??unregister_0
    213          		return;
    214          	scheduleMsg(&logger, "unregistering %s", hwPortname(currentPin));
   \                     ??unregister_1:
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   00000010   0x0002             MOVS     R2,R0
   \   00000012   0x....             LDR.N    R1,??DataTable21_32
   \   00000014   0x....             LDR.N    R0,??DataTable21_1
   \   00000016   0x.... 0x....      BL       scheduleMsg
    215          	unmarkPin(currentPin);
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       _Z9unmarkPin11brain_pin_e
    216          	output->unregister();
   \   00000020   0x0028             MOVS     R0,R5
   \   00000022   0x.... 0x....      BL       _ZN9OutputPin10unregisterEv
    217          }
   \                     ??unregister_0:
   \   00000026   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    218          

   \                                 In section .text, align 2, keep-with-next
    219          void stopIgnitionPins(void) {
   \                     _Z16stopIgnitionPinsv:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    220          	for (int i = 0; i < IGNITION_PIN_COUNT; i++) {
   \   00000002   0x2400             MOVS     R4,#+0
   \                     ??stopIgnitionPins_0:
   \   00000004   0x2C0C             CMP      R4,#+12
   \   00000006   0xDA18             BGE.N    ??stopIgnitionPins_1
    221          		NamedOutputPin *output = &enginePins.injectors[i];
   \   00000008   0x2014             MOVS     R0,#+20
   \   0000000A   0x....             LDR.N    R1,??DataTable21_25
   \   0000000C   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000010   0xF110 0x0560      ADDS     R5,R0,#+96
    222          		brain_pin_e currentPin = activeConfiguration.bc.ignitionPins[i];
   \   00000014   0x....             LDR.N    R0,??DataTable21_33
   \   00000016   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   0000001A   0xF8D0 0x62C4      LDR      R6,[R0, #+708]
    223          		if (engineConfiguration->bc.ignitionPins[i] != currentPin) {
   \   0000001E   0x....             LDR.N    R0,??DataTable21_3
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000026   0xF8D0 0x02C4      LDR      R0,[R0, #+708]
   \   0000002A   0x42B0             CMP      R0,R6
   \   0000002C   0xD003             BEQ.N    ??stopIgnitionPins_2
    224          			unregister(currentPin, output);
   \   0000002E   0x0029             MOVS     R1,R5
   \   00000030   0x0030             MOVS     R0,R6
   \   00000032   0x.... 0x....      BL       _Z10unregister11brain_pin_eP9OutputPin
    225          		}
    226          	}
   \                     ??stopIgnitionPins_2:
   \   00000036   0x1C64             ADDS     R4,R4,#+1
   \   00000038   0xE7E4             B.N      ??stopIgnitionPins_0
    227          }
   \                     ??stopIgnitionPins_1:
   \   0000003A   0xBD70             POP      {R4-R6,PC}       ;; return
    228          

   \                                 In section .text, align 2, keep-with-next
    229          void stopInjectionPins(void) {
   \                     _Z17stopInjectionPinsv:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    230          	for (int i = 0; i < INJECTION_PIN_COUNT; i++) {
   \   00000002   0x2400             MOVS     R4,#+0
   \                     ??stopInjectionPins_0:
   \   00000004   0x2C0C             CMP      R4,#+12
   \   00000006   0xDA18             BGE.N    ??stopInjectionPins_1
    231          		NamedOutputPin *output = &enginePins.injectors[i];
   \   00000008   0x2014             MOVS     R0,#+20
   \   0000000A   0x....             LDR.N    R1,??DataTable21_25
   \   0000000C   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000010   0xF110 0x0560      ADDS     R5,R0,#+96
    232          		brain_pin_e currentPin = activeConfiguration.bc.injectionPins[i];
   \   00000014   0x....             LDR.N    R0,??DataTable21_33
   \   00000016   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   0000001A   0xF8D0 0x6290      LDR      R6,[R0, #+656]
    233          		if (engineConfiguration->bc.injectionPins[i] != currentPin) {
   \   0000001E   0x....             LDR.N    R0,??DataTable21_3
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000026   0xF8D0 0x0290      LDR      R0,[R0, #+656]
   \   0000002A   0x42B0             CMP      R0,R6
   \   0000002C   0xD003             BEQ.N    ??stopInjectionPins_2
    234          			unregister(currentPin, output);
   \   0000002E   0x0029             MOVS     R1,R5
   \   00000030   0x0030             MOVS     R0,R6
   \   00000032   0x.... 0x....      BL       _Z10unregister11brain_pin_eP9OutputPin
    235          		}
    236          	}
   \                     ??stopInjectionPins_2:
   \   00000036   0x1C64             ADDS     R4,R4,#+1
   \   00000038   0xE7E4             B.N      ??stopInjectionPins_0
    237          }
   \                     ??stopInjectionPins_1:
   \   0000003A   0xBD70             POP      {R4-R6,PC}       ;; return
    238          

   \                                 In section .text, align 2, keep-with-next
    239          void startIgnitionPins(void) {
   \                     _Z17startIgnitionPinsv:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    240          	for (int i = 0; i < engineConfiguration->specs.cylindersCount; i++) {
   \   00000002   0x2400             MOVS     R4,#+0
   \                     ??startIgnitionPins_0:
   \   00000004   0x....             LDR.N    R0,??DataTable21_3
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF8D0 0x0194      LDR      R0,[R0, #+404]
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xDA20             BGE.N    ??startIgnitionPins_1
    241          		NamedOutputPin *output = &enginePins.coils[i];
   \   00000010   0x2014             MOVS     R0,#+20
   \   00000012   0x....             LDR.N    R1,??DataTable21_25
   \   00000014   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000018   0xF510 0x75A8      ADDS     R5,R0,#+336
    242          		if (boardConfiguration->ignitionPins[i] != activeConfiguration.bc.ignitionPins[i]) {
   \   0000001C   0x....             LDR.N    R0,??DataTable21_24
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000024   0x6D40             LDR      R0,[R0, #+84]
   \   00000026   0x....             LDR.N    R1,??DataTable21_33
   \   00000028   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   0000002C   0xF8D1 0x12C4      LDR      R1,[R1, #+708]
   \   00000030   0x4288             CMP      R0,R1
   \   00000032   0xD00C             BEQ.N    ??startIgnitionPins_2
    243          			outputPinRegisterExt2(output->name, output, boardConfiguration->ignitionPins[i],
    244          				&boardConfiguration->ignitionPinMode);
   \   00000034   0x....             LDR.N    R0,??DataTable21_24
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0xF110 0x0384      ADDS     R3,R0,#+132
   \   0000003C   0x....             LDR.N    R0,??DataTable21_24
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000044   0x6D42             LDR      R2,[R0, #+84]
   \   00000046   0x0029             MOVS     R1,R5
   \   00000048   0x6928             LDR      R0,[R5, #+16]
   \   0000004A   0x.... 0x....      BL       _Z21outputPinRegisterExt2PKcP9OutputPin11brain_pin_eP17pin_output_mode_e
    245          		}
    246          	}
   \                     ??startIgnitionPins_2:
   \   0000004E   0x1C64             ADDS     R4,R4,#+1
   \   00000050   0xE7D8             B.N      ??startIgnitionPins_0
    247          }
   \                     ??startIgnitionPins_1:
   \   00000052   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    248          

   \                                 In section .text, align 2, keep-with-next
    249          void startInjectionPins(void) {
   \                     _Z18startInjectionPinsv:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    250          	// todo: should we move this code closer to the injection logic?
    251          	for (int i = 0; i < engineConfiguration->specs.cylindersCount; i++) {
   \   00000002   0x2400             MOVS     R4,#+0
   \                     ??startInjectionPins_0:
   \   00000004   0x....             LDR.N    R0,??DataTable21_3
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF8D0 0x0194      LDR      R0,[R0, #+404]
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xDA21             BGE.N    ??startInjectionPins_1
    252          		NamedOutputPin *output = &enginePins.injectors[i];
   \   00000010   0x2014             MOVS     R0,#+20
   \   00000012   0x....             LDR.N    R1,??DataTable21_25
   \   00000014   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000018   0xF110 0x0560      ADDS     R5,R0,#+96
    253          		if (engineConfiguration->bc.injectionPins[i] != activeConfiguration.bc.injectionPins[i]) {
   \   0000001C   0x....             LDR.N    R0,??DataTable21_3
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000024   0xF8D0 0x0290      LDR      R0,[R0, #+656]
   \   00000028   0x....             LDR.N    R1,??DataTable21_33
   \   0000002A   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   0000002E   0xF8D1 0x1290      LDR      R1,[R1, #+656]
   \   00000032   0x4288             CMP      R0,R1
   \   00000034   0xD00C             BEQ.N    ??startInjectionPins_2
    254          
    255          			outputPinRegisterExt2(output->name, output, boardConfiguration->injectionPins[i],
    256          					&boardConfiguration->injectionPinMode);
   \   00000036   0x....             LDR.N    R0,??DataTable21_24
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xF110 0x0350      ADDS     R3,R0,#+80
   \   0000003E   0x....             LDR.N    R0,??DataTable21_24
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000046   0x6A02             LDR      R2,[R0, #+32]
   \   00000048   0x0029             MOVS     R1,R5
   \   0000004A   0x6928             LDR      R0,[R5, #+16]
   \   0000004C   0x.... 0x....      BL       _Z21outputPinRegisterExt2PKcP9OutputPin11brain_pin_eP17pin_output_mode_e
    257          		}
    258          	}
   \                     ??startInjectionPins_2:
   \   00000050   0x1C64             ADDS     R4,R4,#+1
   \   00000052   0xE7D7             B.N      ??startInjectionPins_0
    259          }
   \                     ??startInjectionPins_1:
   \   00000054   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    260          

   \                                 In section .text, align 2, keep-with-next
    261          void initInjectorCentral(void) {
   \                     _Z19initInjectorCentralv:
   \   00000000   0xB580             PUSH     {R7,LR}
    262          	chThdCreateStatic(benchThreadStack, sizeof(benchThreadStack), NORMALPRIO, (tfunc_t) benchThread, NULL);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x9000             STR      R0,[SP, #+0]
   \   00000006   0x....             LDR.N    R3,??DataTable21_34
   \   00000008   0x2240             MOVS     R2,#+64
   \   0000000A   0xF44F 0x7132      MOV      R1,#+712
   \   0000000E   0x....             LDR.N    R0,??DataTable21_35
   \   00000010   0x.... 0x....      BL       chThdCreateStatic
    263          
    264          	for (int i = 0; i < engineConfiguration->specs.cylindersCount; i++) {
   \   00000014   0x2000             MOVS     R0,#+0
   \                     ??initInjectorCentral_0:
   \   00000016   0x....             LDR.N    R1,??DataTable21_3
   \   00000018   0x6809             LDR      R1,[R1, #+0]
   \   0000001A   0xF8D1 0x1194      LDR      R1,[R1, #+404]
   \   0000001E   0x4288             CMP      R0,R1
   \   00000020   0xDA05             BGE.N    ??initInjectorCentral_1
    265          		is_injector_enabled[i] = true;
   \   00000022   0x....             LDR.N    R1,??DataTable21_7
   \   00000024   0x2201             MOVS     R2,#+1
   \   00000026   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
    266          	}
   \   0000002A   0x1C40             ADDS     R0,R0,#+1
   \   0000002C   0xE7F3             B.N      ??initInjectorCentral_0
    267          
    268          	startInjectionPins();
   \                     ??initInjectorCentral_1:
   \   0000002E   0x.... 0x....      BL       _Z18startInjectionPinsv
    269          	startIgnitionPins();
   \   00000032   0x.... 0x....      BL       _Z17startIgnitionPinsv
    270          
    271          	printStatus();
   \   00000036   0x.... 0x....      BL       _Z11printStatusv
    272          	addConsoleActionII("injector", setInjectorEnabled);
   \   0000003A   0x....             LDR.N    R1,??DataTable21_36
   \   0000003C   0x....             LDR.N    R0,??DataTable21_37
   \   0000003E   0x.... 0x....      BL       addConsoleActionII
    273          
    274          	addConsoleAction("fuelpumpbench", fuelPumpBench);
   \   00000042   0x....             LDR.N    R1,??DataTable21_38
   \   00000044   0x....             LDR.N    R0,??DataTable21_39
   \   00000046   0x.... 0x....      BL       addConsoleAction
    275          	addConsoleAction("fanbench", fanBench);
   \   0000004A   0x....             LDR.N    R1,??DataTable21_40
   \   0000004C   0x....             LDR.N    R0,??DataTable21_41
   \   0000004E   0x.... 0x....      BL       addConsoleAction
    276          
    277          	addConsoleAction("milbench", milBench);
   \   00000052   0x....             LDR.N    R1,??DataTable21_42
   \   00000054   0x....             LDR.N    R0,??DataTable21_43
   \   00000056   0x.... 0x....      BL       addConsoleAction
    278          	addConsoleActionSSS("fuelbench", fuelbench);
   \   0000005A   0x....             LDR.N    R1,??DataTable21_44
   \   0000005C   0x....             LDR.N    R0,??DataTable21_45
   \   0000005E   0x.... 0x....      BL       addConsoleActionSSS
    279          	addConsoleActionSSS("sparkbench", sparkbench);
   \   00000062   0x....             LDR.N    R1,??DataTable21_46
   \   00000064   0x....             LDR.N    R0,??DataTable21_47
   \   00000066   0x.... 0x....      BL       addConsoleActionSSS
    280          
    281          	addConsoleActionSSSSS("fuelbench2", fuelbench2);
   \   0000006A   0x....             LDR.N    R1,??DataTable21_48
   \   0000006C   0x....             LDR.N    R0,??DataTable21_49
   \   0000006E   0x.... 0x....      BL       addConsoleActionSSSSS
    282          	addConsoleActionSSSSS("sparkbench2", sparkbench2);
   \   00000072   0x....             LDR.N    R1,??DataTable21_50
   \   00000074   0x....             LDR.N    R0,??DataTable21_51
   \   00000076   0x.... 0x....      BL       addConsoleActionSSSSS
    283          }
   \   0000007A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x447A0000         DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x31 0x00          DC8      "1",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   0x31 0x30          DC8      "100"
   \              0x30 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x30 0x00          DC8      "0",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   0x........         DC32     `?<Constant "InjectorCentral">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_1:
   \   00000000   0x........         DC32     logger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_2:
   \   00000000   0x........         DC32     isRunningBench

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_3:
   \   00000000   0x........         DC32     engineConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_4:
   \   00000000   0x........         DC32     `?<Constant "ERROR [%s] cid=%d\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_5:
   \   00000000   0x........         DC32     `?<Constant "Cylinder ID">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_6:
   \   00000000   0x........         DC32     `?<Constant "isInjectorEnabled">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_7:
   \   00000000   0x........         DC32     is_injector_enabled

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_8:
   \   00000000   0x........         DC32     `?<Constant "injector_%d_%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_9:
   \   00000000   0x........         DC32     `?<Constant "injector id">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_10:
   \   00000000   0x........         DC32     `?<Constant "Invalid delay %f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_11:
   \   00000000   0x........         DC32     `?<Constant "Invalid onTime %f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_12:
   \   00000000   0x........         DC32     `?<Constant "Invalid offTime %f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_13:
   \   00000000   0x........         DC32     `?<Constant "Running bench: ON_TIM...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_14:
   \   00000000   0x........         DC32     `?<Constant "output on %s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_15:
   \   00000000   0x........         DC32     `?<Constant "Done!">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_16:
   \   00000000   0x........         DC32     delayMs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_17:
   \   00000000   0x........         DC32     onTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_18:
   \   00000000   0x........         DC32     offTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_19:
   \   00000000   0x........         DC32     count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_20:
   \   00000000   0x........         DC32     brainPin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_21:
   \   00000000   0x........         DC32     pinX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_22:
   \   00000000   0x........         DC32     needToRunBench

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_23:
   \   00000000   0x........         DC32     `?<Constant "Invalid index: %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_24:
   \   00000000   0x........         DC32     boardConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_25:
   \   00000000   0x........         DC32     enginePins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_26:
   \   00000000   0x........         DC32     enginePins+0x10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_27:
   \   00000000   0x........         DC32     `?<Constant "3000">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_28:
   \   00000000   0x........         DC32     checkEnginePin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_29:
   \   00000000   0x........         DC32     enginePins+0x30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_30:
   \   00000000   0x........         DC32     rlist

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_31:
   \   00000000   0x........         DC32     `?<Constant "BenchThread">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_32:
   \   00000000   0x........         DC32     `?<Constant "unregistering %s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_33:
   \   00000000   0x........         DC32     activeConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_34:
   \   00000000   0x........         DC32     _Z11benchThreadi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_35:
   \   00000000   0x........         DC32     benchThreadStack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_36:
   \   00000000   0x........         DC32     _Z18setInjectorEnabledii

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_37:
   \   00000000   0x........         DC32     `?<Constant "injector">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_38:
   \   00000000   0x........         DC32     _Z13fuelPumpBenchv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_39:
   \   00000000   0x........         DC32     `?<Constant "fuelpumpbench">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_40:
   \   00000000   0x........         DC32     _Z8fanBenchv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_41:
   \   00000000   0x........         DC32     `?<Constant "fanbench">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_42:
   \   00000000   0x........         DC32     _Z8milBenchv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_43:
   \   00000000   0x........         DC32     `?<Constant "milbench">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_44:
   \   00000000   0x........         DC32     _Z9fuelbenchPKcS0_S0_

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_45:
   \   00000000   0x........         DC32     `?<Constant "fuelbench">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_46:
   \   00000000   0x........         DC32     _Z10sparkbenchPKcS0_S0_

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_47:
   \   00000000   0x........         DC32     `?<Constant "sparkbench">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_48:
   \   00000000   0x........         DC32     _Z10fuelbench2PKcS0_S0_S0_S0_

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_49:
   \   00000000   0x........         DC32     `?<Constant "fuelbench2">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_50:
   \   00000000   0x........         DC32     _Z11sparkbench2PKcS0_S0_S0_S0_

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_51:
   \   00000000   0x........         DC32     `?<Constant "sparkbench2">`

   \                                 In section .init_array, align 4, keep-with-next, root
   \   00000000   0x........         DC32    RELOC_ARM_TARGET1 __sti__routine

   \                                 In section .rodata, align 4
   \                     `?<Constant "ERROR [%s] cid=%d\\r\\n">`:
   \   00000000   0x45 0x52          DC8 "ERROR [%s] cid=%d\015\012"
   \              0x52 0x4F    
   \              0x52 0x20    
   \              0x5B 0x25    
   \              0x73 0x5D    
   \              0x20 0x63    
   \              0x69 0x64    
   \              0x3D 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Cylinder ID">`:
   \   00000000   0x43 0x79          DC8 "Cylinder ID"
   \              0x6C 0x69    
   \              0x6E 0x64    
   \              0x65 0x72    
   \              0x20 0x49    
   \              0x44 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "isInjectorEnabled">`:
   \   00000000   0x69 0x73          DC8 "isInjectorEnabled"
   \              0x49 0x6E    
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x6F 0x72    
   \              0x45 0x6E    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x64 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "injector_%d_%d">`:
   \   00000000   0x69 0x6E          DC8 "injector_%d_%d"
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x6F 0x72    
   \              0x5F 0x25    
   \              0x64 0x5F    
   \              0x25 0x64    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "injector id">`:
   \   00000000   0x69 0x6E          DC8 "injector id"
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x6F 0x72    
   \              0x20 0x69    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Invalid delay %f">`:
   \   00000000   0x49 0x6E          DC8 "Invalid delay %f"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x64 0x65    
   \              0x6C 0x61    
   \              0x79 0x20    
   \              0x25 0x66    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Invalid onTime %f">`:
   \   00000000   0x49 0x6E          DC8 "Invalid onTime %f"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x6F 0x6E    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x20 0x25    
   \              0x66 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Invalid offTime %f">`:
   \   00000000   0x49 0x6E          DC8 "Invalid offTime %f"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x6F 0x66    
   \              0x66 0x54    
   \              0x69 0x6D    
   \              0x65 0x20    
   \              0x25 0x66    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Running bench: ON_TIM...">`:
   \   00000000   0x52 0x75          DC8 52H, 75H, 6EH, 6EH, 69H, 6EH, 67H, 20H
   \              0x6E 0x6E    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000008   0x62 0x65          DC8 62H, 65H, 6EH, 63H, 68H, 3AH, 20H, 4FH
   \              0x6E 0x63    
   \              0x68 0x3A    
   \              0x20 0x4F    
   \   00000010   0x4E 0x5F          DC8 4EH, 5FH, 54H, 49H, 4DH, 45H, 3DH, 25H
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x3D 0x25    
   \   00000018   0x66 0x20          DC8 66H, 20H, 6DH, 73H, 20H, 4FH, 46H, 46H
   \              0x6D 0x73    
   \              0x20 0x4F    
   \              0x46 0x46    
   \   00000020   0x5F 0x54          DC8 5FH, 54H, 49H, 4DH, 45H, 3DH, 25H, 66H
   \              0x49 0x4D    
   \              0x45 0x3D    
   \              0x25 0x66    
   \   00000028   0x6D 0x73          DC8 6DH, 73H, 20H, 43H, 6FH, 75H, 6EH, 74H
   \              0x20 0x43    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \   00000030   0x65 0x72          DC8 65H, 72H, 3DH, 25H, 64H, 0
   \              0x3D 0x25    
   \              0x64 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "output on %s">`:
   \   00000000   0x6F 0x75          DC8 "output on %s"
   \              0x74 0x70    
   \              0x75 0x74    
   \              0x20 0x6F    
   \              0x6E 0x20    
   \              0x25 0x73    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Done!">`:
   \   00000000   0x44 0x6F          DC8 "Done!"
   \              0x6E 0x65    
   \              0x21 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Invalid index: %d">`:
   \   00000000   0x49 0x6E          DC8 "Invalid index: %d"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x69 0x6E    
   \              0x64 0x65    
   \              0x78 0x3A    
   \              0x20 0x25    
   \              0x64 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 2
   \   00000000   0x30 0x00          DC8 "0"

   \                                 In section .rodata, align 4
   \                     `?<Constant "3000">`:
   \   00000000   0x33 0x30          DC8 "3000"
   \              0x30 0x30    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x31 0x30          DC8 "100"
   \              0x30 0x00    

   \                                 In section .rodata, align 2
   \   00000000   0x31 0x00          DC8 "1"

   \                                 In section .rodata, align 4
   \                     `?<Constant "BenchThread">`:
   \   00000000   0x42 0x65          DC8 "BenchThread"
   \              0x6E 0x63    
   \              0x68 0x54    
   \              0x68 0x72    
   \              0x65 0x61    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "unregistering %s">`:
   \   00000000   0x75 0x6E          DC8 "unregistering %s"
   \              0x72 0x65    
   \              0x67 0x69    
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x25 0x73    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "injector">`:
   \   00000000   0x69 0x6E          DC8 "injector"
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x6F 0x72    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "fuelpumpbench">`:
   \   00000000   0x66 0x75          DC8 "fuelpumpbench"
   \              0x65 0x6C    
   \              0x70 0x75    
   \              0x6D 0x70    
   \              0x62 0x65    
   \              0x6E 0x63    
   \              0x68 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "fanbench">`:
   \   00000000   0x66 0x61          DC8 "fanbench"
   \              0x6E 0x62    
   \              0x65 0x6E    
   \              0x63 0x68    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "milbench">`:
   \   00000000   0x6D 0x69          DC8 "milbench"
   \              0x6C 0x62    
   \              0x65 0x6E    
   \              0x63 0x68    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "fuelbench">`:
   \   00000000   0x66 0x75          DC8 "fuelbench"
   \              0x65 0x6C    
   \              0x62 0x65    
   \              0x6E 0x63    
   \              0x68 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "sparkbench">`:
   \   00000000   0x73 0x70          DC8 "sparkbench"
   \              0x61 0x72    
   \              0x6B 0x62    
   \              0x65 0x6E    
   \              0x63 0x68    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "fuelbench2">`:
   \   00000000   0x66 0x75          DC8 "fuelbench2"
   \              0x65 0x6C    
   \              0x62 0x65    
   \              0x6E 0x63    
   \              0x68 0x32    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "sparkbench2">`:
   \   00000000   0x73 0x70          DC8 "sparkbench2"
   \              0x61 0x72    
   \              0x6B 0x62    
   \              0x65 0x6E    
   \              0x63 0x68    
   \              0x32 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "InjectorCentral">`:
   \   00000000   0x49 0x6E          DC8 "InjectorCentral"
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x6F 0x72    
   \              0x43 0x65    
   \              0x6E 0x74    
   \              0x72 0x61    
   \              0x6C 0x00    
    284          
    285          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   __sti__routine()
         8   -> LoggingWithStorage::LoggingWithStorage(char const *)
      16   assertCylinderId(int, char const *)
        16   -> firmwareError
        16   -> print
       8   benchThread(int)
         8   -> chThdSleep
         8   -> runBench(brain_pin_e, OutputPin *, float, float, float, int)
      16   fanBench()
        16   -> pinbench(char const *, char const *, char const *, char const *, OutputPin *, brain_pin_e)
      16   fuelPumpBench()
        16   -> pinbench(char const *, char const *, char const *, char const *, OutputPin *, brain_pin_e)
      24   fuelbench(char const *, char const *, char const *)
        24   -> fuelbench2(char const *, char const *, char const *, char const *, char const *)
      40   fuelbench2(char const *, char const *, char const *, char const *, char const *)
        40   -> atoi
        40   -> pinbench(char const *, char const *, char const *, char const *, OutputPin *, brain_pin_e)
        40   -> scheduleMsg
       8   initInjectorCentral()
         8   -> addConsoleAction
         8   -> addConsoleActionII
         8   -> addConsoleActionSSS
         8   -> addConsoleActionSSSSS
         8   -> chThdCreateStatic
         8   -> printStatus()
         8   -> startIgnitionPins()
         8   -> startInjectionPins()
       8   isInjectorEnabled(int)
         8   -> assertCylinderId(int, char const *)
       0   isRunningBenchTest()
      16   milBench()
        16   -> pinbench(char const *, char const *, char const *, char const *, OutputPin *, brain_pin_e)
      32   pinbench(char const *, char const *, char const *, char const *, OutputPin *, brain_pin_e)
        32   -> atoff
        32   -> atoi
       8   printStatus()
         8   -> isInjectorEnabled(int)
         8   -> scheduleMsg
      64   runBench(brain_pin_e, OutputPin *, float, float, float, int)
        64   -> OutputPin::setValue(int)
        64   -> __aeabi_f2d
        64   -> chThdSleep
        64   -> hwPortname(brain_pin_e)
        64   -> scheduleMsg
      16   setInjectorEnabled(int, int)
        16   -> firmwareError
        16   -> printStatus()
      24   sparkbench(char const *, char const *, char const *)
        24   -> sparkbench2(char const *, char const *, char const *, char const *, char const *)
      40   sparkbench2(char const *, char const *, char const *, char const *, char const *)
        40   -> atoi
        40   -> pinbench(char const *, char const *, char const *, char const *, OutputPin *, brain_pin_e)
        40   -> scheduleMsg
      16   startIgnitionPins()
        16   -> outputPinRegisterExt2(char const *, OutputPin *, brain_pin_e, pin_output_mode_e *)
      16   startInjectionPins()
        16   -> outputPinRegisterExt2(char const *, OutputPin *, brain_pin_e, pin_output_mode_e *)
      16   stopIgnitionPins()
        16   -> unregister(brain_pin_e, OutputPin *)
      16   stopInjectionPins()
        16   -> unregister(brain_pin_e, OutputPin *)
      16   unregister(brain_pin_e, OutputPin *)
        16   -> OutputPin::unregister()
        16   -> hwPortname(brain_pin_e)
        16   -> scheduleMsg
        16   -> unmarkPin(brain_pin_e)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant "0">
       2  ?<Constant "1">
       4  ?<Constant "100">
       8  ?<Constant "3000">
      12  ?<Constant "BenchThread">
      12  ?<Constant "Cylinder ID">
       8  ?<Constant "Done!">
      20  ?<Constant "ERROR [%s] cid=%d\r\n">
      16  ?<Constant "InjectorCentral">
      20  ?<Constant "Invalid delay %f">
      20  ?<Constant "Invalid index: %d">
      20  ?<Constant "Invalid offTime %f">
      20  ?<Constant "Invalid onTime %f">
      56  ?<Constant "Running bench: ON_TIM...">
      12  ?<Constant "fanbench">
      12  ?<Constant "fuelbench">
      12  ?<Constant "fuelbench2">
      16  ?<Constant "fuelpumpbench">
      12  ?<Constant "injector id">
      12  ?<Constant "injector">
      16  ?<Constant "injector_%d_%d">
      20  ?<Constant "isInjectorEnabled">
      12  ?<Constant "milbench">
      16  ?<Constant "output on %s">
      12  ?<Constant "sparkbench">
      12  ?<Constant "sparkbench2">
      20  ?<Constant "unregistering %s">
       4  ??DataTable10
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable20
       4  ??DataTable21
       4  ??DataTable21_1
       4  ??DataTable21_10
       4  ??DataTable21_11
       4  ??DataTable21_12
       4  ??DataTable21_13
       4  ??DataTable21_14
       4  ??DataTable21_15
       4  ??DataTable21_16
       4  ??DataTable21_17
       4  ??DataTable21_18
       4  ??DataTable21_19
       4  ??DataTable21_2
       4  ??DataTable21_20
       4  ??DataTable21_21
       4  ??DataTable21_22
       4  ??DataTable21_23
       4  ??DataTable21_24
       4  ??DataTable21_25
       4  ??DataTable21_26
       4  ??DataTable21_27
       4  ??DataTable21_28
       4  ??DataTable21_29
       4  ??DataTable21_3
       4  ??DataTable21_30
       4  ??DataTable21_31
       4  ??DataTable21_32
       4  ??DataTable21_33
       4  ??DataTable21_34
       4  ??DataTable21_35
       4  ??DataTable21_36
       4  ??DataTable21_37
       4  ??DataTable21_38
       4  ??DataTable21_39
       4  ??DataTable21_4
       4  ??DataTable21_40
       4  ??DataTable21_41
       4  ??DataTable21_42
       4  ??DataTable21_43
       4  ??DataTable21_44
       4  ??DataTable21_45
       4  ??DataTable21_46
       4  ??DataTable21_47
       4  ??DataTable21_48
       4  ??DataTable21_49
       4  ??DataTable21_5
       4  ??DataTable21_50
       4  ??DataTable21_51
       4  ??DataTable21_6
       4  ??DataTable21_7
       4  ??DataTable21_8
       4  ??DataTable21_9
      16  __sti__routine()
      60  assertCylinderId(int, char const *)
      70  benchThread(int)
     712  benchThreadStack
       4  brainPin
       4  count
       4  delayMs
      38  fanBench()
      30  fuelPumpBench()
      26  fuelbench(char const *, char const *, char const *)
     108  fuelbench2(char const *, char const *, char const *, char const *, char const *)
     124  initInjectorCentral()
      28  isInjectorEnabled(int)
       1  isRunningBench
       8  isRunningBenchTest()
      48  is_injector_enabled
     260  logger
      38  milBench()
       1  needToRunBench
       4  offTime
       4  onTime
       4  pinX
     102  pinbench(char const *, char const *, char const *, char const *, OutputPin *, brain_pin_e)
      44  printStatus()
     340  runBench(brain_pin_e, OutputPin *, float, float, float, int)
      48  setInjectorEnabled(int, int)
      26  sparkbench(char const *, char const *, char const *)
     100  sparkbench2(char const *, char const *, char const *, char const *, char const *)
      84  startIgnitionPins()
      86  startInjectionPins()
      60  stopIgnitionPins()
      60  stopInjectionPins()
      40  unregister(brain_pin_e, OutputPin *)
       4  -- Other

 
 1 046 bytes in section .bss
     4 bytes in section .init_array
   404 bytes in section .rodata
 1 760 bytes in section .text
 
 1 764 bytes of CODE  memory
   404 bytes of CONST memory
 1 046 bytes of DATA  memory

Errors: none
Warnings: 1
