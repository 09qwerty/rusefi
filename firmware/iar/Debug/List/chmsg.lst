###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:42 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\kerne #
#                       l\src\chmsg.c                                         #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\kerne #
#                       l\src\chmsg.c -lCN F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\Debug\List\ -lA F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\Debug\List\ -o                             #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\   #
#                       --no_cse --no_unroll --no_inline --no_code_motion     #
#                       --no_tbaa --no_clustering --no_scheduling --debug     #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\ -On #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\c #
#                       hmsg.lst                                              #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\ch #
#                       msg.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\chibios\os\kernel\src\chmsg.c
      1          /*
      2              ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
      3                           2011,2012,2013 Giovanni Di Sirio.
      4          
      5              This file is part of ChibiOS/RT.
      6          
      7              ChibiOS/RT is free software; you can redistribute it and/or modify
      8              it under the terms of the GNU General Public License as published by
      9              the Free Software Foundation; either version 3 of the License, or
     10              (at your option) any later version.
     11          
     12              ChibiOS/RT is distributed in the hope that it will be useful,
     13              but WITHOUT ANY WARRANTY; without even the implied warranty of
     14              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     15              GNU General Public License for more details.
     16          
     17              You should have received a copy of the GNU General Public License
     18              along with this program.  If not, see <http://www.gnu.org/licenses/>.
     19          
     20                                                ---
     21          
     22              A special exception to the GPL can be applied should you wish to distribute
     23              a combined work that includes ChibiOS/RT, without being obliged to provide
     24              the source code for any proprietary components. See the file exception.txt
     25              for full details of how and when the exception can be applied.
     26          */
     27          
     28          /**
     29           * @file    chmsg.c
     30           * @brief   Messages code.
     31           *
     32           * @addtogroup messages
     33           * @details Synchronous inter-thread messages APIs and services.
     34           *          <h2>Operation Mode</h2>
     35           *          Synchronous messages are an easy to use and fast IPC mechanism,
     36           *          threads can both act as message servers and/or message clients,
     37           *          the mechanism allows data to be carried in both directions. Note
     38           *          that messages are not copied between the client and server threads
     39           *          but just a pointer passed so the exchange is very time
     40           *          efficient.<br>
     41           *          Messages are scalar data types of type @p msg_t that are guaranteed
     42           *          to be size compatible with data pointers. Note that on some
     43           *          architectures function pointers can be larger that @p msg_t.<br>
     44           *          Messages are usually processed in FIFO order but it is possible to
     45           *          process them in priority order by enabling the
     46           *          @p CH_USE_MESSAGES_PRIORITY option in @p chconf.h.<br>
     47           * @pre     In order to use the message APIs the @p CH_USE_MESSAGES option
     48           *          must be enabled in @p chconf.h.
     49           * @post    Enabling messages requires 6-12 (depending on the architecture)
     50           *          extra bytes in the @p Thread structure.
     51           * @{
     52           */
     53          
     54          #include "ch.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void queue_insert(struct Thread *, ThreadsQueue *)
   \                     queue_insert:
   \   00000000   0x6001             STR      R1,[R0, #+0]
   \   00000002   0x684A             LDR      R2,[R1, #+4]
   \   00000004   0x6042             STR      R2,[R0, #+4]
   \   00000006   0x6048             STR      R0,[R1, #+4]
   \   00000008   0x6842             LDR      R2,[R0, #+4]
   \   0000000A   0x6010             STR      R0,[R2, #+0]
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp struct Thread *fifo_remove(ThreadsQueue *)
   \                     fifo_remove:
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0x6808             LDR      R0,[R1, #+0]
   \   00000004   0x6802             LDR      R2,[R0, #+0]
   \   00000006   0x600A             STR      R2,[R1, #+0]
   \   00000008   0x6051             STR      R1,[R2, #+4]
   \   0000000A   0x4770             BX       LR               ;; return
     55          
     56          #if CH_USE_MESSAGES || defined(__DOXYGEN__)
     57          
     58          #if CH_USE_MESSAGES_PRIORITY
     59          #define msg_insert(tp, qp) prio_insert(tp, qp)
     60          #else
     61          #define msg_insert(tp, qp) queue_insert(tp, qp)
     62          #endif
     63          
     64          /**
     65           * @brief   Sends a message to the specified thread.
     66           * @details The sender is stopped until the receiver executes a
     67           *          @p chMsgRelease()after receiving the message.
     68           *
     69           * @param[in] tp        the pointer to the thread
     70           * @param[in] msg       the message
     71           * @return              The answer message from @p chMsgRelease().
     72           *
     73           * @api
     74           */

   \                                 In section .text, align 2, keep-with-next
     75          msg_t chMsgSend(Thread *tp, msg_t msg) {
   \                     chMsgSend:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     76            Thread *ctp = currp;
   \   00000006   0x....             LDR.N    R0,??DataTable2
   \   00000008   0x6986             LDR      R6,[R0, #+24]
     77          
     78            chDbgCheck(tp != NULL, "chMsgSend");
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD104             BNE.N    ??chMsgSend_0
   \   0000000E   0x224E             MOVS     R2,#+78
   \   00000010   0x....             LDR.N    R1,??DataTable2_1
   \   00000012   0x....             LDR.N    R0,??DataTable2_2
   \   00000014   0x.... 0x....      BL       chDbgPanic3
     79          
     80            chSysLock();
   \                     ??chMsgSend_0:
   \   00000018   0x2020             MOVS     R0,#+32
   \   0000001A   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000001E   0x.... 0x....      BL       dbg_check_lock
     81            ctp->p_msg = msg;
   \   00000022   0x6375             STR      R5,[R6, #+52]
     82            ctp->p_u.wtobjp = &tp->p_msgqueue;
   \   00000024   0xF114 0x002C      ADDS     R0,R4,#+44
   \   00000028   0x62B0             STR      R0,[R6, #+40]
     83            msg_insert(ctp, &tp->p_msgqueue);
   \   0000002A   0xF114 0x012C      ADDS     R1,R4,#+44
   \   0000002E   0x0030             MOVS     R0,R6
   \   00000030   0x.... 0x....      BL       queue_insert
     84            if (tp->p_state == THD_STATE_WTMSG)
   \   00000034   0xF894 0x0020      LDRB     R0,[R4, #+32]
   \   00000038   0x280C             CMP      R0,#+12
   \   0000003A   0xD102             BNE.N    ??chMsgSend_1
     85              chSchReadyI(tp);
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0x.... 0x....      BL       chSchReadyI
     86            chSchGoSleepS(THD_STATE_SNDMSGQ);
   \                     ??chMsgSend_1:
   \   00000042   0x200A             MOVS     R0,#+10
   \   00000044   0x.... 0x....      BL       chSchGoSleepS
     87            msg = ctp->p_u.rdymsg;
   \   00000048   0x6AB0             LDR      R0,[R6, #+40]
   \   0000004A   0x0005             MOVS     R5,R0
     88            chSysUnlock();
   \   0000004C   0x.... 0x....      BL       dbg_check_unlock
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0xF380 0x8811      MSR      BASEPRI,R0
     89            return msg;
   \   00000056   0x0028             MOVS     R0,R5
   \   00000058   0xBD70             POP      {R4-R6,PC}       ;; return
     90          }
     91          
     92          /**
     93           * @brief   Suspends the thread and waits for an incoming message.
     94           * @post    After receiving a message the function @p chMsgGet() must be
     95           *          called in order to retrieve the message and then @p chMsgRelease()
     96           *          must be invoked in order to acknowledge the reception and send
     97           *          the answer.
     98           * @note    If the message is a pointer then you can assume that the data
     99           *          pointed by the message is stable until you invoke @p chMsgRelease()
    100           *          because the sending thread is suspended until then.
    101           *
    102           * @return              A reference to the thread carrying the message.
    103           *
    104           * @api
    105           */

   \                                 In section .text, align 2, keep-with-next
    106          Thread *chMsgWait(void) {
   \                     chMsgWait:
   \   00000000   0xB510             PUSH     {R4,LR}
    107            Thread *tp;
    108          
    109            chSysLock();
   \   00000002   0x2020             MOVS     R0,#+32
   \   00000004   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000008   0x.... 0x....      BL       dbg_check_lock
    110            if (!chMsgIsPendingI(currp))
   \   0000000C   0x....             LDR.N    R0,??DataTable2
   \   0000000E   0x6980             LDR      R0,[R0, #+24]
   \   00000010   0x6AC0             LDR      R0,[R0, #+44]
   \   00000012   0x....             LDR.N    R1,??DataTable2
   \   00000014   0x6989             LDR      R1,[R1, #+24]
   \   00000016   0x312C             ADDS     R1,R1,#+44
   \   00000018   0x4288             CMP      R0,R1
   \   0000001A   0xD102             BNE.N    ??chMsgWait_0
    111              chSchGoSleepS(THD_STATE_WTMSG);
   \   0000001C   0x200C             MOVS     R0,#+12
   \   0000001E   0x.... 0x....      BL       chSchGoSleepS
    112            tp = fifo_remove(&currp->p_msgqueue);
   \                     ??chMsgWait_0:
   \   00000022   0x....             LDR.N    R0,??DataTable2
   \   00000024   0x6980             LDR      R0,[R0, #+24]
   \   00000026   0x302C             ADDS     R0,R0,#+44
   \   00000028   0x.... 0x....      BL       fifo_remove
   \   0000002C   0x0004             MOVS     R4,R0
    113            tp->p_state = THD_STATE_SNDMSG;
   \   0000002E   0x200B             MOVS     R0,#+11
   \   00000030   0xF884 0x0020      STRB     R0,[R4, #+32]
    114            chSysUnlock();
   \   00000034   0x.... 0x....      BL       dbg_check_unlock
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xF380 0x8811      MSR      BASEPRI,R0
    115            return tp;
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0xBD10             POP      {R4,PC}          ;; return
    116          }
    117          
    118          /**
    119           * @brief   Releases a sender thread specifying a response message.
    120           * @pre     Invoke this function only after a message has been received
    121           *          using @p chMsgWait().
    122           *
    123           * @param[in] tp        pointer to the thread
    124           * @param[in] msg       message to be returned to the sender
    125           *
    126           * @api
    127           */

   \                                 In section .text, align 2, keep-with-next
    128          void chMsgRelease(Thread *tp, msg_t msg) {
   \                     chMsgRelease:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    129          
    130            chSysLock();
   \   00000006   0x2020             MOVS     R0,#+32
   \   00000008   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000000C   0x.... 0x....      BL       dbg_check_lock
    131            chDbgAssert(tp->p_state == THD_STATE_SNDMSG,
    132                        "chMsgRelease(), #1", "invalid state");
   \   00000010   0xF894 0x0020      LDRB     R0,[R4, #+32]
   \   00000014   0x280B             CMP      R0,#+11
   \   00000016   0xD002             BEQ.N    ??chMsgRelease_0
   \   00000018   0x....             LDR.N    R0,??DataTable2_3
   \   0000001A   0x.... 0x....      BL       chDbgPanic
    133            chMsgReleaseS(tp, msg);
   \                     ??chMsgRelease_0:
   \   0000001E   0x0029             MOVS     R1,R5
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       chSchWakeupS
    134            chSysUnlock();
   \   00000026   0x.... 0x....      BL       dbg_check_unlock
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xF380 0x8811      MSR      BASEPRI,R0
    135          }
   \   00000030   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     rlist

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     `?<Constant "F:\\\\stuff\\\\rusefi_sourc...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     `?<Constant "\\"chMsgSend\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     `?<Constant "chMsgRelease(), #1">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"chMsgSend\\"()">`:
   \   00000000   0x22 0x63          DC8 "\"chMsgSend\"()"
   \              0x68 0x4D    
   \              0x73 0x67    
   \              0x53 0x65    
   \              0x6E 0x64    
   \              0x22 0x28    
   \              0x29 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "F:\\\\stuff\\\\rusefi_sourc...">`:
   \   00000000   0x46 0x3A          DC8 46H, 3AH, 5CH, 73H, 74H, 75H, 66H, 66H
   \              0x5C 0x73    
   \              0x74 0x75    
   \              0x66 0x66    
   \   00000008   0x5C 0x72          DC8 5CH, 72H, 75H, 73H, 65H, 66H, 69H, 5FH
   \              0x75 0x73    
   \              0x65 0x66    
   \              0x69 0x5F    
   \   00000010   0x73 0x6F          DC8 73H, 6FH, 75H, 72H, 63H, 65H, 66H, 6FH
   \              0x75 0x72    
   \              0x63 0x65    
   \              0x66 0x6F    
   \   00000018   0x72 0x67          DC8 72H, 67H, 65H, 5CH, 66H, 69H, 72H, 6DH
   \              0x65 0x5C    
   \              0x66 0x69    
   \              0x72 0x6D    
   \   00000020   0x77 0x61          DC8 77H, 61H, 72H, 65H, 5CH, 63H, 68H, 69H
   \              0x72 0x65    
   \              0x5C 0x63    
   \              0x68 0x69    
   \   00000028   0x62 0x69          DC8 62H, 69H, 6FH, 73H, 5CH, 6FH, 73H, 5CH
   \              0x6F 0x73    
   \              0x5C 0x6F    
   \              0x73 0x5C    
   \   00000030   0x6B 0x65          DC8 6BH, 65H, 72H, 6EH, 65H, 6CH, 5CH, 73H
   \              0x72 0x6E    
   \              0x65 0x6C    
   \              0x5C 0x73    
   \   00000038   0x72 0x63          DC8 72H, 63H, 5CH, 63H, 68H, 6DH, 73H, 67H
   \              0x5C 0x63    
   \              0x68 0x6D    
   \              0x73 0x67    
   \   00000040   0x2E 0x63          DC8 2EH, 63H, 0
   \              0x00         
   \   00000043   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "chMsgRelease(), #1">`:
   \   00000000   0x63 0x68          DC8 "chMsgRelease(), #1"
   \              0x4D 0x73    
   \              0x67 0x52    
   \              0x65 0x6C    
   \              0x65 0x61    
   \              0x73 0x65    
   \              0x28 0x29    
   \              0x2C 0x20    
   \              0x23 0x31    
   \              0x00         
   \   00000013   0x00               DC8 0
    136          
    137          #endif /* CH_USE_MESSAGES */
    138          
    139          /** @} */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   chMsgRelease
        16   -> chDbgPanic
        16   -> chSchWakeupS
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
      16   chMsgSend
        16   -> chDbgPanic3
        16   -> chSchGoSleepS
        16   -> chSchReadyI
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
        16   -> queue_insert
       8   chMsgWait
         8   -> chSchGoSleepS
         8   -> dbg_check_lock
         8   -> dbg_check_unlock
         8   -> fifo_remove
       0   fifo_remove
       0   queue_insert


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      68  ?<Constant "F:\\stuff\\rusefi_sourc...">
      16  ?<Constant "\"chMsgSend\"()">
      20  ?<Constant "chMsgRelease(), #1">
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
      50  chMsgRelease
      90  chMsgSend
      66  chMsgWait
      12  fifo_remove
      14  queue_insert

 
 104 bytes in section .rodata
 248 bytes in section .text
 
 248 bytes of CODE  memory
 104 bytes of CONST memory

Errors: none
Warnings: none
