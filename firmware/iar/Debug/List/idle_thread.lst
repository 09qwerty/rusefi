###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:34 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\idle #
#                       _thread.cpp                                           #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\idle #
#                       _thread.cpp -lCN F:\stuff\rusefi_sourceforge\firmware #
#                       \iar\Debug\List\ -lA F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\Debug\List\ -o F:\stuff\rusefi_sourceforge\f #
#                       irmware\iar\Debug\Obj\ --no_cse --no_unroll           #
#                       --no_inline --no_code_motion --no_tbaa                #
#                       --no_clustering --no_scheduling --debug               #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\i #
#                       dle_thread.lst                                        #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\id #
#                       le_thread.o                                           #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\idle_thread.cpp
      1          /**
      2           * @file    idle_thread.cpp
      3           * @brief   Idle Air Control valve thread.
      4           *
      5           * This thread looks at current RPM and decides if it should increase or decrease IAC duty cycle.
      6           * This file is has the hardware & scheduling logic, desired idle level lives separately
      7           *
      8           *
      9           * @date May 23, 2013
     10           * @author Andrey Belomutskiy, (c) 2012-2015
     11           *
     12           * This file is part of rusEfi - see http://rusefi.com
     13           *
     14           * rusEfi is free software; you can redistribute it and/or modify it under the terms of
     15           * the GNU General Public License as published by the Free Software Foundation; either
     16           * version 3 of the License, or (at your option) any later version.
     17           *
     18           * rusEfi is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
     19           * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     20           * GNU General Public License for more details.
     21           *
     22           * You should have received a copy of the GNU General Public License along with this program.
     23           * If not, see <http://www.gnu.org/licenses/>.
     24           */
     25          
     26          #include "main.h"
     27          #include "idle_controller.h"
     28          #include "rpm_calculator.h"
     29          #include "pwm_generator.h"
     30          #include "idle_thread.h"
     31          #include "pin_repository.h"
     32          #include "engine_configuration.h"
     33          #include "engine.h"
     34          #include "stepper.h"
     35          
     36          #if EFI_IDLE_CONTROL || defined(__DOXYGEN__)
     37          

   \                                 In section .bss, align 8
     38          static THD_WORKING_AREA(ivThreadStack, UTILITY_THREAD_STACK_SIZE);
   \                     ivThreadStack:
   \   00000000                      DS8 712
     39          

   \                                 In section .bss, align 4
     40          static Logging *logger;
   \                     logger:
   \   00000000                      DS8 4
     41          EXTERN_ENGINE
     42          ;
     43          

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine:
   \   00000000   0xB580             PUSH     {R7,LR}
     44          static OutputPin idleSolenoidPin;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   00000006   0x.... 0x....      BL       _ZN9OutputPinC1Ev
     45          static SimplePwm idleSolenoid;
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   0000000E   0x.... 0x....      BL       _ZN9SimplePwmC1Ev
     46          
     47          static StepperMotor iacMotor;
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   00000016   0x.... 0x....      BL       _ZN12StepperMotorC1Ev
     48          
     49          /**
     50           * that's the position with CLT and IAT corrections
     51           */
     52          static float actualIdlePosition = -100.0f;
     53          
     54          /**
     55           * Idle level calculation algorithm lives in idle_controller.cpp
     56           */
     57          static IdleValveState idleMath;
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   0000001E   0x.... 0x....      BL       _ZN14IdleValveStateC1Ev
   \   00000022   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     idleSolenoidPin:
   \   00000000                      DS8 16

   \                                 In section .bss, align 8
   \                     idleSolenoid:
   \   00000000                      DS8 112

   \                                 In section .bss, align 8
   \                     iacMotor:
   \   00000000                      DS8 752

   \                                 In section .data, align 4
   \                     actualIdlePosition:
   \   00000000   0xC2C80000         DC32 0C2C80000H

   \                                 In section .bss, align 4
   \                     idleMath:
   \   00000000                      DS8 20
     58          

   \                                 In section .text, align 2, keep-with-next
     59          void idleDebug(const char *msg, percent_t value) {
   \                     _Z9idleDebugPKcf:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xB082             SUB      SP,SP,#+8
   \   00000008   0x0004             MOVS     R4,R0
   \   0000000A   0xEEB0 0x8A40      VMOV.F32 S16,S0
     60          	scheduleMsg(logger, "%s%f", msg, value);
   \   0000000E   0xEE18 0x0A10      VMOV     R0,S16
   \   00000012   0x.... 0x....      BL       __aeabi_f2d
   \   00000016   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000001A   0x0022             MOVS     R2,R4
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable10_5
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable10_6
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x.... 0x....      BL       scheduleMsg
     61          }
   \   0000002A   0xB002             ADD      SP,SP,#+8
   \   0000002C   0xECBD 0x8B02      VPOP     {D8}
   \   00000030   0xBD10             POP      {R4,PC}          ;; return
     62          

   \                                 In section .text, align 2, keep-with-next
     63          static void showIdleInfo(void) {
   \                     _Z12showIdleInfov:
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
     64          	scheduleMsg(logger, "idleMode=%s position=%f isStepper=%s", getIdle_mode_e(engineConfiguration->idleMode),
     65          			boardConfiguration->idlePosition, boolToString(boardConfiguration->useStepperIdle));
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable10_7
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF890 0x0181      LDRB     R0,[R0, #+385]
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x0840             LSRS     R0,R0,#+1
   \   00000010   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000014   0x.... 0x....      BL       _Z12boolToStringb
   \   00000018   0x0004             MOVS     R4,R0
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable10_8
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF8D0 0x05E0      LDR      R0,[R0, #+1504]
   \   00000024   0x.... 0x....      BL       _Z14getIdle_mode_e11idle_mode_e
   \   00000028   0x0005             MOVS     R5,R0
   \   0000002A   0x9402             STR      R4,[SP, #+8]
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable10_7
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x6940             LDR      R0,[R0, #+20]
   \   00000034   0x.... 0x....      BL       __aeabi_f2d
   \   00000038   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000003C   0x002A             MOVS     R2,R5
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable10_9
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable10_6
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0x.... 0x....      BL       scheduleMsg
     66          	if (boardConfiguration->useStepperIdle) {
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable10_7
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0xF890 0x0181      LDRB     R0,[R0, #+385]
   \   00000056   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000058   0x0840             LSRS     R0,R0,#+1
   \   0000005A   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD03A             BEQ.N    ??showIdleInfo_0
     67          		scheduleMsg(logger, "direction=%s reactionTime=%f", hwPortname(boardConfiguration->idle.stepperDirectionPin),
     68          				engineConfiguration->idleStepperReactionTime);
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable10_7
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x68C0             LDR      R0,[R0, #+12]
   \   0000006A   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   0000006E   0x0004             MOVS     R4,R0
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable10_8
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0xF8D0 0x060C      LDR      R0,[R0, #+1548]
   \   0000007A   0x.... 0x....      BL       __aeabi_f2d
   \   0000007E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000082   0x0022             MOVS     R2,R4
   \   00000084   0x.... 0x....      LDR.W    R1,??DataTable10_10
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable10_6
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0x.... 0x....      BL       scheduleMsg
     69          		scheduleMsg(logger, "step=%s steps=%d", hwPortname(boardConfiguration->idle.stepperStepPin),
     70          				engineConfiguration->idleStepperTotalSteps);
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable10_7
   \   00000096   0x6800             LDR      R0,[R0, #+0]
   \   00000098   0x6900             LDR      R0,[R0, #+16]
   \   0000009A   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable10_8
   \   000000A2   0x6809             LDR      R1,[R1, #+0]
   \   000000A4   0xF8D1 0x3664      LDR      R3,[R1, #+1636]
   \   000000A8   0x0002             MOVS     R2,R0
   \   000000AA   0x.... 0x....      LDR.W    R1,??DataTable10_11
   \   000000AE   0x.... 0x....      LDR.W    R0,??DataTable10_6
   \   000000B2   0x6800             LDR      R0,[R0, #+0]
   \   000000B4   0x.... 0x....      BL       scheduleMsg
     71          		scheduleMsg(logger, "enable=%s", hwPortname(engineConfiguration->stepperEnablePin));
   \   000000B8   0x.... 0x....      LDR.W    R0,??DataTable10_8
   \   000000BC   0x6800             LDR      R0,[R0, #+0]
   \   000000BE   0xF8D0 0x0668      LDR      R0,[R0, #+1640]
   \   000000C2   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   000000C6   0x0002             MOVS     R2,R0
   \   000000C8   0x.... 0x....      LDR.W    R1,??DataTable10_12
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable10_6
   \   000000D0   0x6800             LDR      R0,[R0, #+0]
   \   000000D2   0x.... 0x....      BL       scheduleMsg
   \   000000D6   0xE011             B.N      ??showIdleInfo_1
     72          	} else {
     73          		scheduleMsg(logger, "idle valve freq=%d on %s", boardConfiguration->idle.solenoidFrequency,
     74          				hwPortname(boardConfiguration->idle.solenoidPin));
   \                     ??showIdleInfo_0:
   \   000000D8   0x.... 0x....      LDR.W    R0,??DataTable10_7
   \   000000DC   0x6800             LDR      R0,[R0, #+0]
   \   000000DE   0x6800             LDR      R0,[R0, #+0]
   \   000000E0   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   000000E4   0x0003             MOVS     R3,R0
   \   000000E6   0x.... 0x....      LDR.W    R0,??DataTable10_7
   \   000000EA   0x6800             LDR      R0,[R0, #+0]
   \   000000EC   0x6882             LDR      R2,[R0, #+8]
   \   000000EE   0x.... 0x....      LDR.W    R1,??DataTable10_13
   \   000000F2   0x.... 0x....      LDR.W    R0,??DataTable10_6
   \   000000F6   0x6800             LDR      R0,[R0, #+0]
   \   000000F8   0x.... 0x....      BL       scheduleMsg
     75          	}
     76          }
   \                     ??showIdleInfo_1:
   \   000000FC   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
     77          

   \                                 In section .text, align 2, keep-with-next
     78          static void setIdleControlEnabled(int value) {
   \                     _Z21setIdleControlEnabledi:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     79          	engineConfiguration->idleMode = value ? IM_AUTO : IM_MANUAL;
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD001             BEQ.N    ??setIdleControlEnabled_0
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xE000             B.N      ??setIdleControlEnabled_1
   \                     ??setIdleControlEnabled_0:
   \   0000000C   0x2001             MOVS     R0,#+1
   \                     ??setIdleControlEnabled_1:
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable10_8
   \   00000012   0x6809             LDR      R1,[R1, #+0]
   \   00000014   0xF8C1 0x05E0      STR      R0,[R1, #+1504]
     80          	showIdleInfo();
   \   00000018   0x.... 0x....      BL       _Z12showIdleInfov
     81          }
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
     82          

   \                                 In section .text, align 4, keep-with-next
     83          static void setIdleValvePwm(percent_t value) {
   \                     _Z15setIdleValvePwmf:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xEEB0 0x8A40      VMOV.F32 S16,S0
     84          	/**
     85          	 * currently idle level is an percent value (0-100 range), and PWM takes a float in the 0..1 range
     86          	 * todo: unify?
     87          	 */
     88          	idleSolenoid.setSimplePwmDutyCycle(value / 100);
   \   0000000A   0xED9F 0x....      VLDR.W   S0,??DataTable9  ;; 0x42c80000
   \   0000000E   0xEE88 0x0A00      VDIV.F32 S0,S16,S0
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   00000016   0x.... 0x....      BL       _ZN9SimplePwm21setSimplePwmDutyCycleEf
     89          }
   \   0000001A   0xECBD 0x8B02      VPOP     {D8}
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
     90          

   \                                 In section .text, align 4, keep-with-next
     91          static void doSetIdleValvePosition(int positionPercent) {
   \                     _Z22doSetIdleValvePositioni:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xEE08 0x0A10      VMOV     S16,R0
     92          	boardConfiguration->idlePosition = positionPercent;
   \   0000000A   0xEEB8 0x0AC8      VCVT.F32.S32 S0,S16
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable10_7
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xED80 0x0A05      VSTR     S0,[R0, #+20]
     93          
     94          	percent_t cltCorrectedPosition = interpolate2d(engine->engineState.clt, config->cltIdleCorrBins, config->cltIdleCorr,
     95          	CLT_CURVE_SIZE) * positionPercent;
   \   00000018   0xEEF8 0x8AC8      VCVT.F32.S32 S17,S16
   \   0000001C   0x2210             MOVS     R2,#+16
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable10_14
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF500 0x51C0      ADD      R1,R0,#+6144
   \   00000028   0x3178             ADDS     R1,R1,#+120
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable10_14
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF500 0x50C0      ADD      R0,R0,#+6144
   \   00000034   0x3038             ADDS     R0,R0,#+56
   \   00000036   0x.... 0x....      LDR.W    R3,??DataTable10_15
   \   0000003A   0x681B             LDR      R3,[R3, #+0]
   \   0000003C   0xF503 0x53F0      ADD      R3,R3,#+7680
   \   00000040   0x3354             ADDS     R3,R3,#+84
   \   00000042   0xED93 0x0A00      VLDR     S0,[R3, #0]
   \   00000046   0x.... 0x....      BL       _Z13interpolate2dfPfS_i
   \   0000004A   0xEE68 0x8A80      VMUL.F32 S17,S17,S0
     96          
     97          	// let's put the value into the right range
     98          	cltCorrectedPosition = maxF(cltCorrectedPosition, 0.01);
   \   0000004E   0xEDDF 0x....      VLDR.W   S1,??DataTable9_1  ;; 0x3c23d70a
   \   00000052   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \   00000056   0x.... 0x....      BL       maxF
   \   0000005A   0xEEF0 0x8A40      VMOV.F32 S17,S0
     99          	cltCorrectedPosition = minF(cltCorrectedPosition, 99.9);
   \   0000005E   0xEDDF 0x....      VLDR.W   S1,??DataTable9_2  ;; 0x42c7cccd
   \   00000062   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \   00000066   0x.... 0x....      BL       minF
   \   0000006A   0xEEF0 0x8A40      VMOV.F32 S17,S0
    100          
    101          	if (absF(cltCorrectedPosition - actualIdlePosition) < 1) {
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable10_16
   \   00000072   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000076   0xEE38 0x0AC0      VSUB.F32 S0,S17,S0
   \   0000007A   0x.... 0x....      BL       absF
   \   0000007E   0xEEF7 0x0A00      VMOV.F32 S1,#1.0
   \   00000082   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   00000086   0xEEF1 0xFA10      FMSTAT   
   \   0000008A   0xD426             BMI.N    ??doSetIdleValvePosition_0
    102          		return; // value is pretty close, let's leave the poor valve alone
    103          	}
    104          	actualIdlePosition = cltCorrectedPosition;
   \                     ??doSetIdleValvePosition_1:
   \   0000008C   0x....             LDR.N    R0,??DataTable10_16
   \   0000008E   0xEDC0 0x8A00      VSTR     S17,[R0, #0]
    105          
    106          	if (boardConfiguration->useStepperIdle) {
   \   00000092   0x....             LDR.N    R0,??DataTable10_7
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0xF890 0x0181      LDRB     R0,[R0, #+385]
   \   0000009A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009C   0x0840             LSRS     R0,R0,#+1
   \   0000009E   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000000A2   0x2800             CMP      R0,#+0
   \   000000A4   0xD015             BEQ.N    ??doSetIdleValvePosition_2
    107          		iacMotor.setTargetPosition(cltCorrectedPosition / 100 * engineConfiguration->idleStepperTotalSteps);
   \   000000A6   0xED9F 0x....      VLDR.W   S0,??DataTable9  ;; 0x42c80000
   \   000000AA   0xEE88 0x0A80      VDIV.F32 S0,S17,S0
   \   000000AE   0x....             LDR.N    R0,??DataTable10_8
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0xF8D0 0x0664      LDR      R0,[R0, #+1636]
   \   000000B6   0xEE00 0x0A90      VMOV     S1,R0
   \   000000BA   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   000000BE   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000000C2   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000000C6   0xEE10 0x1A10      VMOV     R1,S0
   \   000000CA   0x....             LDR.N    R0,??DataTable10_3
   \   000000CC   0x.... 0x....      BL       _ZN12StepperMotor17setTargetPositionEi
   \   000000D0   0xE003             B.N      ??doSetIdleValvePosition_3
    108          	} else {
    109          		setIdleValvePwm(cltCorrectedPosition);
   \                     ??doSetIdleValvePosition_2:
   \   000000D2   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \   000000D6   0x.... 0x....      BL       _Z15setIdleValvePwmf
    110          	}
    111          }
   \                     ??doSetIdleValvePosition_3:
   \                     ??doSetIdleValvePosition_0:
   \   000000DA   0xECBD 0x8B02      VPOP     {D8}
   \   000000DE   0xBD01             POP      {R0,PC}          ;; return
    112          

   \                                 In section .text, align 2, keep-with-next
    113          static void setIdleValvePosition(int positionPercent) {
   \                     _Z20setIdleValvePositioni:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    114          	if (positionPercent < 1 || positionPercent > 99)
   \   00000004   0x2C01             CMP      R4,#+1
   \   00000006   0xDB01             BLT.N    ??setIdleValvePosition_0
   \   00000008   0x2C64             CMP      R4,#+100
   \   0000000A   0xDB00             BLT.N    ??setIdleValvePosition_1
    115          		return;
   \                     ??setIdleValvePosition_0:
   \   0000000C   0xE00A             B.N      ??setIdleValvePosition_2
    116          	scheduleMsg(logger, "setting idle valve position %d", positionPercent);
   \                     ??setIdleValvePosition_1:
   \   0000000E   0x0022             MOVS     R2,R4
   \   00000010   0x....             LDR.N    R1,??DataTable10_17
   \   00000012   0x....             LDR.N    R0,??DataTable10_6
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x.... 0x....      BL       scheduleMsg
    117          	showIdleInfo();
   \   0000001A   0x.... 0x....      BL       _Z12showIdleInfov
    118          	doSetIdleValvePosition(positionPercent);
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x.... 0x....      BL       _Z22doSetIdleValvePositioni
    119          }
   \                     ??setIdleValvePosition_2:
   \   00000024   0xBD10             POP      {R4,PC}          ;; return
    120          

   \                                 In section .text, align 2, keep-with-next
    121          static msg_t ivThread(int param) {
   \                     _Z8ivThreadi:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0x0004             MOVS     R4,R0
    122          	(void) param;
    123          	chRegSetThreadName("IdleValve");
   \   00000008   0x....             LDR.N    R0,??DataTable10_18
   \   0000000A   0x6980             LDR      R0,[R0, #+24]
   \   0000000C   0x....             LDR.N    R1,??DataTable10_19
   \   0000000E   0x6181             STR      R1,[R0, #+24]
    124          
    125          	percent_t currentIdleValve = -1;
   \   00000010   0xEEBF 0x8A00      VMOV.F32 S16,#-1.0
    126          	while (true) {
    127          		chThdSleepMilliseconds(boardConfiguration->idleThreadPeriod);
   \                     ??ivThread_0:
   \   00000014   0x....             LDR.N    R0,??DataTable10_7
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF8D0 0x0138      LDR      R0,[R0, #+312]
   \   0000001C   0xF44F 0x717A      MOV      R1,#+1000
   \   00000020   0x4348             MULS     R0,R1,R0
   \   00000022   0x1E40             SUBS     R0,R0,#+1
   \   00000024   0xF44F 0x717A      MOV      R1,#+1000
   \   00000028   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \   0000002E   0x.... 0x....      BL       chThdSleep
    128          
    129          		// this value is not used yet
    130          		if (boardConfiguration->clutchDownPin != GPIO_UNASSIGNED) {
   \   00000032   0x....             LDR.N    R0,??DataTable10_7
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0xF8D0 0x00A0      LDR      R0,[R0, #+160]
   \   0000003A   0x2850             CMP      R0,#+80
   \   0000003C   0xD014             BEQ.N    ??ivThread_1
    131          			engine->clutchDownState = palReadPad(getHwPort(boardConfiguration->clutchDownPin),
    132          					getHwPin(boardConfiguration->clutchDownPin));
   \   0000003E   0x....             LDR.N    R0,??DataTable10_7
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0xF8D0 0x00A0      LDR      R0,[R0, #+160]
   \   00000046   0x.... 0x....      BL       _Z9getHwPort11brain_pin_e
   \   0000004A   0x6905             LDR      R5,[R0, #+16]
   \   0000004C   0x....             LDR.N    R0,??DataTable10_7
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0xF8D0 0x00A0      LDR      R0,[R0, #+160]
   \   00000054   0x.... 0x....      BL       _Z8getHwPin11brain_pin_e
   \   00000058   0xFA35 0xF000      LSRS     R0,R5,R0
   \   0000005C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000060   0x....             LDR.N    R1,??DataTable10_15
   \   00000062   0x6809             LDR      R1,[R1, #+0]
   \   00000064   0xF881 0x0265      STRB     R0,[R1, #+613]
    133          		}
    134          		if (boardConfiguration->clutchUpPin != GPIO_UNASSIGNED) {
   \                     ??ivThread_1:
   \   00000068   0x....             LDR.N    R0,??DataTable10_7
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0xF8D0 0x031C      LDR      R0,[R0, #+796]
   \   00000070   0x2850             CMP      R0,#+80
   \   00000072   0xD014             BEQ.N    ??ivThread_2
    135          			engine->clutchUpState = palReadPad(getHwPort(boardConfiguration->clutchUpPin),
    136          					getHwPin(boardConfiguration->clutchUpPin));
   \   00000074   0x....             LDR.N    R0,??DataTable10_7
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0xF8D0 0x031C      LDR      R0,[R0, #+796]
   \   0000007C   0x.... 0x....      BL       _Z9getHwPort11brain_pin_e
   \   00000080   0x6905             LDR      R5,[R0, #+16]
   \   00000082   0x....             LDR.N    R0,??DataTable10_7
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0xF8D0 0x031C      LDR      R0,[R0, #+796]
   \   0000008A   0x.... 0x....      BL       _Z8getHwPin11brain_pin_e
   \   0000008E   0xFA35 0xF000      LSRS     R0,R5,R0
   \   00000092   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000096   0x....             LDR.N    R1,??DataTable10_15
   \   00000098   0x6809             LDR      R1,[R1, #+0]
   \   0000009A   0xF881 0x0264      STRB     R0,[R1, #+612]
    137          		}
    138          
    139          		if (engineConfiguration->idleMode != IM_AUTO) {
   \                     ??ivThread_2:
   \   0000009E   0x....             LDR.N    R0,??DataTable10_8
   \   000000A0   0x6800             LDR      R0,[R0, #+0]
   \   000000A2   0xF8D0 0x05E0      LDR      R0,[R0, #+1504]
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD00A             BEQ.N    ??ivThread_3
    140          			// let's re-apply CLT correction
    141          			doSetIdleValvePosition(boardConfiguration->idlePosition);
   \   000000AA   0x....             LDR.N    R0,??DataTable10_7
   \   000000AC   0x6800             LDR      R0,[R0, #+0]
   \   000000AE   0xED90 0x0A05      VLDR     S0,[R0, #+20]
   \   000000B2   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000000B6   0xEE10 0x0A10      VMOV     R0,S0
   \   000000BA   0x.... 0x....      BL       _Z22doSetIdleValvePositioni
    142          			continue;
   \   000000BE   0xE7A9             B.N      ??ivThread_0
    143          		}
    144          
    145          		efitimems_t now = currentTimeMillis();
   \                     ??ivThread_3:
   \   000000C0   0x.... 0x....      BL       currentTimeMillis
   \   000000C4   0x0005             MOVS     R5,R0
    146          
    147          		percent_t newValue = idleMath.getIdle(getRpm(), now PASS_ENGINE_PARAMETER);
   \   000000C6   0x....             LDR.N    R0,??DataTable10_15
   \   000000C8   0x6800             LDR      R0,[R0, #+0]
   \   000000CA   0x.... 0x....      BL       _ZN13RpmCalculator3rpmEv
   \   000000CE   0x0001             MOVS     R1,R0
   \   000000D0   0x002A             MOVS     R2,R5
   \   000000D2   0x....             LDR.N    R0,??DataTable10_4
   \   000000D4   0x.... 0x....      BL       _ZN14IdleValveState7getIdleEij
   \   000000D8   0xEEF0 0x8A40      VMOV.F32 S17,S0
    148          
    149          		if (currentIdleValve != newValue) {
   \   000000DC   0xEEB4 0x8A68      VCMP.F32 S16,S17
   \   000000E0   0xEEF1 0xFA10      FMSTAT   
   \   000000E4   0xD096             BEQ.N    ??ivThread_0
    150          			currentIdleValve = newValue;
   \   000000E6   0xEEB0 0x8A68      VMOV.F32 S16,S17
    151          
    152          			setIdleValvePwm(newValue);
   \   000000EA   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \   000000EE   0x.... 0x....      BL       _Z15setIdleValvePwmf
   \   000000F2   0xE78F             B.N      ??ivThread_0
    153          		}
    154          	}
    155          #if defined __GNUC__
    156          	return -1;
    157          #endif
    158          }
    159          

   \                                 In section .text, align 2, keep-with-next
    160          static void setIdleRpmAction(int value) {
   \                     _Z16setIdleRpmActioni:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    161          	idleMath.setTargetRpm(value);
   \   00000004   0x0021             MOVS     R1,R4
   \   00000006   0x....             LDR.N    R0,??DataTable10_4
   \   00000008   0x.... 0x....      BL       _ZN14IdleValveState12setTargetRpmEi
    162          	scheduleMsg(logger, "target idle RPM %d", value);
   \   0000000C   0x0022             MOVS     R2,R4
   \   0000000E   0x....             LDR.N    R1,??DataTable10_20
   \   00000010   0x....             LDR.N    R0,??DataTable10_6
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x.... 0x....      BL       scheduleMsg
    163          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    164          

   \                                 In section .text, align 2, keep-with-next
    165          static void applyIdleSolenoidPinState(PwmConfig *state, int stateIndex) {
   \                     _Z25applyIdleSolenoidPinStateP9PwmConfigi:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    166          	efiAssertVoid(stateIndex < PWM_PHASE_MAX_COUNT, "invalid stateIndex");
   \   00000006   0x2DFC             CMP      R5,#+252
   \   00000008   0xDB03             BLT.N    ??applyIdleSolenoidPinState_0
   \   0000000A   0x....             LDR.N    R0,??DataTable10_21
   \   0000000C   0x.... 0x....      BL       firmwareError
   \   00000010   0xE015             B.N      ??applyIdleSolenoidPinState_1
    167          	efiAssertVoid(state->multiWave.waveCount == 1, "invalid idle waveCount");
   \                     ??applyIdleSolenoidPinState_0:
   \   00000012   0x68E0             LDR      R0,[R4, #+12]
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD003             BEQ.N    ??applyIdleSolenoidPinState_2
   \   00000018   0x....             LDR.N    R0,??DataTable10_22
   \   0000001A   0x.... 0x....      BL       firmwareError
   \   0000001E   0xE00E             B.N      ??applyIdleSolenoidPinState_1
    168          	OutputPin *output = state->outputPins[0];
   \                     ??applyIdleSolenoidPinState_2:
   \   00000020   0x6826             LDR      R6,[R4, #+0]
    169          	int value = state->multiWave.waves[0].pinStates[stateIndex];
   \   00000022   0x6920             LDR      R0,[R4, #+16]
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x562F             LDRSB    R7,[R5, R0]
    170          	if (!value || engine->rpmCalculator.rpmValue != 0)
   \   00000028   0x2F00             CMP      R7,#+0
   \   0000002A   0xD004             BEQ.N    ??applyIdleSolenoidPinState_3
   \   0000002C   0x....             LDR.N    R0,??DataTable10_15
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD003             BEQ.N    ??applyIdleSolenoidPinState_4
    171          		output->setValue(value);
   \                     ??applyIdleSolenoidPinState_3:
   \   00000036   0x0039             MOVS     R1,R7
   \   00000038   0x0030             MOVS     R0,R6
   \   0000003A   0x.... 0x....      BL       _ZN9OutputPin8setValueEi
    172          }
   \                     ??applyIdleSolenoidPinState_4:
   \                     ??applyIdleSolenoidPinState_1:
   \   0000003E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    173          

   \                                 In section .text, align 4, keep-with-next
    174          void startIdleThread(Logging*sharedLogger, Engine *engine) {
   \                     _Z15startIdleThreadP7LoggingP6Engine:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    175          	logger = sharedLogger;
   \   00000006   0x....             LDR.N    R0,??DataTable10_6
   \   00000008   0x6004             STR      R4,[R0, #+0]
    176          
    177          	if (boardConfiguration->useStepperIdle) {
   \   0000000A   0x....             LDR.N    R0,??DataTable10_7
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0xF890 0x0181      LDRB     R0,[R0, #+385]
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x0840             LSRS     R0,R0,#+1
   \   00000016   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD018             BEQ.N    ??startIdleThread_0
    178          		iacMotor.initialize(boardConfiguration->idle.stepperStepPin, boardConfiguration->idle.stepperDirectionPin,
    179          				engineConfiguration->idleStepperReactionTime, engineConfiguration->idleStepperTotalSteps,
    180          				engineConfiguration->stepperEnablePin);
   \   0000001E   0x....             LDR.N    R0,??DataTable10_8
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF8D0 0x0668      LDR      R0,[R0, #+1640]
   \   00000026   0x9000             STR      R0,[SP, #+0]
   \   00000028   0x....             LDR.N    R0,??DataTable10_8
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0xF8D0 0x3664      LDR      R3,[R0, #+1636]
   \   00000030   0x....             LDR.N    R0,??DataTable10_8
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xF8D0 0x060C      LDR      R0,[R0, #+1548]
   \   00000038   0xEE00 0x0A10      VMOV     S0,R0
   \   0000003C   0x....             LDR.N    R0,??DataTable10_7
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x68C2             LDR      R2,[R0, #+12]
   \   00000042   0x....             LDR.N    R0,??DataTable10_7
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x6901             LDR      R1,[R0, #+16]
   \   00000048   0x....             LDR.N    R0,??DataTable10_3
   \   0000004A   0x.... 0x....      BL       _ZN12StepperMotor10initializeE11brain_pin_eS0_fiS0_
   \   0000004E   0xE017             B.N      ??startIdleThread_1
    181          	} else {
    182          		/**
    183          		 * Start PWM for idleValvePin
    184          		 */
    185          		startSimplePwmExt(&idleSolenoid, "Idle Valve", boardConfiguration->idle.solenoidPin, &idleSolenoidPin,
    186          				boardConfiguration->idle.solenoidFrequency, boardConfiguration->idlePosition / 100,
    187          				applyIdleSolenoidPinState);
   \                     ??startIdleThread_0:
   \   00000050   0x....             LDR.N    R0,??DataTable10_23
   \   00000052   0x9000             STR      R0,[SP, #+0]
   \   00000054   0x....             LDR.N    R0,??DataTable10_7
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0xED90 0x0A05      VLDR     S0,[R0, #+20]
   \   0000005C   0xEDDF 0x....      VLDR.W   S1,??DataTable10  ;; 0x42c80000
   \   00000060   0xEEC0 0x0A20      VDIV.F32 S1,S0,S1
   \   00000064   0x....             LDR.N    R0,??DataTable10_7
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xED90 0x0A02      VLDR     S0,[R0, #+8]
   \   0000006C   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000070   0x....             LDR.N    R3,??DataTable10_1
   \   00000072   0x....             LDR.N    R0,??DataTable10_7
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x6802             LDR      R2,[R0, #+0]
   \   00000078   0x....             LDR.N    R1,??DataTable10_24
   \   0000007A   0x....             LDR.N    R0,??DataTable10_2
   \   0000007C   0x.... 0x....      BL       _Z17startSimplePwmExtP9PwmConfigPKc11brain_pin_eP9OutputPinffPFvS0_iE
    188          	}
    189          
    190          	idleMath.init();
   \                     ??startIdleThread_1:
   \   00000080   0x....             LDR.N    R0,??DataTable10_4
   \   00000082   0x.... 0x....      BL       _ZN14IdleValveState4initEv
    191          	scheduleMsg(logger, "initial idle %d", idleMath.value);
   \   00000086   0x....             LDR.N    R0,??DataTable10_4
   \   00000088   0x6840             LDR      R0,[R0, #+4]
   \   0000008A   0x.... 0x....      BL       __aeabi_f2d
   \   0000008E   0x0002             MOVS     R2,R0
   \   00000090   0x000B             MOVS     R3,R1
   \   00000092   0x....             LDR.N    R1,??DataTable10_25
   \   00000094   0x....             LDR.N    R0,??DataTable10_6
   \   00000096   0x6800             LDR      R0,[R0, #+0]
   \   00000098   0x.... 0x....      BL       scheduleMsg
    192          
    193          	chThdCreateStatic(ivThreadStack, sizeof(ivThreadStack), NORMALPRIO, (tfunc_t) ivThread, NULL);
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x9000             STR      R0,[SP, #+0]
   \   000000A0   0x....             LDR.N    R3,??DataTable10_26
   \   000000A2   0x2240             MOVS     R2,#+64
   \   000000A4   0xF44F 0x7132      MOV      R1,#+712
   \   000000A8   0x....             LDR.N    R0,??DataTable10_27
   \   000000AA   0x.... 0x....      BL       chThdCreateStatic
    194          
    195          	// this is idle switch INPUT - sometimes there is a switch on the throttle pedal
    196          	// this switch is not used yet
    197          	if (boardConfiguration->clutchDownPin != GPIO_UNASSIGNED)
   \   000000AE   0x....             LDR.N    R0,??DataTable10_7
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0xF8D0 0x00A0      LDR      R0,[R0, #+160]
   \   000000B6   0x2850             CMP      R0,#+80
   \   000000B8   0xD00D             BEQ.N    ??startIdleThread_2
    198          		mySetPadMode2("clutch down switch", boardConfiguration->clutchDownPin,
    199          				getInputMode(boardConfiguration->clutchDownPinMode));
   \   000000BA   0x....             LDR.N    R0,??DataTable10_7
   \   000000BC   0x6800             LDR      R0,[R0, #+0]
   \   000000BE   0xF8D0 0x00A4      LDR      R0,[R0, #+164]
   \   000000C2   0x.... 0x....      BL       _Z12getInputMode16pin_input_mode_e
   \   000000C6   0x0002             MOVS     R2,R0
   \   000000C8   0x....             LDR.N    R0,??DataTable10_7
   \   000000CA   0x6800             LDR      R0,[R0, #+0]
   \   000000CC   0xF8D0 0x10A0      LDR      R1,[R0, #+160]
   \   000000D0   0x....             LDR.N    R0,??DataTable10_28
   \   000000D2   0x.... 0x....      BL       _Z13mySetPadMode2PKc11brain_pin_ej
    200          
    201          	if (boardConfiguration->clutchUpPin != GPIO_UNASSIGNED)
   \                     ??startIdleThread_2:
   \   000000D6   0x....             LDR.N    R0,??DataTable10_7
   \   000000D8   0x6800             LDR      R0,[R0, #+0]
   \   000000DA   0xF8D0 0x031C      LDR      R0,[R0, #+796]
   \   000000DE   0x2850             CMP      R0,#+80
   \   000000E0   0xD00D             BEQ.N    ??startIdleThread_3
    202          		mySetPadMode2("clutch up switch", boardConfiguration->clutchUpPin,
    203          				getInputMode(boardConfiguration->clutchUpPinMode));
   \   000000E2   0x....             LDR.N    R0,??DataTable10_7
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0xF8D0 0x0320      LDR      R0,[R0, #+800]
   \   000000EA   0x.... 0x....      BL       _Z12getInputMode16pin_input_mode_e
   \   000000EE   0x0002             MOVS     R2,R0
   \   000000F0   0x....             LDR.N    R0,??DataTable10_7
   \   000000F2   0x6800             LDR      R0,[R0, #+0]
   \   000000F4   0xF8D0 0x131C      LDR      R1,[R0, #+796]
   \   000000F8   0x....             LDR.N    R0,??DataTable10_29
   \   000000FA   0x.... 0x....      BL       _Z13mySetPadMode2PKc11brain_pin_ej
    204          
    205          	addConsoleAction("idleinfo", showIdleInfo);
   \                     ??startIdleThread_3:
   \   000000FE   0x....             LDR.N    R1,??DataTable10_30
   \   00000100   0x....             LDR.N    R0,??DataTable10_31
   \   00000102   0x.... 0x....      BL       addConsoleAction
    206          	addConsoleActionI("set_idle_rpm", setIdleRpmAction);
   \   00000106   0x....             LDR.N    R1,??DataTable10_32
   \   00000108   0x....             LDR.N    R0,??DataTable10_33
   \   0000010A   0x.... 0x....      BL       addConsoleActionI
    207          
    208          	addConsoleActionI("set_idle_position", setIdleValvePosition);
   \   0000010E   0x....             LDR.N    R1,??DataTable10_34
   \   00000110   0x....             LDR.N    R0,??DataTable10_35
   \   00000112   0x.... 0x....      BL       addConsoleActionI
    209          
    210          	addConsoleActionI("set_idle_enabled", (VoidInt) setIdleControlEnabled);
   \   00000116   0x....             LDR.N    R1,??DataTable10_36
   \   00000118   0x....             LDR.N    R0,??DataTable10_37
   \   0000011A   0x.... 0x....      BL       addConsoleActionI
    211          }
   \   0000011E   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x3C23D70A         DC32     0x3c23d70a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x42C7CCCD         DC32     0x42c7cccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x........         DC32     idleSolenoidPin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x........         DC32     idleSolenoid

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x........         DC32     iacMotor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x........         DC32     idleMath

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x........         DC32     `?<Constant "%s%f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x........         DC32     logger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x........         DC32     boardConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x........         DC32     engineConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x........         DC32     `?<Constant "idleMode=%s position=...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x........         DC32     `?<Constant "direction=%s reaction...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \   00000000   0x........         DC32     `?<Constant "step=%s steps=%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \   00000000   0x........         DC32     `?<Constant "enable=%s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \   00000000   0x........         DC32     `?<Constant "idle valve freq=%d on %s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \   00000000   0x........         DC32     config

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_15:
   \   00000000   0x........         DC32     engine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_16:
   \   00000000   0x........         DC32     actualIdlePosition

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_17:
   \   00000000   0x........         DC32     `?<Constant "setting idle valve po...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_18:
   \   00000000   0x........         DC32     rlist

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_19:
   \   00000000   0x........         DC32     `?<Constant "IdleValve">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_20:
   \   00000000   0x........         DC32     `?<Constant "target idle RPM %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_21:
   \   00000000   0x........         DC32     `?<Constant "invalid stateIndex">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_22:
   \   00000000   0x........         DC32     `?<Constant "invalid idle waveCount">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_23:
   \   00000000   0x........         DC32     _Z25applyIdleSolenoidPinStateP9PwmConfigi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_24:
   \   00000000   0x........         DC32     `?<Constant "Idle Valve">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_25:
   \   00000000   0x........         DC32     `?<Constant "initial idle %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_26:
   \   00000000   0x........         DC32     _Z8ivThreadi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_27:
   \   00000000   0x........         DC32     ivThreadStack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_28:
   \   00000000   0x........         DC32     `?<Constant "clutch down switch">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_29:
   \   00000000   0x........         DC32     `?<Constant "clutch up switch">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_30:
   \   00000000   0x........         DC32     _Z12showIdleInfov

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_31:
   \   00000000   0x........         DC32     `?<Constant "idleinfo">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_32:
   \   00000000   0x........         DC32     _Z16setIdleRpmActioni

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_33:
   \   00000000   0x........         DC32     `?<Constant "set_idle_rpm">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_34:
   \   00000000   0x........         DC32     _Z20setIdleValvePositioni

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_35:
   \   00000000   0x........         DC32     `?<Constant "set_idle_position">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_36:
   \   00000000   0x........         DC32     _Z21setIdleControlEnabledi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_37:
   \   00000000   0x........         DC32     `?<Constant "set_idle_enabled">`

   \                                 In section .init_array, align 4, keep-with-next, root
   \   00000000   0x........         DC32    RELOC_ARM_TARGET1 __sti__routine

   \                                 In section .rodata, align 4
   \                     `?<Constant "%s%f">`:
   \   00000000   0x25 0x73          DC8 "%s%f"
   \              0x25 0x66    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "idleMode=%s position=...">`:
   \   00000000   0x69 0x64          DC8 "idleMode=%s position=%f isStepper=%s"
   \              0x6C 0x65    
   \              0x4D 0x6F    
   \              0x64 0x65    
   \              0x3D 0x25    
   \              0x73 0x20    
   \              0x70 0x6F    
   \              0x73 0x69    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x3D 0x25    
   \              0x66 0x20    
   \              0x69 0x73    
   \              0x53 0x74    
   \              0x65 0x70    
   \              0x70 0x65    
   \              0x72 0x3D    
   \              0x25 0x73    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "direction=%s reaction...">`:
   \   00000000   0x64 0x69          DC8 "direction=%s reactionTime=%f"
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x3D    
   \              0x25 0x73    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x54    
   \              0x69 0x6D    
   \              0x65 0x3D    
   \              0x25 0x66    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "step=%s steps=%d">`:
   \   00000000   0x73 0x74          DC8 "step=%s steps=%d"
   \              0x65 0x70    
   \              0x3D 0x25    
   \              0x73 0x20    
   \              0x73 0x74    
   \              0x65 0x70    
   \              0x73 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "enable=%s">`:
   \   00000000   0x65 0x6E          DC8 "enable=%s"
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x3D 0x25    
   \              0x73 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "idle valve freq=%d on %s">`:
   \   00000000   0x69 0x64          DC8 "idle valve freq=%d on %s"
   \              0x6C 0x65    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x76 0x65    
   \              0x20 0x66    
   \              0x72 0x65    
   \              0x71 0x3D    
   \              0x25 0x64    
   \              0x20 0x6F    
   \              0x6E 0x20    
   \              0x25 0x73    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "setting idle valve po...">`:
   \   00000000   0x73 0x65          DC8 "setting idle valve position %d"
   \              0x74 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x69 0x64    
   \              0x6C 0x65    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x76 0x65    
   \              0x20 0x70    
   \              0x6F 0x73    
   \              0x69 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x25 0x64    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "IdleValve">`:
   \   00000000   0x49 0x64          DC8 "IdleValve"
   \              0x6C 0x65    
   \              0x56 0x61    
   \              0x6C 0x76    
   \              0x65 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "target idle RPM %d">`:
   \   00000000   0x74 0x61          DC8 "target idle RPM %d"
   \              0x72 0x67    
   \              0x65 0x74    
   \              0x20 0x69    
   \              0x64 0x6C    
   \              0x65 0x20    
   \              0x52 0x50    
   \              0x4D 0x20    
   \              0x25 0x64    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "invalid stateIndex">`:
   \   00000000   0x69 0x6E          DC8 "invalid stateIndex"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x65 0x49    
   \              0x6E 0x64    
   \              0x65 0x78    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "invalid idle waveCount">`:
   \   00000000   0x69 0x6E          DC8 "invalid idle waveCount"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x69 0x64    
   \              0x6C 0x65    
   \              0x20 0x77    
   \              0x61 0x76    
   \              0x65 0x43    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Idle Valve">`:
   \   00000000   0x49 0x64          DC8 "Idle Valve"
   \              0x6C 0x65    
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x76 0x65    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "initial idle %d">`:
   \   00000000   0x69 0x6E          DC8 "initial idle %d"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x20    
   \              0x69 0x64    
   \              0x6C 0x65    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "clutch down switch">`:
   \   00000000   0x63 0x6C          DC8 "clutch down switch"
   \              0x75 0x74    
   \              0x63 0x68    
   \              0x20 0x64    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x73 0x77    
   \              0x69 0x74    
   \              0x63 0x68    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "clutch up switch">`:
   \   00000000   0x63 0x6C          DC8 "clutch up switch"
   \              0x75 0x74    
   \              0x63 0x68    
   \              0x20 0x75    
   \              0x70 0x20    
   \              0x73 0x77    
   \              0x69 0x74    
   \              0x63 0x68    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "idleinfo">`:
   \   00000000   0x69 0x64          DC8 "idleinfo"
   \              0x6C 0x65    
   \              0x69 0x6E    
   \              0x66 0x6F    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "set_idle_rpm">`:
   \   00000000   0x73 0x65          DC8 "set_idle_rpm"
   \              0x74 0x5F    
   \              0x69 0x64    
   \              0x6C 0x65    
   \              0x5F 0x72    
   \              0x70 0x6D    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "set_idle_position">`:
   \   00000000   0x73 0x65          DC8 "set_idle_position"
   \              0x74 0x5F    
   \              0x69 0x64    
   \              0x6C 0x65    
   \              0x5F 0x70    
   \              0x6F 0x73    
   \              0x69 0x74    
   \              0x69 0x6F    
   \              0x6E 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "set_idle_enabled">`:
   \   00000000   0x73 0x65          DC8 "set_idle_enabled"
   \              0x74 0x5F    
   \              0x69 0x64    
   \              0x6C 0x65    
   \              0x5F 0x65    
   \              0x6E 0x61    
   \              0x62 0x6C    
   \              0x65 0x64    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    212          
    213          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   __sti__routine()
         8   -> IdleValveState::IdleValveState()
         8   -> OutputPin::OutputPin()
         8   -> SimplePwm::SimplePwm()
         8   -> StepperMotor::StepperMotor()
      24   applyIdleSolenoidPinState(PwmConfig *, int)
        24   -> OutputPin::setValue(int)
        24   -> firmwareError
      16   doSetIdleValvePosition(int)
        16   -> StepperMotor::setTargetPosition(int)
        16   -> absF
        16   -> interpolate2d(float, float *, float *, int)
        16   -> maxF
        16   -> minF
        16   -> setIdleValvePwm(float)
      24   idleDebug(char const *, float)
        24   -> __aeabi_f2d
        24   -> scheduleMsg
      24   ivThread(int)
        24   -> IdleValveState::getIdle(int, uint32_t)
        24   -> RpmCalculator::rpm()
        24   -> chThdSleep
        24   -> currentTimeMillis
        24   -> doSetIdleValvePosition(int)
        24   -> getHwPin(brain_pin_e)
        24   -> getHwPort(brain_pin_e)
        24   -> setIdleValvePwm(float)
       8   setIdleControlEnabled(int)
         8   -> showIdleInfo()
       8   setIdleRpmAction(int)
         8   -> IdleValveState::setTargetRpm(int)
         8   -> scheduleMsg
       8   setIdleValvePosition(int)
         8   -> doSetIdleValvePosition(int)
         8   -> scheduleMsg
         8   -> showIdleInfo()
      16   setIdleValvePwm(float)
        16   -> SimplePwm::setSimplePwmDutyCycle(float)
      24   showIdleInfo()
        24   -> __aeabi_f2d
        24   -> boolToString(bool)
        24   -> getIdle_mode_e(idle_mode_e)
        24   -> hwPortname(brain_pin_e)
        24   -> scheduleMsg
      16   startIdleThread(Logging *, Engine *)
        16   -> IdleValveState::init()
        16   -> StepperMotor::initialize(brain_pin_e, brain_pin_e, float, int, brain_pin_e)
        16   -> __aeabi_f2d
        16   -> addConsoleAction
        16   -> addConsoleActionI
        16   -> chThdCreateStatic
        16   -> getInputMode(pin_input_mode_e)
        16   -> mySetPadMode2(char const *, brain_pin_e, iomode_t)
        16   -> scheduleMsg
        16   -> startSimplePwmExt(PwmConfig *, char const *, brain_pin_e, OutputPin *, float, float, pwm_gen_callback *)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "%s%f">
      12  ?<Constant "Idle Valve">
      12  ?<Constant "IdleValve">
      20  ?<Constant "clutch down switch">
      20  ?<Constant "clutch up switch">
      32  ?<Constant "direction=%s reaction...">
      12  ?<Constant "enable=%s">
      28  ?<Constant "idle valve freq=%d on %s">
      40  ?<Constant "idleMode=%s position=...">
      12  ?<Constant "idleinfo">
      16  ?<Constant "initial idle %d">
      24  ?<Constant "invalid idle waveCount">
      20  ?<Constant "invalid stateIndex">
      20  ?<Constant "set_idle_enabled">
      20  ?<Constant "set_idle_position">
      16  ?<Constant "set_idle_rpm">
      32  ?<Constant "setting idle valve po...">
      20  ?<Constant "step=%s steps=%d">
      20  ?<Constant "target idle RPM %d">
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_13
       4  ??DataTable10_14
       4  ??DataTable10_15
       4  ??DataTable10_16
       4  ??DataTable10_17
       4  ??DataTable10_18
       4  ??DataTable10_19
       4  ??DataTable10_2
       4  ??DataTable10_20
       4  ??DataTable10_21
       4  ??DataTable10_22
       4  ??DataTable10_23
       4  ??DataTable10_24
       4  ??DataTable10_25
       4  ??DataTable10_26
       4  ??DataTable10_27
       4  ??DataTable10_28
       4  ??DataTable10_29
       4  ??DataTable10_3
       4  ??DataTable10_30
       4  ??DataTable10_31
       4  ??DataTable10_32
       4  ??DataTable10_33
       4  ??DataTable10_34
       4  ??DataTable10_35
       4  ??DataTable10_36
       4  ??DataTable10_37
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
      36  __sti__routine()
       4  actualIdlePosition
      64  applyIdleSolenoidPinState(PwmConfig *, int)
     224  doSetIdleValvePosition(int)
     752  iacMotor
      50  idleDebug(char const *, float)
      20  idleMath
     112  idleSolenoid
      16  idleSolenoidPin
     244  ivThread(int)
     712  ivThreadStack
       4  logger
      30  setIdleControlEnabled(int)
      26  setIdleRpmAction(int)
      38  setIdleValvePosition(int)
      32  setIdleValvePwm(float)
     254  showIdleInfo()
     288  startIdleThread(Logging *, Engine *)
       4  -- Other

 
 1 616 bytes in section .bss
     4 bytes in section .data
     4 bytes in section .init_array
   384 bytes in section .rodata
 1 450 bytes in section .text
 
 1 454 bytes of CODE  memory
   384 bytes of CONST memory
 1 620 bytes of DATA  memory

Errors: none
Warnings: 3
