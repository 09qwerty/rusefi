###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:42 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\kerne #
#                       l\src\chmempools.c                                    #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\kerne #
#                       l\src\chmempools.c -lCN F:\stuff\rusefi_sourceforge\f #
#                       irmware\iar\Debug\List\ -lA                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\  #
#                       -o F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj #
#                       \ --no_cse --no_unroll --no_inline --no_code_motion   #
#                       --no_tbaa --no_clustering --no_scheduling --debug     #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\ -On #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\c #
#                       hmempools.lst                                         #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\ch #
#                       mempools.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\chibios\os\kernel\src\chmempools.c
      1          /*
      2              ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
      3                           2011,2012,2013 Giovanni Di Sirio.
      4          
      5              This file is part of ChibiOS/RT.
      6          
      7              ChibiOS/RT is free software; you can redistribute it and/or modify
      8              it under the terms of the GNU General Public License as published by
      9              the Free Software Foundation; either version 3 of the License, or
     10              (at your option) any later version.
     11          
     12              ChibiOS/RT is distributed in the hope that it will be useful,
     13              but WITHOUT ANY WARRANTY; without even the implied warranty of
     14              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     15              GNU General Public License for more details.
     16          
     17              You should have received a copy of the GNU General Public License
     18              along with this program.  If not, see <http://www.gnu.org/licenses/>.
     19          
     20                                                ---
     21          
     22              A special exception to the GPL can be applied should you wish to distribute
     23              a combined work that includes ChibiOS/RT, without being obliged to provide
     24              the source code for any proprietary components. See the file exception.txt
     25              for full details of how and when the exception can be applied.
     26          */
     27          
     28          /**
     29           * @file    chmempools.c
     30           * @brief   Memory Pools code.
     31           *
     32           * @addtogroup pools
     33           * @details Memory Pools related APIs and services.
     34           *          <h2>Operation mode</h2>
     35           *          The Memory Pools APIs allow to allocate/free fixed size objects in
     36           *          <b>constant time</b> and reliably without memory fragmentation
     37           *          problems.<br>
     38           *          Memory Pools do not enforce any alignment constraint on the
     39           *          contained object however the objects must be properly aligned
     40           *          to contain a pointer to void.
     41           * @pre     In order to use the memory pools APIs the @p CH_USE_MEMPOOLS option
     42           *          must be enabled in @p chconf.h.
     43           * @{
     44           */
     45          
     46          #include "ch.h"
     47          
     48          #if CH_USE_MEMPOOLS || defined(__DOXYGEN__)
     49          /**
     50           * @brief   Initializes an empty memory pool.
     51           *
     52           * @param[out] mp       pointer to a @p MemoryPool structure
     53           * @param[in] size      the size of the objects contained in this memory pool,
     54           *                      the minimum accepted size is the size of a pointer to
     55           *                      void.
     56           * @param[in] provider  memory provider function for the memory pool or
     57           *                      @p NULL if the pool is not allowed to grow
     58           *                      automatically
     59           *
     60           * @init
     61           */

   \                                 In section .text, align 2, keep-with-next
     62          void chPoolInit(MemoryPool *mp, size_t size, memgetfunc_t provider) {
   \                     chPoolInit:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     63          
     64            chDbgCheck((mp != NULL) && (size >= sizeof(void *)), "chPoolInit");
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD001             BEQ.N    ??chPoolInit_0
   \   0000000C   0x2D04             CMP      R5,#+4
   \   0000000E   0xD204             BCS.N    ??chPoolInit_1
   \                     ??chPoolInit_0:
   \   00000010   0x2240             MOVS     R2,#+64
   \   00000012   0x....             LDR.N    R1,??DataTable3
   \   00000014   0x....             LDR.N    R0,??DataTable3_1
   \   00000016   0x.... 0x....      BL       chDbgPanic3
     65          
     66            mp->mp_next = NULL;
   \                     ??chPoolInit_1:
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x6020             STR      R0,[R4, #+0]
     67            mp->mp_object_size = size;
   \   0000001E   0x6065             STR      R5,[R4, #+4]
     68            mp->mp_provider = provider;
   \   00000020   0x60A6             STR      R6,[R4, #+8]
     69          }
   \   00000022   0xBD70             POP      {R4-R6,PC}       ;; return
     70          
     71          /**
     72           * @brief   Loads a memory pool with an array of static objects.
     73           * @pre     The memory pool must be already been initialized.
     74           * @pre     The array elements must be of the right size for the specified
     75           *          memory pool.
     76           * @post    The memory pool contains the elements of the input array.
     77           *
     78           * @param[in] mp        pointer to a @p MemoryPool structure
     79           * @param[in] p         pointer to the array first element
     80           * @param[in] n         number of elements in the array
     81           *
     82           * @api
     83           */

   \                                 In section .text, align 2, keep-with-next
     84          void chPoolLoadArray(MemoryPool *mp, void *p, size_t n) {
   \                     chPoolLoadArray:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     85          
     86            chDbgCheck((mp != NULL) && (n != 0), "chPoolLoadArray");
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD001             BEQ.N    ??chPoolLoadArray_0
   \   0000000C   0x2E00             CMP      R6,#+0
   \   0000000E   0xD104             BNE.N    ??chPoolLoadArray_1
   \                     ??chPoolLoadArray_0:
   \   00000010   0x2256             MOVS     R2,#+86
   \   00000012   0x....             LDR.N    R1,??DataTable3
   \   00000014   0x....             LDR.N    R0,??DataTable3_2
   \   00000016   0x.... 0x....      BL       chDbgPanic3
     87          
     88            while (n) {
   \                     ??chPoolLoadArray_1:
   \   0000001A   0x2E00             CMP      R6,#+0
   \   0000001C   0xD007             BEQ.N    ??chPoolLoadArray_2
     89              chPoolAdd(mp, p);
   \   0000001E   0x0029             MOVS     R1,R5
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       chPoolFree
     90              p = (void *)(((uint8_t *)p) + mp->mp_object_size);
   \   00000026   0x6860             LDR      R0,[R4, #+4]
   \   00000028   0x1945             ADDS     R5,R0,R5
     91              n--;
   \   0000002A   0x1E76             SUBS     R6,R6,#+1
   \   0000002C   0xE7F5             B.N      ??chPoolLoadArray_1
     92            }
     93          }
   \                     ??chPoolLoadArray_2:
   \   0000002E   0xBD70             POP      {R4-R6,PC}       ;; return
     94          
     95          /**
     96           * @brief   Allocates an object from a memory pool.
     97           * @pre     The memory pool must be already been initialized.
     98           *
     99           * @param[in] mp        pointer to a @p MemoryPool structure
    100           * @return              The pointer to the allocated object.
    101           * @retval NULL         if pool is empty.
    102           *
    103           * @iclass
    104           */

   \                                 In section .text, align 2, keep-with-next
    105          void *chPoolAllocI(MemoryPool *mp) {
   \                     chPoolAllocI:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    106            void *objp;
    107          
    108            chDbgCheckClassI();
   \   00000004   0x.... 0x....      BL       chDbgCheckClassI
    109            chDbgCheck(mp != NULL, "chPoolAllocI");
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD104             BNE.N    ??chPoolAllocI_0
   \   0000000C   0x226D             MOVS     R2,#+109
   \   0000000E   0x....             LDR.N    R1,??DataTable3
   \   00000010   0x....             LDR.N    R0,??DataTable3_3
   \   00000012   0x.... 0x....      BL       chDbgPanic3
    110          
    111            if ((objp = mp->mp_next) != NULL)
   \                     ??chPoolAllocI_0:
   \   00000016   0x6820             LDR      R0,[R4, #+0]
   \   00000018   0x0005             MOVS     R5,R0
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD003             BEQ.N    ??chPoolAllocI_1
    112              mp->mp_next = mp->mp_next->ph_next;
   \   0000001E   0x6820             LDR      R0,[R4, #+0]
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x6020             STR      R0,[R4, #+0]
   \   00000024   0xE006             B.N      ??chPoolAllocI_2
    113            else if (mp->mp_provider != NULL)
   \                     ??chPoolAllocI_1:
   \   00000026   0x68A0             LDR      R0,[R4, #+8]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD003             BEQ.N    ??chPoolAllocI_2
    114              objp = mp->mp_provider(mp->mp_object_size);
   \   0000002C   0x6860             LDR      R0,[R4, #+4]
   \   0000002E   0x68A1             LDR      R1,[R4, #+8]
   \   00000030   0x4788             BLX      R1
   \   00000032   0x0005             MOVS     R5,R0
    115            return objp;
   \                     ??chPoolAllocI_2:
   \   00000034   0x0028             MOVS     R0,R5
   \   00000036   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    116          }
    117          
    118          /**
    119           * @brief   Allocates an object from a memory pool.
    120           * @pre     The memory pool must be already been initialized.
    121           *
    122           * @param[in] mp        pointer to a @p MemoryPool structure
    123           * @return              The pointer to the allocated object.
    124           * @retval NULL         if pool is empty.
    125           *
    126           * @api
    127           */

   \                                 In section .text, align 2, keep-with-next
    128          void *chPoolAlloc(MemoryPool *mp) {
   \                     chPoolAlloc:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    129            void *objp;
    130          
    131            chSysLock();
   \   00000004   0x2020             MOVS     R0,#+32
   \   00000006   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000000A   0x.... 0x....      BL       dbg_check_lock
    132            objp = chPoolAllocI(mp);
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       chPoolAllocI
   \   00000014   0x0005             MOVS     R5,R0
    133            chSysUnlock();
   \   00000016   0x.... 0x....      BL       dbg_check_unlock
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xF380 0x8811      MSR      BASEPRI,R0
    134            return objp;
   \   00000020   0x0028             MOVS     R0,R5
   \   00000022   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    135          }
    136          
    137          /**
    138           * @brief   Releases an object into a memory pool.
    139           * @pre     The memory pool must be already been initialized.
    140           * @pre     The freed object must be of the right size for the specified
    141           *          memory pool.
    142           * @pre     The object must be properly aligned to contain a pointer to void.
    143           *
    144           * @param[in] mp        pointer to a @p MemoryPool structure
    145           * @param[in] objp      the pointer to the object to be released
    146           *
    147           * @iclass
    148           */

   \                                 In section .text, align 2, keep-with-next
    149          void chPoolFreeI(MemoryPool *mp, void *objp) {
   \                     chPoolFreeI:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    150            struct pool_header *php = objp;
   \   00000006   0x002E             MOVS     R6,R5
    151          
    152            chDbgCheckClassI();
   \   00000008   0x.... 0x....      BL       chDbgCheckClassI
    153            chDbgCheck((mp != NULL) && (objp != NULL), "chPoolFreeI");
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD001             BEQ.N    ??chPoolFreeI_0
   \   00000010   0x2D00             CMP      R5,#+0
   \   00000012   0xD104             BNE.N    ??chPoolFreeI_1
   \                     ??chPoolFreeI_0:
   \   00000014   0x2299             MOVS     R2,#+153
   \   00000016   0x....             LDR.N    R1,??DataTable3
   \   00000018   0x....             LDR.N    R0,??DataTable3_4
   \   0000001A   0x.... 0x....      BL       chDbgPanic3
    154          
    155            php->ph_next = mp->mp_next;
   \                     ??chPoolFreeI_1:
   \   0000001E   0x6820             LDR      R0,[R4, #+0]
   \   00000020   0x6030             STR      R0,[R6, #+0]
    156            mp->mp_next = php;
   \   00000022   0x6026             STR      R6,[R4, #+0]
    157          }
   \   00000024   0xBD70             POP      {R4-R6,PC}       ;; return
    158          
    159          /**
    160           * @brief   Releases an object into a memory pool.
    161           * @pre     The memory pool must be already been initialized.
    162           * @pre     The freed object must be of the right size for the specified
    163           *          memory pool.
    164           * @pre     The object must be properly aligned to contain a pointer to void.
    165           *
    166           * @param[in] mp        pointer to a @p MemoryPool structure
    167           * @param[in] objp      the pointer to the object to be released
    168           *
    169           * @api
    170           */

   \                                 In section .text, align 2, keep-with-next
    171          void chPoolFree(MemoryPool *mp, void *objp) {
   \                     chPoolFree:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    172          
    173            chSysLock();
   \   00000006   0x2020             MOVS     R0,#+32
   \   00000008   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000000C   0x.... 0x....      BL       dbg_check_lock
    174            chPoolFreeI(mp, objp);
   \   00000010   0x0029             MOVS     R1,R5
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       chPoolFreeI
    175            chSysUnlock();
   \   00000018   0x.... 0x....      BL       dbg_check_unlock
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF380 0x8811      MSR      BASEPRI,R0
    176          }
   \   00000022   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     `?<Constant "F:\\\\stuff\\\\rusefi_sourc...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     `?<Constant "\\"chPoolInit\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     `?<Constant "\\"chPoolLoadArray\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     `?<Constant "\\"chPoolAllocI\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     `?<Constant "\\"chPoolFreeI\\"()">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"chPoolInit\\"()">`:
   \   00000000   0x22 0x63          DC8 "\"chPoolInit\"()"
   \              0x68 0x50    
   \              0x6F 0x6F    
   \              0x6C 0x49    
   \              0x6E 0x69    
   \              0x74 0x22    
   \              0x28 0x29    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "F:\\\\stuff\\\\rusefi_sourc...">`:
   \   00000000   0x46 0x3A          DC8 46H, 3AH, 5CH, 73H, 74H, 75H, 66H, 66H
   \              0x5C 0x73    
   \              0x74 0x75    
   \              0x66 0x66    
   \   00000008   0x5C 0x72          DC8 5CH, 72H, 75H, 73H, 65H, 66H, 69H, 5FH
   \              0x75 0x73    
   \              0x65 0x66    
   \              0x69 0x5F    
   \   00000010   0x73 0x6F          DC8 73H, 6FH, 75H, 72H, 63H, 65H, 66H, 6FH
   \              0x75 0x72    
   \              0x63 0x65    
   \              0x66 0x6F    
   \   00000018   0x72 0x67          DC8 72H, 67H, 65H, 5CH, 66H, 69H, 72H, 6DH
   \              0x65 0x5C    
   \              0x66 0x69    
   \              0x72 0x6D    
   \   00000020   0x77 0x61          DC8 77H, 61H, 72H, 65H, 5CH, 63H, 68H, 69H
   \              0x72 0x65    
   \              0x5C 0x63    
   \              0x68 0x69    
   \   00000028   0x62 0x69          DC8 62H, 69H, 6FH, 73H, 5CH, 6FH, 73H, 5CH
   \              0x6F 0x73    
   \              0x5C 0x6F    
   \              0x73 0x5C    
   \   00000030   0x6B 0x65          DC8 6BH, 65H, 72H, 6EH, 65H, 6CH, 5CH, 73H
   \              0x72 0x6E    
   \              0x65 0x6C    
   \              0x5C 0x73    
   \   00000038   0x72 0x63          DC8 72H, 63H, 5CH, 63H, 68H, 6DH, 65H, 6DH
   \              0x5C 0x63    
   \              0x68 0x6D    
   \              0x65 0x6D    
   \   00000040   0x70 0x6F          DC8 70H, 6FH, 6FH, 6CH, 73H, 2EH, 63H, 0
   \              0x6F 0x6C    
   \              0x73 0x2E    
   \              0x63 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"chPoolLoadArray\\"()">`:
   \   00000000   0x22 0x63          DC8 "\"chPoolLoadArray\"()"
   \              0x68 0x50    
   \              0x6F 0x6F    
   \              0x6C 0x4C    
   \              0x6F 0x61    
   \              0x64 0x41    
   \              0x72 0x72    
   \              0x61 0x79    
   \              0x22 0x28    
   \              0x29 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"chPoolAllocI\\"()">`:
   \   00000000   0x22 0x63          DC8 "\"chPoolAllocI\"()"
   \              0x68 0x50    
   \              0x6F 0x6F    
   \              0x6C 0x41    
   \              0x6C 0x6C    
   \              0x6F 0x63    
   \              0x49 0x22    
   \              0x28 0x29    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"chPoolFreeI\\"()">`:
   \   00000000   0x22 0x63          DC8 "\"chPoolFreeI\"()"
   \              0x68 0x50    
   \              0x6F 0x6F    
   \              0x6C 0x46    
   \              0x72 0x65    
   \              0x65 0x49    
   \              0x22 0x28    
   \              0x29 0x00    
    177          
    178          #endif /* CH_USE_MEMPOOLS */
    179          
    180          /** @} */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   chPoolAlloc
        16   -> chPoolAllocI
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
      16   chPoolAllocI
        16   -- Indirect call
        16   -> chDbgCheckClassI
        16   -> chDbgPanic3
      16   chPoolFree
        16   -> chPoolFreeI
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
      16   chPoolFreeI
        16   -> chDbgCheckClassI
        16   -> chDbgPanic3
      16   chPoolInit
        16   -> chDbgPanic3
      16   chPoolLoadArray
        16   -> chDbgPanic3
        16   -> chPoolFree


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      72  ?<Constant "F:\\stuff\\rusefi_sourc...">
      20  ?<Constant "\"chPoolAllocI\"()">
      16  ?<Constant "\"chPoolFreeI\"()">
      16  ?<Constant "\"chPoolInit\"()">
      20  ?<Constant "\"chPoolLoadArray\"()">
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
      36  chPoolAlloc
      56  chPoolAllocI
      36  chPoolFree
      38  chPoolFreeI
      36  chPoolInit
      48  chPoolLoadArray

 
 144 bytes in section .rodata
 270 bytes in section .text
 
 270 bytes of CODE  memory
 144 bytes of CONST memory

Errors: none
Warnings: none
