###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:32 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\s #
#                       rc\pwm.c                                              #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\s #
#                       rc\pwm.c -lCN F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\Debug\List\ -lA F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\Debug\List\ -o F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\Debug\Obj\ --no_cse --no_unroll --no_inline  #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\ -On #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\p #
#                       wm.lst                                                #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\pw #
#                       m.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\src\pwm.c
      1          /*
      2              ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
      3                           2011,2012,2013 Giovanni Di Sirio.
      4          
      5              This file is part of ChibiOS/RT.
      6          
      7              ChibiOS/RT is free software; you can redistribute it and/or modify
      8              it under the terms of the GNU General Public License as published by
      9              the Free Software Foundation; either version 3 of the License, or
     10              (at your option) any later version.
     11          
     12              ChibiOS/RT is distributed in the hope that it will be useful,
     13              but WITHOUT ANY WARRANTY; without even the implied warranty of
     14              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     15              GNU General Public License for more details.
     16          
     17              You should have received a copy of the GNU General Public License
     18              along with this program.  If not, see <http://www.gnu.org/licenses/>.
     19          
     20                                                ---
     21          
     22              A special exception to the GPL can be applied should you wish to distribute
     23              a combined work that includes ChibiOS/RT, without being obliged to provide
     24              the source code for any proprietary components. See the file exception.txt
     25              for full details of how and when the exception can be applied.
     26          */
     27          
     28          /**
     29           * @file    pwm.c
     30           * @brief   PWM Driver code.
     31           *
     32           * @addtogroup PWM
     33           * @{
     34           */
     35          
     36          #include "ch.h"
     37          #include "hal.h"
     38          
     39          #if HAL_USE_PWM || defined(__DOXYGEN__)
     40          
     41          /*===========================================================================*/
     42          /* Driver local definitions.                                                 */
     43          /*===========================================================================*/
     44          
     45          /*===========================================================================*/
     46          /* Driver exported variables.                                                */
     47          /*===========================================================================*/
     48          
     49          /*===========================================================================*/
     50          /* Driver local variables and types.                                         */
     51          /*===========================================================================*/
     52          
     53          /*===========================================================================*/
     54          /* Driver local functions.                                                   */
     55          /*===========================================================================*/
     56          
     57          /*===========================================================================*/
     58          /* Driver exported functions.                                                */
     59          /*===========================================================================*/
     60          
     61          /**
     62           * @brief   PWM Driver initialization.
     63           * @note    This function is implicitly invoked by @p halInit(), there is
     64           *          no need to explicitly initialize the driver.
     65           *
     66           * @init
     67           */

   \                                 In section .text, align 2, keep-with-next
     68          void pwmInit(void) {
   \                     pwmInit:
   \   00000000   0xB580             PUSH     {R7,LR}
     69          
     70            pwm_lld_init();
   \   00000002   0x.... 0x....      BL       pwm_lld_init
     71          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     72          
     73          /**
     74           * @brief   Initializes the standard part of a @p PWMDriver structure.
     75           *
     76           * @param[out] pwmp     pointer to a @p PWMDriver object
     77           *
     78           * @init
     79           */

   \                                 In section .text, align 2, keep-with-next
     80          void pwmObjectInit(PWMDriver *pwmp) {
     81          
     82            pwmp->state    = PWM_STOP;
   \                     pwmObjectInit:
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x7001             STRB     R1,[R0, #+0]
     83            pwmp->config   = NULL;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6041             STR      R1,[R0, #+4]
     84          #if defined(PWM_DRIVER_EXT_INIT_HOOK)
     85            PWM_DRIVER_EXT_INIT_HOOK(pwmp);
     86          #endif
     87          }
   \   00000008   0x4770             BX       LR               ;; return
     88          
     89          /**
     90           * @brief   Configures and activates the PWM peripheral.
     91           * @note    Starting a driver that is already in the @p PWM_READY state
     92           *          disables all the active channels.
     93           *
     94           * @param[in] pwmp      pointer to a @p PWMDriver object
     95           * @param[in] config    pointer to a @p PWMConfig object
     96           *
     97           * @api
     98           */

   \                                 In section .text, align 2, keep-with-next
     99          void pwmStart(PWMDriver *pwmp, const PWMConfig *config) {
   \                     pwmStart:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    100          
    101            chDbgCheck((pwmp != NULL) && (config != NULL), "pwmStart");
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD001             BEQ.N    ??pwmStart_0
   \   0000000A   0x2D00             CMP      R5,#+0
   \   0000000C   0xD104             BNE.N    ??pwmStart_1
   \                     ??pwmStart_0:
   \   0000000E   0x2265             MOVS     R2,#+101
   \   00000010   0x....             LDR.N    R1,??DataTable4
   \   00000012   0x....             LDR.N    R0,??DataTable4_1
   \   00000014   0x.... 0x....      BL       chDbgPanic3
    102          
    103            chSysLock();
   \                     ??pwmStart_1:
   \   00000018   0x2020             MOVS     R0,#+32
   \   0000001A   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000001E   0x.... 0x....      BL       dbg_check_lock
    104            chDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
    105                        "pwmStart(), #1", "invalid state");
   \   00000022   0x7820             LDRB     R0,[R4, #+0]
   \   00000024   0x2801             CMP      R0,#+1
   \   00000026   0xD005             BEQ.N    ??pwmStart_2
   \   00000028   0x7820             LDRB     R0,[R4, #+0]
   \   0000002A   0x2802             CMP      R0,#+2
   \   0000002C   0xD002             BEQ.N    ??pwmStart_2
   \   0000002E   0x....             LDR.N    R0,??DataTable4_2
   \   00000030   0x.... 0x....      BL       chDbgPanic
    106            pwmp->config = config;
   \                     ??pwmStart_2:
   \   00000034   0x6065             STR      R5,[R4, #+4]
    107            pwmp->period = config->period;
   \   00000036   0x88A8             LDRH     R0,[R5, #+4]
   \   00000038   0x8120             STRH     R0,[R4, #+8]
    108            pwm_lld_start(pwmp);
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x.... 0x....      BL       pwm_lld_start
    109            pwmp->state = PWM_READY;
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0x7020             STRB     R0,[R4, #+0]
    110            chSysUnlock();
   \   00000044   0x.... 0x....      BL       dbg_check_unlock
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xF380 0x8811      MSR      BASEPRI,R0
    111          }
   \   0000004E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    112          
    113          /**
    114           * @brief   Deactivates the PWM peripheral.
    115           *
    116           * @param[in] pwmp      pointer to a @p PWMDriver object
    117           *
    118           * @api
    119           */

   \                                 In section .text, align 2, keep-with-next
    120          void pwmStop(PWMDriver *pwmp) {
   \                     pwmStop:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    121          
    122            chDbgCheck(pwmp != NULL, "pwmStop");
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD104             BNE.N    ??pwmStop_0
   \   00000008   0x227A             MOVS     R2,#+122
   \   0000000A   0x....             LDR.N    R1,??DataTable4
   \   0000000C   0x....             LDR.N    R0,??DataTable4_3
   \   0000000E   0x.... 0x....      BL       chDbgPanic3
    123          
    124            chSysLock();
   \                     ??pwmStop_0:
   \   00000012   0x2020             MOVS     R0,#+32
   \   00000014   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000018   0x.... 0x....      BL       dbg_check_lock
    125            chDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
    126                        "pwmStop(), #1", "invalid state");
   \   0000001C   0x7820             LDRB     R0,[R4, #+0]
   \   0000001E   0x2801             CMP      R0,#+1
   \   00000020   0xD005             BEQ.N    ??pwmStop_1
   \   00000022   0x7820             LDRB     R0,[R4, #+0]
   \   00000024   0x2802             CMP      R0,#+2
   \   00000026   0xD002             BEQ.N    ??pwmStop_1
   \   00000028   0x....             LDR.N    R0,??DataTable4_4
   \   0000002A   0x.... 0x....      BL       chDbgPanic
    127            pwm_lld_stop(pwmp);
   \                     ??pwmStop_1:
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0x.... 0x....      BL       pwm_lld_stop
    128            pwmp->state = PWM_STOP;
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x7020             STRB     R0,[R4, #+0]
    129            chSysUnlock();
   \   00000038   0x.... 0x....      BL       dbg_check_unlock
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xF380 0x8811      MSR      BASEPRI,R0
    130          }
   \   00000042   0xBD10             POP      {R4,PC}          ;; return
    131          
    132          /**
    133           * @brief   Changes the period the PWM peripheral.
    134           * @details This function changes the period of a PWM unit that has already
    135           *          been activated using @p pwmStart().
    136           * @pre     The PWM unit must have been activated using @p pwmStart().
    137           * @post    The PWM unit period is changed to the new value.
    138           * @note    If a period is specified that is shorter than the pulse width
    139           *          programmed in one of the channels then the behavior is not
    140           *          guaranteed.
    141           *
    142           * @param[in] pwmp      pointer to a @p PWMDriver object
    143           * @param[in] period    new cycle time in ticks
    144           *
    145           * @api
    146           */

   \                                 In section .text, align 2, keep-with-next
    147          void pwmChangePeriod(PWMDriver *pwmp, pwmcnt_t period) {
   \                     pwmChangePeriod:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    148          
    149            chDbgCheck(pwmp != NULL, "pwmChangePeriod");
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD104             BNE.N    ??pwmChangePeriod_0
   \   0000000A   0x2295             MOVS     R2,#+149
   \   0000000C   0x....             LDR.N    R1,??DataTable4
   \   0000000E   0x....             LDR.N    R0,??DataTable4_5
   \   00000010   0x.... 0x....      BL       chDbgPanic3
    150          
    151            chSysLock();
   \                     ??pwmChangePeriod_0:
   \   00000014   0x2020             MOVS     R0,#+32
   \   00000016   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000001A   0x.... 0x....      BL       dbg_check_lock
    152            chDbgAssert(pwmp->state == PWM_READY,
    153                        "pwmChangePeriod(), #1", "invalid state");
   \   0000001E   0x7820             LDRB     R0,[R4, #+0]
   \   00000020   0x2802             CMP      R0,#+2
   \   00000022   0xD002             BEQ.N    ??pwmChangePeriod_1
   \   00000024   0x....             LDR.N    R0,??DataTable4_6
   \   00000026   0x.... 0x....      BL       chDbgPanic
    154            pwmChangePeriodI(pwmp, period);
   \                     ??pwmChangePeriod_1:
   \   0000002A   0x8125             STRH     R5,[R4, #+8]
   \   0000002C   0x6920             LDR      R0,[R4, #+16]
   \   0000002E   0x1E69             SUBS     R1,R5,#+1
   \   00000030   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000032   0x62C1             STR      R1,[R0, #+44]
    155            chSysUnlock();
   \   00000034   0x.... 0x....      BL       dbg_check_unlock
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xF380 0x8811      MSR      BASEPRI,R0
    156          }
   \   0000003E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    157          
    158          /**
    159           * @brief   Enables a PWM channel.
    160           * @pre     The PWM unit must have been activated using @p pwmStart().
    161           * @post    The channel is active using the specified configuration.
    162           * @note    Depending on the hardware implementation this function has
    163           *          effect starting on the next cycle (recommended implementation)
    164           *          or immediately (fallback implementation).
    165           *
    166           * @param[in] pwmp      pointer to a @p PWMDriver object
    167           * @param[in] channel   PWM channel identifier (0...PWM_CHANNELS-1)
    168           * @param[in] width     PWM pulse width as clock pulses number
    169           *
    170           * @api
    171           */

   \                                 In section .text, align 2, keep-with-next
    172          void pwmEnableChannel(PWMDriver *pwmp,
    173                                pwmchannel_t channel,
    174                                pwmcnt_t width) {
   \                     pwmEnableChannel:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    175          
    176            chDbgCheck((pwmp != NULL) && (channel < PWM_CHANNELS),
    177                       "pwmEnableChannel");
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD002             BEQ.N    ??pwmEnableChannel_0
   \   0000000C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000E   0x2D04             CMP      R5,#+4
   \   00000010   0xDB04             BLT.N    ??pwmEnableChannel_1
   \                     ??pwmEnableChannel_0:
   \   00000012   0x22B1             MOVS     R2,#+177
   \   00000014   0x....             LDR.N    R1,??DataTable4
   \   00000016   0x....             LDR.N    R0,??DataTable4_7
   \   00000018   0x.... 0x....      BL       chDbgPanic3
    178          
    179            chSysLock();
   \                     ??pwmEnableChannel_1:
   \   0000001C   0x2020             MOVS     R0,#+32
   \   0000001E   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000022   0x.... 0x....      BL       dbg_check_lock
    180            chDbgAssert(pwmp->state == PWM_READY,
    181                        "pwmEnableChannel(), #1", "not ready");
   \   00000026   0x7820             LDRB     R0,[R4, #+0]
   \   00000028   0x2802             CMP      R0,#+2
   \   0000002A   0xD002             BEQ.N    ??pwmEnableChannel_2
   \   0000002C   0x....             LDR.N    R0,??DataTable4_8
   \   0000002E   0x.... 0x....      BL       chDbgPanic
    182            pwm_lld_enable_channel(pwmp, channel, width);
   \                     ??pwmEnableChannel_2:
   \   00000032   0x0032             MOVS     R2,R6
   \   00000034   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000036   0x0029             MOVS     R1,R5
   \   00000038   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x.... 0x....      BL       pwm_lld_enable_channel
    183            chSysUnlock();
   \   00000040   0x.... 0x....      BL       dbg_check_unlock
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0xF380 0x8811      MSR      BASEPRI,R0
    184          }
   \   0000004A   0xBD70             POP      {R4-R6,PC}       ;; return
    185          
    186          /**
    187           * @brief   Disables a PWM channel.
    188           * @pre     The PWM unit must have been activated using @p pwmStart().
    189           * @post    The channel is disabled and its output line returned to the
    190           *          idle state.
    191           * @note    Depending on the hardware implementation this function has
    192           *          effect starting on the next cycle (recommended implementation)
    193           *          or immediately (fallback implementation).
    194           *
    195           * @param[in] pwmp      pointer to a @p PWMDriver object
    196           * @param[in] channel   PWM channel identifier (0...PWM_CHANNELS-1)
    197           *
    198           * @api
    199           */

   \                                 In section .text, align 2, keep-with-next
    200          void pwmDisableChannel(PWMDriver *pwmp, pwmchannel_t channel) {
   \                     pwmDisableChannel:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    201          
    202            chDbgCheck((pwmp != NULL) && (channel < PWM_CHANNELS),
    203                       "pwmEnableChannel");
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD002             BEQ.N    ??pwmDisableChannel_0
   \   0000000A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000C   0x2D04             CMP      R5,#+4
   \   0000000E   0xDB04             BLT.N    ??pwmDisableChannel_1
   \                     ??pwmDisableChannel_0:
   \   00000010   0x22CB             MOVS     R2,#+203
   \   00000012   0x....             LDR.N    R1,??DataTable4
   \   00000014   0x....             LDR.N    R0,??DataTable4_7
   \   00000016   0x.... 0x....      BL       chDbgPanic3
    204          
    205            chSysLock();
   \                     ??pwmDisableChannel_1:
   \   0000001A   0x2020             MOVS     R0,#+32
   \   0000001C   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000020   0x.... 0x....      BL       dbg_check_lock
    206            chDbgAssert(pwmp->state == PWM_READY,
    207                        "pwmDisableChannel(), #1", "not ready");
   \   00000024   0x7820             LDRB     R0,[R4, #+0]
   \   00000026   0x2802             CMP      R0,#+2
   \   00000028   0xD002             BEQ.N    ??pwmDisableChannel_2
   \   0000002A   0x....             LDR.N    R0,??DataTable4_9
   \   0000002C   0x.... 0x....      BL       chDbgPanic
    208            pwm_lld_disable_channel(pwmp, channel);
   \                     ??pwmDisableChannel_2:
   \   00000030   0x0029             MOVS     R1,R5
   \   00000032   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x.... 0x....      BL       pwm_lld_disable_channel
    209            chSysUnlock();
   \   0000003A   0x.... 0x....      BL       dbg_check_unlock
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xF380 0x8811      MSR      BASEPRI,R0
    210          }
   \   00000044   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     `?<Constant "F:\\\\stuff\\\\rusefi_sourc...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     `?<Constant "\\"pwmStart\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     `?<Constant "pwmStart(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     `?<Constant "\\"pwmStop\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     `?<Constant "pwmStop(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     `?<Constant "\\"pwmChangePeriod\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     `?<Constant "pwmChangePeriod(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     `?<Constant "\\"pwmEnableChannel\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     `?<Constant "pwmEnableChannel(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     `?<Constant "pwmDisableChannel(), #1">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"pwmStart\\"()">`:
   \   00000000   0x22 0x70          DC8 "\"pwmStart\"()"
   \              0x77 0x6D    
   \              0x53 0x74    
   \              0x61 0x72    
   \              0x74 0x22    
   \              0x28 0x29    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "F:\\\\stuff\\\\rusefi_sourc...">`:
   \   00000000   0x46 0x3A          DC8 46H, 3AH, 5CH, 73H, 74H, 75H, 66H, 66H
   \              0x5C 0x73    
   \              0x74 0x75    
   \              0x66 0x66    
   \   00000008   0x5C 0x72          DC8 5CH, 72H, 75H, 73H, 65H, 66H, 69H, 5FH
   \              0x75 0x73    
   \              0x65 0x66    
   \              0x69 0x5F    
   \   00000010   0x73 0x6F          DC8 73H, 6FH, 75H, 72H, 63H, 65H, 66H, 6FH
   \              0x75 0x72    
   \              0x63 0x65    
   \              0x66 0x6F    
   \   00000018   0x72 0x67          DC8 72H, 67H, 65H, 5CH, 66H, 69H, 72H, 6DH
   \              0x65 0x5C    
   \              0x66 0x69    
   \              0x72 0x6D    
   \   00000020   0x77 0x61          DC8 77H, 61H, 72H, 65H, 5CH, 63H, 68H, 69H
   \              0x72 0x65    
   \              0x5C 0x63    
   \              0x68 0x69    
   \   00000028   0x62 0x69          DC8 62H, 69H, 6FH, 73H, 5CH, 6FH, 73H, 5CH
   \              0x6F 0x73    
   \              0x5C 0x6F    
   \              0x73 0x5C    
   \   00000030   0x68 0x61          DC8 68H, 61H, 6CH, 5CH, 73H, 72H, 63H, 5CH
   \              0x6C 0x5C    
   \              0x73 0x72    
   \              0x63 0x5C    
   \   00000038   0x70 0x77          DC8 70H, 77H, 6DH, 2EH, 63H, 0
   \              0x6D 0x2E    
   \              0x63 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "pwmStart(), #1">`:
   \   00000000   0x70 0x77          DC8 "pwmStart(), #1"
   \              0x6D 0x53    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x28 0x29    
   \              0x2C 0x20    
   \              0x23 0x31    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"pwmStop\\"()">`:
   \   00000000   0x22 0x70          DC8 "\"pwmStop\"()"
   \              0x77 0x6D    
   \              0x53 0x74    
   \              0x6F 0x70    
   \              0x22 0x28    
   \              0x29 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "pwmStop(), #1">`:
   \   00000000   0x70 0x77          DC8 "pwmStop(), #1"
   \              0x6D 0x53    
   \              0x74 0x6F    
   \              0x70 0x28    
   \              0x29 0x2C    
   \              0x20 0x23    
   \              0x31 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"pwmChangePeriod\\"()">`:
   \   00000000   0x22 0x70          DC8 "\"pwmChangePeriod\"()"
   \              0x77 0x6D    
   \              0x43 0x68    
   \              0x61 0x6E    
   \              0x67 0x65    
   \              0x50 0x65    
   \              0x72 0x69    
   \              0x6F 0x64    
   \              0x22 0x28    
   \              0x29 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "pwmChangePeriod(), #1">`:
   \   00000000   0x70 0x77          DC8 "pwmChangePeriod(), #1"
   \              0x6D 0x43    
   \              0x68 0x61    
   \              0x6E 0x67    
   \              0x65 0x50    
   \              0x65 0x72    
   \              0x69 0x6F    
   \              0x64 0x28    
   \              0x29 0x2C    
   \              0x20 0x23    
   \              0x31 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"pwmEnableChannel\\"()">`:
   \   00000000   0x22 0x70          DC8 "\"pwmEnableChannel\"()"
   \              0x77 0x6D    
   \              0x45 0x6E    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x43 0x68    
   \              0x61 0x6E    
   \              0x6E 0x65    
   \              0x6C 0x22    
   \              0x28 0x29    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "pwmEnableChannel(), #1">`:
   \   00000000   0x70 0x77          DC8 "pwmEnableChannel(), #1"
   \              0x6D 0x45    
   \              0x6E 0x61    
   \              0x62 0x6C    
   \              0x65 0x43    
   \              0x68 0x61    
   \              0x6E 0x6E    
   \              0x65 0x6C    
   \              0x28 0x29    
   \              0x2C 0x20    
   \              0x23 0x31    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "pwmDisableChannel(), #1">`:
   \   00000000   0x70 0x77          DC8 "pwmDisableChannel(), #1"
   \              0x6D 0x44    
   \              0x69 0x73    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x43 0x68    
   \              0x61 0x6E    
   \              0x6E 0x65    
   \              0x6C 0x28    
   \              0x29 0x2C    
   \              0x20 0x23    
   \              0x31 0x00    
    211          
    212          #endif /* HAL_USE_PWM */
    213          
    214          /** @} */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   pwmChangePeriod
        16   -> chDbgPanic
        16   -> chDbgPanic3
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
      16   pwmDisableChannel
        16   -> chDbgPanic
        16   -> chDbgPanic3
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
        16   -> pwm_lld_disable_channel
      16   pwmEnableChannel
        16   -> chDbgPanic
        16   -> chDbgPanic3
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
        16   -> pwm_lld_enable_channel
       8   pwmInit
         8   -> pwm_lld_init
       0   pwmObjectInit
      16   pwmStart
        16   -> chDbgPanic
        16   -> chDbgPanic3
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
        16   -> pwm_lld_start
       8   pwmStop
         8   -> chDbgPanic
         8   -> chDbgPanic3
         8   -> dbg_check_lock
         8   -> dbg_check_unlock
         8   -> pwm_lld_stop


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      64  ?<Constant "F:\\stuff\\rusefi_sourc...">
      20  ?<Constant "\"pwmChangePeriod\"()">
      24  ?<Constant "\"pwmEnableChannel\"()">
      16  ?<Constant "\"pwmStart\"()">
      12  ?<Constant "\"pwmStop\"()">
      24  ?<Constant "pwmChangePeriod(), #1">
      24  ?<Constant "pwmDisableChannel(), #1">
      24  ?<Constant "pwmEnableChannel(), #1">
      16  ?<Constant "pwmStart(), #1">
      16  ?<Constant "pwmStop(), #1">
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      64  pwmChangePeriod
      70  pwmDisableChannel
      76  pwmEnableChannel
       8  pwmInit
      10  pwmObjectInit
      80  pwmStart
      68  pwmStop

 
 240 bytes in section .rodata
 416 bytes in section .text
 
 416 bytes of CODE  memory
 240 bytes of CONST memory

Errors: none
Warnings: none
