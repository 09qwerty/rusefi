###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:08:43 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\development\sens #
#                       or_chart.cpp                                          #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\development\sens #
#                       or_chart.cpp -lCN F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\Debug\List\ -lA F:\stuff\rusefi_sourceforge\fir #
#                       mware\iar\Debug\List\ -o F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\Debug\Obj\ --no_cse --no_unroll          #
#                       --no_inline --no_code_motion --no_tbaa                #
#                       --no_clustering --no_scheduling --debug               #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\s #
#                       ensor_chart.lst                                       #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\se #
#                       nsor_chart.o                                          #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\development\sensor_chart.cpp
      1          /**
      2           * @file	analog_chart.cpp
      3           *
      4           * @date Dec 20, 2013
      5           * @author Andrey Belomutskiy, (c) 2012-2015
      6           */
      7          
      8          #include <sensor_chart.h>
      9          #include "main.h"
     10          #include "engine.h"
     11          #include "rpm_calculator.h"
     12          #include "status_loop.h"
     13          
     14          #if EFI_ANALOG_CHART || defined(__DOXYGEN__)
     15          

   \                                 In section .bss, align 4
     16          static char LOGGING_BUFFER[5000];
   \                     LOGGING_BUFFER:
   \   00000000                      DS8 5000

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine:
   \   00000000   0xB580             PUSH     {R7,LR}
     17          static Logging logging("analog chart", LOGGING_BUFFER, sizeof(LOGGING_BUFFER));
   \   00000002   0xF241 0x3388      MOVW     R3,#+5000
   \   00000006   0x....             LDR.N    R2,??DataTable3_1
   \   00000008   0x....             LDR.N    R1,??DataTable3_2
   \   0000000A   0x....             LDR.N    R0,??DataTable3_3
   \   0000000C   0x.... 0x....      BL       _ZN7LoggingC1EPKcPci
   \   00000010   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     logging:
   \   00000000                      DS8 60
     18          

   \                                 In section .bss, align 4
     19          static int pendingData = FALSE;
   \                     pendingData:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     20          static int initialized = FALSE;
   \                     initialized:
   \   00000000                      DS8 4
     21          
     22          extern engine_configuration_s *engineConfiguration;
     23          

   \                                 In section .text, align 2, keep-with-next
     24          void scAddData(float angle, float value) {
   \                     _Z9scAddDataff:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xB082             SUB      SP,SP,#+8
   \   00000008   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   0000000C   0xEEF0 0x8A60      VMOV.F32 S17,S1
     25          	if (!initialized) {
   \   00000010   0x....             LDR.N    R0,??DataTable3_4
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD048             BEQ.N    ??scAddData_0
     26          		return; // this is possible because of initialization sequence
     27          	}
     28          
     29          	if (engineConfiguration->sensorChartFrequency < 2) {
   \                     ??scAddData_1:
   \   00000018   0x....             LDR.N    R0,??DataTable3_5
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0xF8D0 0x0214      LDR      R0,[R0, #+532]
   \   00000020   0x2802             CMP      R0,#+2
   \   00000022   0xDB42             BLT.N    ??scAddData_0
     30          		/**
     31          		 * analog chart frequency cannot be 1 because of the way
     32          		 * data flush is implemented, see below
     33          		 */
     34          		//todofirmwareError()
     35          		return;
     36          	}
     37          
     38          	if (getRevolutionCounter() % engineConfiguration->sensorChartFrequency != 0) {
   \                     ??scAddData_2:
   \   00000024   0x.... 0x....      BL       _Z20getRevolutionCounterv
   \   00000028   0x....             LDR.N    R1,??DataTable3_5
   \   0000002A   0x6809             LDR      R1,[R1, #+0]
   \   0000002C   0xF8D1 0x1214      LDR      R1,[R1, #+532]
   \   00000030   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000034   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD012             BEQ.N    ??scAddData_3
     39          		/**
     40          		 * We are here if we do NOT need to add an event to the analog chart
     41          		 */
     42          		if (pendingData) {
   \   0000003C   0x....             LDR.N    R0,??DataTable3_6
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD00D             BEQ.N    ??scAddData_4
     43          			/**
     44          			 * We are here if that's the first time we do not need to add
     45          			 * data after we have added some data - meaning it's time to flush
     46          			 */
     47          			// message terminator
     48          			appendPrintf(&logging, DELIMETER);
   \   00000044   0x....             ADR.N    R1,??DataTable3  ;; ","
   \   00000046   0x....             LDR.N    R0,??DataTable3_3
   \   00000048   0x.... 0x....      BL       appendPrintf
     49          			// output pending data
     50          			if (getFullLog()) {
   \   0000004C   0x.... 0x....      BL       _Z10getFullLogv
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD002             BEQ.N    ??scAddData_5
     51          				scheduleLogging(&logging);
   \   00000054   0x....             LDR.N    R0,??DataTable3_3
   \   00000056   0x.... 0x....      BL       scheduleLogging
     52          			}
     53          			pendingData = false;
   \                     ??scAddData_5:
   \   0000005A   0x....             LDR.N    R0,??DataTable3_6
   \   0000005C   0x2100             MOVS     R1,#+0
   \   0000005E   0x6001             STR      R1,[R0, #+0]
     54          		}
     55          		return;
   \                     ??scAddData_4:
   \   00000060   0xE023             B.N      ??scAddData_0
     56          	}
     57          	if (!pendingData) {
   \                     ??scAddData_3:
   \   00000062   0x....             LDR.N    R0,??DataTable3_6
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD10A             BNE.N    ??scAddData_6
     58          		pendingData = true;
   \   0000006A   0x....             LDR.N    R0,??DataTable3_6
   \   0000006C   0x2101             MOVS     R1,#+1
   \   0000006E   0x6001             STR      R1,[R0, #+0]
     59          		resetLogging(&logging);
   \   00000070   0x....             LDR.N    R0,??DataTable3_3
   \   00000072   0x.... 0x....      BL       resetLogging
     60          		// message header
     61          		appendPrintf(&logging, "analog_chart%s", DELIMETER);
   \   00000076   0x....             ADR.N    R2,??DataTable3  ;; ","
   \   00000078   0x....             LDR.N    R1,??DataTable3_7
   \   0000007A   0x....             LDR.N    R0,??DataTable3_3
   \   0000007C   0x.... 0x....      BL       appendPrintf
     62          	}
     63          
     64          	if (remainingSize(&logging) > 100) {
   \                     ??scAddData_6:
   \   00000080   0x....             LDR.N    R0,??DataTable3_3
   \   00000082   0x.... 0x....      BL       remainingSize
   \   00000086   0x2865             CMP      R0,#+101
   \   00000088   0xD30F             BCC.N    ??scAddData_7
     65          		appendPrintf(&logging, "%f|%f|", angle, value);
   \   0000008A   0xEE18 0x0A90      VMOV     R0,S17
   \   0000008E   0x.... 0x....      BL       __aeabi_f2d
   \   00000092   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000096   0xEE18 0x0A10      VMOV     R0,S16
   \   0000009A   0x.... 0x....      BL       __aeabi_f2d
   \   0000009E   0x0002             MOVS     R2,R0
   \   000000A0   0x000B             MOVS     R3,R1
   \   000000A2   0x....             LDR.N    R1,??DataTable3_8
   \   000000A4   0x....             LDR.N    R0,??DataTable3_3
   \   000000A6   0x.... 0x....      BL       appendPrintf
     66          	}
     67          }
   \                     ??scAddData_7:
   \                     ??scAddData_0:
   \   000000AA   0xB002             ADD      SP,SP,#+8
   \   000000AC   0xECBD 0x8B02      VPOP     {D8}
   \   000000B0   0xBD01             POP      {R0,PC}          ;; return
     68          

   \                                 In section .text, align 2, keep-with-next
     69          static void setSensorChartFrequency(int value) {
     70          	engineConfiguration->sensorChartFrequency = value;
   \                     _Z23setSensorChartFrequencyi:
   \   00000000   0x....             LDR.N    R1,??DataTable3_5
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xF8C1 0x0214      STR      R0,[R1, #+532]
     71          }
   \   00000008   0x4770             BX       LR               ;; return
     72          

   \                                 In section .text, align 2, keep-with-next
     73          void initSensorChart(void) {
   \                     _Z15initSensorChartv:
   \   00000000   0xB580             PUSH     {R7,LR}
     74          	addConsoleActionI("set_sensor_chart_freq", setSensorChartFrequency);
   \   00000002   0x....             LDR.N    R1,??DataTable3_9
   \   00000004   0x....             LDR.N    R0,??DataTable3_10
   \   00000006   0x.... 0x....      BL       addConsoleActionI
     75          
     76          	initialized = true;
   \   0000000A   0x....             LDR.N    R0,??DataTable3_4
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x6001             STR      R1,[R0, #+0]
     77          }
   \   00000010   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x2C 0x00          DC8      ",",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     LOGGING_BUFFER

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     `?<Constant "analog chart">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     logging

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     initialized

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     engineConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     pendingData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     `?<Constant "analog_chart%s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     `?<Constant "%f|%f|">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     _Z23setSensorChartFrequencyi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x........         DC32     `?<Constant "set_sensor_chart_freq">`

   \                                 In section .init_array, align 4, keep-with-next, root
   \   00000000   0x........         DC32    RELOC_ARM_TARGET1 __sti__routine

   \                                 In section .rodata, align 2
   \   00000000   0x2C 0x00          DC8 ","

   \                                 In section .rodata, align 4
   \                     `?<Constant "analog_chart%s">`:
   \   00000000   0x61 0x6E          DC8 "analog_chart%s"
   \              0x61 0x6C    
   \              0x6F 0x67    
   \              0x5F 0x63    
   \              0x68 0x61    
   \              0x72 0x74    
   \              0x25 0x73    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "%f|%f|">`:
   \   00000000   0x25 0x66          DC8 "%f|%f|"
   \              0x7C 0x25    
   \              0x66 0x7C    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "set_sensor_chart_freq">`:
   \   00000000   0x73 0x65          DC8 "set_sensor_chart_freq"
   \              0x74 0x5F    
   \              0x73 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x5F 0x63    
   \              0x68 0x61    
   \              0x72 0x74    
   \              0x5F 0x66    
   \              0x72 0x65    
   \              0x71 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "analog chart">`:
   \   00000000   0x61 0x6E          DC8 "analog chart"
   \              0x61 0x6C    
   \              0x6F 0x67    
   \              0x20 0x63    
   \              0x68 0x61    
   \              0x72 0x74    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
     78          
     79          #endif /* EFI_ANALOG_CHART */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   __sti__routine()
         8   -> Logging::Logging(char const *, char *, int)
       8   initSensorChart()
         8   -> addConsoleActionI
      24   scAddData(float, float)
        24   -> __aeabi_f2d
        24   -> appendPrintf
        24   -> getFullLog()
        24   -> getRevolutionCounter()
        24   -> remainingSize
        24   -> resetLogging
        24   -> scheduleLogging
       0   setSensorChartFrequency(int)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "%f|%f|">
       2  ?<Constant ",">
      16  ?<Constant "analog chart">
      16  ?<Constant "analog_chart%s">
      24  ?<Constant "set_sensor_chart_freq">
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
    5000  LOGGING_BUFFER
      18  __sti__routine()
      18  initSensorChart()
       4  initialized
      60  logging
       4  pendingData
     178  scAddData(float, float)
      10  setSensorChartFrequency(int)
       4  -- Other

 
 5 068 bytes in section .bss
     4 bytes in section .init_array
    66 bytes in section .rodata
   268 bytes in section .text
 
   272 bytes of CODE  memory
    66 bytes of CONST memory
 5 068 bytes of DATA  memory

Errors: none
Warnings: 1
