###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:14 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\alte #
#                       rnatorController.cpp                                  #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\alte #
#                       rnatorController.cpp -lCN                             #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\  #
#                       -lA F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Li #
#                       st\ -o F:\stuff\rusefi_sourceforge\firmware\iar\Debug #
#                       \Obj\ --no_cse --no_unroll --no_inline                #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\a #
#                       lternatorController.lst                               #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\al #
#                       ternatorController.o                                  #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\alternatorController.cpp
      1          /**
      2           * @file    alternatorController.cpp
      3           * @brief   alternator controller - turn alternator off if you do not really need it
      4           *
      5           * @date Apr 6, 2014
      6           * @author Dmitry Sidin
      7           * @author Andrey Belomutskiy, (c) 2012-2015
      8           */
      9          
     10          #include "main.h"
     11          #include "engine.h"
     12          #include "rpm_calculator.h"
     13          #include "pwm_generator.h"
     14          #include "alternatorController.h"
     15          #include "pin_repository.h"
     16          #include "voltage.h"
     17          #include "pid.h"
     18          
     19          EXTERN_ENGINE
     20          ;
     21          

   \                                 In section .bss, align 4
     22          static Logging *logger;
   \                     logger:
   \   00000000                      DS8 4
     23          
     24          #define ALTERNATOR_VALVE_PWM_FREQUENCY 300
     25          

   \                                 In section .text, align 4, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine:
   \   00000000   0xB580             PUSH     {R7,LR}
     26          static SimplePwm alternatorControl;
   \   00000002   0x....             LDR.N    R0,??DataTable7_2
   \   00000004   0x.... 0x....      BL       _ZN9SimplePwmC1Ev
     27          static OutputPin alternatorPin;
   \   00000008   0x....             LDR.N    R0,??DataTable7_3
   \   0000000A   0x.... 0x....      BL       _ZN9OutputPinC1Ev
     28          static Pid altPid(10, 0, 0, 1, 90);
   \   0000000E   0xED9F 0x....      VLDR.W   S4,??DataTable4  ;; 0x42b40000
   \   00000012   0xEEF7 0x1A00      VMOV.F32 S3,#1.0
   \   00000016   0xED9F 0x....      VLDR.W   S2,??DataTable5  ;; 0x0
   \   0000001A   0xEDDF 0x....      VLDR.W   S1,??DataTable5  ;; 0x0
   \   0000001E   0xEEB2 0x0A04      VMOV.F32 S0,#10.0
   \   00000022   0x....             LDR.N    R0,??DataTable7_4
   \   00000024   0x.... 0x....      BL       _ZN3PidC1Efffff
   \   00000028   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 8
   \                     alternatorControl:
   \   00000000                      DS8 112

   \                                 In section .bss, align 4
   \                     alternatorPin:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
   \                     altPid:
   \   00000000                      DS8 28
     29          

   \                                 In section .bss, align 8
     30          static THD_WORKING_AREA(alternatorControlThreadStack, UTILITY_THREAD_STACK_SIZE);
   \                     alternatorControlThreadStack:
   \   00000000                      DS8 712
     31          

   \                                 In section .bss, align 4
     32          static float currentAltDuty;
   \                     currentAltDuty:
   \   00000000                      DS8 4
     33          

   \                                 In section .text, align 4, keep-with-next
     34          static msg_t AltCtrlThread(int param) {
   \                     _Z13AltCtrlThreadi:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B06      VPUSH    {D8-D10}
   \   00000006   0xB08A             SUB      SP,SP,#+40
   \   00000008   0x0004             MOVS     R4,R0
     35                  UNUSED(param);
     36          	chRegSetThreadName("AlternatorController");
   \   0000000A   0x....             LDR.N    R0,??DataTable7_5
   \   0000000C   0x6980             LDR      R0,[R0, #+24]
   \   0000000E   0x....             LDR.N    R1,??DataTable7_6
   \   00000010   0x6181             STR      R1,[R0, #+24]
     37          	while (true) {
     38          		chThdSleepMilliseconds(engineConfiguration->alternatorDT);
   \                     ??AltCtrlThread_0:
   \   00000012   0x....             LDR.N    R0,??DataTable7_7
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF8D0 0x0874      LDR      R0,[R0, #+2164]
   \   0000001A   0xF44F 0x717A      MOV      R1,#+1000
   \   0000001E   0x4348             MULS     R0,R1,R0
   \   00000020   0x1E40             SUBS     R0,R0,#+1
   \   00000022   0xF44F 0x717A      MOV      R1,#+1000
   \   00000026   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000002A   0x1C40             ADDS     R0,R0,#+1
   \   0000002C   0x.... 0x....      BL       chThdSleep
     39          
     40          		currentAltDuty = engineConfiguration->alternatorOffset + altPid.getValue(engineConfiguration->targetVBatt, getVBatt(PASS_ENGINE_PARAMETER_F), 1);
   \   00000030   0x.... 0x....      BL       _Z8getVBattv
   \   00000034   0xEEF0 0x0A40      VMOV.F32 S1,S0
   \   00000038   0xEEB7 0x1A00      VMOV.F32 S2,#1.0
   \   0000003C   0x....             LDR.N    R0,??DataTable7_7
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0xF8D0 0x086C      LDR      R0,[R0, #+2156]
   \   00000044   0xEE00 0x0A10      VMOV     S0,R0
   \   00000048   0x....             LDR.N    R0,??DataTable7_4
   \   0000004A   0x.... 0x....      BL       _ZN3Pid8getValueEfff
   \   0000004E   0x....             LDR.N    R0,??DataTable7_7
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0xF8D0 0x0878      LDR      R0,[R0, #+2168]
   \   00000056   0xEE00 0x0A90      VMOV     S1,R0
   \   0000005A   0xEE30 0x0A80      VADD.F32 S0,S1,S0
   \   0000005E   0x....             LDR.N    R0,??DataTable7_8
   \   00000060   0xED80 0x0A00      VSTR     S0,[R0, #0]
     41          		if (boardConfiguration->isVerboseAlternator) {
   \   00000064   0x....             LDR.N    R0,??DataTable7_9
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF890 0x0180      LDRB     R0,[R0, #+384]
   \   0000006C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0x09C0             LSRS     R0,R0,#+7
   \   00000070   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD040             BEQ.N    ??AltCtrlThread_1
     42          			scheduleMsg(logger, "alt duty: %f/vbatt=%f/p=%f/i=%f/d=%f int=%f", currentAltDuty, getVBatt(PASS_ENGINE_PARAMETER_F),
     43          					altPid.getP(), altPid.getI(), altPid.getD(), altPid.getIntegration());
   \   00000076   0x....             LDR.N    R0,??DataTable7_4
   \   00000078   0x.... 0x....      BL       _ZN3Pid14getIntegrationEv
   \   0000007C   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   00000080   0x....             LDR.N    R0,??DataTable7_4
   \   00000082   0x.... 0x....      BL       _ZN3Pid4getDEv
   \   00000086   0xEEF0 0x8A40      VMOV.F32 S17,S0
   \   0000008A   0x....             LDR.N    R0,??DataTable7_4
   \   0000008C   0x.... 0x....      BL       _ZN3Pid4getIEv
   \   00000090   0xEEB0 0x9A40      VMOV.F32 S18,S0
   \   00000094   0x....             LDR.N    R0,??DataTable7_4
   \   00000096   0x.... 0x....      BL       _ZN3Pid4getPEv
   \   0000009A   0xEEF0 0x9A40      VMOV.F32 S19,S0
   \   0000009E   0x.... 0x....      BL       _Z8getVBattv
   \   000000A2   0xEEB0 0xAA40      VMOV.F32 S20,S0
   \   000000A6   0xEE18 0x0A10      VMOV     R0,S16
   \   000000AA   0x.... 0x....      BL       __aeabi_f2d
   \   000000AE   0xE9CD 0x0108      STRD     R0,R1,[SP, #+32]
   \   000000B2   0xEE18 0x0A90      VMOV     R0,S17
   \   000000B6   0x.... 0x....      BL       __aeabi_f2d
   \   000000BA   0xE9CD 0x0106      STRD     R0,R1,[SP, #+24]
   \   000000BE   0xEE19 0x0A10      VMOV     R0,S18
   \   000000C2   0x.... 0x....      BL       __aeabi_f2d
   \   000000C6   0xE9CD 0x0104      STRD     R0,R1,[SP, #+16]
   \   000000CA   0xEE19 0x0A90      VMOV     R0,S19
   \   000000CE   0x.... 0x....      BL       __aeabi_f2d
   \   000000D2   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000000D6   0xEE1A 0x0A10      VMOV     R0,S20
   \   000000DA   0x.... 0x....      BL       __aeabi_f2d
   \   000000DE   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000000E2   0x....             LDR.N    R0,??DataTable7_8
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0x.... 0x....      BL       __aeabi_f2d
   \   000000EA   0x0002             MOVS     R2,R0
   \   000000EC   0x000B             MOVS     R3,R1
   \   000000EE   0x....             LDR.N    R1,??DataTable7_10
   \   000000F0   0x....             LDR.N    R0,??DataTable7_11
   \   000000F2   0x6800             LDR      R0,[R0, #+0]
   \   000000F4   0x.... 0x....      BL       scheduleMsg
     44          		}
     45          
     46          		alternatorControl.setSimplePwmDutyCycle(currentAltDuty / 100);
   \                     ??AltCtrlThread_1:
   \   000000F8   0x....             LDR.N    R0,??DataTable7_8
   \   000000FA   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000000FE   0xEDDF 0x....      VLDR.W   S1,??DataTable6  ;; 0x42c80000
   \   00000102   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   00000106   0x....             LDR.N    R0,??DataTable7_2
   \   00000108   0x.... 0x....      BL       _ZN9SimplePwm21setSimplePwmDutyCycleEf
   \   0000010C   0xE781             B.N      ??AltCtrlThread_0
     47          	}
     48          #if defined __GNUC__
     49          	return -1;
     50          #endif
     51          }
     52          

   \                                 In section .text, align 4, keep-with-next
     53          static void applySettings(void) {
   \                     _Z13applySettingsv:
   \   00000000   0xB580             PUSH     {R7,LR}
     54          	altPid.updateFactors(engineConfiguration->alternatorControlPFactor, 0, 0);
   \   00000002   0xED9F 0x....      VLDR.W   S2,??DataTable5  ;; 0x0
   \   00000006   0xEDDF 0x....      VLDR.W   S1,??DataTable5  ;; 0x0
   \   0000000A   0x....             LDR.N    R0,??DataTable7_7
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0xF8D0 0x087C      LDR      R0,[R0, #+2172]
   \   00000012   0xEE00 0x0A10      VMOV     S0,R0
   \   00000016   0x....             LDR.N    R0,??DataTable7_4
   \   00000018   0x.... 0x....      BL       _ZN3Pid13updateFactorsEfff
     55          }
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return
     56          

   \                                 In section .text, align 2, keep-with-next
     57          void showAltInfo(void) {
   \                     _Z11showAltInfov:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xB084             SUB      SP,SP,#+16
     58          	scheduleMsg(logger, "alt=%s @%s t=%dms", boolToString(engineConfiguration->isAlternatorControlEnabled),
     59          			hwPortname(boardConfiguration->alternatorControlPin),
     60          			engineConfiguration->alternatorDT);
   \   00000008   0x....             LDR.N    R0,??DataTable7_9
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF8D0 0x00A8      LDR      R0,[R0, #+168]
   \   00000010   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   00000014   0x0004             MOVS     R4,R0
   \   00000016   0x....             LDR.N    R0,??DataTable7_7
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF890 0x05D9      LDRB     R0,[R0, #+1497]
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x0940             LSRS     R0,R0,#+5
   \   00000022   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000026   0x.... 0x....      BL       _Z12boolToStringb
   \   0000002A   0x....             LDR.N    R1,??DataTable7_7
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0xF8D1 0x1874      LDR      R1,[R1, #+2164]
   \   00000032   0x9100             STR      R1,[SP, #+0]
   \   00000034   0x0023             MOVS     R3,R4
   \   00000036   0x0002             MOVS     R2,R0
   \   00000038   0x....             LDR.N    R1,??DataTable7_12
   \   0000003A   0x....             LDR.N    R0,??DataTable7_11
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x.... 0x....      BL       scheduleMsg
     61          	scheduleMsg(logger, "p=%f/i=%f/d=%f offset=%f", engineConfiguration->alternatorControlPFactor,
     62          			0, 0, engineConfiguration->alternatorOffset); // todo: i & d
   \   00000042   0x....             LDR.N    R0,??DataTable7_7
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0xF8D0 0x0878      LDR      R0,[R0, #+2168]
   \   0000004A   0x.... 0x....      BL       __aeabi_f2d
   \   0000004E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x9001             STR      R0,[SP, #+4]
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x9000             STR      R0,[SP, #+0]
   \   0000005A   0x....             LDR.N    R0,??DataTable7_7
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0xF8D0 0x087C      LDR      R0,[R0, #+2172]
   \   00000062   0x.... 0x....      BL       __aeabi_f2d
   \   00000066   0x0002             MOVS     R2,R0
   \   00000068   0x000B             MOVS     R3,R1
   \   0000006A   0x....             LDR.N    R1,??DataTable7_13
   \   0000006C   0x....             LDR.N    R0,??DataTable7_11
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x.... 0x....      BL       scheduleMsg
     63          	scheduleMsg(logger, "vbatt=%f/duty=%f/target=%f", getVBatt(PASS_ENGINE_PARAMETER_F), currentAltDuty,
     64          			engineConfiguration->targetVBatt);
   \   00000074   0x.... 0x....      BL       _Z8getVBattv
   \   00000078   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   0000007C   0x....             LDR.N    R0,??DataTable7_7
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0xF8D0 0x086C      LDR      R0,[R0, #+2156]
   \   00000084   0x.... 0x....      BL       __aeabi_f2d
   \   00000088   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000008C   0x....             LDR.N    R0,??DataTable7_8
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
   \   00000090   0x.... 0x....      BL       __aeabi_f2d
   \   00000094   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000098   0xEE18 0x0A10      VMOV     R0,S16
   \   0000009C   0x.... 0x....      BL       __aeabi_f2d
   \   000000A0   0x0002             MOVS     R2,R0
   \   000000A2   0x000B             MOVS     R3,R1
   \   000000A4   0x....             LDR.N    R1,??DataTable7_14
   \   000000A6   0x....             LDR.N    R0,??DataTable7_11
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0x.... 0x....      BL       scheduleMsg
     65          }
   \   000000AE   0xB004             ADD      SP,SP,#+16
   \   000000B0   0xECBD 0x8B02      VPOP     {D8}
   \   000000B4   0xBD10             POP      {R4,PC}          ;; return
     66          

   \                                 In section .text, align 2, keep-with-next
     67          void setAltPFactor(float p) {
   \                     _Z13setAltPFactorf:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xEEB0 0x8A40      VMOV.F32 S16,S0
     68          	engineConfiguration->alternatorControlPFactor = p;
   \   0000000A   0x....             LDR.N    R0,??DataTable7_7
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0xF600 0x007C      ADDW     R0,R0,#+2172
   \   00000012   0xED80 0x8A00      VSTR     S16,[R0, #0]
     69          	scheduleMsg(logger, "setAltPid: %f", p);
   \   00000016   0xEE18 0x0A10      VMOV     R0,S16
   \   0000001A   0x.... 0x....      BL       __aeabi_f2d
   \   0000001E   0x0002             MOVS     R2,R0
   \   00000020   0x000B             MOVS     R3,R1
   \   00000022   0x....             LDR.N    R1,??DataTable7_15
   \   00000024   0x....             LDR.N    R0,??DataTable7_11
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x.... 0x....      BL       scheduleMsg
     70          	applySettings();
   \   0000002C   0x.... 0x....      BL       _Z13applySettingsv
     71          	showAltInfo();
   \   00000030   0x.... 0x....      BL       _Z11showAltInfov
     72          }
   \   00000034   0xECBD 0x8B02      VPOP     {D8}
   \   00000038   0xBD01             POP      {R0,PC}          ;; return
     73          

   \                                 In section .text, align 2, keep-with-next
     74          static void applyAlternatorPinState(PwmConfig *state, int stateIndex) {
   \                     _Z23applyAlternatorPinStateP9PwmConfigi:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     75          	efiAssertVoid(stateIndex < PWM_PHASE_MAX_COUNT, "invalid stateIndex");
   \   00000006   0x2DFC             CMP      R5,#+252
   \   00000008   0xDB03             BLT.N    ??applyAlternatorPinState_0
   \   0000000A   0x....             LDR.N    R0,??DataTable7_16
   \   0000000C   0x.... 0x....      BL       firmwareError
   \   00000010   0xE01A             B.N      ??applyAlternatorPinState_1
     76          	efiAssertVoid(state->multiWave.waveCount == 1, "invalid idle waveCount");
   \                     ??applyAlternatorPinState_0:
   \   00000012   0x68E0             LDR      R0,[R4, #+12]
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD003             BEQ.N    ??applyAlternatorPinState_2
   \   00000018   0x....             LDR.N    R0,??DataTable7_17
   \   0000001A   0x.... 0x....      BL       firmwareError
   \   0000001E   0xE013             B.N      ??applyAlternatorPinState_1
     77          	OutputPin *output = state->outputPins[0];
   \                     ??applyAlternatorPinState_2:
   \   00000020   0x6826             LDR      R6,[R4, #+0]
     78          	int value = state->multiWave.waves[0].pinStates[stateIndex];
   \   00000022   0x6920             LDR      R0,[R4, #+16]
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x562F             LDRSB    R7,[R5, R0]
     79          	if (!value || engineConfiguration->isAlternatorControlEnabled)
   \   00000028   0x2F00             CMP      R7,#+0
   \   0000002A   0xD009             BEQ.N    ??applyAlternatorPinState_3
   \   0000002C   0x....             LDR.N    R0,??DataTable7_7
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF890 0x05D9      LDRB     R0,[R0, #+1497]
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0x0940             LSRS     R0,R0,#+5
   \   00000038   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD003             BEQ.N    ??applyAlternatorPinState_4
     80          		output->setValue(value);
   \                     ??applyAlternatorPinState_3:
   \   00000040   0x0039             MOVS     R1,R7
   \   00000042   0x0030             MOVS     R0,R6
   \   00000044   0x.... 0x....      BL       _ZN9OutputPin8setValueEi
     81          }
   \                     ??applyAlternatorPinState_4:
   \                     ??applyAlternatorPinState_1:
   \   00000048   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     82          

   \                                 In section .text, align 2, keep-with-next
     83          void setDefaultAlternatorParameters(void) {
     84          	engineConfiguration->alternatorOffAboveTps = 120;
   \                     _Z30setDefaultAlternatorParametersv:
   \   00000000   0x....             LDR.N    R0,??DataTable7_7
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x....             LDR.N    R1,??DataTable7_18  ;; 0x42f00000
   \   00000006   0xF8C0 0x1870      STR      R1,[R0, #+2160]
     85          
     86          	boardConfiguration->alternatorControlPin = GPIO_UNASSIGNED;
   \   0000000A   0x....             LDR.N    R0,??DataTable7_9
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x2150             MOVS     R1,#+80
   \   00000010   0xF8C0 0x10A8      STR      R1,[R0, #+168]
     87          	boardConfiguration->alternatorControlPinMode = OM_DEFAULT;
   \   00000014   0x....             LDR.N    R0,??DataTable7_9
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0xF8C0 0x10AC      STR      R1,[R0, #+172]
     88          	engineConfiguration->targetVBatt = 14;
   \   0000001E   0x....             LDR.N    R0,??DataTable7_7
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x....             LDR.N    R1,??DataTable7_19  ;; 0x41600000
   \   00000024   0xF8C0 0x186C      STR      R1,[R0, #+2156]
     89          
     90          	engineConfiguration->alternatorOffset = 0;
   \   00000028   0x....             LDR.N    R0,??DataTable7_7
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0xF8C0 0x1878      STR      R1,[R0, #+2168]
     91          	engineConfiguration->alternatorControlPFactor = 30;
   \   00000032   0x....             LDR.N    R0,??DataTable7_7
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0x....             LDR.N    R1,??DataTable7_20  ;; 0x41f00000
   \   00000038   0xF8C0 0x187C      STR      R1,[R0, #+2172]
     92          	engineConfiguration->alternatorDT = 100;
   \   0000003C   0x....             LDR.N    R0,??DataTable7_7
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x2164             MOVS     R1,#+100
   \   00000042   0xF8C0 0x1874      STR      R1,[R0, #+2164]
     93          }
   \   00000046   0x4770             BX       LR               ;; return
     94          

   \                                 In section .text, align 4, keep-with-next
     95          void initAlternatorCtrl(Logging *sharedLogger) {
   \                     _Z18initAlternatorCtrlP7Logging:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
     96          	logger = sharedLogger;
   \   00000006   0x....             LDR.N    R0,??DataTable7_11
   \   00000008   0x6004             STR      R4,[R0, #+0]
     97          	addConsoleAction("altinfo", showAltInfo);
   \   0000000A   0x....             LDR.N    R1,??DataTable7_21
   \   0000000C   0x....             LDR.N    R0,??DataTable7_22
   \   0000000E   0x.... 0x....      BL       addConsoleAction
     98          	if (boardConfiguration->alternatorControlPin == GPIO_UNASSIGNED)
   \   00000012   0x....             LDR.N    R0,??DataTable7_9
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF8D0 0x00A8      LDR      R0,[R0, #+168]
   \   0000001A   0x2850             CMP      R0,#+80
   \   0000001C   0xD01D             BEQ.N    ??initAlternatorCtrl_0
     99          		return;
    100          
    101          	startSimplePwmExt(&alternatorControl, "Alternator control", boardConfiguration->alternatorControlPin,
    102          			&alternatorPin,
    103          			ALTERNATOR_VALVE_PWM_FREQUENCY, 0.1, applyAlternatorPinState);
   \                     ??initAlternatorCtrl_1:
   \   0000001E   0x....             LDR.N    R0,??DataTable7_23
   \   00000020   0x9000             STR      R0,[SP, #+0]
   \   00000022   0xEDDF 0x....      VLDR.W   S1,??DataTable7  ;; 0x3dcccccd
   \   00000026   0xED9F 0x....      VLDR.W   S0,??DataTable7_1  ;; 0x43960000
   \   0000002A   0x....             LDR.N    R3,??DataTable7_3
   \   0000002C   0x....             LDR.N    R0,??DataTable7_9
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF8D0 0x20A8      LDR      R2,[R0, #+168]
   \   00000034   0x....             LDR.N    R1,??DataTable7_24
   \   00000036   0x....             LDR.N    R0,??DataTable7_2
   \   00000038   0x.... 0x....      BL       _Z17startSimplePwmExtP9PwmConfigPKc11brain_pin_eP9OutputPinffPFvS0_iE
    104          	chThdCreateStatic(alternatorControlThreadStack, sizeof(alternatorControlThreadStack), LOWPRIO,
    105          			(tfunc_t) AltCtrlThread, NULL);
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x9000             STR      R0,[SP, #+0]
   \   00000040   0x....             LDR.N    R3,??DataTable7_25
   \   00000042   0x2202             MOVS     R2,#+2
   \   00000044   0xF44F 0x7132      MOV      R1,#+712
   \   00000048   0x....             LDR.N    R0,??DataTable7_26
   \   0000004A   0x.... 0x....      BL       chThdCreateStatic
    106          
    107          	addConsoleActionF("set_alt_p", setAltPFactor);
   \   0000004E   0x....             LDR.N    R1,??DataTable7_27
   \   00000050   0x....             LDR.N    R0,??DataTable7_28
   \   00000052   0x.... 0x....      BL       addConsoleActionF
    108          
    109          	applySettings();
   \   00000056   0x.... 0x....      BL       _Z13applySettingsv
    110          }
   \                     ??initAlternatorCtrl_0:
   \   0000005A   0xBD13             POP      {R0,R1,R4,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x42B40000         DC32     0x42b40000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x3DCCCCCD         DC32     0x3dcccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x43960000         DC32     0x43960000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     alternatorControl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     alternatorPin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     altPid

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     rlist

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     `?<Constant "AlternatorController">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     engineConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     currentAltDuty

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     boardConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x........         DC32     `?<Constant "alt duty: %f/vbatt=%f...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x........         DC32     logger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x........         DC32     `?<Constant "alt=%s @%s t=%dms">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0x........         DC32     `?<Constant "p=%f/i=%f/d=%f offset=%f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \   00000000   0x........         DC32     `?<Constant "vbatt=%f/duty=%f/targ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \   00000000   0x........         DC32     `?<Constant "setAltPid: %f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \   00000000   0x........         DC32     `?<Constant "invalid stateIndex">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_17:
   \   00000000   0x........         DC32     `?<Constant "invalid idle waveCount">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_18:
   \   00000000   0x42F00000         DC32     0x42f00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_19:
   \   00000000   0x41600000         DC32     0x41600000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_20:
   \   00000000   0x41F00000         DC32     0x41f00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_21:
   \   00000000   0x........         DC32     _Z11showAltInfov

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_22:
   \   00000000   0x........         DC32     `?<Constant "altinfo">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_23:
   \   00000000   0x........         DC32     _Z23applyAlternatorPinStateP9PwmConfigi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_24:
   \   00000000   0x........         DC32     `?<Constant "Alternator control">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_25:
   \   00000000   0x........         DC32     _Z13AltCtrlThreadi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_26:
   \   00000000   0x........         DC32     alternatorControlThreadStack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_27:
   \   00000000   0x........         DC32     _Z13setAltPFactorf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_28:
   \   00000000   0x........         DC32     `?<Constant "set_alt_p">`

   \                                 In section .init_array, align 4, keep-with-next, root
   \   00000000   0x........         DC32    RELOC_ARM_TARGET1 __sti__routine

   \                                 In section .rodata, align 4
   \                     `?<Constant "AlternatorController">`:
   \   00000000   0x41 0x6C          DC8 "AlternatorController"
   \              0x74 0x65    
   \              0x72 0x6E    
   \              0x61 0x74    
   \              0x6F 0x72    
   \              0x43 0x6F    
   \              0x6E 0x74    
   \              0x72 0x6F    
   \              0x6C 0x6C    
   \              0x65 0x72    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "alt duty: %f/vbatt=%f...">`:
   \   00000000   0x61 0x6C          DC8 "alt duty: %f/vbatt=%f/p=%f/i=%f/d=%f int=%f"
   \              0x74 0x20    
   \              0x64 0x75    
   \              0x74 0x79    
   \              0x3A 0x20    
   \              0x25 0x66    
   \              0x2F 0x76    
   \              0x62 0x61    
   \              0x74 0x74    
   \              0x3D 0x25    
   \              0x66 0x2F    
   \              0x70 0x3D    
   \              0x25 0x66    
   \              0x2F 0x69    
   \              0x3D 0x25    
   \              0x66 0x2F    
   \              0x64 0x3D    
   \              0x25 0x66    
   \              0x20 0x69    
   \              0x6E 0x74    
   \              0x3D 0x25    
   \              0x66 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "alt=%s @%s t=%dms">`:
   \   00000000   0x61 0x6C          DC8 "alt=%s @%s t=%dms"
   \              0x74 0x3D    
   \              0x25 0x73    
   \              0x20 0x40    
   \              0x25 0x73    
   \              0x20 0x74    
   \              0x3D 0x25    
   \              0x64 0x6D    
   \              0x73 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "p=%f/i=%f/d=%f offset=%f">`:
   \   00000000   0x70 0x3D          DC8 "p=%f/i=%f/d=%f offset=%f"
   \              0x25 0x66    
   \              0x2F 0x69    
   \              0x3D 0x25    
   \              0x66 0x2F    
   \              0x64 0x3D    
   \              0x25 0x66    
   \              0x20 0x6F    
   \              0x66 0x66    
   \              0x73 0x65    
   \              0x74 0x3D    
   \              0x25 0x66    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "vbatt=%f/duty=%f/targ...">`:
   \   00000000   0x76 0x62          DC8 "vbatt=%f/duty=%f/target=%f"
   \              0x61 0x74    
   \              0x74 0x3D    
   \              0x25 0x66    
   \              0x2F 0x64    
   \              0x75 0x74    
   \              0x79 0x3D    
   \              0x25 0x66    
   \              0x2F 0x74    
   \              0x61 0x72    
   \              0x67 0x65    
   \              0x74 0x3D    
   \              0x25 0x66    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "setAltPid: %f">`:
   \   00000000   0x73 0x65          DC8 "setAltPid: %f"
   \              0x74 0x41    
   \              0x6C 0x74    
   \              0x50 0x69    
   \              0x64 0x3A    
   \              0x20 0x25    
   \              0x66 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "invalid stateIndex">`:
   \   00000000   0x69 0x6E          DC8 "invalid stateIndex"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x65 0x49    
   \              0x6E 0x64    
   \              0x65 0x78    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "invalid idle waveCount">`:
   \   00000000   0x69 0x6E          DC8 "invalid idle waveCount"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x69 0x64    
   \              0x6C 0x65    
   \              0x20 0x77    
   \              0x61 0x76    
   \              0x65 0x43    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "altinfo">`:
   \   00000000   0x61 0x6C          DC8 "altinfo"
   \              0x74 0x69    
   \              0x6E 0x66    
   \              0x6F 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Alternator control">`:
   \   00000000   0x41 0x6C          DC8 "Alternator control"
   \              0x74 0x65    
   \              0x72 0x6E    
   \              0x61 0x74    
   \              0x6F 0x72    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "set_alt_p">`:
   \   00000000   0x73 0x65          DC8 "set_alt_p"
   \              0x74 0x5F    
   \              0x61 0x6C    
   \              0x74 0x5F    
   \              0x70 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      72   AltCtrlThread(int)
        72   -> Pid::getD()
        72   -> Pid::getI()
        72   -> Pid::getIntegration()
        72   -> Pid::getP()
        72   -> Pid::getValue(float, float, float)
        72   -> SimplePwm::setSimplePwmDutyCycle(float)
        72   -> __aeabi_f2d
        72   -> chThdSleep
        72   -> getVBatt()
        72   -> scheduleMsg
       8   __sti__routine()
         8   -> OutputPin::OutputPin()
         8   -> Pid::Pid(float, float, float, float, float)
         8   -> SimplePwm::SimplePwm()
      24   applyAlternatorPinState(PwmConfig *, int)
        24   -> OutputPin::setValue(int)
        24   -> firmwareError
       8   applySettings()
         8   -> Pid::updateFactors(float, float, float)
      16   initAlternatorCtrl(Logging *)
        16   -> addConsoleAction
        16   -> addConsoleActionF
        16   -> applySettings()
        16   -> chThdCreateStatic
        16   -> startSimplePwmExt(PwmConfig *, char const *, brain_pin_e, OutputPin *, float, float, pwm_gen_callback *)
      16   setAltPFactor(float)
        16   -> __aeabi_f2d
        16   -> applySettings()
        16   -> scheduleMsg
        16   -> showAltInfo()
       0   setDefaultAlternatorParameters()
      32   showAltInfo()
        32   -> __aeabi_f2d
        32   -> boolToString(bool)
        32   -> getVBatt()
        32   -> hwPortname(brain_pin_e)
        32   -> scheduleMsg


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?<Constant "Alternator control">
      24  ?<Constant "AlternatorController">
      44  ?<Constant "alt duty: %f/vbatt=%f...">
      20  ?<Constant "alt=%s @%s t=%dms">
       8  ?<Constant "altinfo">
      24  ?<Constant "invalid idle waveCount">
      20  ?<Constant "invalid stateIndex">
      28  ?<Constant "p=%f/i=%f/d=%f offset=%f">
      16  ?<Constant "setAltPid: %f">
      12  ?<Constant "set_alt_p">
      28  ?<Constant "vbatt=%f/duty=%f/targ...">
       4  ??DataTable4
       4  ??DataTable5
       4  ??DataTable6
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_19
       4  ??DataTable7_2
       4  ??DataTable7_20
       4  ??DataTable7_21
       4  ??DataTable7_22
       4  ??DataTable7_23
       4  ??DataTable7_24
       4  ??DataTable7_25
       4  ??DataTable7_26
       4  ??DataTable7_27
       4  ??DataTable7_28
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
     270  AltCtrlThread(int)
      42  __sti__routine()
      28  altPid
     112  alternatorControl
     712  alternatorControlThreadStack
      16  alternatorPin
      74  applyAlternatorPinState(PwmConfig *, int)
      30  applySettings()
       4  currentAltDuty
      92  initAlternatorCtrl(Logging *)
       4  logger
      58  setAltPFactor(float)
      72  setDefaultAlternatorParameters()
     182  showAltInfo()
       4  -- Other

 
 876 bytes in section .bss
   4 bytes in section .init_array
 244 bytes in section .rodata
 948 bytes in section .text
 
 952 bytes of CODE  memory
 244 bytes of CONST memory
 876 bytes of DATA  memory

Errors: none
Warnings: 1
