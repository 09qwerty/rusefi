###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:52 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\algo #
#                       \lcd_menu_tree.cpp                                    #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\algo #
#                       \lcd_menu_tree.cpp -lCN F:\stuff\rusefi_sourceforge\f #
#                       irmware\iar\Debug\List\ -lA                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\  #
#                       -o F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj #
#                       \ --no_cse --no_unroll --no_inline --no_code_motion   #
#                       --no_tbaa --no_clustering --no_scheduling --debug     #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\l #
#                       cd_menu_tree.lst                                      #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\lc #
#                       d_menu_tree.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\algo\lcd_menu_tree.cpp
      1          /**
      2           * @file	lcd_menu_tree.cpp
      3           *
      4           * @date Jan 6, 2015
      5           * @author Andrey Belomutskiy, (c) 2012-2015
      6           */
      7          
      8          #include "stddef.h"
      9          #include "lcd_menu_tree.h"
     10          #include "error_handling.h"
     11          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp MenuTree::subobject MenuTree(MenuItem *)
   \                     _ZN8MenuTreeC2EP8MenuItem:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN8MenuTreeC1EP8MenuItem
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     12          MenuTree::MenuTree(MenuItem *root) {
     13          	this->root = root;
   \                     _ZN8MenuTreeC1EP8MenuItem:
   \   00000000   0x6001             STR      R1,[R0, #+0]
     14          	current = NULL;
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x6082             STR      R2,[R0, #+8]
     15          	linesCount = 0;
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x6042             STR      R2,[R0, #+4]
     16          	topVisible = NULL;
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x60C2             STR      R2,[R0, #+12]
     17          }
   \   0000000E   0x4770             BX       LR               ;; return
     18          

   \                                 In section .text, align 2, keep-with-next
     19          void MenuTree::init(MenuItem *first, int linesCount) {
     20          	this->linesCount = linesCount;
   \                     _ZN8MenuTree4initEP8MenuItemi:
   \   00000000   0x6042             STR      R2,[R0, #+4]
     21          	current = first;
   \   00000002   0x6081             STR      R1,[R0, #+8]
     22          	topVisible = first;
   \   00000004   0x60C1             STR      R1,[R0, #+12]
     23          }
   \   00000006   0x4770             BX       LR               ;; return
     24          

   \                                 In section .text, align 2, keep-with-next
     25          void MenuTree::enterSubMenu(void) {
   \                     _ZN8MenuTree12enterSubMenuEv:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     26          	if (current->firstChild != NULL) {
   \   00000004   0x68A0             LDR      R0,[R4, #+8]
   \   00000006   0x6940             LDR      R0,[R0, #+20]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD004             BEQ.N    ??enterSubMenu_0
     27          		current = topVisible = current->firstChild;
   \   0000000C   0x68A0             LDR      R0,[R4, #+8]
   \   0000000E   0x6940             LDR      R0,[R0, #+20]
   \   00000010   0x60E0             STR      R0,[R4, #+12]
   \   00000012   0x60A0             STR      R0,[R4, #+8]
   \   00000014   0xE006             B.N      ??enterSubMenu_1
     28          	} else if (current->callback != NULL) {
   \                     ??enterSubMenu_0:
   \   00000016   0x68A0             LDR      R0,[R4, #+8]
   \   00000018   0x6A00             LDR      R0,[R0, #+32]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD002             BEQ.N    ??enterSubMenu_1
     29          		VoidCallback cb = current->callback;
   \   0000001E   0x68A0             LDR      R0,[R4, #+8]
   \   00000020   0x6A05             LDR      R5,[R0, #+32]
     30          		cb();
   \   00000022   0x47A8             BLX      R5
     31          	}
     32          }
   \                     ??enterSubMenu_1:
   \   00000024   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     33          

   \                                 In section .text, align 2, keep-with-next
     34          void MenuTree::back(void) {
     35          	if (current->parent == root)
   \                     _ZN8MenuTree4backEv:
   \   00000000   0x6881             LDR      R1,[R0, #+8]
   \   00000002   0x68C9             LDR      R1,[R1, #+12]
   \   00000004   0x6802             LDR      R2,[R0, #+0]
   \   00000006   0x4291             CMP      R1,R2
   \   00000008   0xD004             BEQ.N    ??back_0
     36          		return; // we are on the top level already
     37          	current = topVisible = current->parent->topOfTheList;
   \                     ??back_1:
   \   0000000A   0x6881             LDR      R1,[R0, #+8]
   \   0000000C   0x68C9             LDR      R1,[R1, #+12]
   \   0000000E   0x6909             LDR      R1,[R1, #+16]
   \   00000010   0x60C1             STR      R1,[R0, #+12]
   \   00000012   0x6081             STR      R1,[R0, #+8]
     38          }
   \                     ??back_0:
   \   00000014   0x4770             BX       LR               ;; return
     39          

   \                                 In section .text, align 2, keep-with-next
     40          void MenuTree::nextItem(void) {
     41          	if (current->next == NULL) {
   \                     _ZN8MenuTree8nextItemEv:
   \   00000000   0x6881             LDR      R1,[R0, #+8]
   \   00000002   0x69C9             LDR      R1,[R1, #+28]
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD104             BNE.N    ??nextItem_0
     42          		current = topVisible = current->topOfTheList;
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x6909             LDR      R1,[R1, #+16]
   \   0000000C   0x60C1             STR      R1,[R0, #+12]
   \   0000000E   0x6081             STR      R1,[R0, #+8]
     43          		return;
   \   00000010   0xE00D             B.N      ??nextItem_1
     44          	}
     45          	current = current->next;
   \                     ??nextItem_0:
   \   00000012   0x6881             LDR      R1,[R0, #+8]
   \   00000014   0x69C9             LDR      R1,[R1, #+28]
   \   00000016   0x6081             STR      R1,[R0, #+8]
     46          	if (current->index - topVisible->index == linesCount)
   \   00000018   0x6881             LDR      R1,[R0, #+8]
   \   0000001A   0x6889             LDR      R1,[R1, #+8]
   \   0000001C   0x68C2             LDR      R2,[R0, #+12]
   \   0000001E   0x6892             LDR      R2,[R2, #+8]
   \   00000020   0x1A89             SUBS     R1,R1,R2
   \   00000022   0x6842             LDR      R2,[R0, #+4]
   \   00000024   0x4291             CMP      R1,R2
   \   00000026   0xD102             BNE.N    ??nextItem_2
     47          		topVisible = topVisible->next;
   \   00000028   0x68C1             LDR      R1,[R0, #+12]
   \   0000002A   0x69C9             LDR      R1,[R1, #+28]
   \   0000002C   0x60C1             STR      R1,[R0, #+12]
     48          }
   \                     ??nextItem_2:
   \                     ??nextItem_1:
   \   0000002E   0x4770             BX       LR               ;; return
     49          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp MenuItem::subobject MenuItem(MenuItem *, char const *, void (*)())
   \                     _ZN8MenuItemC2EPS_PKcPFvvE:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN8MenuItemC1EPS_PKcPFvvE
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     50          MenuItem::MenuItem(MenuItem * parent, const char *text, VoidCallback callback) {
   \                     _ZN8MenuItemC1EPS_PKcPFvvE:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
     51          	baseConstructor(parent, LL_STRING, text, callback);
   \   0000000A   0x9700             STR      R7,[SP, #+0]
   \   0000000C   0x0033             MOVS     R3,R6
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0x0029             MOVS     R1,R5
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       _ZN8MenuItem15baseConstructorEPS_10lcd_line_ePKcPFvvE
     52          }
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     53          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp MenuItem::subobject MenuItem(MenuItem *, char const *)
   \                     _ZN8MenuItemC2EPS_PKc:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN8MenuItemC1EPS_PKc
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     54          MenuItem::MenuItem(MenuItem * parent, const char *text) {
   \                     _ZN8MenuItemC1EPS_PKc:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
     55          	baseConstructor(parent, LL_STRING, text, NULL);
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   \   0000000E   0x0033             MOVS     R3,R6
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0x0029             MOVS     R1,R5
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x.... 0x....      BL       _ZN8MenuItem15baseConstructorEPS_10lcd_line_ePKcPFvvE
     56          }
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
     57          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp MenuItem::subobject MenuItem(MenuItem *, lcd_line_e)
   \                     _ZN8MenuItemC2EPS_10lcd_line_e:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       _ZN8MenuItemC1EPS_10lcd_line_e
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     58          MenuItem::MenuItem(MenuItem * parent, lcd_line_e lcdLine)  {
   \                     _ZN8MenuItemC1EPS_10lcd_line_e:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
     59          	baseConstructor(parent, lcdLine, NULL, NULL);
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   \   0000000E   0x2300             MOVS     R3,#+0
   \   00000010   0x0032             MOVS     R2,R6
   \   00000012   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000014   0x0029             MOVS     R1,R5
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x.... 0x....      BL       _ZN8MenuItem15baseConstructorEPS_10lcd_line_ePKcPFvvE
     60          }
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
     61          

   \                                 In section .text, align 2, keep-with-next
     62          void MenuItem::baseConstructor(MenuItem * parent, lcd_line_e lcdLine, const char *text, VoidCallback callback) {
   \                     _ZN8MenuItem15baseConstructorEPS_10lcd_line_ePKcPFvvE:
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0x9C02             LDR      R4,[SP, #+8]
     63          	this->parent = parent;
   \   00000004   0x60C1             STR      R1,[R0, #+12]
     64          	this->lcdLine = lcdLine;
   \   00000006   0x7102             STRB     R2,[R0, #+4]
     65          	this->text = text;
   \   00000008   0x6003             STR      R3,[R0, #+0]
     66          	this->callback = callback;
   \   0000000A   0x6204             STR      R4,[R0, #+32]
     67          
     68          	firstChild = NULL;
   \   0000000C   0x2500             MOVS     R5,#+0
   \   0000000E   0x6145             STR      R5,[R0, #+20]
     69          	lastChild = NULL;
   \   00000010   0x2500             MOVS     R5,#+0
   \   00000012   0x6185             STR      R5,[R0, #+24]
     70          	topOfTheList = NULL;
   \   00000014   0x2500             MOVS     R5,#+0
   \   00000016   0x6105             STR      R5,[R0, #+16]
     71          	next = NULL;
   \   00000018   0x2500             MOVS     R5,#+0
   \   0000001A   0x61C5             STR      R5,[R0, #+28]
     72          	index = 0;
   \   0000001C   0x2500             MOVS     R5,#+0
   \   0000001E   0x6085             STR      R5,[R0, #+8]
     73          
     74          	// root element has NULL parent
     75          	if (parent != NULL) {
   \   00000020   0x2900             CMP      R1,#+0
   \   00000022   0xD011             BEQ.N    ??baseConstructor_0
     76          		if (parent->firstChild == NULL) {
   \   00000024   0x694D             LDR      R5,[R1, #+20]
   \   00000026   0x2D00             CMP      R5,#+0
   \   00000028   0xD101             BNE.N    ??baseConstructor_1
     77          			topOfTheList = this;
   \   0000002A   0x6100             STR      R0,[R0, #+16]
     78          			parent->firstChild = this;
   \   0000002C   0x6148             STR      R0,[R1, #+20]
     79          		}
     80          		if (parent->lastChild != NULL) {
   \                     ??baseConstructor_1:
   \   0000002E   0x698D             LDR      R5,[R1, #+24]
   \   00000030   0x2D00             CMP      R5,#+0
   \   00000032   0xD008             BEQ.N    ??baseConstructor_2
     81          			index = parent->lastChild->index + 1;
   \   00000034   0x698D             LDR      R5,[R1, #+24]
   \   00000036   0x68AD             LDR      R5,[R5, #+8]
   \   00000038   0x1C6D             ADDS     R5,R5,#+1
   \   0000003A   0x6085             STR      R5,[R0, #+8]
     82          			topOfTheList = parent->lastChild->topOfTheList;
   \   0000003C   0x698D             LDR      R5,[R1, #+24]
   \   0000003E   0x692D             LDR      R5,[R5, #+16]
   \   00000040   0x6105             STR      R5,[R0, #+16]
     83          			parent->lastChild->next = this;
   \   00000042   0x698D             LDR      R5,[R1, #+24]
   \   00000044   0x61E8             STR      R0,[R5, #+28]
     84          		}
     85          		parent->lastChild = this;
   \                     ??baseConstructor_2:
   \   00000046   0x6188             STR      R0,[R1, #+24]
     86          	}
     87          }
   \                     ??baseConstructor_0:
   \   00000048   0xBC30             POP      {R4,R5}
   \   0000004A   0x4770             BX       LR               ;; return

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   MenuItem::MenuItem(MenuItem *, char const *)
        24   -> MenuItem::baseConstructor(MenuItem *, lcd_line_e, char const *, void (*)())
      24   MenuItem::MenuItem(MenuItem *, char const *, void (*)())
        24   -> MenuItem::baseConstructor(MenuItem *, lcd_line_e, char const *, void (*)())
      24   MenuItem::MenuItem(MenuItem *, lcd_line_e)
        24   -> MenuItem::baseConstructor(MenuItem *, lcd_line_e, char const *, void (*)())
       8   MenuItem::baseConstructor(MenuItem *, lcd_line_e, char const *, void (*)())
       8   MenuItem::subobject MenuItem(MenuItem *, char const *)
         8   -> MenuItem::MenuItem(MenuItem *, char const *)
       8   MenuItem::subobject MenuItem(MenuItem *, char const *, void (*)())
         8   -> MenuItem::MenuItem(MenuItem *, char const *, void (*)())
       8   MenuItem::subobject MenuItem(MenuItem *, lcd_line_e)
         8   -> MenuItem::MenuItem(MenuItem *, lcd_line_e)
       0   MenuTree::MenuTree(MenuItem *)
       0   MenuTree::back()
      16   MenuTree::enterSubMenu()
        16   -- Indirect call
       0   MenuTree::init(MenuItem *, int)
       0   MenuTree::nextItem()
       8   MenuTree::subobject MenuTree(MenuItem *)
         8   -> MenuTree::MenuTree(MenuItem *)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      30  MenuItem::MenuItem(MenuItem *, char const *)
      28  MenuItem::MenuItem(MenuItem *, char const *, void (*)())
      32  MenuItem::MenuItem(MenuItem *, lcd_line_e)
      76  MenuItem::baseConstructor(MenuItem *, lcd_line_e, char const *, void (*)())
      12  MenuItem::subobject MenuItem(MenuItem *, char const *)
      12  MenuItem::subobject MenuItem(MenuItem *, char const *, void (*)())
      14  MenuItem::subobject MenuItem(MenuItem *, lcd_line_e)
      16  MenuTree::MenuTree(MenuItem *)
      22  MenuTree::back()
      38  MenuTree::enterSubMenu()
       8  MenuTree::init(MenuItem *, int)
      48  MenuTree::nextItem()
      12  MenuTree::subobject MenuTree(MenuItem *)

 
 348 bytes in section .text
 
 348 bytes of CODE memory

Errors: none
Warnings: none
