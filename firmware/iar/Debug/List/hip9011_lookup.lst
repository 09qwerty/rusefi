###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:35 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\sens #
#                       ors\hip9011_lookup.cpp                                #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\sens #
#                       ors\hip9011_lookup.cpp -lCN                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\  #
#                       -lA F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Li #
#                       st\ -o F:\stuff\rusefi_sourceforge\firmware\iar\Debug #
#                       \Obj\ --no_cse --no_unroll --no_inline                #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\h #
#                       ip9011_lookup.lst                                     #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\hi #
#                       p9011_lookup.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\sensors\hip9011_lookup.cpp
      1          /**
      2           * @file	hip9011_lookup.cpp
      3           *
      4           * @date Jan 4, 2015
      5           * @author Andrey Belomutskiy, (c) 2012-2015
      6           */
      7          
      8          #include "hip9011_lookup.h"
      9          #include "interpolation.h"
     10          
     11          /**
     12           * These are HIP9011 magic values - integrator time constants in uS
     13           */

   \                                 In section .rodata, align 4
     14          const int integratorValues[INT_LOOKUP_SIZE] = { 40, 45, 50, 55, 60, 65, 70, 75, 80, 90, 100, 110, 120, 130, 140, 150,
   \                     integratorValues:
   \   00000000   0x00000028         DC32 40, 45, 50, 55, 60, 65, 70, 75, 80, 90, 100, 110, 120, 130, 140
   \              0x0000002D   
   \              0x00000032   
   \              0x00000037   
   \              0x0000003C   
   \              0x00000041   
   \              0x00000046   
   \              0x0000004B   
   \              0x00000050   
   \              0x0000005A   
   \              0x00000064   
   \              0x0000006E   
   \              0x00000078   
   \              0x00000082   
   \              0x0000008C   
   \   0000003C   0x00000096         DC32 150, 160, 180, 200, 220, 240, 260, 280, 300, 320, 360, 400, 440
   \              0x000000A0   
   \              0x000000B4   
   \              0x000000C8   
   \              0x000000DC   
   \              0x000000F0   
   \              0x00000104   
   \              0x00000118   
   \              0x0000012C   
   \              0x00000140   
   \              0x00000168   
   \              0x00000190   
   \              0x000001B8   
   \   00000070   0x000001E0         DC32 480, 520, 560, 600
   \              0x00000208   
   \              0x00000230   
   \              0x00000258   
     15          		160, 180, 200, 220, 240, 260, 280, 300, 320, 360, 400, 440, 480, 520, 560, 600 };
     16          

   \                                 In section .rodata, align 4
     17          const float gainLookupInReverseOrder[GAIN_LOOKUP_SIZE] = {
   \                     gainLookupInReverseOrder:
   \   00000000   0x3DE353F8         DC32 3DE353F8H, 3DF1A9FCH, 3E000000H, 3E041893H, 3E083127H, 3E0D4FDFH
   \              0x3DF1A9FC   
   \              0x3E000000   
   \              0x3E041893   
   \              0x3E083127   
   \              0x3E0D4FDF   
   \   00000018   0x3E126E98         DC32 3E126E98H, 3E178D50H, 3E1DB22DH, 3E23D70AH, 3E2B020CH, 3E322D0EH
   \              0x3E178D50   
   \              0x3E1DB22D   
   \              0x3E23D70A   
   \              0x3E2B020C   
   \              0x3E322D0E   
   \   00000030   0x3E3A5E35         DC32 3E3A5E35H, 3E428F5CH, 3E4CCCCDH, 3E581062H, 3E6353F8H, 3E71A9FCH
   \              0x3E428F5C   
   \              0x3E4CCCCD   
   \              0x3E581062   
   \              0x3E6353F8   
   \              0x3E71A9FC   
   \   00000048   0x3E800000         DC32 3E800000H, 3E841893H, 3E88B439H, 3E8D4FDFH, 3E926E98H, 3E978D50H
   \              0x3E841893   
   \              0x3E88B439   
   \              0x3E8D4FDF   
   \              0x3E926E98   
   \              0x3E978D50   
   \   00000060   0x3E9DB22D         DC32 3E9DB22DH, 3EA3D70AH, 3EAA7EFAH, 3EB22D0EH, 3EBA5E35H, 3EC3126FH
   \              0x3EA3D70A   
   \              0x3EAA7EFA   
   \              0x3EB22D0E   
   \              0x3EBA5E35   
   \              0x3EC3126F   
   \   00000078   0x3ECCCCCD         DC32 3ECCCCCDH, 3ED78D50H, 3EE353F8H, 3EF126E9H, 3F000000H, 3F0C49BAH
   \              0x3ED78D50   
   \              0x3EE353F8   
   \              0x3EF126E9   
   \              0x3F000000   
   \              0x3F0C49BA   
   \   00000090   0x3F1126E9         DC32 3F1126E9H, 3F160419H, 3F1B645AH, 3F2147AEH, 3F276C8BH, 3F2E147BH
   \              0x3F160419   
   \              0x3F1B645A   
   \              0x3F2147AE   
   \              0x3F276C8B   
   \              0x3F2E147B   
   \   000000A8   0x3F353F7D         DC32 3F353F7DH, 3F3D2F1BH, 3F45E354H, 3F4F5C29H, 3F59999AH, 3F651EB8H
   \              0x3F3D2F1B   
   \              0x3F45E354   
   \              0x3F4F5C29   
   \              0x3F59999A   
   \              0x3F651EB8   
   \   000000C0   0x3F71A9FC         DC32 3F71A9FCH, 3F800000H, 3F881062H, 3F924DD3H, 3F97AE14H, 3F9D9168H
   \              0x3F800000   
   \              0x3F881062   
   \              0x3F924DD3   
   \              0x3F97AE14   
   \              0x3F9D9168   
   \   000000D8   0x3FA3D70A         DC32 3FA3D70AH, 3FAA9FBEH, 3FB20C4AH, 3FBA3D71H, 3FC2F1AAH, 3FCCCCCDH
   \              0x3FAA9FBE   
   \              0x3FB20C4A   
   \              0x3FBA3D71   
   \              0x3FC2F1AA   
   \              0x3FCCCCCD   
   \   000000F0   0x3FD78D50         DC32 3FD78D50H, 3FE39581H, 3FF0E560H, 40000000H
   \              0x3FE39581   
   \              0x3FF0E560   
   \              0x40000000   
     18          /* 00 */0.111, 0.118, 0.125, 0.129, 0.133, 0.138, 0.143, 0.148,
     19          /* 08 */0.154, 0.160, 0.167, 0.174, 0.182, 0.190, 0.200, 0.211,
     20          /* 16 */0.222, 0.236, 0.250, 0.258, 0.267, 0.276, 0.286, 0.296,
     21          /* 24 */0.308, 0.320, 0.333, 0.348, 0.364, 0.381, 0.400, 0.421,
     22          /* 32 */0.444, 0.471, 0.500, 0.548, 0.567, 0.586, 0.607, 0.630,
     23          /* 40 */0.654, 0.680, 0.708, 0.739, 0.773, 0.810, 0.850, 0.895,
     24          /* 48 */0.944, 1.000, 1.063, 1.143, 1.185, 1.231, 1.280, 1.333,
     25          /* 56 */1.391, 1.455, 1.523, 1.600, 1.684, 1.778, 1.882, 2.0 };
     26          

   \                                 In section .rodata, align 4
     27          const float bandFreqLookup[BAND_LOOKUP_SIZE] = { 1.22, 1.26, 1.31, 1.35, 1.4, 1.45, 1.51, 1.57, 1.63, 1.71, 1.78,
   \                     bandFreqLookup:
   \   00000000   0x3F9C28F6         DC32 3F9C28F6H, 3FA147AEH, 3FA7AE14H, 3FACCCCDH, 3FB33333H, 3FB9999AH
   \              0x3FA147AE   
   \              0x3FA7AE14   
   \              0x3FACCCCD   
   \              0x3FB33333   
   \              0x3FB9999A   
   \   00000018   0x3FC147AE         DC32 3FC147AEH, 3FC8F5C3H, 3FD0A3D7H, 3FDAE148H, 3FE3D70AH, 3FEF5C29H
   \              0x3FC8F5C3   
   \              0x3FD0A3D7   
   \              0x3FDAE148   
   \              0x3FE3D70A   
   \              0x3FEF5C29   
   \   00000030   0x3FFAE148         DC32 3FFAE148H, 40047AE1H, 400B851FH, 4013D70AH, 401D70A4H, 40228F5CH
   \              0x40047AE1   
   \              0x400B851F   
   \              0x4013D70A   
   \              0x401D70A4   
   \              0x40228F5C   
   \   00000048   0x4027AE14         DC32 4027AE14H, 402D70A4H, 4033D70AH, 403AE148H, 4041EB85H, 4049999AH
   \              0x402D70A4   
   \              0x4033D70A   
   \              0x403AE148   
   \              0x4041EB85   
   \              0x4049999A   
   \   00000060   0x4051EB85         DC32 4051EB85H, 405B851FH, 4065C28FH, 4070A3D7H, 407CCCCDH, 40851EB8H
   \              0x405B851F   
   \              0x4065C28F   
   \              0x4070A3D7   
   \              0x407CCCCD   
   \              0x40851EB8   
   \   00000078   0x408C7AE1         DC32 408C7AE1H, 40951EB8H, 409E6666H, 40A3D70AH, 40A947AEH, 40AF5C29H
   \              0x40951EB8   
   \              0x409E6666   
   \              0x40A3D70A   
   \              0x40A947AE   
   \              0x40AF5C29   
   \   00000090   0x40B5C28F         DC32 40B5C28FH, 40BCCCCDH, 40C3D70AH, 40CBD70AH, 40D47AE1H, 40DE147BH
   \              0x40BCCCCD   
   \              0x40C3D70A   
   \              0x40CBD70A   
   \              0x40D47AE1   
   \              0x40DE147B   
   \   000000A8   0x40E8A3D7         DC32 40E8A3D7H, 40F428F6H, 410051ECH, 41075C29H, 410F3333H, 41180000H
   \              0x40F428F6   
   \              0x410051EC   
   \              0x41075C29   
   \              0x410F3333   
   \              0x41180000   
   \   000000C0   0x4121EB85         DC32 4121EB85H, 41275C29H, 412D47AEH, 4133851FH, 413A6666H, 4141999AH
   \              0x41275C29   
   \              0x412D47AE   
   \              0x4133851F   
   \              0x413A6666   
   \              0x4141999A   
   \   000000D8   0x4149999A         DC32 4149999AH, 41523D71H, 415B851FH, 4165C28FH, 41711EB8H, 417D70A4H
   \              0x41523D71   
   \              0x415B851F   
   \              0x4165C28F   
   \              0x41711EB8   
   \              0x417D70A4   
   \   000000F0   0x4185AE14         DC32 4185AE14H, 418D5C29H, 4196147BH, 419FD70AH
   \              0x418D5C29   
   \              0x4196147B   
   \              0x419FD70A   
     28          		1.87, 1.96, 2.07, 2.18, 2.31, 2.46, 2.54, 2.62, 2.71, 2.81, 2.92, 3.03, 3.15, 3.28, 3.43, 3.59, 3.76, 3.95,
     29          		4.16, 4.39, 4.66, 4.95, 5.12, 5.29, 5.48, 5.68, 5.9, 6.12, 6.37, 6.64, 6.94, 7.27, 7.63, 8.02, 8.46, 8.95, 9.5,
     30          		10.12, 10.46, 10.83, 11.22, 11.65, 12.1, 12.6, 13.14, 13.72, 14.36, 15.07, 15.84, 16.71, 17.67, 18.76, 19.98 };
     31          
     32          

   \                                 In section .bss, align 4
     33          float rpmLookup[INT_LOOKUP_SIZE];
   \                     rpmLookup:
   \   00000000                      DS8 128
     34          
     35          /**
     36           *
     37           * We know the set of possible integration times, we know the knock detection window width
     38           */

   \                                 In section .text, align 2, keep-with-next
     39          void prepareHip9011RpmLookup(float angleWindowWidth) {
   \                     _Z23prepareHip9011RpmLookupf:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xEEB0 0x8A40      VMOV.F32 S16,S0
     40          	/**
     41          	 * out binary search method needs increasing order thus the reverse order here
     42          	 */
     43          	for (int i = 0; i < INT_LOOKUP_SIZE; i++) {
   \   0000000A   0x2400             MOVS     R4,#+0
   \                     ??prepareHip9011RpmLookup_0:
   \   0000000C   0x2C20             CMP      R4,#+32
   \   0000000E   0xDA0F             BGE.N    ??prepareHip9011RpmLookup_1
     44          		rpmLookup[i] = getRpmByAngleWindowAndTimeUs(integratorValues[INT_LOOKUP_SIZE - i - 1], angleWindowWidth);
   \   00000010   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000014   0x4260             RSBS     R0,R4,#+0
   \   00000016   0x....             LDR.N    R1,??DataTable4_3
   \   00000018   0xEB11 0x0080      ADDS     R0,R1,R0, LSL #+2
   \   0000001C   0x6FC0             LDR      R0,[R0, #+124]
   \   0000001E   0x.... 0x....      BL       _Z28getRpmByAngleWindowAndTimeUsif
   \   00000022   0x....             LDR.N    R0,??DataTable4_4
   \   00000024   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000028   0xED80 0x0A00      VSTR     S0,[R0, #0]
     45          	}
   \   0000002C   0x1C64             ADDS     R4,R4,#+1
   \   0000002E   0xE7ED             B.N      ??prepareHip9011RpmLookup_0
     46          }
   \                     ??prepareHip9011RpmLookup_1:
   \   00000030   0xECBD 0x8B02      VPOP     {D8}
   \   00000034   0xBD10             POP      {R4,PC}          ;; return
     47          
     48          
     49          /**
     50           * 'TC is typically TINT/(2*Pi*VOUT)'
     51           * Knock Sensor Training TPIC8101, page 24
     52           */

   \                                 In section .text, align 4, keep-with-next
     53          float getRpmByAngleWindowAndTimeUs(int timeUs, float angleWindowWidth) {
   \                     _Z28getRpmByAngleWindowAndTimeUsif:
   \   00000000   0xEEF0 0x0A40      VMOV.F32 S1,S0
     54          	/**
     55          	 * TINT = TC * 2 * PI * VOUT
     56          	 */
     57          	float integrationTimeUs = timeUs * 2 * PIF * DESIRED_OUTPUT_VALUE;
   \   00000004   0x0041             LSLS     R1,R0,#+1
   \   00000006   0xEE00 0x1A10      VMOV     S0,R1
   \   0000000A   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000000E   0xED9F 0x....      VLDR.W   S2,??DataTable4  ;; 0x40490fd0
   \   00000012   0xEE20 0x0A01      VMUL.F32 S0,S0,S2
   \   00000016   0xEEB1 0x1A04      VMOV.F32 S2,#5.0
   \   0000001A   0xEE20 0x0A01      VMUL.F32 S0,S0,S2
     58          	/**
     59          	 * rpm = 60 seconds / time
     60          	 * '60000000' because revolutions per MINUTE in uS conversion
     61          	 */
     62          	float windowWidthMult = angleWindowWidth / 360.0f;
   \   0000001E   0xED9F 0x....      VLDR.W   S2,??DataTable4_1  ;; 0x43b40000
   \   00000022   0xEE80 0x1A81      VDIV.F32 S2,S1,S2
     63          	return 60000000.0f / integrationTimeUs * windowWidthMult;
   \   00000026   0xEDDF 0x....      VLDR.W   S3,??DataTable4_2  ;; 0x4c64e1c0
   \   0000002A   0xEE81 0x0A80      VDIV.F32 S0,S3,S0
   \   0000002E   0xEE20 0x0A01      VMUL.F32 S0,S0,S2
   \   00000032   0x4770             BX       LR               ;; return
     64          }
     65          

   \                                 In section .text, align 2, keep-with-next
     66          int getIntegrationIndexByRpm(float rpm) {
   \                     _Z24getIntegrationIndexByRpmf:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xEEB0 0x8A40      VMOV.F32 S16,S0
     67          	int i = findIndex(rpmLookup, INT_LOOKUP_SIZE, (rpm));
   \   0000000A   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   0000000E   0x2120             MOVS     R1,#+32
   \   00000010   0x....             LDR.N    R0,??DataTable4_4
   \   00000012   0x.... 0x....      BL       _Z9findIndexPKfif
     68          	return i == -1 ? INT_LOOKUP_SIZE - 1 : INT_LOOKUP_SIZE - i - 1;
   \   00000016   0xF110 0x0F01      CMN      R0,#+1
   \   0000001A   0xD101             BNE.N    ??getIntegrationIndexByRpm_0
   \   0000001C   0x201F             MOVS     R0,#+31
   \   0000001E   0xE001             B.N      ??getIntegrationIndexByRpm_1
   \                     ??getIntegrationIndexByRpm_0:
   \   00000020   0xF1D0 0x001F      RSBS     R0,R0,#+31
   \                     ??getIntegrationIndexByRpm_1:
   \   00000024   0xECBD 0x8B02      VPOP     {D8}
   \   00000028   0xBD02             POP      {R1,PC}          ;; return
     69          }
     70          

   \                                 In section .text, align 2, keep-with-next
     71          int getHip9011GainIndex(float gain) {
   \                     _Z19getHip9011GainIndexf:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xEEB0 0x8A40      VMOV.F32 S16,S0
     72          	int i = GAIN_INDEX(gain);
   \   0000000A   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   0000000E   0x2140             MOVS     R1,#+64
   \   00000010   0x....             LDR.N    R0,??DataTable4_5
   \   00000012   0x.... 0x....      BL       _Z9findIndexPKfif
   \   00000016   0xF1D0 0x003F      RSBS     R0,R0,#+63
     73          	// GAIN_LOOKUP_SIZE is returned for index which is too low
     74          	return i == GAIN_LOOKUP_SIZE ? GAIN_LOOKUP_SIZE - 1 : i;
   \   0000001A   0x2840             CMP      R0,#+64
   \   0000001C   0xD101             BNE.N    ??getHip9011GainIndex_0
   \   0000001E   0x203F             MOVS     R0,#+63
   \   00000020   0xE7FF             B.N      ??getHip9011GainIndex_1
   \                     ??getHip9011GainIndex_0:
   \                     ??getHip9011GainIndex_1:
   \   00000022   0xECBD 0x8B02      VPOP     {D8}
   \   00000026   0xBD02             POP      {R1,PC}          ;; return
     75          }
     76          
     77          /**
     78           * @param frequency knock frequencey, in kHz
     79           */

   \                                 In section .text, align 2, keep-with-next
     80          int getHip9011BandIndex(float frequency) {
   \                     _Z19getHip9011BandIndexf:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xEEB0 0x8A40      VMOV.F32 S16,S0
     81          	return findIndex(bandFreqLookup, BAND_LOOKUP_SIZE, frequency);
   \   0000000A   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   0000000E   0x2140             MOVS     R1,#+64
   \   00000010   0x....             LDR.N    R0,??DataTable4_6
   \   00000012   0x.... 0x....      BL       _Z9findIndexPKfif
   \   00000016   0xECBD 0x8B02      VPOP     {D8}
   \   0000001A   0xBD02             POP      {R1,PC}          ;; return
     82          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x40490FD0         DC32     0x40490fd0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x43B40000         DC32     0x43b40000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x4C64E1C0         DC32     0x4c64e1c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     integratorValues

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     rpmLookup

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     gainLookupInReverseOrder

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     bandFreqLookup

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   getHip9011BandIndex(float)
        16   -> findIndex(float const *, int, float)
      16   getHip9011GainIndex(float)
        16   -> findIndex(float const *, int, float)
      16   getIntegrationIndexByRpm(float)
        16   -> findIndex(float const *, int, float)
       0   getRpmByAngleWindowAndTimeUs(int, float)
      16   prepareHip9011RpmLookup(float)
        16   -> getRpmByAngleWindowAndTimeUs(int, float)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
     256  bandFreqLookup
     256  gainLookupInReverseOrder
      28  getHip9011BandIndex(float)
      40  getHip9011GainIndex(float)
      42  getIntegrationIndexByRpm(float)
      52  getRpmByAngleWindowAndTimeUs(int, float)
     128  integratorValues
      54  prepareHip9011RpmLookup(float)
     128  rpmLookup

 
 128 bytes in section .bss
 640 bytes in section .rodata
 244 bytes in section .text
 
 244 bytes of CODE  memory
 640 bytes of CONST memory
 128 bytes of DATA  memory

Errors: none
Warnings: none
