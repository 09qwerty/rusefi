###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:08:42 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\util\efilib2.cpp #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\util\efilib2.cpp #
#                        -lCN F:\stuff\rusefi_sourceforge\firmware\iar\Debug\ #
#                       List\ -lA F:\stuff\rusefi_sourceforge\firmware\iar\De #
#                       bug\List\ -o F:\stuff\rusefi_sourceforge\firmware\iar #
#                       \Debug\Obj\ --no_cse --no_unroll --no_inline          #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\e #
#                       filib2.lst                                            #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\ef #
#                       ilib2.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\util\efilib2.cpp
      1          /**
      2           * @file	efilib2.cpp
      3           *
      4           * @date Apr 14, 2014
      5           * @author Andrey Belomutskiy, (c) 2012-2015
      6           */
      7          
      8          #include "efilib2.h"
      9          
     10          /**
     11           * The main use-case of this class is to keep track of a 64-bit global number of CPU ticks from reset.
     12           *
     13           * stm32f4 hardware has a 32-bit Cycle Count Register (CYCCNT), which is incremented with every CPU cycle.
     14           * With 32 bits and 168MHz speed this counter overflows every 4B/168M = 23 seconds. The job of this class is to
     15           * keep track of the current CYCCNT value, detect these overflows, and provide a nice,
     16           * clean 64 bit global cycle counter.
     17           *
     18           * In order for this to function, it's your responsibility to invoke offer() method at least once a second.
     19           */

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp Overflow64Counter::subobject Overflow64Counter()
   \                     _ZN17Overflow64CounterC2Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN17Overflow64CounterC1Ev
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     20          Overflow64Counter::Overflow64Counter() {
     21          	state.highBits = 0;
   \                     _ZN17Overflow64CounterC1Ev:
   \   00000000   0x2200             MOVS     R2,#+0
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0xE9C0 0x2300      STRD     R2,R3,[R0, #+0]
     22          	state.lowBits = 0;
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x6081             STR      R1,[R0, #+8]
     23          }
   \   0000000C   0x4770             BX       LR               ;; return
     24          
     25          /**
     26           * in order to have atomic writes this should be invoked within a critical section
     27           */

   \                                 In section .text, align 2, keep-with-next
     28          void updateAndSet(State64 *state, uint32_t value) {
     29          	if (value < state->lowBits) {
   \                     _Z12updateAndSetP7State64j:
   \   00000000   0x6882             LDR      R2,[R0, #+8]
   \   00000002   0x4291             CMP      R1,R2
   \   00000004   0xD206             BCS.N    ??updateAndSet_0
     30          		// new value less than previous value means there was an overflow in that 32 bit counter
     31          		state->highBits += 0x100000000LL;
   \   00000006   0xE9D0 0x2300      LDRD     R2,R3,[R0, #+0]
   \   0000000A   0x1C12             ADDS     R2,R2,#+0
   \   0000000C   0xF153 0x0301      ADCS     R3,R3,#+1
   \   00000010   0xE9C0 0x2300      STRD     R2,R3,[R0, #+0]
     32          	}
     33          	state->lowBits = value;
   \                     ??updateAndSet_0:
   \   00000014   0x6081             STR      R1,[R0, #+8]
     34          }
   \   00000016   0x4770             BX       LR               ;; return
     35          
     36          #if EFI_UNIT_TEST
     37          efitime_t Overflow64Counter::update(uint32_t value) {
     38          	updateAndSet(&state, value);
     39          	return state.highBits + state.lowBits;
     40          }
     41          #endif
     42          
     43          // todo: make this a macro? always inline?

   \                                 In section .text, align 2, keep-with-next
     44          efitime_t Overflow64Counter::get() {
   \                     _ZN17Overflow64Counter3getEv:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4681             MOV      R9,R0
     45          #if EFI_PROD_CODE
     46          	bool alreadyLocked = lockAnyContext();
   \   00000006   0x.... 0x....      BL       lockAnyContext
   \   0000000A   0x4680             MOV      R8,R0
     47          	efitime_t localH = state.highBits;
   \   0000000C   0xE9D9 0x4500      LDRD     R4,R5,[R9, #+0]
     48          	uint32_t localLow = state.lowBits;
   \   00000010   0xF8D9 0xB008      LDR      R11,[R9, #+8]
     49          
     50          	uint32_t value = GET_TIMESTAMP();
   \   00000014   0x....             LDR.N    R0,??DataTable0  ;; 0xe0001004
   \   00000016   0xF8D0 0xA000      LDR      R10,[R0, #+0]
     51          
     52          	if (value < localLow) {
   \   0000001A   0x45DA             CMP      R10,R11
   \   0000001C   0xD202             BCS.N    ??get_0
     53          		// new value less than previous value means there was an overflow in that 32 bit counter
     54          		localH += 0x100000000LL;
   \   0000001E   0x1C24             ADDS     R4,R4,#+0
   \   00000020   0xF155 0x0501      ADCS     R5,R5,#+1
     55          	}
     56          
     57          	efitime_t result = localH + value;
   \                     ??get_0:
   \   00000024   0x4650             MOV      R0,R10
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x1826             ADDS     R6,R4,R0
   \   0000002A   0xEB55 0x0701      ADCS     R7,R5,R1
     58          
     59          	if (!alreadyLocked) {
   \   0000002E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000032   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000036   0xD101             BNE.N    ??get_1
     60          		unlockAnyContext();
   \   00000038   0x.... 0x....      BL       unlockAnyContext
     61          	}
     62          	return result;
   \                     ??get_1:
   \   0000003C   0x0030             MOVS     R0,R6
   \   0000003E   0x0039             MOVS     R1,R7
   \   00000040   0xE8BD 0x8FF4      POP      {R2,R4-R11,PC}   ;; return
     63          #else
     64          
     65          	/**
     66          	 * this method is lock-free and thread-safe, that's because the 'update' method
     67          	 * is atomic with a critical zone requirement.
     68          	 *
     69          	 * http://stackoverflow.com/questions/5162673/how-to-read-two-32bit-counters-as-a-64bit-integer-without-race-condition
     70          	 */
     71          	efitime_t localH;
     72          	uint32_t localLow;
     73          	int counter = 0;
     74          	while (true) {
     75          		localH = state.highBits;
     76          		localLow = state.lowBits;
     77          		efitime_t localH2 = state.highBits;
     78          		if (localH == localH2)
     79          			break;
     80          #if EFI_PROD_CODE || defined(__DOXYGEN__)
     81          		if (counter++ == 10000)
     82          			chDbgPanic("lock-free frozen");
     83          #endif /* EFI_PROD_CODE */
     84          	}
     85          	/**
     86          	 * We need to take current counter after making a local 64 bit snapshot
     87          	 */
     88          	uint32_t value = GET_TIMESTAMP();
     89          
     90          	if (value < localLow) {
     91          		// new value less than previous value means there was an overflow in that 32 bit counter
     92          		localH += 0x100000000LL;
     93          	}
     94          
     95          	return localH + value;
     96          #endif
     97          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0xE0001004         DC32     0xe0001004

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Overflow64Counter::Overflow64Counter()
      40   Overflow64Counter::get()
        40   -> lockAnyContext
        40   -> unlockAnyContext
       8   Overflow64Counter::subobject Overflow64Counter()
         8   -> Overflow64Counter::Overflow64Counter()
       0   updateAndSet(State64 *, uint32_t)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
      14  Overflow64Counter::Overflow64Counter()
      68  Overflow64Counter::get()
      12  Overflow64Counter::subobject Overflow64Counter()
      24  updateAndSet(State64 *, uint32_t)

 
 122 bytes in section .text
 
 122 bytes of CODE memory

Errors: none
Warnings: none
