###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:08:42 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\s #
#                       rc\pal.c                                              #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\s #
#                       rc\pal.c -lCN F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\Debug\List\ -lA F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\Debug\List\ -o F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\Debug\Obj\ --no_cse --no_unroll --no_inline  #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\ -On #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\p #
#                       al.lst                                                #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\pa #
#                       l.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\src\pal.c
      1          /*
      2              ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
      3                           2011,2012,2013 Giovanni Di Sirio.
      4          
      5              This file is part of ChibiOS/RT.
      6          
      7              ChibiOS/RT is free software; you can redistribute it and/or modify
      8              it under the terms of the GNU General Public License as published by
      9              the Free Software Foundation; either version 3 of the License, or
     10              (at your option) any later version.
     11          
     12              ChibiOS/RT is distributed in the hope that it will be useful,
     13              but WITHOUT ANY WARRANTY; without even the implied warranty of
     14              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     15              GNU General Public License for more details.
     16          
     17              You should have received a copy of the GNU General Public License
     18              along with this program.  If not, see <http://www.gnu.org/licenses/>.
     19          
     20                                                ---
     21          
     22              A special exception to the GPL can be applied should you wish to distribute
     23              a combined work that includes ChibiOS/RT, without being obliged to provide
     24              the source code for any proprietary components. See the file exception.txt
     25              for full details of how and when the exception can be applied.
     26          */
     27          
     28          /**
     29           * @file    pal.c
     30           * @brief   I/O Ports Abstraction Layer code.
     31           *
     32           * @addtogroup PAL
     33           * @{
     34           */
     35          
     36          #include "ch.h"
     37          #include "hal.h"
     38          
     39          #if HAL_USE_PAL || defined(__DOXYGEN__)
     40          
     41          /*===========================================================================*/
     42          /* Driver local definitions.                                                 */
     43          /*===========================================================================*/
     44          
     45          /*===========================================================================*/
     46          /* Driver exported variables.                                                */
     47          /*===========================================================================*/
     48          
     49          /*===========================================================================*/
     50          /* Driver local variables and types.                                         */
     51          /*===========================================================================*/
     52          
     53          /*===========================================================================*/
     54          /* Driver local functions.                                                   */
     55          /*===========================================================================*/
     56          
     57          /*===========================================================================*/
     58          /* Driver exported functions.                                                */
     59          /*===========================================================================*/
     60          
     61          /**
     62           * @brief   Read from an I/O bus.
     63           * @note    The operation is not guaranteed to be atomic on all the
     64           *          architectures, for atomicity and/or portability reasons you may
     65           *          need to enclose port I/O operations between @p chSysLock() and
     66           *          @p chSysUnlock().
     67           * @note    The function internally uses the @p palReadGroup() macro. The use
     68           *          of this function is preferred when you value code size, readability
     69           *          and error checking over speed.
     70           * @note    The function can be called from any context.
     71           *
     72           * @param[in] bus       the I/O bus, pointer to a @p IOBus structure
     73           * @return              The bus logical states.
     74           *
     75           * @special
     76           */

   \                                 In section .text, align 2, keep-with-next
     77          ioportmask_t palReadBus(IOBus *bus) {
   \                     palReadBus:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     78          
     79            chDbgCheck((bus != NULL) && (bus->offset < PAL_IOPORTS_WIDTH),
     80                       "palReadBus");
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD002             BEQ.N    ??palReadBus_0
   \   00000008   0x68A0             LDR      R0,[R4, #+8]
   \   0000000A   0x2810             CMP      R0,#+16
   \   0000000C   0xD304             BCC.N    ??palReadBus_1
   \                     ??palReadBus_0:
   \   0000000E   0x2250             MOVS     R2,#+80
   \   00000010   0x....             LDR.N    R1,??DataTable2
   \   00000012   0x....             LDR.N    R0,??DataTable2_1
   \   00000014   0x.... 0x....      BL       chDbgPanic3
     81          
     82            return palReadGroup(bus->portid, bus->mask, bus->offset);
   \                     ??palReadBus_1:
   \   00000018   0x6820             LDR      R0,[R4, #+0]
   \   0000001A   0x6900             LDR      R0,[R0, #+16]
   \   0000001C   0x68A1             LDR      R1,[R4, #+8]
   \   0000001E   0x40C8             LSRS     R0,R0,R1
   \   00000020   0x6861             LDR      R1,[R4, #+4]
   \   00000022   0x4008             ANDS     R0,R1,R0
   \   00000024   0xBD10             POP      {R4,PC}          ;; return
     83          }
     84          
     85          /**
     86           * @brief   Write to an I/O bus.
     87           * @note    The operation is not guaranteed to be atomic on all the
     88           *          architectures, for atomicity and/or portability reasons you may
     89           *          need to enclose port I/O operations between @p chSysLock() and
     90           *          @p chSysUnlock().
     91           * @note    The default implementation is non atomic and not necessarily
     92           *          optimal. Low level drivers may  optimize the function by using
     93           *          specific hardware or coding.
     94           * @note    The function can be called from any context.
     95           *
     96           * @param[in] bus       the I/O bus, pointer to a @p IOBus structure
     97           * @param[in] bits      the bits to be written on the I/O bus. Values exceeding
     98           *                      the bus width are masked so most significant bits are
     99           *                      lost.
    100           *
    101           * @special
    102           */

   \                                 In section .text, align 2, keep-with-next
    103          void palWriteBus(IOBus *bus, ioportmask_t bits) {
   \                     palWriteBus:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    104          
    105            chDbgCheck((bus != NULL) && (bus->offset < PAL_IOPORTS_WIDTH),
    106                       "palWriteBus");
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD002             BEQ.N    ??palWriteBus_0
   \   0000000A   0x68A0             LDR      R0,[R4, #+8]
   \   0000000C   0x2810             CMP      R0,#+16
   \   0000000E   0xD304             BCC.N    ??palWriteBus_1
   \                     ??palWriteBus_0:
   \   00000010   0x226A             MOVS     R2,#+106
   \   00000012   0x....             LDR.N    R1,??DataTable2
   \   00000014   0x....             LDR.N    R0,??DataTable2_2
   \   00000016   0x.... 0x....      BL       chDbgPanic3
    107          
    108            palWriteGroup(bus->portid, bus->mask, bus->offset, bits);
   \                     ??palWriteBus_1:
   \   0000001A   0x6860             LDR      R0,[R4, #+4]
   \   0000001C   0x43A8             BICS     R0,R0,R5
   \   0000001E   0x68A1             LDR      R1,[R4, #+8]
   \   00000020   0x3110             ADDS     R1,R1,#+16
   \   00000022   0x4088             LSLS     R0,R0,R1
   \   00000024   0x6861             LDR      R1,[R4, #+4]
   \   00000026   0x4029             ANDS     R1,R1,R5
   \   00000028   0x68A2             LDR      R2,[R4, #+8]
   \   0000002A   0x4091             LSLS     R1,R1,R2
   \   0000002C   0x4308             ORRS     R0,R1,R0
   \   0000002E   0x6821             LDR      R1,[R4, #+0]
   \   00000030   0x6188             STR      R0,[R1, #+24]
    109          }
   \   00000032   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    110          
    111          /**
    112           * @brief   Programs a bus with the specified mode.
    113           * @note    The operation is not guaranteed to be atomic on all the
    114           *          architectures, for atomicity and/or portability reasons you may
    115           *          need to enclose port I/O operations between @p chSysLock() and
    116           *          @p chSysUnlock().
    117           * @note    The default implementation is non atomic and not necessarily
    118           *          optimal. Low level drivers may  optimize the function by using
    119           *          specific hardware or coding.
    120           * @note    The function can be called from any context.
    121           *
    122           * @param[in] bus       the I/O bus, pointer to a @p IOBus structure
    123           * @param[in] mode      the mode
    124           *
    125           * @special
    126           */

   \                                 In section .text, align 2, keep-with-next
    127          void palSetBusMode(IOBus *bus, iomode_t mode) {
   \                     palSetBusMode:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    128          
    129            chDbgCheck((bus != NULL) && (bus->offset < PAL_IOPORTS_WIDTH),
    130                       "palSetBusMode");
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD002             BEQ.N    ??palSetBusMode_0
   \   0000000A   0x68A0             LDR      R0,[R4, #+8]
   \   0000000C   0x2810             CMP      R0,#+16
   \   0000000E   0xD304             BCC.N    ??palSetBusMode_1
   \                     ??palSetBusMode_0:
   \   00000010   0x2282             MOVS     R2,#+130
   \   00000012   0x....             LDR.N    R1,??DataTable2
   \   00000014   0x....             LDR.N    R0,??DataTable2_3
   \   00000016   0x.... 0x....      BL       chDbgPanic3
    131          
    132            palSetGroupMode(bus->portid, bus->mask, bus->offset, mode);
   \                     ??palSetBusMode_1:
   \   0000001A   0x002A             MOVS     R2,R5
   \   0000001C   0x6860             LDR      R0,[R4, #+4]
   \   0000001E   0x68A1             LDR      R1,[R4, #+8]
   \   00000020   0xFA10 0xF101      LSLS     R1,R0,R1
   \   00000024   0x6820             LDR      R0,[R4, #+0]
   \   00000026   0x.... 0x....      BL       _pal_lld_setgroupmode
    133          }
   \   0000002A   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     `?<Constant "F:\\\\stuff\\\\rusefi_sourc...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     `?<Constant "\\"palReadBus\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     `?<Constant "\\"palWriteBus\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     `?<Constant "\\"palSetBusMode\\"()">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"palReadBus\\"()">`:
   \   00000000   0x22 0x70          DC8 "\"palReadBus\"()"
   \              0x61 0x6C    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x42 0x75    
   \              0x73 0x22    
   \              0x28 0x29    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "F:\\\\stuff\\\\rusefi_sourc...">`:
   \   00000000   0x46 0x3A          DC8 46H, 3AH, 5CH, 73H, 74H, 75H, 66H, 66H
   \              0x5C 0x73    
   \              0x74 0x75    
   \              0x66 0x66    
   \   00000008   0x5C 0x72          DC8 5CH, 72H, 75H, 73H, 65H, 66H, 69H, 5FH
   \              0x75 0x73    
   \              0x65 0x66    
   \              0x69 0x5F    
   \   00000010   0x73 0x6F          DC8 73H, 6FH, 75H, 72H, 63H, 65H, 66H, 6FH
   \              0x75 0x72    
   \              0x63 0x65    
   \              0x66 0x6F    
   \   00000018   0x72 0x67          DC8 72H, 67H, 65H, 5CH, 66H, 69H, 72H, 6DH
   \              0x65 0x5C    
   \              0x66 0x69    
   \              0x72 0x6D    
   \   00000020   0x77 0x61          DC8 77H, 61H, 72H, 65H, 5CH, 63H, 68H, 69H
   \              0x72 0x65    
   \              0x5C 0x63    
   \              0x68 0x69    
   \   00000028   0x62 0x69          DC8 62H, 69H, 6FH, 73H, 5CH, 6FH, 73H, 5CH
   \              0x6F 0x73    
   \              0x5C 0x6F    
   \              0x73 0x5C    
   \   00000030   0x68 0x61          DC8 68H, 61H, 6CH, 5CH, 73H, 72H, 63H, 5CH
   \              0x6C 0x5C    
   \              0x73 0x72    
   \              0x63 0x5C    
   \   00000038   0x70 0x61          DC8 70H, 61H, 6CH, 2EH, 63H, 0
   \              0x6C 0x2E    
   \              0x63 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"palWriteBus\\"()">`:
   \   00000000   0x22 0x70          DC8 "\"palWriteBus\"()"
   \              0x61 0x6C    
   \              0x57 0x72    
   \              0x69 0x74    
   \              0x65 0x42    
   \              0x75 0x73    
   \              0x22 0x28    
   \              0x29 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"palSetBusMode\\"()">`:
   \   00000000   0x22 0x70          DC8 "\"palSetBusMode\"()"
   \              0x61 0x6C    
   \              0x53 0x65    
   \              0x74 0x42    
   \              0x75 0x73    
   \              0x4D 0x6F    
   \              0x64 0x65    
   \              0x22 0x28    
   \              0x29 0x00    
   \   00000012   0x00 0x00          DC8 0, 0
    134          
    135          #endif /* HAL_USE_PAL */
    136          
    137          /** @} */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   palReadBus
         8   -> chDbgPanic3
      16   palSetBusMode
        16   -> _pal_lld_setgroupmode
        16   -> chDbgPanic3
      16   palWriteBus
        16   -> chDbgPanic3


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      64  ?<Constant "F:\\stuff\\rusefi_sourc...">
      16  ?<Constant "\"palReadBus\"()">
      20  ?<Constant "\"palSetBusMode\"()">
      16  ?<Constant "\"palWriteBus\"()">
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
      38  palReadBus
      44  palSetBusMode
      52  palWriteBus

 
 116 bytes in section .rodata
 150 bytes in section .text
 
 150 bytes of CODE  memory
 116 bytes of CONST memory

Errors: none
Warnings: none
