###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:04 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\hw_layer\stepper #
#                       .cpp                                                  #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\hw_layer\stepper #
#                       .cpp -lCN F:\stuff\rusefi_sourceforge\firmware\iar\De #
#                       bug\List\ -lA F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\Debug\List\ -o F:\stuff\rusefi_sourceforge\firmware #
#                       \iar\Debug\Obj\ --no_cse --no_unroll --no_inline      #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\s #
#                       tepper.lst                                            #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\st #
#                       epper.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\hw_layer\stepper.cpp
      1          /**
      2           * @file	stepper.cpp
      3           *
      4           * http://rusefi.com/wiki/index.php?title=Hardware:Stepper_motor
      5           *
      6           * @date Dec 24, 2014
      7           * @author Andrey Belomutskiy, (c) 2012-2015
      8           */
      9          
     10          #include "stepper.h"
     11          #include "pin_repository.h"
     12          
     13          #define ST_DELAY_MS 10
     14          

   \                                 In section .text, align 2, keep-with-next
     15          static msg_t stThread(StepperMotor *motor) {
   \                     _Z8stThreadP12StepperMotor:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
     16          	chRegSetThreadName("stepper");
   \   00000004   0x....             LDR.N    R0,??DataTable1
   \   00000006   0x6980             LDR      R0,[R0, #+24]
   \   00000008   0x....             LDR.N    R1,??DataTable1_1
   \   0000000A   0x6181             STR      R1,[R0, #+24]
     17          
     18          	palWritePad(motor->directionPort, motor->directionPin, false);
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x6861             LDR      R1,[R4, #+4]
   \   00000010   0x3110             ADDS     R1,R1,#+16
   \   00000012   0x4088             LSLS     R0,R0,R1
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x6862             LDR      R2,[R4, #+4]
   \   00000018   0x4091             LSLS     R1,R1,R2
   \   0000001A   0x4308             ORRS     R0,R1,R0
   \   0000001C   0x6821             LDR      R1,[R4, #+0]
   \   0000001E   0x6188             STR      R0,[R1, #+24]
     19          
     20          	// let's park the motor in a known position to begin with
     21          	for (int i = 0; i < motor->totalSteps; i++) {
   \   00000020   0x2500             MOVS     R5,#+0
   \                     ??stThread_0:
   \   00000022   0x6920             LDR      R0,[R4, #+16]
   \   00000024   0x4285             CMP      R5,R0
   \   00000026   0xDA04             BGE.N    ??stThread_1
     22          		motor->pulse();
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x.... 0x....      BL       _ZN12StepperMotor5pulseEv
     23          	}
   \   0000002E   0x1C6D             ADDS     R5,R5,#+1
   \   00000030   0xE7F7             B.N      ??stThread_0
     24          
     25          	while (true) {
     26          		int targetPosition = motor->getTargetPosition();
   \                     ??stThread_1:
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0x.... 0x....      BL       _ZN12StepperMotor17getTargetPositionEv
   \   00000038   0x0005             MOVS     R5,R0
     27          		int currentPosition = motor->currentPosition;
   \   0000003A   0x68A6             LDR      R6,[R4, #+8]
     28          
     29          		if (targetPosition == currentPosition) {
   \   0000003C   0x42B5             CMP      R5,R6
   \   0000003E   0xD103             BNE.N    ??stThread_2
     30          			chThdSleepMilliseconds(ST_DELAY_MS);
   \   00000040   0x200A             MOVS     R0,#+10
   \   00000042   0x.... 0x....      BL       chThdSleep
     31          			continue;
   \   00000046   0xE7F4             B.N      ??stThread_1
     32          		}
     33          		bool_t isIncrementing = targetPosition > currentPosition;
   \                     ??stThread_2:
   \   00000048   0x42AE             CMP      R6,R5
   \   0000004A   0xDA01             BGE.N    ??stThread_3
   \   0000004C   0x2701             MOVS     R7,#+1
   \   0000004E   0xE000             B.N      ??stThread_4
   \                     ??stThread_3:
   \   00000050   0x2700             MOVS     R7,#+0
     34          		palWritePad(motor->directionPort, motor->directionPin, isIncrementing);
   \                     ??stThread_4:
   \   00000052   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000054   0x43F8             MVNS     R0,R7
   \   00000056   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000005A   0x6861             LDR      R1,[R4, #+4]
   \   0000005C   0x3110             ADDS     R1,R1,#+16
   \   0000005E   0x4088             LSLS     R0,R0,R1
   \   00000060   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000062   0x6861             LDR      R1,[R4, #+4]
   \   00000064   0xFA17 0xF101      LSLS     R1,R7,R1
   \   00000068   0x4308             ORRS     R0,R1,R0
   \   0000006A   0x6821             LDR      R1,[R4, #+0]
   \   0000006C   0x6188             STR      R0,[R1, #+24]
     35          		if (isIncrementing) {
   \   0000006E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000070   0x2F00             CMP      R7,#+0
   \   00000072   0xD003             BEQ.N    ??stThread_5
     36          			motor->currentPosition++;
   \   00000074   0x68A0             LDR      R0,[R4, #+8]
   \   00000076   0x1C40             ADDS     R0,R0,#+1
   \   00000078   0x60A0             STR      R0,[R4, #+8]
   \   0000007A   0xE002             B.N      ??stThread_6
     37          		} else {
     38          			motor->currentPosition--;
   \                     ??stThread_5:
   \   0000007C   0x68A0             LDR      R0,[R4, #+8]
   \   0000007E   0x1E40             SUBS     R0,R0,#+1
   \   00000080   0x60A0             STR      R0,[R4, #+8]
     39          		}
     40          		motor->pulse();
   \                     ??stThread_6:
   \   00000082   0x0020             MOVS     R0,R4
   \   00000084   0x.... 0x....      BL       _ZN12StepperMotor5pulseEv
   \   00000088   0xE7D3             B.N      ??stThread_1
     41          	}
     42          
     43          	// let's part the motor in a known position to begin with
     44          //	for (int i = 0; i < ST_COUNT / 2; i++) {
     45          //		motor->pulse();
     46          //	}
     47          
     48          	return 0;
     49          }
     50          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp StepperMotor::subobject StepperMotor()
   \                     _ZN12StepperMotorC2Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN12StepperMotorC1Ev
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     51          StepperMotor::StepperMotor() {
     52          	currentPosition = 0;
   \                     _ZN12StepperMotorC1Ev:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x6081             STR      R1,[R0, #+8]
     53          	targetPosition = 0;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6141             STR      R1,[R0, #+20]
     54          	directionPort = NULL;
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x6001             STR      R1,[R0, #+0]
     55          	directionPin = 0;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x6041             STR      R1,[R0, #+4]
     56          	enablePort = NULL;
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x6201             STR      R1,[R0, #+32]
     57          	enablePin = 0;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x6241             STR      R1,[R0, #+36]
     58          	stepPort = NULL;
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x6181             STR      R1,[R0, #+24]
     59          	stepPin = 0;
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x61C1             STR      R1,[R0, #+28]
     60          	reactionTime = 0;
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x60C1             STR      R1,[R0, #+12]
     61          	totalSteps = 0;
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x6101             STR      R1,[R0, #+16]
     62          }
   \   00000028   0x4770             BX       LR               ;; return
     63          

   \                                 In section .text, align 2, keep-with-next
     64          int StepperMotor::getTargetPosition() {
     65          	return targetPosition;
   \                     _ZN12StepperMotor17getTargetPositionEv:
   \   00000000   0x6940             LDR      R0,[R0, #+20]
   \   00000002   0x4770             BX       LR               ;; return
     66          }
     67          

   \                                 In section .text, align 2, keep-with-next
     68          void StepperMotor::setTargetPosition(int targetPosition) {
     69          	this->targetPosition = targetPosition;
   \                     _ZN12StepperMotor17setTargetPositionEi:
   \   00000000   0x6141             STR      R1,[R0, #+20]
     70          }
   \   00000002   0x4770             BX       LR               ;; return
     71          

   \                                 In section .text, align 2, keep-with-next
     72          void StepperMotor::pulse() {
   \                     _ZN12StepperMotor5pulseEv:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     73          	palWritePad(enablePort, enablePin, false); // ebable stepper
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x6A61             LDR      R1,[R4, #+36]
   \   00000008   0x3110             ADDS     R1,R1,#+16
   \   0000000A   0x4088             LSLS     R0,R0,R1
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x6A62             LDR      R2,[R4, #+36]
   \   00000010   0x4091             LSLS     R1,R1,R2
   \   00000012   0x4308             ORRS     R0,R1,R0
   \   00000014   0x6A21             LDR      R1,[R4, #+32]
   \   00000016   0x6188             STR      R0,[R1, #+24]
     74          
     75          	palWritePad(stepPort, stepPin, true);
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x69E1             LDR      R1,[R4, #+28]
   \   0000001C   0x3110             ADDS     R1,R1,#+16
   \   0000001E   0x4088             LSLS     R0,R0,R1
   \   00000020   0x2101             MOVS     R1,#+1
   \   00000022   0x69E2             LDR      R2,[R4, #+28]
   \   00000024   0x4091             LSLS     R1,R1,R2
   \   00000026   0x4308             ORRS     R0,R1,R0
   \   00000028   0x69A1             LDR      R1,[R4, #+24]
   \   0000002A   0x6188             STR      R0,[R1, #+24]
     76          	chThdSleepMilliseconds(ST_DELAY_MS);
   \   0000002C   0x200A             MOVS     R0,#+10
   \   0000002E   0x.... 0x....      BL       chThdSleep
     77          	palWritePad(stepPort, stepPin, false);
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x69E1             LDR      R1,[R4, #+28]
   \   00000036   0x3110             ADDS     R1,R1,#+16
   \   00000038   0x4088             LSLS     R0,R0,R1
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0x69E2             LDR      R2,[R4, #+28]
   \   0000003E   0x4091             LSLS     R1,R1,R2
   \   00000040   0x4308             ORRS     R0,R1,R0
   \   00000042   0x69A1             LDR      R1,[R4, #+24]
   \   00000044   0x6188             STR      R0,[R1, #+24]
     78          	chThdSleepMilliseconds(ST_DELAY_MS);
   \   00000046   0x200A             MOVS     R0,#+10
   \   00000048   0x.... 0x....      BL       chThdSleep
     79          
     80          	palWritePad(enablePort, enablePin, true); // disable stepper
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x6A61             LDR      R1,[R4, #+36]
   \   00000050   0x3110             ADDS     R1,R1,#+16
   \   00000052   0x4088             LSLS     R0,R0,R1
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x6A62             LDR      R2,[R4, #+36]
   \   00000058   0x4091             LSLS     R1,R1,R2
   \   0000005A   0x4308             ORRS     R0,R1,R0
   \   0000005C   0x6A21             LDR      R1,[R4, #+32]
   \   0000005E   0x6188             STR      R0,[R1, #+24]
     81          }
   \   00000060   0xBD10             POP      {R4,PC}          ;; return
     82          

   \                                 In section .text, align 2, keep-with-next
     83          void StepperMotor::initialize(brain_pin_e stepPin, brain_pin_e directionPin, float reactionTime, int totalSteps,
     84          		brain_pin_e enablePin) {
   \                     _ZN12StepperMotor10initializeE11brain_pin_eS0_fiS0_:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xED2D 0x8B02      VPUSH    {D8}
   \   00000008   0xB082             SUB      SP,SP,#+8
   \   0000000A   0x0004             MOVS     R4,R0
   \   0000000C   0x000D             MOVS     R5,R1
   \   0000000E   0x0016             MOVS     R6,R2
   \   00000010   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   00000014   0x001F             MOVS     R7,R3
   \   00000016   0xF8DD 0x8028      LDR      R8,[SP, #+40]
     85          	this->reactionTime = maxF(1, reactionTime);
   \   0000001A   0xEEF0 0x0A48      VMOV.F32 S1,S16
   \   0000001E   0xEEB7 0x0A00      VMOV.F32 S0,#1.0
   \   00000022   0x.... 0x....      BL       maxF
   \   00000026   0xED84 0x0A03      VSTR     S0,[R4, #+12]
     86          	this->totalSteps = maxI(3, totalSteps);
   \   0000002A   0x0039             MOVS     R1,R7
   \   0000002C   0x2003             MOVS     R0,#+3
   \   0000002E   0x.... 0x....      BL       maxI
   \   00000032   0x6120             STR      R0,[R4, #+16]
     87          	if (stepPin == GPIO_UNASSIGNED || directionPin == GPIO_UNASSIGNED) {
   \   00000034   0x2D50             CMP      R5,#+80
   \   00000036   0xD001             BEQ.N    ??initialize_0
   \   00000038   0x2E50             CMP      R6,#+80
   \   0000003A   0xD100             BNE.N    ??initialize_1
     88          		return;
   \                     ??initialize_0:
   \   0000003C   0xE039             B.N      ??initialize_2
     89          	}
     90          
     91          	stepPort = getHwPort(stepPin);
   \                     ??initialize_1:
   \   0000003E   0x0028             MOVS     R0,R5
   \   00000040   0x.... 0x....      BL       _Z9getHwPort11brain_pin_e
   \   00000044   0x61A0             STR      R0,[R4, #+24]
     92          	this->stepPin = getHwPin(stepPin);
   \   00000046   0x0028             MOVS     R0,R5
   \   00000048   0x.... 0x....      BL       _Z8getHwPin11brain_pin_e
   \   0000004C   0x61E0             STR      R0,[R4, #+28]
     93          
     94          	directionPort = getHwPort(directionPin);
   \   0000004E   0x0030             MOVS     R0,R6
   \   00000050   0x.... 0x....      BL       _Z9getHwPort11brain_pin_e
   \   00000054   0x6020             STR      R0,[R4, #+0]
     95          	this->directionPin = getHwPin(directionPin);
   \   00000056   0x0030             MOVS     R0,R6
   \   00000058   0x.... 0x....      BL       _Z8getHwPin11brain_pin_e
   \   0000005C   0x6060             STR      R0,[R4, #+4]
     96          
     97          	enablePort = getHwPort(enablePin);
   \   0000005E   0x4640             MOV      R0,R8
   \   00000060   0x.... 0x....      BL       _Z9getHwPort11brain_pin_e
   \   00000064   0x6220             STR      R0,[R4, #+32]
     98          	this->enablePin = getHwPin(enablePin);
   \   00000066   0x4640             MOV      R0,R8
   \   00000068   0x.... 0x....      BL       _Z8getHwPin11brain_pin_e
   \   0000006C   0x6260             STR      R0,[R4, #+36]
     99          
    100          	mySetPadMode2("stepper step", stepPin, PAL_MODE_OUTPUT_PUSHPULL);
   \   0000006E   0x2201             MOVS     R2,#+1
   \   00000070   0x0029             MOVS     R1,R5
   \   00000072   0x....             LDR.N    R0,??DataTable1_2
   \   00000074   0x.... 0x....      BL       _Z13mySetPadMode2PKc11brain_pin_ej
    101          	mySetPadMode2("stepper dir", directionPin, PAL_MODE_OUTPUT_PUSHPULL);
   \   00000078   0x2201             MOVS     R2,#+1
   \   0000007A   0x0031             MOVS     R1,R6
   \   0000007C   0x....             LDR.N    R0,??DataTable1_3
   \   0000007E   0x.... 0x....      BL       _Z13mySetPadMode2PKc11brain_pin_ej
    102          	mySetPadMode2("stepper enable", enablePin, PAL_MODE_OUTPUT_PUSHPULL);
   \   00000082   0x2201             MOVS     R2,#+1
   \   00000084   0x4641             MOV      R1,R8
   \   00000086   0x....             LDR.N    R0,??DataTable1_4
   \   00000088   0x.... 0x....      BL       _Z13mySetPadMode2PKc11brain_pin_ej
    103          	palWritePad(this->enablePort, enablePin, true); // disable stepper
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0xF118 0x0110      ADDS     R1,R8,#+16
   \   00000092   0x4088             LSLS     R0,R0,R1
   \   00000094   0x2101             MOVS     R1,#+1
   \   00000096   0xFA11 0xF108      LSLS     R1,R1,R8
   \   0000009A   0x4308             ORRS     R0,R1,R0
   \   0000009C   0x6A21             LDR      R1,[R4, #+32]
   \   0000009E   0x6188             STR      R0,[R1, #+24]
    104          
    105          	chThdCreateStatic(stThreadStack, sizeof(stThreadStack), NORMALPRIO, (tfunc_t) stThread, this);
   \   000000A0   0x9400             STR      R4,[SP, #+0]
   \   000000A2   0x....             LDR.N    R3,??DataTable1_5
   \   000000A4   0x2240             MOVS     R2,#+64
   \   000000A6   0xF44F 0x7132      MOV      R1,#+712
   \   000000AA   0xF114 0x0028      ADDS     R0,R4,#+40
   \   000000AE   0x.... 0x....      BL       chThdCreateStatic
    106          }
   \                     ??initialize_2:
   \   000000B2   0xB002             ADD      SP,SP,#+8
   \   000000B4   0xECBD 0x8B02      VPOP     {D8}
   \   000000B8   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     rlist

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     `?<Constant "stepper">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     `?<Constant "stepper step">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     `?<Constant "stepper dir">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     `?<Constant "stepper enable">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     _Z8stThreadP12StepperMotor

   \                                 In section .rodata, align 4
   \                     `?<Constant "stepper">`:
   \   00000000   0x73 0x74          DC8 "stepper"
   \              0x65 0x70    
   \              0x70 0x65    
   \              0x72 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "stepper step">`:
   \   00000000   0x73 0x74          DC8 "stepper step"
   \              0x65 0x70    
   \              0x70 0x65    
   \              0x72 0x20    
   \              0x73 0x74    
   \              0x65 0x70    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "stepper dir">`:
   \   00000000   0x73 0x74          DC8 "stepper dir"
   \              0x65 0x70    
   \              0x70 0x65    
   \              0x72 0x20    
   \              0x64 0x69    
   \              0x72 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "stepper enable">`:
   \   00000000   0x73 0x74          DC8 "stepper enable"
   \              0x65 0x70    
   \              0x70 0x65    
   \              0x72 0x20    
   \              0x65 0x6E    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x00         
   \   0000000F   0x00               DC8 0
    107          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   StepperMotor::StepperMotor()
       0   StepperMotor::getTargetPosition()
      40   StepperMotor::initialize(brain_pin_e, brain_pin_e, float, int, brain_pin_e)
        40   -> chThdCreateStatic
        40   -> getHwPin(brain_pin_e)
        40   -> getHwPort(brain_pin_e)
        40   -> maxF
        40   -> maxI
        40   -> mySetPadMode2(char const *, brain_pin_e, iomode_t)
       8   StepperMotor::pulse()
         8   -> chThdSleep
       0   StepperMotor::setTargetPosition(int)
       8   StepperMotor::subobject StepperMotor()
         8   -> StepperMotor::StepperMotor()
      24   stThread(StepperMotor *)
        24   -> StepperMotor::getTargetPosition()
        24   -> StepperMotor::pulse()
        24   -> chThdSleep


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "stepper dir">
      16  ?<Constant "stepper enable">
      16  ?<Constant "stepper step">
       8  ?<Constant "stepper">
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
      42  StepperMotor::StepperMotor()
       4  StepperMotor::getTargetPosition()
     188  StepperMotor::initialize(brain_pin_e, brain_pin_e, float, int, brain_pin_e)
      98  StepperMotor::pulse()
       4  StepperMotor::setTargetPosition(int)
      12  StepperMotor::subobject StepperMotor()
     138  stThread(StepperMotor *)

 
  52 bytes in section .rodata
 510 bytes in section .text
 
 510 bytes of CODE  memory
  52 bytes of CONST memory

Errors: none
Warnings: 1
