###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:08:45 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\kerne #
#                       l\src\chregistry.c                                    #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\kerne #
#                       l\src\chregistry.c -lCN F:\stuff\rusefi_sourceforge\f #
#                       irmware\iar\Debug\List\ -lA                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\  #
#                       -o F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj #
#                       \ --no_cse --no_unroll --no_inline --no_code_motion   #
#                       --no_tbaa --no_clustering --no_scheduling --debug     #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\ -On #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\c #
#                       hregistry.lst                                         #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\ch #
#                       registry.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\chibios\os\kernel\src\chregistry.c
      1          /*
      2              ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
      3                           2011,2012,2013 Giovanni Di Sirio.
      4          
      5              This file is part of ChibiOS/RT.
      6          
      7              ChibiOS/RT is free software; you can redistribute it and/or modify
      8              it under the terms of the GNU General Public License as published by
      9              the Free Software Foundation; either version 3 of the License, or
     10              (at your option) any later version.
     11          
     12              ChibiOS/RT is distributed in the hope that it will be useful,
     13              but WITHOUT ANY WARRANTY; without even the implied warranty of
     14              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     15              GNU General Public License for more details.
     16          
     17              You should have received a copy of the GNU General Public License
     18              along with this program.  If not, see <http://www.gnu.org/licenses/>.
     19          
     20                                                ---
     21          
     22              A special exception to the GPL can be applied should you wish to distribute
     23              a combined work that includes ChibiOS/RT, without being obliged to provide
     24              the source code for any proprietary components. See the file exception.txt
     25              for full details of how and when the exception can be applied.
     26          */
     27          
     28          /**
     29           * @file    chregistry.c
     30           * @brief   Threads registry code.
     31           *
     32           * @addtogroup registry
     33           * @details Threads Registry related APIs and services.
     34           *
     35           *          <h2>Operation mode</h2>
     36           *          The Threads Registry is a double linked list that holds all the
     37           *          active threads in the system.<br>
     38           *          Operations defined for the registry:
     39           *          - <b>First</b>, returns the first, in creation order, active thread
     40           *            in the system.
     41           *          - <b>Next</b>, returns the next, in creation order, active thread
     42           *            in the system.
     43           *          .
     44           *          The registry is meant to be mainly a debug feature, for example,
     45           *          using the registry a debugger can enumerate the active threads
     46           *          in any given moment or the shell can print the active threads
     47           *          and their state.<br>
     48           *          Another possible use is for centralized threads memory management,
     49           *          terminating threads can pulse an event source and an event handler
     50           *          can perform a scansion of the registry in order to recover the
     51           *          memory.
     52           * @pre     In order to use the threads registry the @p CH_USE_REGISTRY option
     53           *          must be enabled in @p chconf.h.
     54           * @{
     55           */
     56          #include "ch.h"
     57          
     58          #if CH_USE_REGISTRY || defined(__DOXYGEN__)
     59          
     60          #define _offsetof(st, m)                                                     \
     61            ((size_t)((char *)&((st *)0)->m - (char *)0))
     62          
     63          /*
     64           * OS signature in ROM plus debug-related information.
     65           */

   \                                 In section .rodata, align 4
     66          ROMCONST chdebug_t ch_debug = {
   \                     ch_debug:
   \   00000000   0x6D 0x61          DC8 6DH, 61H, 69H, 6EH
   \              0x69 0x6E    
   \   00000004   0x00 0x16          DC8 0, 22
   \   00000006   0x1188             DC16 4488
   \   00000008   0x04 0x04          DC8 4, 4, 76, 8, 12, 16, 20, 24, 28, 32, 33, 0, 34, 36, 0, 0
   \              0x4C 0x08    
   \              0x0C 0x10    
   \              0x14 0x18    
   \              0x1C 0x20    
   \              0x21 0x00    
   \              0x22 0x24    
   \              0x00 0x00    
     67            "main",
     68            (uint8_t)0,
     69            (uint8_t)sizeof (chdebug_t),
     70            (uint16_t)((CH_KERNEL_MAJOR << 11) |
     71                       (CH_KERNEL_MINOR << 6) |
     72                       (CH_KERNEL_PATCH << 0)),
     73            (uint8_t)sizeof (void *),
     74            (uint8_t)sizeof (systime_t),
     75            (uint8_t)sizeof (Thread),
     76            (uint8_t)_offsetof(Thread, p_prio),
     77            (uint8_t)_offsetof(Thread, p_ctx),
     78            (uint8_t)_offsetof(Thread, p_newer),
     79            (uint8_t)_offsetof(Thread, p_older),
     80            (uint8_t)_offsetof(Thread, p_name),
     81          #if CH_DBG_ENABLE_STACK_CHECK
     82            (uint8_t)_offsetof(Thread, p_stklimit),
     83          #else
     84            (uint8_t)0,
     85          #endif
     86            (uint8_t)_offsetof(Thread, p_state),
     87            (uint8_t)_offsetof(Thread, p_flags),
     88          #if CH_USE_DYNAMIC
     89            (uint8_t)_offsetof(Thread, p_refs),
     90          #else
     91            (uint8_t)0,
     92          #endif
     93          #if CH_TIME_QUANTUM > 0
     94            (uint8_t)_offsetof(Thread, p_preempt),
     95          #else
     96            (uint8_t)0,
     97          #endif
     98          #if CH_DBG_THREADS_PROFILING
     99            (uint8_t)_offsetof(Thread, p_time)
    100          #else
    101            (uint8_t)0
    102          #endif
    103          };
    104          
    105          /**
    106           * @brief   Returns the first thread in the system.
    107           * @details Returns the most ancient thread in the system, usually this is
    108           *          the main thread unless it terminated. A reference is added to the
    109           *          returned thread in order to make sure its status is not lost.
    110           * @note    This function cannot return @p NULL because there is always at
    111           *          least one thread in the system.
    112           *
    113           * @return              A reference to the most ancient thread.
    114           *
    115           * @api
    116           */

   \                                 In section .text, align 2, keep-with-next
    117          Thread *chRegFirstThread(void) {
   \                     chRegFirstThread:
   \   00000000   0xB510             PUSH     {R4,LR}
    118            Thread *tp;
    119          
    120            chSysLock();
   \   00000002   0x2020             MOVS     R0,#+32
   \   00000004   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000008   0x.... 0x....      BL       dbg_check_lock
    121            tp = rlist.r_newer;
   \   0000000C   0x....             LDR.N    R0,??DataTable1
   \   0000000E   0x6900             LDR      R0,[R0, #+16]
   \   00000010   0x0004             MOVS     R4,R0
    122          #if CH_USE_DYNAMIC
    123            tp->p_refs++;
    124          #endif
    125            chSysUnlock();
   \   00000012   0x.... 0x....      BL       dbg_check_unlock
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF380 0x8811      MSR      BASEPRI,R0
    126            return tp;
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
    127          }
    128          
    129          /**
    130           * @brief   Returns the thread next to the specified one.
    131           * @details The reference counter of the specified thread is decremented and
    132           *          the reference counter of the returned thread is incremented.
    133           *
    134           * @param[in] tp        pointer to the thread
    135           * @return              A reference to the next thread.
    136           * @retval NULL         if there is no next thread.
    137           *
    138           * @api
    139           */

   \                                 In section .text, align 2, keep-with-next
    140          Thread *chRegNextThread(Thread *tp) {
   \                     chRegNextThread:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    141            Thread *ntp;
    142          
    143            chSysLock();
   \   00000004   0x2020             MOVS     R0,#+32
   \   00000006   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000000A   0x.... 0x....      BL       dbg_check_lock
    144            ntp = tp->p_newer;
   \   0000000E   0x6920             LDR      R0,[R4, #+16]
   \   00000010   0x0005             MOVS     R5,R0
    145            if (ntp == (Thread *)&rlist)
   \   00000012   0x....             LDR.N    R0,??DataTable1
   \   00000014   0x4285             CMP      R5,R0
   \   00000016   0xD101             BNE.N    ??chRegNextThread_0
    146              ntp = NULL;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x0005             MOVS     R5,R0
    147          #if CH_USE_DYNAMIC
    148            else {
    149              chDbgAssert(ntp->p_refs < 255, "chRegNextThread(), #1",
    150                          "too many references");
    151              ntp->p_refs++;
    152            }
    153          #endif
    154            chSysUnlock();
   \                     ??chRegNextThread_0:
   \   0000001C   0x.... 0x....      BL       dbg_check_unlock
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xF380 0x8811      MSR      BASEPRI,R0
    155          #if CH_USE_DYNAMIC
    156            chThdRelease(tp);
    157          #endif
    158            return ntp;
   \   00000026   0x0028             MOVS     R0,R5
   \   00000028   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    159          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     rlist
    160          
    161          #endif /* CH_USE_REGISTRY */
    162          
    163          /** @} */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   chRegFirstThread
         8   -> dbg_check_lock
         8   -> dbg_check_unlock
      16   chRegNextThread
        16   -> dbg_check_lock
        16   -> dbg_check_unlock


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
      32  chRegFirstThread
      42  chRegNextThread
      24  ch_debug

 
 24 bytes in section .rodata
 78 bytes in section .text
 
 78 bytes of CODE  memory
 24 bytes of CONST memory

Errors: none
Warnings: none
