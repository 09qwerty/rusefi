###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:33 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\flas #
#                       h_main.cpp                                            #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\flas #
#                       h_main.cpp -lCN F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\Debug\List\ -lA F:\stuff\rusefi_sourceforge\firmw #
#                       are\iar\Debug\List\ -o F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\Debug\Obj\ --no_cse --no_unroll            #
#                       --no_inline --no_code_motion --no_tbaa                #
#                       --no_clustering --no_scheduling --debug               #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\f #
#                       lash_main.lst                                         #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\fl #
#                       ash_main.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\flash_main.cpp
      1          /**
      2           * @file    flash_main.cpp
      3           * @brief	Higher-level logic of saving data into internal flash memory
      4           *
      5           *
      6           * @date Sep 19, 2013
      7           * @author Andrey Belomutskiy, (c) 2012-2015
      8           */
      9          
     10          #include <main.h>
     11          
     12          #include "flash_main.h"
     13          #include "eficonsole.h"
     14          #include "flash.h"
     15          #include "rusefi.h"
     16          
     17          #if EFI_TUNER_STUDIO || defined(__DOXYGEN__)
     18          #include "tunerstudio.h"
     19          #endif
     20          
     21          #if EFI_INTERNAL_FLASH || defined(__DOXYGEN__)
     22          
     23          #include "engine_controller.h"
     24          #include "datalogging.h"
     25          #include "engine.h"
     26          

   \                                 In section .bss, align 1
     27          static bool needToWriteConfiguration = false;
   \                     needToWriteConfiguration:
   \   00000000                      DS8 1
     28          
     29          EXTERN_ENGINE;

   \                                 In section .bss, align 4
     30          static Logging* logger;
   \                     logger:
   \   00000000                      DS8 4
     31          
     32          extern persistent_config_container_s persistentState;
     33          
     34          extern engine_configuration_s *engineConfiguration;
     35          
     36          #define FLASH_ADDR 0x08060000
     37          
     38          #define PERSISTENT_SIZE sizeof(persistent_config_container_s)
     39          

   \                                 In section .text, align 2, keep-with-next
     40          crc_t flashStateCrc(persistent_config_container_s *state) {
   \                     _Z13flashStateCrcP29persistent_config_container_s:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     41          	return calc_crc((const crc_t*) &state->persistentConfiguration, sizeof(persistent_config_s));
   \   00000004   0xF643 0x31B8      MOVW     R1,#+15288
   \   00000008   0xF114 0x0008      ADDS     R0,R4,#+8
   \   0000000C   0x.... 0x....      BL       calc_crc
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
     42          }
     43          

   \                                 In section .text, align 2, keep-with-next
     44          void setNeedToWriteConfiguration(void) {
   \                     _Z27setNeedToWriteConfigurationv:
   \   00000000   0xB580             PUSH     {R7,LR}
     45          	scheduleMsg(logger, "Scheduling configuration write");
   \   00000002   0x....             LDR.N    R1,??DataTable8
   \   00000004   0x....             LDR.N    R0,??DataTable8_1
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x.... 0x....      BL       scheduleMsg
     46          	needToWriteConfiguration = true;
   \   0000000C   0x....             LDR.N    R0,??DataTable8_2
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x7001             STRB     R1,[R0, #+0]
     47          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
     48          

   \                                 In section .text, align 2, keep-with-next
     49          bool getNeedToWriteConfiguration(void) {
     50          	return needToWriteConfiguration;
   \                     _Z27getNeedToWriteConfigurationv:
   \   00000000   0x....             LDR.N    R0,??DataTable8_2
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
     51          }
     52          

   \                                 In section .text, align 2, keep-with-next
     53          void writeToFlashIfPending() {
   \                     _Z21writeToFlashIfPendingv:
   \   00000000   0xB580             PUSH     {R7,LR}
     54          	if (!getNeedToWriteConfiguration()) {
   \   00000002   0x.... 0x....      BL       _Z27getNeedToWriteConfigurationv
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD009             BEQ.N    ??writeToFlashIfPending_0
     55          		return;
     56          	}
     57          	// todo: technically we need a lock here, realistically we should be fine.
     58          	needToWriteConfiguration = false;
   \                     ??writeToFlashIfPending_1:
   \   0000000A   0x....             LDR.N    R0,??DataTable8_2
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x7001             STRB     R1,[R0, #+0]
     59          	scheduleMsg(logger, "Writing pending configuration");
   \   00000010   0x....             LDR.N    R1,??DataTable8_3
   \   00000012   0x....             LDR.N    R0,??DataTable8_1
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x.... 0x....      BL       scheduleMsg
     60          	writeToFlashNow();
   \   0000001A   0x.... 0x....      BL       _Z15writeToFlashNowv
     61          }
   \                     ??writeToFlashIfPending_0:
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
     62          
     63          extern uint32_t maxLockTime;
     64          

   \                                 In section .text, align 2, keep-with-next
     65          void writeToFlashNow(void) {
   \                     _Z15writeToFlashNowv:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     66          	scheduleMsg(logger, " !!!!!!!!!!!!!!!!!!!! BE SURE NOT WRITE WITH IGNITION ON !!!!!!!!!!!!!!!!!!!!");
   \   00000002   0x....             LDR.N    R1,??DataTable8_4
   \   00000004   0x....             LDR.N    R0,??DataTable8_1
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x.... 0x....      BL       scheduleMsg
     67          	persistentState.size = PERSISTENT_SIZE;
   \   0000000C   0x....             LDR.N    R0,??DataTable8_5
   \   0000000E   0xF643 0x31C4      MOVW     R1,#+15300
   \   00000012   0x6041             STR      R1,[R0, #+4]
     68          	persistentState.version = FLASH_DATA_VERSION;
   \   00000014   0x....             LDR.N    R0,??DataTable8_5
   \   00000016   0xF242 0x01D0      MOVW     R1,#+8400
   \   0000001A   0x6001             STR      R1,[R0, #+0]
     69          	scheduleMsg(logger, "flash compatible with %d", persistentState.version);
   \   0000001C   0x....             LDR.N    R0,??DataTable8_5
   \   0000001E   0x6802             LDR      R2,[R0, #+0]
   \   00000020   0x....             LDR.N    R1,??DataTable8_6
   \   00000022   0x....             LDR.N    R0,??DataTable8_1
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x.... 0x....      BL       scheduleMsg
     70          	crc_t result = flashStateCrc(&persistentState);
   \   0000002A   0x....             LDR.N    R0,??DataTable8_5
   \   0000002C   0x.... 0x....      BL       _Z13flashStateCrcP29persistent_config_container_s
   \   00000030   0x0004             MOVS     R4,R0
     71          	persistentState.value = result;
   \   00000032   0x....             LDR.N    R0,??DataTable8_7
   \   00000034   0x7004             STRB     R4,[R0, #+0]
     72          	scheduleMsg(logger, "Reseting flash: size=%d", PERSISTENT_SIZE);
   \   00000036   0xF643 0x32C4      MOVW     R2,#+15300
   \   0000003A   0x....             LDR.N    R1,??DataTable8_8
   \   0000003C   0x....             LDR.N    R0,??DataTable8_1
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x.... 0x....      BL       scheduleMsg
     73          	flashErase(FLASH_ADDR, PERSISTENT_SIZE);
   \   00000044   0xF643 0x31C4      MOVW     R1,#+15300
   \   00000048   0x....             LDR.N    R0,??DataTable8_9  ;; 0x8060000
   \   0000004A   0x.... 0x....      BL       flashErase
     74          	scheduleMsg(logger, "Flashing with CRC=%d", result);
   \   0000004E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000050   0x0022             MOVS     R2,R4
   \   00000052   0x....             LDR.N    R1,??DataTable8_10
   \   00000054   0x....             LDR.N    R0,??DataTable8_1
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0x.... 0x....      BL       scheduleMsg
     75          	efitimems_t nowMs = currentTimeMillis();
   \   0000005C   0x.... 0x....      BL       currentTimeMillis
   \   00000060   0x0005             MOVS     R5,R0
     76          	result = flashWrite(FLASH_ADDR, (const char *) &persistentState, PERSISTENT_SIZE);
   \   00000062   0xF643 0x32C4      MOVW     R2,#+15300
   \   00000066   0x....             LDR.N    R1,??DataTable8_5
   \   00000068   0x....             LDR.N    R0,??DataTable8_9  ;; 0x8060000
   \   0000006A   0x.... 0x....      BL       flashWrite
   \   0000006E   0x0004             MOVS     R4,R0
     77          	scheduleMsg(logger, "Flash programmed in (ms): %d", currentTimeMillis() - nowMs);
   \   00000070   0x.... 0x....      BL       currentTimeMillis
   \   00000074   0x1B42             SUBS     R2,R0,R5
   \   00000076   0x....             LDR.N    R1,??DataTable8_11
   \   00000078   0x....             LDR.N    R0,??DataTable8_1
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0x.... 0x....      BL       scheduleMsg
     78          	scheduleMsg(logger, "Flashing result: %d", result);
   \   00000080   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000082   0x0022             MOVS     R2,R4
   \   00000084   0x....             LDR.N    R1,??DataTable8_12
   \   00000086   0x....             LDR.N    R0,??DataTable8_1
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0x.... 0x....      BL       scheduleMsg
     79          	maxLockTime = 0;
   \   0000008E   0x....             LDR.N    R0,??DataTable8_13
   \   00000090   0x2100             MOVS     R1,#+0
   \   00000092   0x6001             STR      R1,[R0, #+0]
     80          }
   \   00000094   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     81          

   \                                 In section .text, align 2, keep-with-next
     82          static bool isValidCrc(persistent_config_container_s *state) {
   \                     _Z10isValidCrcP29persistent_config_container_s:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     83          	crc_t result = flashStateCrc(state);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _Z13flashStateCrcP29persistent_config_container_s
   \   0000000A   0x0005             MOVS     R5,R0
     84          	int isValidCrc_b = result == state->value;
   \   0000000C   0xF514 0x506F      ADDS     R0,R4,#+15296
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000014   0x4285             CMP      R5,R0
   \   00000016   0xD101             BNE.N    ??isValidCrc_0
   \   00000018   0x2601             MOVS     R6,#+1
   \   0000001A   0xE000             B.N      ??isValidCrc_1
   \                     ??isValidCrc_0:
   \   0000001C   0x2600             MOVS     R6,#+0
   \                     ??isValidCrc_1:
   \   0000001E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
     85          	if (!isValidCrc_b) {
   \   00000020   0x2E00             CMP      R6,#+0
   \   00000022   0xD109             BNE.N    ??isValidCrc_2
     86          		scheduleMsg(logger, "CRC got %d while %d expected", result, state->value);
   \   00000024   0xF514 0x506F      ADDS     R0,R4,#+15296
   \   00000028   0x7803             LDRB     R3,[R0, #+0]
   \   0000002A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002C   0x002A             MOVS     R2,R5
   \   0000002E   0x....             LDR.N    R1,??DataTable8_14
   \   00000030   0x....             LDR.N    R0,??DataTable8_1
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x.... 0x....      BL       scheduleMsg
     87          	}
     88          	return isValidCrc_b;
   \                     ??isValidCrc_2:
   \   00000038   0x2E00             CMP      R6,#+0
   \   0000003A   0xD001             BEQ.N    ??isValidCrc_3
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0xE000             B.N      ??isValidCrc_4
   \                     ??isValidCrc_3:
   \   00000040   0x2000             MOVS     R0,#+0
   \                     ??isValidCrc_4:
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0xBD70             POP      {R4-R6,PC}       ;; return
     89          }
     90          

   \                                 In section .text, align 2, keep-with-next
     91          static void doResetConfiguration(void) {
   \                     _Z20doResetConfigurationv:
   \   00000000   0xB580             PUSH     {R7,LR}
     92          	resetConfigurationExt(logger, engineConfiguration->engineType PASS_ENGINE_PARAMETER);
   \   00000002   0x....             LDR.N    R0,??DataTable8_15
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x....             LDR.N    R0,??DataTable8_1
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x.... 0x....      BL       _Z21resetConfigurationExtP7Logging13engine_type_e
     93          }
   \   00000010   0xBD01             POP      {R0,PC}          ;; return
     94          

   \                                 In section .text, align 2, keep-with-next
     95          static bool hasValidEngineType(engine_configuration_s *engineConfiguration) {
     96          	uint32_t ordinal = (uint32_t)engineConfiguration->engineType;
   \                     _Z18hasValidEngineTypeP22engine_configuration_s:
   \   00000000   0x6801             LDR      R1,[R0, #+0]
     97          	return ordinal < ET_UNUSED && engineConfiguration->headerMagicValue == HEADER_MAGIC_NUMBER;
   \   00000002   0x2921             CMP      R1,#+33
   \   00000004   0xD205             BCS.N    ??hasValidEngineType_0
   \   00000006   0x6840             LDR      R0,[R0, #+4]
   \   00000008   0x....             LDR.N    R1,??DataTable8_16  ;; 0x1221239
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD101             BNE.N    ??hasValidEngineType_0
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xE000             B.N      ??hasValidEngineType_1
   \                     ??hasValidEngineType_0:
   \   00000012   0x2000             MOVS     R0,#+0
   \                     ??hasValidEngineType_1:
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x4770             BX       LR               ;; return
     98          }
     99          

   \                                 In section .text, align 2, keep-with-next
    100          void readFromFlash(void) {
   \                     _Z13readFromFlashv:
   \   00000000   0xB580             PUSH     {R7,LR}
    101          	printMsg(logger, "readFromFlash()");
   \   00000002   0x....             LDR.N    R1,??DataTable8_17
   \   00000004   0x....             LDR.N    R0,??DataTable8_1
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x.... 0x....      BL       printMsg
    102          	flashRead(FLASH_ADDR, (char *) &persistentState, PERSISTENT_SIZE);
   \   0000000C   0xF643 0x32C4      MOVW     R2,#+15300
   \   00000010   0x....             LDR.N    R1,??DataTable8_5
   \   00000012   0x....             LDR.N    R0,??DataTable8_9  ;; 0x8060000
   \   00000014   0x.... 0x....      BL       flashRead
    103          
    104          	if (!isValidCrc(&persistentState)) {
   \   00000018   0x....             LDR.N    R0,??DataTable8_5
   \   0000001A   0x.... 0x....      BL       _Z10isValidCrcP29persistent_config_container_s
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD10A             BNE.N    ??readFromFlash_0
    105          		printMsg(logger, "Need to reset flash to default due to CRC");
   \   00000022   0x....             LDR.N    R1,??DataTable8_18
   \   00000024   0x....             LDR.N    R0,??DataTable8_1
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x.... 0x....      BL       printMsg
    106          		resetConfigurationExt(logger, DEFAULT_ENGINE_TYPE PASS_ENGINE_PARAMETER);
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x....             LDR.N    R0,??DataTable8_1
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x.... 0x....      BL       _Z21resetConfigurationExtP7Logging13engine_type_e
   \   00000036   0xE035             B.N      ??readFromFlash_1
    107          	} else if (persistentState.version == FLASH_DATA_VERSION && persistentState.size == PERSISTENT_SIZE) {
   \                     ??readFromFlash_0:
   \   00000038   0x....             LDR.N    R0,??DataTable8_5
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0xF242 0x01D0      MOVW     R1,#+8400
   \   00000040   0x4288             CMP      R0,R1
   \   00000042   0xD10F             BNE.N    ??readFromFlash_2
   \   00000044   0x....             LDR.N    R0,??DataTable8_5
   \   00000046   0x6840             LDR      R0,[R0, #+4]
   \   00000048   0xF643 0x31C4      MOVW     R1,#+15300
   \   0000004C   0x4288             CMP      R0,R1
   \   0000004E   0xD109             BNE.N    ??readFromFlash_2
    108          		printMsg(logger, "Got valid configuration from flash!");
   \   00000050   0x....             LDR.N    R1,??DataTable8_19
   \   00000052   0x....             LDR.N    R0,??DataTable8_1
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0x.... 0x....      BL       printMsg
    109          		applyNonPersistentConfiguration(logger PASS_ENGINE_PARAMETER);
   \   0000005A   0x....             LDR.N    R0,??DataTable8_1
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0x.... 0x....      BL       _Z31applyNonPersistentConfigurationP7Logging
   \   00000062   0xE01F             B.N      ??readFromFlash_1
    110          	} else if (hasValidEngineType(engineConfiguration)) {
   \                     ??readFromFlash_2:
   \   00000064   0x....             LDR.N    R0,??DataTable8_15
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x.... 0x....      BL       _Z18hasValidEngineTypeP22engine_configuration_s
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD00F             BEQ.N    ??readFromFlash_3
    111          		printMsg(logger, "Resetting but saving engine type [%d]", engineConfiguration->engineType);
   \   00000070   0x....             LDR.N    R0,??DataTable8_15
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0x6802             LDR      R2,[R0, #+0]
   \   00000076   0x....             LDR.N    R1,??DataTable8_20
   \   00000078   0x....             LDR.N    R0,??DataTable8_1
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0x.... 0x....      BL       printMsg
    112          		resetConfigurationExt(logger, engineConfiguration->engineType PASS_ENGINE_PARAMETER);
   \   00000080   0x....             LDR.N    R0,??DataTable8_15
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0x6801             LDR      R1,[R0, #+0]
   \   00000086   0x....             LDR.N    R0,??DataTable8_1
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0x.... 0x....      BL       _Z21resetConfigurationExtP7Logging13engine_type_e
   \   0000008E   0xE009             B.N      ??readFromFlash_1
    113          	} else {
    114          		printMsg(logger, "Need to reset flash to default due to version change");
   \                     ??readFromFlash_3:
   \   00000090   0x....             LDR.N    R1,??DataTable8_21
   \   00000092   0x....             LDR.N    R0,??DataTable8_1
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0x.... 0x....      BL       printMsg
    115          		resetConfigurationExt(logger, DEFAULT_ENGINE_TYPE PASS_ENGINE_PARAMETER);
   \   0000009A   0x2100             MOVS     R1,#+0
   \   0000009C   0x....             LDR.N    R0,??DataTable8_1
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0x.... 0x....      BL       _Z21resetConfigurationExtP7Logging13engine_type_e
    116          	}
    117          	// we can only change the state after the CRC check
    118          	engineConfiguration->firmwareVersion = getRusEfiVersion();
   \                     ??readFromFlash_1:
   \   000000A4   0x.... 0x....      BL       getRusEfiVersion
   \   000000A8   0x....             LDR.N    R1,??DataTable8_15
   \   000000AA   0x6809             LDR      R1,[R1, #+0]
   \   000000AC   0xF8C1 0x0200      STR      R0,[R1, #+512]
    119          }
   \   000000B0   0xBD01             POP      {R0,PC}          ;; return
    120          

   \                                 In section .text, align 2, keep-with-next
    121          static void rewriteConfig(void) {
   \                     _Z13rewriteConfigv:
   \   00000000   0xB580             PUSH     {R7,LR}
    122          	doResetConfiguration();
   \   00000002   0x.... 0x....      BL       _Z20doResetConfigurationv
    123          	writeToFlashNow();
   \   00000006   0x.... 0x....      BL       _Z15writeToFlashNowv
    124          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    125          

   \                                 In section .text, align 2, keep-with-next
    126          void initFlash(Logging *sharedLogger) {
   \                     _Z9initFlashP7Logging:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    127          	logger = sharedLogger;
   \   00000004   0x....             LDR.N    R0,??DataTable8_1
   \   00000006   0x6004             STR      R4,[R0, #+0]
    128          
    129          	addConsoleAction("readconfig", readFromFlash);
   \   00000008   0x....             LDR.N    R1,??DataTable8_22
   \   0000000A   0x....             LDR.N    R0,??DataTable8_23
   \   0000000C   0x.... 0x....      BL       addConsoleAction
    130          	/**
    131          	 * This would write NOW (you should not be doing this while connected to real engine)
    132          	 */
    133          	addConsoleAction("writeconfig", writeToFlashNow);
   \   00000010   0x....             LDR.N    R1,??DataTable8_24
   \   00000012   0x....             LDR.N    R0,??DataTable8_25
   \   00000014   0x.... 0x....      BL       addConsoleAction
    134          #if EFI_TUNER_STUDIO || defined(__DOXYGEN__)
    135          	/**
    136          	 * This would schedule write to flash once the engine is stopped
    137          	 */
    138          	addConsoleAction("burnconfig", requestBurn);
   \   00000018   0x....             LDR.N    R1,??DataTable8_26
   \   0000001A   0x....             LDR.N    R0,??DataTable8_27
   \   0000001C   0x.... 0x....      BL       addConsoleAction
    139          #endif
    140          	addConsoleAction("resetconfig", doResetConfiguration);
   \   00000020   0x....             LDR.N    R1,??DataTable8_28
   \   00000022   0x....             LDR.N    R0,??DataTable8_29
   \   00000024   0x.... 0x....      BL       addConsoleAction
    141          	addConsoleAction("rewriteconfig", rewriteConfig);
   \   00000028   0x....             LDR.N    R1,??DataTable8_30
   \   0000002A   0x....             LDR.N    R0,??DataTable8_31
   \   0000002C   0x.... 0x....      BL       addConsoleAction
    142          }
   \   00000030   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     `?<Constant "Scheduling configurat...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     logger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     needToWriteConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x........         DC32     `?<Constant "Writing pending confi...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     `?<Constant " !!!!!!!!!!!!!!!!!!!!...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x........         DC32     persistentState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x........         DC32     `?<Constant "flash compatible with %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x........         DC32     persistentState+0x3BC0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x........         DC32     `?<Constant "Reseting flash: size=%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x08060000         DC32     0x8060000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   0x........         DC32     `?<Constant "Flashing with CRC=%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   0x........         DC32     `?<Constant "Flash programmed in (...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   0x........         DC32     `?<Constant "Flashing result: %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   0x........         DC32     maxLockTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   0x........         DC32     `?<Constant "CRC got %d while %d e...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \   00000000   0x........         DC32     engineConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_16:
   \   00000000   0x01221239         DC32     0x1221239

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_17:
   \   00000000   0x........         DC32     `?<Constant "readFromFlash()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_18:
   \   00000000   0x........         DC32     `?<Constant "Need to reset flash t...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_19:
   \   00000000   0x........         DC32     `?<Constant "Got valid configurati...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_20:
   \   00000000   0x........         DC32     `?<Constant "Resetting but saving ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_21:
   \   00000000   0x........         DC32     `?<Constant "Need to reset flash t...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_22:
   \   00000000   0x........         DC32     _Z13readFromFlashv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_23:
   \   00000000   0x........         DC32     `?<Constant "readconfig">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_24:
   \   00000000   0x........         DC32     _Z15writeToFlashNowv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_25:
   \   00000000   0x........         DC32     `?<Constant "writeconfig">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_26:
   \   00000000   0x........         DC32     _Z11requestBurnv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_27:
   \   00000000   0x........         DC32     `?<Constant "burnconfig">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_28:
   \   00000000   0x........         DC32     _Z20doResetConfigurationv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_29:
   \   00000000   0x........         DC32     `?<Constant "resetconfig">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_30:
   \   00000000   0x........         DC32     _Z13rewriteConfigv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_31:
   \   00000000   0x........         DC32     `?<Constant "rewriteconfig">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "Scheduling configurat...">`:
   \   00000000   0x53 0x63          DC8 "Scheduling configuration write"
   \              0x68 0x65    
   \              0x64 0x75    
   \              0x6C 0x69    
   \              0x6E 0x67    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x66 0x69    
   \              0x67 0x75    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Writing pending confi...">`:
   \   00000000   0x57 0x72          DC8 "Writing pending configuration"
   \              0x69 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x70 0x65    
   \              0x6E 0x64    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x63 0x6F    
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x75 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " !!!!!!!!!!!!!!!!!!!!...">`:
   \   00000000   0x20 0x21          DC8 20H, 21H, 21H, 21H, 21H, 21H, 21H, 21H
   \              0x21 0x21    
   \              0x21 0x21    
   \              0x21 0x21    
   \   00000008   0x21 0x21          DC8 21H, 21H, 21H, 21H, 21H, 21H, 21H, 21H
   \              0x21 0x21    
   \              0x21 0x21    
   \              0x21 0x21    
   \   00000010   0x21 0x21          DC8 21H, 21H, 21H, 21H, 21H, 20H, 42H, 45H
   \              0x21 0x21    
   \              0x21 0x20    
   \              0x42 0x45    
   \   00000018   0x20 0x53          DC8 20H, 53H, 55H, 52H, 45H, 20H, 4EH, 4FH
   \              0x55 0x52    
   \              0x45 0x20    
   \              0x4E 0x4F    
   \   00000020   0x54 0x20          DC8 54H, 20H, 57H, 52H, 49H, 54H, 45H, 20H
   \              0x57 0x52    
   \              0x49 0x54    
   \              0x45 0x20    
   \   00000028   0x57 0x49          DC8 57H, 49H, 54H, 48H, 20H, 49H, 47H, 4EH
   \              0x54 0x48    
   \              0x20 0x49    
   \              0x47 0x4E    
   \   00000030   0x49 0x54          DC8 49H, 54H, 49H, 4FH, 4EH, 20H, 4FH, 4EH
   \              0x49 0x4F    
   \              0x4E 0x20    
   \              0x4F 0x4E    
   \   00000038   0x20 0x21          DC8 20H, 21H, 21H, 21H, 21H, 21H, 21H, 21H
   \              0x21 0x21    
   \              0x21 0x21    
   \              0x21 0x21    
   \   00000040   0x21 0x21          DC8 21H, 21H, 21H, 21H, 21H, 21H, 21H, 21H
   \              0x21 0x21    
   \              0x21 0x21    
   \              0x21 0x21    
   \   00000048   0x21 0x21          DC8 21H, 21H, 21H, 21H, 21H, 0
   \              0x21 0x21    
   \              0x21 0x00    
   \   0000004E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "flash compatible with %d">`:
   \   00000000   0x66 0x6C          DC8 "flash compatible with %d"
   \              0x61 0x73    
   \              0x68 0x20    
   \              0x63 0x6F    
   \              0x6D 0x70    
   \              0x61 0x74    
   \              0x69 0x62    
   \              0x6C 0x65    
   \              0x20 0x77    
   \              0x69 0x74    
   \              0x68 0x20    
   \              0x25 0x64    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Reseting flash: size=%d">`:
   \   00000000   0x52 0x65          DC8 "Reseting flash: size=%d"
   \              0x73 0x65    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x66    
   \              0x6C 0x61    
   \              0x73 0x68    
   \              0x3A 0x20    
   \              0x73 0x69    
   \              0x7A 0x65    
   \              0x3D 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Flashing with CRC=%d">`:
   \   00000000   0x46 0x6C          DC8 "Flashing with CRC=%d"
   \              0x61 0x73    
   \              0x68 0x69    
   \              0x6E 0x67    
   \              0x20 0x77    
   \              0x69 0x74    
   \              0x68 0x20    
   \              0x43 0x52    
   \              0x43 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Flash programmed in (...">`:
   \   00000000   0x46 0x6C          DC8 "Flash programmed in (ms): %d"
   \              0x61 0x73    
   \              0x68 0x20    
   \              0x70 0x72    
   \              0x6F 0x67    
   \              0x72 0x61    
   \              0x6D 0x6D    
   \              0x65 0x64    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x28 0x6D    
   \              0x73 0x29    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Flashing result: %d">`:
   \   00000000   0x46 0x6C          DC8 "Flashing result: %d"
   \              0x61 0x73    
   \              0x68 0x69    
   \              0x6E 0x67    
   \              0x20 0x72    
   \              0x65 0x73    
   \              0x75 0x6C    
   \              0x74 0x3A    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "CRC got %d while %d e...">`:
   \   00000000   0x43 0x52          DC8 "CRC got %d while %d expected"
   \              0x43 0x20    
   \              0x67 0x6F    
   \              0x74 0x20    
   \              0x25 0x64    
   \              0x20 0x77    
   \              0x68 0x69    
   \              0x6C 0x65    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x65 0x78    
   \              0x70 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "readFromFlash()">`:
   \   00000000   0x72 0x65          DC8 "readFromFlash()"
   \              0x61 0x64    
   \              0x46 0x72    
   \              0x6F 0x6D    
   \              0x46 0x6C    
   \              0x61 0x73    
   \              0x68 0x28    
   \              0x29 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Need to reset flash t...">`:
   \   00000000   0x4E 0x65          DC8 "Need to reset flash to default due to CRC"
   \              0x65 0x64    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x72 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x66 0x6C    
   \              0x61 0x73    
   \              0x68 0x20    
   \              0x74 0x6F    
   \              0x20 0x64    
   \              0x65 0x66    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x20 0x64    
   \              0x75 0x65    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x43 0x52    
   \              0x43 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Got valid configurati...">`:
   \   00000000   0x47 0x6F          DC8 "Got valid configuration from flash!"
   \              0x74 0x20    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x63 0x6F    
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x75 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x20 0x66    
   \              0x6C 0x61    
   \              0x73 0x68    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Resetting but saving ...">`:
   \   00000000   0x52 0x65          DC8 "Resetting but saving engine type [%d]"
   \              0x73 0x65    
   \              0x74 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x62 0x75    
   \              0x74 0x20    
   \              0x73 0x61    
   \              0x76 0x69    
   \              0x6E 0x67    
   \              0x20 0x65    
   \              0x6E 0x67    
   \              0x69 0x6E    
   \              0x65 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x20 0x5B    
   \              0x25 0x64    
   \              0x5D 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Need to reset flash t...">_1`:
   \   00000000   0x4E 0x65          DC8 4EH, 65H, 65H, 64H, 20H, 74H, 6FH, 20H
   \              0x65 0x64    
   \              0x20 0x74    
   \              0x6F 0x20    
   \   00000008   0x72 0x65          DC8 72H, 65H, 73H, 65H, 74H, 20H, 66H, 6CH
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x66 0x6C    
   \   00000010   0x61 0x73          DC8 61H, 73H, 68H, 20H, 74H, 6FH, 20H, 64H
   \              0x68 0x20    
   \              0x74 0x6F    
   \              0x20 0x64    
   \   00000018   0x65 0x66          DC8 65H, 66H, 61H, 75H, 6CH, 74H, 20H, 64H
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x20 0x64    
   \   00000020   0x75 0x65          DC8 75H, 65H, 20H, 74H, 6FH, 20H, 76H, 65H
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x76 0x65    
   \   00000028   0x72 0x73          DC8 72H, 73H, 69H, 6FH, 6EH, 20H, 63H, 68H
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x63 0x68    
   \   00000030   0x61 0x6E          DC8 61H, 6EH, 67H, 65H, 0
   \              0x67 0x65    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "readconfig">`:
   \   00000000   0x72 0x65          DC8 "readconfig"
   \              0x61 0x64    
   \              0x63 0x6F    
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "writeconfig">`:
   \   00000000   0x77 0x72          DC8 "writeconfig"
   \              0x69 0x74    
   \              0x65 0x63    
   \              0x6F 0x6E    
   \              0x66 0x69    
   \              0x67 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "burnconfig">`:
   \   00000000   0x62 0x75          DC8 "burnconfig"
   \              0x72 0x6E    
   \              0x63 0x6F    
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "resetconfig">`:
   \   00000000   0x72 0x65          DC8 "resetconfig"
   \              0x73 0x65    
   \              0x74 0x63    
   \              0x6F 0x6E    
   \              0x66 0x69    
   \              0x67 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "rewriteconfig">`:
   \   00000000   0x72 0x65          DC8 "rewriteconfig"
   \              0x77 0x72    
   \              0x69 0x74    
   \              0x65 0x63    
   \              0x6F 0x6E    
   \              0x66 0x69    
   \              0x67 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0
    143          
    144          #endif /* EFI_INTERNAL_FLASH */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   doResetConfiguration()
         8   -> resetConfigurationExt(Logging *, engine_type_e)
       8   flashStateCrc(persistent_config_container_s *)
         8   -> calc_crc
       0   getNeedToWriteConfiguration()
       0   hasValidEngineType(engine_configuration_s *)
       8   initFlash(Logging *)
         8   -> addConsoleAction
      16   isValidCrc(persistent_config_container_s *)
        16   -> flashStateCrc(persistent_config_container_s *)
        16   -> scheduleMsg
       8   readFromFlash()
         8   -> applyNonPersistentConfiguration(Logging *)
         8   -> flashRead
         8   -> getRusEfiVersion
         8   -> hasValidEngineType(engine_configuration_s *)
         8   -> isValidCrc(persistent_config_container_s *)
         8   -> printMsg
         8   -> resetConfigurationExt(Logging *, engine_type_e)
       8   rewriteConfig()
         8   -> doResetConfiguration()
         8   -> writeToFlashNow()
       8   setNeedToWriteConfiguration()
         8   -> scheduleMsg
       8   writeToFlashIfPending()
         8   -> getNeedToWriteConfiguration()
         8   -> scheduleMsg
         8   -> writeToFlashNow()
      16   writeToFlashNow()
        16   -> currentTimeMillis
        16   -> flashErase
        16   -> flashStateCrc(persistent_config_container_s *)
        16   -> flashWrite
        16   -> scheduleMsg


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      80  ?<Constant " !!!!!!!!!!!!!!!!!!!!...">
      32  ?<Constant "CRC got %d while %d e...">
      32  ?<Constant "Flash programmed in (...">
      20  ?<Constant "Flashing result: %d">
      24  ?<Constant "Flashing with CRC=%d">
      36  ?<Constant "Got valid configurati...">
      44  ?<Constant "Need to reset flash t...">
      56  ?<Constant "Need to reset flash t...">_1
      24  ?<Constant "Reseting flash: size=%d">
      40  ?<Constant "Resetting but saving ...">
      32  ?<Constant "Scheduling configurat...">
      32  ?<Constant "Writing pending confi...">
      12  ?<Constant "burnconfig">
      28  ?<Constant "flash compatible with %d">
      16  ?<Constant "readFromFlash()">
      12  ?<Constant "readconfig">
      12  ?<Constant "resetconfig">
      16  ?<Constant "rewriteconfig">
      12  ?<Constant "writeconfig">
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_13
       4  ??DataTable8_14
       4  ??DataTable8_15
       4  ??DataTable8_16
       4  ??DataTable8_17
       4  ??DataTable8_18
       4  ??DataTable8_19
       4  ??DataTable8_2
       4  ??DataTable8_20
       4  ??DataTable8_21
       4  ??DataTable8_22
       4  ??DataTable8_23
       4  ??DataTable8_24
       4  ??DataTable8_25
       4  ??DataTable8_26
       4  ??DataTable8_27
       4  ??DataTable8_28
       4  ??DataTable8_29
       4  ??DataTable8_3
       4  ??DataTable8_30
       4  ??DataTable8_31
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
      18  doResetConfiguration()
      18  flashStateCrc(persistent_config_container_s *)
       6  getNeedToWriteConfiguration()
      24  hasValidEngineType(engine_configuration_s *)
      50  initFlash(Logging *)
      70  isValidCrc(persistent_config_container_s *)
       4  logger
       1  needToWriteConfiguration
     178  readFromFlash()
      12  rewriteConfig()
      20  setNeedToWriteConfiguration()
      32  writeToFlashIfPending()
     150  writeToFlashNow()

 
   5 bytes in section .bss
 560 bytes in section .rodata
 706 bytes in section .text
 
 706 bytes of CODE  memory
 560 bytes of CONST memory
   5 bytes of DATA  memory

Errors: none
Warnings: 1
