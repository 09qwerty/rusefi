###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:35 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\console\eficonso #
#                       le.cpp                                                #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\console\eficonso #
#                       le.cpp -lCN F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       Debug\List\ -lA F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\Debug\List\ -o F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\Debug\Obj\ --no_cse --no_unroll --no_inline    #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\e #
#                       ficonsole.lst                                         #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\ef #
#                       iconsole.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\console\eficonsole.cpp
      1          /**
      2           * @file    eficonsole.cpp
      3           * @brief   Console package entry point code
      4           *
      5           *
      6           * @date Nov 15, 2012
      7           * @author Andrey Belomutskiy, (c) 2012-2015
      8           *
      9           *
     10           * This file is part of rusEfi - see http://rusefi.com
     11           *
     12           * rusEfi is free software; you can redistribute it and/or modify it under the terms of
     13           * the GNU General Public License as published by the Free Software Foundation; either
     14           * version 3 of the License, or (at your option) any later version.
     15           *
     16           * rusEfi is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
     17           * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     18           * GNU General Public License for more details.
     19           *
     20           * You should have received a copy of the GNU General Public License along with this program.
     21           * If not, see <http://www.gnu.org/licenses/>.
     22           */
     23          
     24          #include <stdarg.h>
     25          #include <stdbool.h>
     26          #include "main.h"
     27          #include <chprintf.h>
     28          #include "eficonsole.h"
     29          #include "console_io.h"
     30          #include "svnversion.h"
     31          

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine:
   \   00000000   0xB580             PUSH     {R7,LR}
     32          static LoggingWithStorage logger("console");
   \   00000002   0x....             LDR.N    R1,??DataTable6
   \   00000004   0x....             LDR.N    R0,??DataTable6_1
   \   00000006   0x.... 0x....      BL       _ZN18LoggingWithStorageC1EPKc
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     logger:
   \   00000000                      DS8 260
     33          

   \                                 In section .bss, align 4
     34          static char fatalErrorMessage[200];
   \                     fatalErrorMessage:
   \   00000000                      DS8 200
     35          

   \                                 In section .text, align 2, keep-with-next
     36          void fatal3(char *msg, char *file, int line) {
   \                     _Z6fatal3PcS_i:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     37          	strncpy(fatalErrorMessage, msg, sizeof(fatalErrorMessage) - 1);
   \   00000008   0x22C7             MOVS     R2,#+199
   \   0000000A   0x0021             MOVS     R1,R4
   \   0000000C   0x....             LDR.N    R0,??DataTable6_2
   \   0000000E   0x.... 0x....      BL       strncpy
     38          	fatalErrorMessage[sizeof(fatalErrorMessage) - 1] = 0; // just to be sure
   \   00000012   0x....             LDR.N    R1,??DataTable6_2
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0xF881 0x20C7      STRB     R2,[R1, #+199]
     39          #if EFI_CUSTOM_PANIC_METHOD
     40          	chDbgPanic3(fatalErrorMessage, file, line);
   \   0000001A   0x0032             MOVS     R2,R6
   \   0000001C   0x0029             MOVS     R1,R5
   \   0000001E   0x.... 0x....      BL       chDbgPanic3
     41          #else
     42          	chDbgPanic(fatalErrorMessage);
     43          #endif
     44          }
   \   00000022   0xBD70             POP      {R4-R6,PC}       ;; return
     45          

   \                                 In section .text, align 2, keep-with-next
     46          static void myfatal(void) {
   \                     _Z7myfatalv:
   \   00000000   0xB580             PUSH     {R7,LR}
     47          	chDbgCheck(0, "my fatal");
   \   00000002   0x222F             MOVS     R2,#+47
   \   00000004   0x....             LDR.N    R1,??DataTable6_3
   \   00000006   0x....             LDR.N    R0,??DataTable6_4
   \   00000008   0x.... 0x....      BL       chDbgPanic3
     48          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
     49          

   \                                 In section .text, align 2, keep-with-next
     50          static void myerror(void) {
   \                     _Z7myerrorv:
   \   00000000   0xB580             PUSH     {R7,LR}
     51          	firmwareError("firmwareError: %d", getRusEfiVersion());
   \   00000002   0x.... 0x....      BL       getRusEfiVersion
   \   00000006   0x0001             MOVS     R1,R0
   \   00000008   0x....             LDR.N    R0,??DataTable6_5
   \   0000000A   0x.... 0x....      BL       firmwareError
     52          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
     53          

   \                                 In section .text, align 2, keep-with-next
     54          static void sayNothing(void) {
     55          	/**
     56          	 * @see EngineState#TS_PROTOCOL_TAG
     57          	 * this empty response is part of protocol check
     58          	 * todo: make this logic smarter?
     59          	 */
     60          }
   \                     _Z10sayNothingv:
   \   00000000   0x4770             BX       LR               ;; return
     61          

   \                                 In section .text, align 2, keep-with-next
     62          static void sayHello(void) {
   \                     _Z8sayHellov:
   \   00000000   0xB580             PUSH     {R7,LR}
     63          	scheduleMsg(&logger, "*** rusEFI (c) Andrey Belomutskiy 2012-2015. All rights reserved.");
   \   00000002   0x....             LDR.N    R1,??DataTable6_6
   \   00000004   0x....             LDR.N    R0,??DataTable6_1
   \   00000006   0x.... 0x....      BL       scheduleMsg
     64          	scheduleMsg(&logger, "rusEFI v%d@%s", getRusEfiVersion(), VCS_VERSION);
   \   0000000A   0x.... 0x....      BL       getRusEfiVersion
   \   0000000E   0x....             LDR.N    R3,??DataTable6_7
   \   00000010   0x0002             MOVS     R2,R0
   \   00000012   0x....             LDR.N    R1,??DataTable6_8
   \   00000014   0x....             LDR.N    R0,??DataTable6_1
   \   00000016   0x.... 0x....      BL       scheduleMsg
     65          	scheduleMsg(&logger, "*** Chibios Kernel:       %s", CH_KERNEL_VERSION);
   \   0000001A   0x....             LDR.N    R2,??DataTable6_9
   \   0000001C   0x....             LDR.N    R1,??DataTable6_10
   \   0000001E   0x....             LDR.N    R0,??DataTable6_1
   \   00000020   0x.... 0x....      BL       scheduleMsg
     66          	scheduleMsg(&logger, "*** Compiled:     " __DATE__ " - " __TIME__ "");
   \   00000024   0x....             LDR.N    R1,??DataTable6_11
   \   00000026   0x....             LDR.N    R0,??DataTable6_1
   \   00000028   0x.... 0x....      BL       scheduleMsg
     67          	scheduleMsg(&logger, "COMPILER=%s", __VERSION__);
   \   0000002C   0x....             LDR.N    R2,??DataTable6_12
   \   0000002E   0x....             LDR.N    R1,??DataTable6_13
   \   00000030   0x....             LDR.N    R0,??DataTable6_1
   \   00000032   0x.... 0x....      BL       scheduleMsg
     68          	scheduleMsg(&logger, "CH_FREQUENCY=%d", CH_FREQUENCY);
   \   00000036   0xF44F 0x727A      MOV      R2,#+1000
   \   0000003A   0x....             LDR.N    R1,??DataTable6_14
   \   0000003C   0x....             LDR.N    R0,??DataTable6_1
   \   0000003E   0x.... 0x....      BL       scheduleMsg
     69          #ifdef SERIAL_SPEED
     70          	scheduleMsg(&logger, "SERIAL_SPEED=%d", SERIAL_SPEED);
   \   00000042   0xF45F 0x32E1      MOVS     R2,#+115200
   \   00000046   0x....             LDR.N    R1,??DataTable6_15
   \   00000048   0x....             LDR.N    R0,??DataTable6_1
   \   0000004A   0x.... 0x....      BL       scheduleMsg
     71          #endif
     72          
     73          #ifdef CORTEX_MAX_KERNEL_PRIORITY
     74          	scheduleMsg(&logger, "CORTEX_MAX_KERNEL_PRIORITY=%d", CORTEX_MAX_KERNEL_PRIORITY);
   \   0000004E   0x2202             MOVS     R2,#+2
   \   00000050   0x....             LDR.N    R1,??DataTable6_16
   \   00000052   0x....             LDR.N    R0,??DataTable6_1
   \   00000054   0x.... 0x....      BL       scheduleMsg
     75          #endif
     76          
     77          #ifdef STM32_ADCCLK
     78          	scheduleMsg(&logger, "STM32_ADCCLK=%d", STM32_ADCCLK);
   \   00000058   0x....             LDR.N    R2,??DataTable6_17  ;; 0x1406f40
   \   0000005A   0x....             LDR.N    R1,??DataTable6_18
   \   0000005C   0x....             LDR.N    R0,??DataTable6_1
   \   0000005E   0x.... 0x....      BL       scheduleMsg
     79          	scheduleMsg(&logger, "STM32_TIMCLK1=%d", STM32_TIMCLK1);
   \   00000062   0x....             LDR.N    R2,??DataTable6_19  ;; 0x501bd00
   \   00000064   0x....             LDR.N    R1,??DataTable6_20
   \   00000066   0x....             LDR.N    R0,??DataTable6_1
   \   00000068   0x.... 0x....      BL       scheduleMsg
     80          	scheduleMsg(&logger, "STM32_TIMCLK2=%d", STM32_TIMCLK2);
   \   0000006C   0x....             LDR.N    R2,??DataTable6_21  ;; 0xa037a00
   \   0000006E   0x....             LDR.N    R1,??DataTable6_22
   \   00000070   0x....             LDR.N    R0,??DataTable6_1
   \   00000072   0x.... 0x....      BL       scheduleMsg
     81          #endif
     82          #ifdef STM32_PCLK1
     83          	scheduleMsg(&logger, "STM32_PCLK1=%d", STM32_PCLK1);
   \   00000076   0x....             LDR.N    R2,??DataTable6_23  ;; 0x280de80
   \   00000078   0x....             LDR.N    R1,??DataTable6_24
   \   0000007A   0x....             LDR.N    R0,??DataTable6_1
   \   0000007C   0x.... 0x....      BL       scheduleMsg
     84          	scheduleMsg(&logger, "STM32_PCLK2=%d", STM32_PCLK2);
   \   00000080   0x....             LDR.N    R2,??DataTable6_19  ;; 0x501bd00
   \   00000082   0x....             LDR.N    R1,??DataTable6_25
   \   00000084   0x....             LDR.N    R0,??DataTable6_1
   \   00000086   0x.... 0x....      BL       scheduleMsg
     85          #endif
     86          
     87          	scheduleMsg(&logger, "PORT_IDLE_THREAD_STACK_SIZE=%d", PORT_IDLE_THREAD_STACK_SIZE);
   \   0000008A   0xF44F 0x6280      MOV      R2,#+1024
   \   0000008E   0x....             LDR.N    R1,??DataTable6_26
   \   00000090   0x....             LDR.N    R0,??DataTable6_1
   \   00000092   0x.... 0x....      BL       scheduleMsg
     88          
     89          	scheduleMsg(&logger, "CH_DBG_ENABLE_ASSERTS=%d", CH_DBG_ENABLE_ASSERTS);
   \   00000096   0x2201             MOVS     R2,#+1
   \   00000098   0x....             LDR.N    R1,??DataTable6_27
   \   0000009A   0x....             LDR.N    R0,??DataTable6_1
   \   0000009C   0x.... 0x....      BL       scheduleMsg
     90          	scheduleMsg(&logger, "CH_DBG_ENABLED=%d", CH_DBG_ENABLED);
   \   000000A0   0x2201             MOVS     R2,#+1
   \   000000A2   0x....             LDR.N    R1,??DataTable6_28
   \   000000A4   0x....             LDR.N    R0,??DataTable6_1
   \   000000A6   0x.... 0x....      BL       scheduleMsg
     91          	scheduleMsg(&logger, "CH_DBG_SYSTEM_STATE_CHECK=%d", CH_DBG_SYSTEM_STATE_CHECK);
   \   000000AA   0x2201             MOVS     R2,#+1
   \   000000AC   0x....             LDR.N    R1,??DataTable6_29
   \   000000AE   0x....             LDR.N    R0,??DataTable6_1
   \   000000B0   0x.... 0x....      BL       scheduleMsg
     92          	scheduleMsg(&logger, "CH_DBG_ENABLE_STACK_CHECK=%d", CH_DBG_ENABLE_STACK_CHECK);
   \   000000B4   0x2201             MOVS     R2,#+1
   \   000000B6   0x....             LDR.N    R1,??DataTable6_30
   \   000000B8   0x....             LDR.N    R0,??DataTable6_1
   \   000000BA   0x.... 0x....      BL       scheduleMsg
     93          
     94          #ifdef EFI_WAVE_ANALYZER
     95          	scheduleMsg(&logger, "EFI_WAVE_ANALYZER=%d", EFI_WAVE_ANALYZER);
   \   000000BE   0x2201             MOVS     R2,#+1
   \   000000C0   0x....             LDR.N    R1,??DataTable6_31
   \   000000C2   0x....             LDR.N    R0,??DataTable6_1
   \   000000C4   0x.... 0x....      BL       scheduleMsg
     96          #endif
     97          #ifdef EFI_TUNER_STUDIO
     98          	scheduleMsg(&logger, "EFI_TUNER_STUDIO=%d", EFI_TUNER_STUDIO);
   \   000000C8   0x2201             MOVS     R2,#+1
   \   000000CA   0x....             LDR.N    R1,??DataTable6_32
   \   000000CC   0x....             LDR.N    R0,??DataTable6_1
   \   000000CE   0x.... 0x....      BL       scheduleMsg
     99          #else
    100          	scheduleMsg(&logger, "EFI_TUNER_STUDIO=%d", 0);
    101          #endif
    102          
    103          #ifdef EFI_SIGNAL_EXECUTOR_SLEEP
    104          	scheduleMsg(&logger, "EFI_SIGNAL_EXECUTOR_SLEEP=%d", EFI_SIGNAL_EXECUTOR_SLEEP);
   \   000000D2   0x2200             MOVS     R2,#+0
   \   000000D4   0x....             LDR.N    R1,??DataTable6_33
   \   000000D6   0x....             LDR.N    R0,??DataTable6_1
   \   000000D8   0x.... 0x....      BL       scheduleMsg
    105          #endif
    106          
    107          #ifdef EFI_SIGNAL_EXECUTOR_HW_TIMER
    108          	scheduleMsg(&logger, "EFI_SIGNAL_EXECUTOR_HW_TIMER=%d", EFI_SIGNAL_EXECUTOR_HW_TIMER);
   \   000000DC   0x2200             MOVS     R2,#+0
   \   000000DE   0x....             LDR.N    R1,??DataTable6_34
   \   000000E0   0x....             LDR.N    R0,??DataTable6_1
   \   000000E2   0x.... 0x....      BL       scheduleMsg
    109          #endif
    110          
    111          #if defined(EFI_SHAFT_POSITION_INPUT) || defined(__DOXYGEN__)
    112          	scheduleMsg(&logger, "EFI_SHAFT_POSITION_INPUT=%d", EFI_SHAFT_POSITION_INPUT);
   \   000000E6   0x2201             MOVS     R2,#+1
   \   000000E8   0x....             LDR.N    R1,??DataTable6_35
   \   000000EA   0x....             LDR.N    R0,??DataTable6_1
   \   000000EC   0x.... 0x....      BL       scheduleMsg
    113          #endif
    114          #ifdef EFI_INTERNAL_ADC
    115          	scheduleMsg(&logger, "EFI_INTERNAL_ADC=%d", EFI_INTERNAL_ADC);
   \   000000F0   0x2201             MOVS     R2,#+1
   \   000000F2   0x....             LDR.N    R1,??DataTable6_36
   \   000000F4   0x....             LDR.N    R0,??DataTable6_1
   \   000000F6   0x.... 0x....      BL       scheduleMsg
    116          #endif
    117          
    118          //	printSimpleMsg(&logger, "", );
    119          //	printSimpleMsg(&logger, "", );
    120          
    121          	/**
    122          	 * Time to finish output. This is needed to avoid mix-up of this methods output and console command confirmation
    123          	 */
    124          	chThdSleepMilliseconds(5);
   \   000000FA   0x2005             MOVS     R0,#+5
   \   000000FC   0x.... 0x....      BL       chThdSleep
    125          }
   \   00000100   0xBD01             POP      {R0,PC}          ;; return
    126          
    127          /**
    128           * This methods prints all threads and their total times
    129           */

   \                                 In section .text, align 2, keep-with-next
    130          static void cmd_threads(void) {
   \                     _Z11cmd_threadsv:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    131          #if CH_DBG_THREADS_PROFILING || defined(__DOXYGEN__)
    132            static const char *states[] = { THD_STATE_NAMES };
    133            Thread *tp;
    134            
    135            scheduleMsg(&logger, "    addr    stack prio refs     state time");
   \   00000004   0x....             LDR.N    R1,??DataTable6_37
   \   00000006   0x....             LDR.N    R0,??DataTable6_1
   \   00000008   0x.... 0x....      BL       scheduleMsg
    136            tp = chRegFirstThread();
   \   0000000C   0x.... 0x....      BL       chRegFirstThread
   \   00000010   0x0004             MOVS     R4,R0
    137            while (tp != NULL) {    
   \                     ??cmd_threads_0:
   \   00000012   0x2C00             CMP      R4,#+0
   \   00000014   0xD018             BEQ.N    ??cmd_threads_1
    138              scheduleMsg(&logger, "%.8lx [%.8lx] %4lu %4lu %9s %lu %s", (uint32_t) tp, 0, (uint32_t) tp->p_prio,
    139          		(uint32_t) (0), states[tp->p_state], (uint32_t) tp->p_time, tp->p_name);
   \   00000016   0x69A0             LDR      R0,[R4, #+24]
   \   00000018   0x9004             STR      R0,[SP, #+16]
   \   0000001A   0x6A60             LDR      R0,[R4, #+36]
   \   0000001C   0x9003             STR      R0,[SP, #+12]
   \   0000001E   0xF894 0x0020      LDRB     R0,[R4, #+32]
   \   00000022   0x....             LDR.N    R1,??DataTable6_38
   \   00000024   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   00000028   0x9002             STR      R0,[SP, #+8]
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x9001             STR      R0,[SP, #+4]
   \   0000002E   0x68A0             LDR      R0,[R4, #+8]
   \   00000030   0x9000             STR      R0,[SP, #+0]
   \   00000032   0x2300             MOVS     R3,#+0
   \   00000034   0x0022             MOVS     R2,R4
   \   00000036   0x....             LDR.N    R1,??DataTable6_39
   \   00000038   0x....             LDR.N    R0,??DataTable6_1
   \   0000003A   0x.... 0x....      BL       scheduleMsg
    140              tp = chRegNextThread(tp);
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x.... 0x....      BL       chRegNextThread
   \   00000044   0x0004             MOVS     R4,R0
   \   00000046   0xE7E4             B.N      ??cmd_threads_0
    141            } 
    142            
    143          #else
    144            scheduleMsg(&logger, "CH_DBG_THREADS_PROFILING is not enabled");
    145          #endif
    146          }
   \                     ??cmd_threads_1:
   \   00000048   0xB006             ADD      SP,SP,#+24
   \   0000004A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .data, align 4
   \                     ??states:
   \   00000000   0x........         DC32 `?<Constant "READY">`, `?<Constant "CURRENT">`
   \              0x........   
   \   00000008   0x........         DC32 `?<Constant "SUSPENDED">`, `?<Constant "WTSEM">`
   \              0x........   
   \   00000010   0x........         DC32 `?<Constant "WTMTX">`, `?<Constant "WTCOND">`
   \              0x........   
   \   00000018   0x........         DC32 `?<Constant "SLEEPING">`, `?<Constant "WTEXIT">`
   \              0x........   
   \   00000020   0x........         DC32 `?<Constant "WTOREVT">`, `?<Constant "WTANDEVT">`
   \              0x........   
   \   00000028   0x........         DC32 `?<Constant "SNDMSGQ">`, `?<Constant "SNDMSG">`
   \              0x........   
   \   00000030   0x........         DC32 `?<Constant "WTMSG">`, `?<Constant "WTQUEUE">`
   \              0x........   
   \   00000038   0x........         DC32 `?<Constant "FINAL">`
    147          
    148          /**
    149           * This methods prints the message to whatever is configured as our primary console
    150           */

   \                                 In section .text, align 2, keep-with-next
    151          void print(const char *format, ...) {
   \                     print:
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB530             PUSH     {R4,R5,LR}
   \   00000004   0x0004             MOVS     R4,R0
    152          #if !EFI_UART_ECHO_TEST_MODE
    153          	if (!isConsoleReady()) {
   \   00000006   0x.... 0x....      BL       _Z14isConsoleReadyv
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD007             BEQ.N    ??print_0
    154          		return;
    155          	}
    156          	va_list ap;
    157          	va_start(ap, format);
   \                     ??print_1:
   \   0000000E   0xA803             ADD      R0,SP,#+12
   \   00000010   0x0005             MOVS     R5,R0
    158          	chvprintf((BaseSequentialStream*) getConsoleChannel(), format, ap);
   \   00000012   0x.... 0x....      BL       _Z17getConsoleChannelv
   \   00000016   0x002A             MOVS     R2,R5
   \   00000018   0x0021             MOVS     R1,R4
   \   0000001A   0x.... 0x....      BL       chvprintf
    159          	va_end(ap);
    160          #endif /* EFI_UART_ECHO_TEST_MODE */
    161          }
   \                     ??print_0:
   \   0000001E   0xBC30             POP      {R4,R5}
   \   00000020   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return
    162          

   \                                 In section .text, align 2, keep-with-next
    163          void initializeConsole(Logging *sharedLogger) {
   \                     initializeConsole:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    164          	initIntermediateLoggingBuffer();
   \   00000004   0x.... 0x....      BL       initIntermediateLoggingBuffer
    165          	initConsoleLogic(sharedLogger);
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       initConsoleLogic
    166          
    167          	startConsole(sharedLogger, &handleConsoleLine);
   \   0000000E   0x....             LDR.N    R1,??DataTable6_40
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       _Z12startConsoleP7LoggingPFvPcE
    168          
    169          	sayHello();
   \   00000016   0x.... 0x....      BL       _Z8sayHellov
    170          	addConsoleAction("test", sayNothing);
   \   0000001A   0x....             LDR.N    R1,??DataTable6_41
   \   0000001C   0x....             LDR.N    R0,??DataTable6_42
   \   0000001E   0x.... 0x....      BL       addConsoleAction
    171          	addConsoleAction("hello", sayHello);
   \   00000022   0x....             LDR.N    R1,??DataTable6_43
   \   00000024   0x....             LDR.N    R0,??DataTable6_44
   \   00000026   0x.... 0x....      BL       addConsoleAction
    172          #if EFI_HAS_RESET
    173          	addConsoleAction("reset", scheduleReset);
    174          #endif
    175          
    176          	addConsoleAction("fatal", myfatal);
   \   0000002A   0x....             LDR.N    R1,??DataTable6_45
   \   0000002C   0x....             LDR.N    R0,??DataTable6_46
   \   0000002E   0x.... 0x....      BL       addConsoleAction
    177          	addConsoleAction("error", myerror);
   \   00000032   0x....             LDR.N    R1,??DataTable6_47
   \   00000034   0x....             LDR.N    R0,??DataTable6_48
   \   00000036   0x.... 0x....      BL       addConsoleAction
    178          	addConsoleAction("threadsinfo", cmd_threads);
   \   0000003A   0x....             LDR.N    R1,??DataTable6_49
   \   0000003C   0x....             LDR.N    R0,??DataTable6_50
   \   0000003E   0x.... 0x....      BL       addConsoleAction
    179          }
   \   00000042   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     `?<Constant "console">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     logger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     fatalErrorMessage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     `?<Constant "F:\\\\stuff\\\\rusefi_sourc...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     `?<Constant "\\"my fatal\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     `?<Constant "firmwareError: %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     `?<Constant "*** rusEFI (c) Andrey...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     `?<Constant "8529">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x........         DC32     `?<Constant "rusEFI v%d@%s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x........         DC32     `?<Constant "2.6.8">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x........         DC32     `?<Constant "*** Chibios Kernel:  ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x........         DC32     `?<Constant "*** Compiled:     Jun...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   0x........         DC32     `?<Constant "IAR ANSI C/C++ Compil...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \   00000000   0x........         DC32     `?<Constant "COMPILER=%s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \   00000000   0x........         DC32     `?<Constant "CH_FREQUENCY=%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_15:
   \   00000000   0x........         DC32     `?<Constant "SERIAL_SPEED=%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_16:
   \   00000000   0x........         DC32     `?<Constant "CORTEX_MAX_KERNEL_PRI...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_17:
   \   00000000   0x01406F40         DC32     0x1406f40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_18:
   \   00000000   0x........         DC32     `?<Constant "STM32_ADCCLK=%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_19:
   \   00000000   0x0501BD00         DC32     0x501bd00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_20:
   \   00000000   0x........         DC32     `?<Constant "STM32_TIMCLK1=%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_21:
   \   00000000   0x0A037A00         DC32     0xa037a00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_22:
   \   00000000   0x........         DC32     `?<Constant "STM32_TIMCLK2=%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_23:
   \   00000000   0x0280DE80         DC32     0x280de80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_24:
   \   00000000   0x........         DC32     `?<Constant "STM32_PCLK1=%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_25:
   \   00000000   0x........         DC32     `?<Constant "STM32_PCLK2=%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_26:
   \   00000000   0x........         DC32     `?<Constant "PORT_IDLE_THREAD_STAC...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_27:
   \   00000000   0x........         DC32     `?<Constant "CH_DBG_ENABLE_ASSERTS=%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_28:
   \   00000000   0x........         DC32     `?<Constant "CH_DBG_ENABLED=%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_29:
   \   00000000   0x........         DC32     `?<Constant "CH_DBG_SYSTEM_STATE_C...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_30:
   \   00000000   0x........         DC32     `?<Constant "CH_DBG_ENABLE_STACK_C...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_31:
   \   00000000   0x........         DC32     `?<Constant "EFI_WAVE_ANALYZER=%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_32:
   \   00000000   0x........         DC32     `?<Constant "EFI_TUNER_STUDIO=%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_33:
   \   00000000   0x........         DC32     `?<Constant "EFI_SIGNAL_EXECUTOR_S...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_34:
   \   00000000   0x........         DC32     `?<Constant "EFI_SIGNAL_EXECUTOR_H...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_35:
   \   00000000   0x........         DC32     `?<Constant "EFI_SHAFT_POSITION_IN...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_36:
   \   00000000   0x........         DC32     `?<Constant "EFI_INTERNAL_ADC=%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_37:
   \   00000000   0x........         DC32     `?<Constant "    addr    stack pri...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_38:
   \   00000000   0x........         DC32     ??states

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_39:
   \   00000000   0x........         DC32     `?<Constant "%.8lx [%.8lx] %4lu %4...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_40:
   \   00000000   0x........         DC32     handleConsoleLine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_41:
   \   00000000   0x........         DC32     _Z10sayNothingv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_42:
   \   00000000   0x........         DC32     `?<Constant "test">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_43:
   \   00000000   0x........         DC32     _Z8sayHellov

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_44:
   \   00000000   0x........         DC32     `?<Constant "hello">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_45:
   \   00000000   0x........         DC32     _Z7myfatalv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_46:
   \   00000000   0x........         DC32     `?<Constant "fatal">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_47:
   \   00000000   0x........         DC32     _Z7myerrorv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_48:
   \   00000000   0x........         DC32     `?<Constant "error">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_49:
   \   00000000   0x........         DC32     _Z11cmd_threadsv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_50:
   \   00000000   0x........         DC32     `?<Constant "threadsinfo">`

   \                                 In section .init_array, align 4, keep-with-next, root
   \   00000000   0x........         DC32    RELOC_ARM_TARGET1 __sti__routine

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"my fatal\\"()">`:
   \   00000000   0x22 0x6D          DC8 "\"my fatal\"()"
   \              0x79 0x20    
   \              0x66 0x61    
   \              0x74 0x61    
   \              0x6C 0x22    
   \              0x28 0x29    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "F:\\\\stuff\\\\rusefi_sourc...">`:
   \   00000000   0x46 0x3A          DC8 46H, 3AH, 5CH, 73H, 74H, 75H, 66H, 66H
   \              0x5C 0x73    
   \              0x74 0x75    
   \              0x66 0x66    
   \   00000008   0x5C 0x72          DC8 5CH, 72H, 75H, 73H, 65H, 66H, 69H, 5FH
   \              0x75 0x73    
   \              0x65 0x66    
   \              0x69 0x5F    
   \   00000010   0x73 0x6F          DC8 73H, 6FH, 75H, 72H, 63H, 65H, 66H, 6FH
   \              0x75 0x72    
   \              0x63 0x65    
   \              0x66 0x6F    
   \   00000018   0x72 0x67          DC8 72H, 67H, 65H, 5CH, 66H, 69H, 72H, 6DH
   \              0x65 0x5C    
   \              0x66 0x69    
   \              0x72 0x6D    
   \   00000020   0x77 0x61          DC8 77H, 61H, 72H, 65H, 5CH, 63H, 6FH, 6EH
   \              0x72 0x65    
   \              0x5C 0x63    
   \              0x6F 0x6E    
   \   00000028   0x73 0x6F          DC8 73H, 6FH, 6CH, 65H, 5CH, 65H, 66H, 69H
   \              0x6C 0x65    
   \              0x5C 0x65    
   \              0x66 0x69    
   \   00000030   0x63 0x6F          DC8 63H, 6FH, 6EH, 73H, 6FH, 6CH, 65H, 2EH
   \              0x6E 0x73    
   \              0x6F 0x6C    
   \              0x65 0x2E    
   \   00000038   0x63 0x70          DC8 63H, 70H, 70H, 0
   \              0x70 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "firmwareError: %d">`:
   \   00000000   0x66 0x69          DC8 "firmwareError: %d"
   \              0x72 0x6D    
   \              0x77 0x61    
   \              0x72 0x65    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x25    
   \              0x64 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "*** rusEFI (c) Andrey...">`:
   \   00000000   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 20H, 72H, 75H, 73H, 45H
   \              0x2A 0x20    
   \              0x72 0x75    
   \              0x73 0x45    
   \   00000008   0x46 0x49          DC8 46H, 49H, 20H, 28H, 63H, 29H, 20H, 41H
   \              0x20 0x28    
   \              0x63 0x29    
   \              0x20 0x41    
   \   00000010   0x6E 0x64          DC8 6EH, 64H, 72H, 65H, 79H, 20H, 42H, 65H
   \              0x72 0x65    
   \              0x79 0x20    
   \              0x42 0x65    
   \   00000018   0x6C 0x6F          DC8 6CH, 6FH, 6DH, 75H, 74H, 73H, 6BH, 69H
   \              0x6D 0x75    
   \              0x74 0x73    
   \              0x6B 0x69    
   \   00000020   0x79 0x20          DC8 79H, 20H, 32H, 30H, 31H, 32H, 2DH, 32H
   \              0x32 0x30    
   \              0x31 0x32    
   \              0x2D 0x32    
   \   00000028   0x30 0x31          DC8 30H, 31H, 35H, 2EH, 20H, 41H, 6CH, 6CH
   \              0x35 0x2E    
   \              0x20 0x41    
   \              0x6C 0x6C    
   \   00000030   0x20 0x72          DC8 20H, 72H, 69H, 67H, 68H, 74H, 73H, 20H
   \              0x69 0x67    
   \              0x68 0x74    
   \              0x73 0x20    
   \   00000038   0x72 0x65          DC8 72H, 65H, 73H, 65H, 72H, 76H, 65H, 64H
   \              0x73 0x65    
   \              0x72 0x76    
   \              0x65 0x64    
   \   00000040   0x2E 0x00          DC8 2EH, 0
   \   00000042   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "rusEFI v%d@%s">`:
   \   00000000   0x72 0x75          DC8 "rusEFI v%d@%s"
   \              0x73 0x45    
   \              0x46 0x49    
   \              0x20 0x76    
   \              0x25 0x64    
   \              0x40 0x25    
   \              0x73 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "8529">`:
   \   00000000   0x38 0x35          DC8 "8529"
   \              0x32 0x39    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "*** Chibios Kernel:  ...">`:
   \   00000000   0x2A 0x2A          DC8 "*** Chibios Kernel:       %s"
   \              0x2A 0x20    
   \              0x43 0x68    
   \              0x69 0x62    
   \              0x69 0x6F    
   \              0x73 0x20    
   \              0x4B 0x65    
   \              0x72 0x6E    
   \              0x65 0x6C    
   \              0x3A 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x25 0x73    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "2.6.8">`:
   \   00000000   0x32 0x2E          DC8 "2.6.8"
   \              0x36 0x2E    
   \              0x38 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "*** Compiled:     Jun...">`:
   \   00000000   0x2A 0x2A          DC8 "*** Compiled:     Jun 30 2015 - 23:09:35"
   \              0x2A 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x3A 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x4A 0x75    
   \              0x6E 0x20    
   \              0x33 0x30    
   \              0x20 0x32    
   \              0x30 0x31    
   \              0x35 0x20    
   \              0x2D 0x20    
   \              0x32 0x33    
   \              0x3A 0x30    
   \              0x39 0x3A    
   \              0x33 0x35    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "COMPILER=%s">`:
   \   00000000   0x43 0x4F          DC8 "COMPILER=%s"
   \              0x4D 0x50    
   \              0x49 0x4C    
   \              0x45 0x52    
   \              0x3D 0x25    
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "IAR ANSI C/C++ Compil...">`:
   \   00000000   0x49 0x41          DC8 "IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM"
   \              0x52 0x20    
   \              0x41 0x4E    
   \              0x53 0x49    
   \              0x20 0x43    
   \              0x2F 0x43    
   \              0x2B 0x2B    
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x70 0x69    
   \              0x6C 0x65    
   \              0x72 0x20    
   \              0x56 0x36    
   \              0x2E 0x35    
   \              0x30 0x2E    
   \              0x33 0x2E    
   \              0x34 0x36    
   \              0x37 0x36    
   \              0x2F 0x57    
   \              0x33 0x32    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x41    
   \              0x52 0x4D    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "CH_FREQUENCY=%d">`:
   \   00000000   0x43 0x48          DC8 "CH_FREQUENCY=%d"
   \              0x5F 0x46    
   \              0x52 0x45    
   \              0x51 0x55    
   \              0x45 0x4E    
   \              0x43 0x59    
   \              0x3D 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "SERIAL_SPEED=%d">`:
   \   00000000   0x53 0x45          DC8 "SERIAL_SPEED=%d"
   \              0x52 0x49    
   \              0x41 0x4C    
   \              0x5F 0x53    
   \              0x50 0x45    
   \              0x45 0x44    
   \              0x3D 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "CORTEX_MAX_KERNEL_PRI...">`:
   \   00000000   0x43 0x4F          DC8 "CORTEX_MAX_KERNEL_PRIORITY=%d"
   \              0x52 0x54    
   \              0x45 0x58    
   \              0x5F 0x4D    
   \              0x41 0x58    
   \              0x5F 0x4B    
   \              0x45 0x52    
   \              0x4E 0x45    
   \              0x4C 0x5F    
   \              0x50 0x52    
   \              0x49 0x4F    
   \              0x52 0x49    
   \              0x54 0x59    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "STM32_ADCCLK=%d">`:
   \   00000000   0x53 0x54          DC8 "STM32_ADCCLK=%d"
   \              0x4D 0x33    
   \              0x32 0x5F    
   \              0x41 0x44    
   \              0x43 0x43    
   \              0x4C 0x4B    
   \              0x3D 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "STM32_TIMCLK1=%d">`:
   \   00000000   0x53 0x54          DC8 "STM32_TIMCLK1=%d"
   \              0x4D 0x33    
   \              0x32 0x5F    
   \              0x54 0x49    
   \              0x4D 0x43    
   \              0x4C 0x4B    
   \              0x31 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "STM32_TIMCLK2=%d">`:
   \   00000000   0x53 0x54          DC8 "STM32_TIMCLK2=%d"
   \              0x4D 0x33    
   \              0x32 0x5F    
   \              0x54 0x49    
   \              0x4D 0x43    
   \              0x4C 0x4B    
   \              0x32 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "STM32_PCLK1=%d">`:
   \   00000000   0x53 0x54          DC8 "STM32_PCLK1=%d"
   \              0x4D 0x33    
   \              0x32 0x5F    
   \              0x50 0x43    
   \              0x4C 0x4B    
   \              0x31 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "STM32_PCLK2=%d">`:
   \   00000000   0x53 0x54          DC8 "STM32_PCLK2=%d"
   \              0x4D 0x33    
   \              0x32 0x5F    
   \              0x50 0x43    
   \              0x4C 0x4B    
   \              0x32 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "PORT_IDLE_THREAD_STAC...">`:
   \   00000000   0x50 0x4F          DC8 "PORT_IDLE_THREAD_STACK_SIZE=%d"
   \              0x52 0x54    
   \              0x5F 0x49    
   \              0x44 0x4C    
   \              0x45 0x5F    
   \              0x54 0x48    
   \              0x52 0x45    
   \              0x41 0x44    
   \              0x5F 0x53    
   \              0x54 0x41    
   \              0x43 0x4B    
   \              0x5F 0x53    
   \              0x49 0x5A    
   \              0x45 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "CH_DBG_ENABLE_ASSERTS=%d">`:
   \   00000000   0x43 0x48          DC8 "CH_DBG_ENABLE_ASSERTS=%d"
   \              0x5F 0x44    
   \              0x42 0x47    
   \              0x5F 0x45    
   \              0x4E 0x41    
   \              0x42 0x4C    
   \              0x45 0x5F    
   \              0x41 0x53    
   \              0x53 0x45    
   \              0x52 0x54    
   \              0x53 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "CH_DBG_ENABLED=%d">`:
   \   00000000   0x43 0x48          DC8 "CH_DBG_ENABLED=%d"
   \              0x5F 0x44    
   \              0x42 0x47    
   \              0x5F 0x45    
   \              0x4E 0x41    
   \              0x42 0x4C    
   \              0x45 0x44    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "CH_DBG_SYSTEM_STATE_C...">`:
   \   00000000   0x43 0x48          DC8 "CH_DBG_SYSTEM_STATE_CHECK=%d"
   \              0x5F 0x44    
   \              0x42 0x47    
   \              0x5F 0x53    
   \              0x59 0x53    
   \              0x54 0x45    
   \              0x4D 0x5F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x45 0x5F    
   \              0x43 0x48    
   \              0x45 0x43    
   \              0x4B 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "CH_DBG_ENABLE_STACK_C...">`:
   \   00000000   0x43 0x48          DC8 "CH_DBG_ENABLE_STACK_CHECK=%d"
   \              0x5F 0x44    
   \              0x42 0x47    
   \              0x5F 0x45    
   \              0x4E 0x41    
   \              0x42 0x4C    
   \              0x45 0x5F    
   \              0x53 0x54    
   \              0x41 0x43    
   \              0x4B 0x5F    
   \              0x43 0x48    
   \              0x45 0x43    
   \              0x4B 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "EFI_WAVE_ANALYZER=%d">`:
   \   00000000   0x45 0x46          DC8 "EFI_WAVE_ANALYZER=%d"
   \              0x49 0x5F    
   \              0x57 0x41    
   \              0x56 0x45    
   \              0x5F 0x41    
   \              0x4E 0x41    
   \              0x4C 0x59    
   \              0x5A 0x45    
   \              0x52 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "EFI_TUNER_STUDIO=%d">`:
   \   00000000   0x45 0x46          DC8 "EFI_TUNER_STUDIO=%d"
   \              0x49 0x5F    
   \              0x54 0x55    
   \              0x4E 0x45    
   \              0x52 0x5F    
   \              0x53 0x54    
   \              0x55 0x44    
   \              0x49 0x4F    
   \              0x3D 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "EFI_SIGNAL_EXECUTOR_S...">`:
   \   00000000   0x45 0x46          DC8 "EFI_SIGNAL_EXECUTOR_SLEEP=%d"
   \              0x49 0x5F    
   \              0x53 0x49    
   \              0x47 0x4E    
   \              0x41 0x4C    
   \              0x5F 0x45    
   \              0x58 0x45    
   \              0x43 0x55    
   \              0x54 0x4F    
   \              0x52 0x5F    
   \              0x53 0x4C    
   \              0x45 0x45    
   \              0x50 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "EFI_SIGNAL_EXECUTOR_H...">`:
   \   00000000   0x45 0x46          DC8 "EFI_SIGNAL_EXECUTOR_HW_TIMER=%d"
   \              0x49 0x5F    
   \              0x53 0x49    
   \              0x47 0x4E    
   \              0x41 0x4C    
   \              0x5F 0x45    
   \              0x58 0x45    
   \              0x43 0x55    
   \              0x54 0x4F    
   \              0x52 0x5F    
   \              0x48 0x57    
   \              0x5F 0x54    
   \              0x49 0x4D    
   \              0x45 0x52    
   \              0x3D 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "EFI_SHAFT_POSITION_IN...">`:
   \   00000000   0x45 0x46          DC8 "EFI_SHAFT_POSITION_INPUT=%d"
   \              0x49 0x5F    
   \              0x53 0x48    
   \              0x41 0x46    
   \              0x54 0x5F    
   \              0x50 0x4F    
   \              0x53 0x49    
   \              0x54 0x49    
   \              0x4F 0x4E    
   \              0x5F 0x49    
   \              0x4E 0x50    
   \              0x55 0x54    
   \              0x3D 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "EFI_INTERNAL_ADC=%d">`:
   \   00000000   0x45 0x46          DC8 "EFI_INTERNAL_ADC=%d"
   \              0x49 0x5F    
   \              0x49 0x4E    
   \              0x54 0x45    
   \              0x52 0x4E    
   \              0x41 0x4C    
   \              0x5F 0x41    
   \              0x44 0x43    
   \              0x3D 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "    addr    stack pri...">`:
   \   00000000   0x20 0x20          DC8 "    addr    stack prio refs     state time"
   \              0x20 0x20    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x73 0x74    
   \              0x61 0x63    
   \              0x6B 0x20    
   \              0x70 0x72    
   \              0x69 0x6F    
   \              0x20 0x72    
   \              0x65 0x66    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "%.8lx [%.8lx] %4lu %4...">`:
   \   00000000   0x25 0x2E          DC8 "%.8lx [%.8lx] %4lu %4lu %9s %lu %s"
   \              0x38 0x6C    
   \              0x78 0x20    
   \              0x5B 0x25    
   \              0x2E 0x38    
   \              0x6C 0x78    
   \              0x5D 0x20    
   \              0x25 0x34    
   \              0x6C 0x75    
   \              0x20 0x25    
   \              0x34 0x6C    
   \              0x75 0x20    
   \              0x25 0x39    
   \              0x73 0x20    
   \              0x25 0x6C    
   \              0x75 0x20    
   \              0x25 0x73    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "READY">`:
   \   00000000   0x52 0x45          DC8 "READY"
   \              0x41 0x44    
   \              0x59 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "CURRENT">`:
   \   00000000   0x43 0x55          DC8 "CURRENT"
   \              0x52 0x52    
   \              0x45 0x4E    
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "SUSPENDED">`:
   \   00000000   0x53 0x55          DC8 "SUSPENDED"
   \              0x53 0x50    
   \              0x45 0x4E    
   \              0x44 0x45    
   \              0x44 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "WTSEM">`:
   \   00000000   0x57 0x54          DC8 "WTSEM"
   \              0x53 0x45    
   \              0x4D 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "WTMTX">`:
   \   00000000   0x57 0x54          DC8 "WTMTX"
   \              0x4D 0x54    
   \              0x58 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "WTCOND">`:
   \   00000000   0x57 0x54          DC8 "WTCOND"
   \              0x43 0x4F    
   \              0x4E 0x44    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SLEEPING">`:
   \   00000000   0x53 0x4C          DC8 "SLEEPING"
   \              0x45 0x45    
   \              0x50 0x49    
   \              0x4E 0x47    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "WTEXIT">`:
   \   00000000   0x57 0x54          DC8 "WTEXIT"
   \              0x45 0x58    
   \              0x49 0x54    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "WTOREVT">`:
   \   00000000   0x57 0x54          DC8 "WTOREVT"
   \              0x4F 0x52    
   \              0x45 0x56    
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "WTANDEVT">`:
   \   00000000   0x57 0x54          DC8 "WTANDEVT"
   \              0x41 0x4E    
   \              0x44 0x45    
   \              0x56 0x54    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "SNDMSGQ">`:
   \   00000000   0x53 0x4E          DC8 "SNDMSGQ"
   \              0x44 0x4D    
   \              0x53 0x47    
   \              0x51 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "SNDMSG">`:
   \   00000000   0x53 0x4E          DC8 "SNDMSG"
   \              0x44 0x4D    
   \              0x53 0x47    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "WTMSG">`:
   \   00000000   0x57 0x54          DC8 "WTMSG"
   \              0x4D 0x53    
   \              0x47 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "WTQUEUE">`:
   \   00000000   0x57 0x54          DC8 "WTQUEUE"
   \              0x51 0x55    
   \              0x45 0x55    
   \              0x45 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "FINAL">`:
   \   00000000   0x46 0x49          DC8 "FINAL"
   \              0x4E 0x41    
   \              0x4C 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "test">`:
   \   00000000   0x74 0x65          DC8 "test"
   \              0x73 0x74    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "hello">`:
   \   00000000   0x68 0x65          DC8 "hello"
   \              0x6C 0x6C    
   \              0x6F 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "fatal">`:
   \   00000000   0x66 0x61          DC8 "fatal"
   \              0x74 0x61    
   \              0x6C 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "error">`:
   \   00000000   0x65 0x72          DC8 "error"
   \              0x72 0x6F    
   \              0x72 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "threadsinfo">`:
   \   00000000   0x74 0x68          DC8 "threadsinfo"
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x73 0x69    
   \              0x6E 0x66    
   \              0x6F 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "console">`:
   \   00000000   0x63 0x6F          DC8 "console"
   \              0x6E 0x73    
   \              0x6F 0x6C    
   \              0x65 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   __sti__routine()
         8   -> LoggingWithStorage::LoggingWithStorage(char const *)
      32   cmd_threads()
        32   -> chRegFirstThread
        32   -> chRegNextThread
        32   -> scheduleMsg
      16   fatal3(char *, char *, int)
        16   -> chDbgPanic3
        16   -> strncpy
       8   initializeConsole
         8   -> addConsoleAction
         8   -> initConsoleLogic
         8   -> initIntermediateLoggingBuffer
         8   -> sayHello()
         8   -> startConsole(Logging *, CommandHandler)
       8   myerror()
         8   -> firmwareError
         8   -> getRusEfiVersion
       8   myfatal()
         8   -> chDbgPanic3
      24   print
        24   -> chvprintf
        24   -> getConsoleChannel()
        24   -> isConsoleReady()
       8   sayHello()
         8   -> chThdSleep
         8   -> getRusEfiVersion
         8   -> scheduleMsg
       0   sayNothing()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      44  ?<Constant "    addr    stack pri...">
      36  ?<Constant "%.8lx [%.8lx] %4lu %4...">
      32  ?<Constant "*** Chibios Kernel:  ...">
      44  ?<Constant "*** Compiled:     Jun...">
      68  ?<Constant "*** rusEFI (c) Andrey...">
       8  ?<Constant "2.6.8">
       8  ?<Constant "8529">
      20  ?<Constant "CH_DBG_ENABLED=%d">
      28  ?<Constant "CH_DBG_ENABLE_ASSERTS=%d">
      32  ?<Constant "CH_DBG_ENABLE_STACK_C...">
      32  ?<Constant "CH_DBG_SYSTEM_STATE_C...">
      16  ?<Constant "CH_FREQUENCY=%d">
      12  ?<Constant "COMPILER=%s">
      32  ?<Constant "CORTEX_MAX_KERNEL_PRI...">
       8  ?<Constant "CURRENT">
      20  ?<Constant "EFI_INTERNAL_ADC=%d">
      28  ?<Constant "EFI_SHAFT_POSITION_IN...">
      32  ?<Constant "EFI_SIGNAL_EXECUTOR_H...">
      32  ?<Constant "EFI_SIGNAL_EXECUTOR_S...">
      20  ?<Constant "EFI_TUNER_STUDIO=%d">
      24  ?<Constant "EFI_WAVE_ANALYZER=%d">
      60  ?<Constant "F:\\stuff\\rusefi_sourc...">
       8  ?<Constant "FINAL">
      52  ?<Constant "IAR ANSI C/C++ Compil...">
      32  ?<Constant "PORT_IDLE_THREAD_STAC...">
       8  ?<Constant "READY">
      16  ?<Constant "SERIAL_SPEED=%d">
      12  ?<Constant "SLEEPING">
       8  ?<Constant "SNDMSG">
       8  ?<Constant "SNDMSGQ">
      16  ?<Constant "STM32_ADCCLK=%d">
      16  ?<Constant "STM32_PCLK1=%d">
      16  ?<Constant "STM32_PCLK2=%d">
      20  ?<Constant "STM32_TIMCLK1=%d">
      20  ?<Constant "STM32_TIMCLK2=%d">
      12  ?<Constant "SUSPENDED">
      12  ?<Constant "WTANDEVT">
       8  ?<Constant "WTCOND">
       8  ?<Constant "WTEXIT">
       8  ?<Constant "WTMSG">
       8  ?<Constant "WTMTX">
       8  ?<Constant "WTOREVT">
       8  ?<Constant "WTQUEUE">
       8  ?<Constant "WTSEM">
      16  ?<Constant "\"my fatal\"()">
       8  ?<Constant "console">
       8  ?<Constant "error">
       8  ?<Constant "fatal">
      20  ?<Constant "firmwareError: %d">
       8  ?<Constant "hello">
      16  ?<Constant "rusEFI v%d@%s">
       8  ?<Constant "test">
      12  ?<Constant "threadsinfo">
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_17
       4  ??DataTable6_18
       4  ??DataTable6_19
       4  ??DataTable6_2
       4  ??DataTable6_20
       4  ??DataTable6_21
       4  ??DataTable6_22
       4  ??DataTable6_23
       4  ??DataTable6_24
       4  ??DataTable6_25
       4  ??DataTable6_26
       4  ??DataTable6_27
       4  ??DataTable6_28
       4  ??DataTable6_29
       4  ??DataTable6_3
       4  ??DataTable6_30
       4  ??DataTable6_31
       4  ??DataTable6_32
       4  ??DataTable6_33
       4  ??DataTable6_34
       4  ??DataTable6_35
       4  ??DataTable6_36
       4  ??DataTable6_37
       4  ??DataTable6_38
       4  ??DataTable6_39
       4  ??DataTable6_4
       4  ??DataTable6_40
       4  ??DataTable6_41
       4  ??DataTable6_42
       4  ??DataTable6_43
       4  ??DataTable6_44
       4  ??DataTable6_45
       4  ??DataTable6_46
       4  ??DataTable6_47
       4  ??DataTable6_48
       4  ??DataTable6_49
       4  ??DataTable6_5
       4  ??DataTable6_50
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
      12  __sti__routine()
      76  cmd_threads()
      36  fatal3(char *, char *, int)
     200  fatalErrorMessage
      68  initializeConsole
     260  logger
      16  myerror()
      14  myfatal()
      36  print
     258  sayHello()
       2  sayNothing()
      60  states
       4  -- Other

 
   460 bytes in section .bss
    60 bytes in section .data
     4 bytes in section .init_array
 1 052 bytes in section .rodata
   722 bytes in section .text
 
   726 bytes of CODE  memory
 1 052 bytes of CONST memory
   520 bytes of DATA  memory

Errors: none
Warnings: none
