###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:48 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\algo #
#                       \event_registry.cpp                                   #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\algo #
#                       \event_registry.cpp -lCN F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\Debug\List\ -lA                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\  #
#                       -o F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj #
#                       \ --no_cse --no_unroll --no_inline --no_code_motion   #
#                       --no_tbaa --no_clustering --no_scheduling --debug     #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\e #
#                       vent_registry.lst                                     #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\ev #
#                       ent_registry.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\algo\event_registry.cpp
      1          /**
      2           * @file	event_registry.cpp
      3           * @brief	This data structure knows when to do what
      4           *
      5           * @date Nov 27, 2013
      6           * @author Andrey Belomutskiy, (c) 2012-2015
      7           *
      8           *
      9           * This file is part of rusEfi - see http://rusefi.com
     10           *
     11           * rusEfi is free software; you can redistribute it and/or modify it under the terms of
     12           * the GNU General Public License as published by the Free Software Foundation; either
     13           * version 3 of the License, or (at your option) any later version.
     14           *
     15           * rusEfi is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
     16           * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     17           * GNU General Public License for more details.
     18           *
     19           * You should have received a copy of the GNU General Public License along with this program.
     20           * If not, see <http://www.gnu.org/licenses/>.
     21           */
     22          
     23          #include "event_registry.h"

   \                                 In section .text, align 4
   \   __code __interwork __softfp OutputSignal_struct::OutputSignal_struct()
   \                     _ZN19OutputSignal_structC1Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x2302             MOVS     R3,#+2
   \   00000006   0x2218             MOVS     R2,#+24
   \   00000008   0x4906             LDR.N    R1,??OutputSignal_struct_0
   \   0000000A   0xF114 0x0008      ADDS     R0,R4,#+8
   \   0000000E   0x.... 0x....      BL       __aeabi_vec_ctor_nocookie_nodtor
   \   00000012   0x2302             MOVS     R3,#+2
   \   00000014   0x2218             MOVS     R2,#+24
   \   00000016   0x4903             LDR.N    R1,??OutputSignal_struct_0
   \   00000018   0xF114 0x0038      ADDS     R0,R4,#+56
   \   0000001C   0x.... 0x....      BL       __aeabi_vec_ctor_nocookie_nodtor
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
   \                     ??OutputSignal_struct_0:
   \   00000024   0x........         DC32     _ZN12scheduling_sC1Ev
     24          #include "main.h"
     25          #include "engine_math.h"
     26          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp InjectionEvent::subobject InjectionEvent()
   \                     _ZN14InjectionEventC2Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN14InjectionEventC1Ev
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     27          InjectionEvent::InjectionEvent() {
   \                     _ZN14InjectionEventC1Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN24event_trigger_position_sC1Ev
   \   0000000A   0xF114 0x0010      ADDS     R0,R4,#+16
   \   0000000E   0x.... 0x....      BL       _ZN19OutputSignal_structC1Ev
     28          	isSimultanious = false;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xF884 0x0078      STRB     R0,[R4, #+120]
     29          }
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
     30          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp event_trigger_position_s::subobject event_trigger_position_s()
   \                     _ZN24event_trigger_position_sC2Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN24event_trigger_position_sC1Ev
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     31          event_trigger_position_s::event_trigger_position_s() {
     32          	eventIndex = 0;
   \                     _ZN24event_trigger_position_sC1Ev:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x6001             STR      R1,[R0, #+0]
     33          	eventAngle = 0;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6041             STR      R1,[R0, #+4]
     34          	angleOffset = 0;
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x6081             STR      R1,[R0, #+8]
     35          }
   \   0000000C   0x4770             BX       LR               ;; return
     36          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp IgnitionEvent::subobject IgnitionEvent()
   \                     _ZN13IgnitionEventC2Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN13IgnitionEventC1Ev
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     37          IgnitionEvent::IgnitionEvent() {
   \                     _ZN13IgnitionEventC1Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0xF114 0x0008      ADDS     R0,R4,#+8
   \   00000008   0x.... 0x....      BL       _ZN12scheduling_sC1Ev
   \   0000000C   0xF114 0x0020      ADDS     R0,R4,#+32
   \   00000010   0x.... 0x....      BL       _ZN12scheduling_sC1Ev
   \   00000014   0xF114 0x003C      ADDS     R0,R4,#+60
   \   00000018   0x.... 0x....      BL       _ZN24event_trigger_position_sC1Ev
   \   0000001C   0xF114 0x0048      ADDS     R0,R4,#+72
   \   00000020   0x.... 0x....      BL       _ZN24event_trigger_position_sC1Ev
     38          	name = NULL;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x65A0             STR      R0,[R4, #+88]
     39          	next = NULL;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x6560             STR      R0,[R4, #+84]
     40          	output = NULL;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x6020             STR      R0,[R4, #+0]
     41          	advance = NAN;
   \   00000030   0xF07F 0x4000      MVNS     R0,#-2147483648
   \   00000034   0x63A0             STR      R0,[R4, #+56]
     42          }
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0xBD10             POP      {R4,PC}          ;; return
     43          
     44          //void registerActuatorEventWhat(InjectionEventList *list, int eventIndex, OutputSignal *actuator, float angleOffset) {
     45          //	ActuatorEvent *e = list->getNextActuatorEvent();
     46          //	if (e == NULL)
     47          //		return; // error already reported
     48          //	e->position.eventIndex = eventIndex;
     49          //	e->actuator = actuator;
     50          //	e->position.angleOffset = angleOffset;
     51          //}

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   IgnitionEvent::IgnitionEvent()
         8   -> event_trigger_position_s::event_trigger_position_s()
         8   -> scheduling_s::scheduling_s()
       8   IgnitionEvent::subobject IgnitionEvent()
         8   -> IgnitionEvent::IgnitionEvent()
       8   InjectionEvent::InjectionEvent()
         8   -> OutputSignal_struct::OutputSignal_struct()
         8   -> event_trigger_position_s::event_trigger_position_s()
       8   InjectionEvent::subobject InjectionEvent()
         8   -> InjectionEvent::InjectionEvent()
       8   OutputSignal_struct::OutputSignal_struct()
         8   -> __aeabi_vec_ctor_nocookie_nodtor
       0   event_trigger_position_s::event_trigger_position_s()
       8   event_trigger_position_s::subobject event_trigger_position_s()
         8   -> event_trigger_position_s::event_trigger_position_s()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      58  IgnitionEvent::IgnitionEvent()
      12  IgnitionEvent::subobject IgnitionEvent()
      28  InjectionEvent::InjectionEvent()
      12  InjectionEvent::subobject InjectionEvent()
      40  OutputSignal_struct::OutputSignal_struct()
      14  event_trigger_position_s::event_trigger_position_s()
      12  event_trigger_position_s::subobject event_trigger_position_s()

 
 176 bytes in section .text
 
 136 bytes of CODE memory (+ 40 bytes shared)

Errors: none
Warnings: 1
