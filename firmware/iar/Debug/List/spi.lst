###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:06 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\s #
#                       rc\spi.c                                              #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\s #
#                       rc\spi.c -lCN F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\Debug\List\ -lA F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\Debug\List\ -o F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\Debug\Obj\ --no_cse --no_unroll --no_inline  #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\ -On #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\s #
#                       pi.lst                                                #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\sp #
#                       i.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\chibios\os\hal\src\spi.c
      1          /*
      2              ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
      3                           2011,2012,2013 Giovanni Di Sirio.
      4          
      5              This file is part of ChibiOS/RT.
      6          
      7              ChibiOS/RT is free software; you can redistribute it and/or modify
      8              it under the terms of the GNU General Public License as published by
      9              the Free Software Foundation; either version 3 of the License, or
     10              (at your option) any later version.
     11          
     12              ChibiOS/RT is distributed in the hope that it will be useful,
     13              but WITHOUT ANY WARRANTY; without even the implied warranty of
     14              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     15              GNU General Public License for more details.
     16          
     17              You should have received a copy of the GNU General Public License
     18              along with this program.  If not, see <http://www.gnu.org/licenses/>.
     19          
     20                                                ---
     21          
     22              A special exception to the GPL can be applied should you wish to distribute
     23              a combined work that includes ChibiOS/RT, without being obliged to provide
     24              the source code for any proprietary components. See the file exception.txt
     25              for full details of how and when the exception can be applied.
     26          */
     27          
     28          /**
     29           * @file    spi.c
     30           * @brief   SPI Driver code.
     31           *
     32           * @addtogroup SPI
     33           * @{
     34           */
     35          
     36          #include "ch.h"
     37          #include "hal.h"
     38          
     39          #if HAL_USE_SPI || defined(__DOXYGEN__)
     40          
     41          /*===========================================================================*/
     42          /* Driver local definitions.                                                 */
     43          /*===========================================================================*/
     44          
     45          /*===========================================================================*/
     46          /* Driver exported variables.                                                */
     47          /*===========================================================================*/
     48          
     49          /*===========================================================================*/
     50          /* Driver local variables and types.                                         */
     51          /*===========================================================================*/
     52          
     53          /*===========================================================================*/
     54          /* Driver local functions.                                                   */
     55          /*===========================================================================*/
     56          
     57          /*===========================================================================*/
     58          /* Driver exported functions.                                                */
     59          /*===========================================================================*/
     60          
     61          /**
     62           * @brief   SPI Driver initialization.
     63           * @note    This function is implicitly invoked by @p halInit(), there is
     64           *          no need to explicitly initialize the driver.
     65           *
     66           * @init
     67           */

   \                                 In section .text, align 2, keep-with-next
     68          void spiInit(void) {
   \                     spiInit:
   \   00000000   0xB580             PUSH     {R7,LR}
     69          
     70            spi_lld_init();
   \   00000002   0x.... 0x....      BL       spi_lld_init
     71          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     72          
     73          /**
     74           * @brief   Initializes the standard part of a @p SPIDriver structure.
     75           *
     76           * @param[out] spip     pointer to the @p SPIDriver object
     77           *
     78           * @init
     79           */

   \                                 In section .text, align 2, keep-with-next
     80          void spiObjectInit(SPIDriver *spip) {
   \                     spiObjectInit:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     81          
     82            spip->state = SPI_STOP;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x7020             STRB     R0,[R4, #+0]
     83            spip->config = NULL;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x6060             STR      R0,[R4, #+4]
     84          #if SPI_USE_WAIT
     85            spip->thread = NULL;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x60A0             STR      R0,[R4, #+8]
     86          #endif /* SPI_USE_WAIT */
     87          #if SPI_USE_MUTUAL_EXCLUSION
     88          #if CH_USE_MUTEXES
     89            chMtxInit(&spip->mutex);
   \   00000010   0xF114 0x000C      ADDS     R0,R4,#+12
   \   00000014   0x.... 0x....      BL       chMtxInit
     90          #else
     91            chSemInit(&spip->semaphore, 1);
     92          #endif
     93          #endif /* SPI_USE_MUTUAL_EXCLUSION */
     94          #if defined(SPI_DRIVER_EXT_INIT_HOOK)
     95            SPI_DRIVER_EXT_INIT_HOOK(spip);
     96          #endif
     97          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
     98          
     99          /**
    100           * @brief   Configures and activates the SPI peripheral.
    101           *
    102           * @param[in] spip      pointer to the @p SPIDriver object
    103           * @param[in] config    pointer to the @p SPIConfig object
    104           *
    105           * @api
    106           */

   \                                 In section .text, align 2, keep-with-next
    107          void spiStart(SPIDriver *spip, const SPIConfig *config) {
   \                     spiStart:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    108          
    109            chDbgCheck((spip != NULL) && (config != NULL), "spiStart");
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD001             BEQ.N    ??spiStart_0
   \   0000000A   0x2D00             CMP      R5,#+0
   \   0000000C   0xD106             BNE.N    ??spiStart_1
   \                     ??spiStart_0:
   \   0000000E   0x226D             MOVS     R2,#+109
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable13
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   00000018   0x.... 0x....      BL       chDbgPanic3
    110          
    111            chSysLock();
   \                     ??spiStart_1:
   \   0000001C   0x2020             MOVS     R0,#+32
   \   0000001E   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000022   0x.... 0x....      BL       dbg_check_lock
    112            chDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
    113                        "spiStart(), #1", "invalid state");
   \   00000026   0x7820             LDRB     R0,[R4, #+0]
   \   00000028   0x2801             CMP      R0,#+1
   \   0000002A   0xD006             BEQ.N    ??spiStart_2
   \   0000002C   0x7820             LDRB     R0,[R4, #+0]
   \   0000002E   0x2802             CMP      R0,#+2
   \   00000030   0xD003             BEQ.N    ??spiStart_2
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   00000036   0x.... 0x....      BL       chDbgPanic
    114            spip->config = config;
   \                     ??spiStart_2:
   \   0000003A   0x6065             STR      R5,[R4, #+4]
    115            spi_lld_start(spip);
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0x.... 0x....      BL       spi_lld_start
    116            spip->state = SPI_READY;
   \   00000042   0x2002             MOVS     R0,#+2
   \   00000044   0x7020             STRB     R0,[R4, #+0]
    117            chSysUnlock();
   \   00000046   0x.... 0x....      BL       dbg_check_unlock
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0xF380 0x8811      MSR      BASEPRI,R0
    118          }
   \   00000050   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    119          
    120          /**
    121           * @brief Deactivates the SPI peripheral.
    122           * @note  Deactivating the peripheral also enforces a release of the slave
    123           *        select line.
    124           *
    125           * @param[in] spip      pointer to the @p SPIDriver object
    126           *
    127           * @api
    128           */

   \                                 In section .text, align 2, keep-with-next
    129          void spiStop(SPIDriver *spip) {
   \                     spiStop:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    130          
    131            chDbgCheck(spip != NULL, "spiStop");
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD106             BNE.N    ??spiStop_0
   \   00000008   0x2283             MOVS     R2,#+131
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable13
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable13_3
   \   00000012   0x.... 0x....      BL       chDbgPanic3
    132          
    133            chSysLock();
   \                     ??spiStop_0:
   \   00000016   0x2020             MOVS     R0,#+32
   \   00000018   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000001C   0x.... 0x....      BL       dbg_check_lock
    134            chDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
    135                        "spiStop(), #1", "invalid state");
   \   00000020   0x7820             LDRB     R0,[R4, #+0]
   \   00000022   0x2801             CMP      R0,#+1
   \   00000024   0xD006             BEQ.N    ??spiStop_1
   \   00000026   0x7820             LDRB     R0,[R4, #+0]
   \   00000028   0x2802             CMP      R0,#+2
   \   0000002A   0xD003             BEQ.N    ??spiStop_1
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable13_4
   \   00000030   0x.... 0x....      BL       chDbgPanic
    136            spi_lld_unselect(spip);
   \                     ??spiStop_1:
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x.... 0x....      BL       spi_lld_unselect
    137            spi_lld_stop(spip);
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x.... 0x....      BL       spi_lld_stop
    138            spip->state = SPI_STOP;
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0x7020             STRB     R0,[R4, #+0]
    139            chSysUnlock();
   \   00000044   0x.... 0x....      BL       dbg_check_unlock
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xF380 0x8811      MSR      BASEPRI,R0
    140          }
   \   0000004E   0xBD10             POP      {R4,PC}          ;; return
    141          
    142          /**
    143           * @brief   Asserts the slave select signal and prepares for transfers.
    144           *
    145           * @param[in] spip      pointer to the @p SPIDriver object
    146           *
    147           * @api
    148           */

   \                                 In section .text, align 2, keep-with-next
    149          void spiSelect(SPIDriver *spip) {
   \                     spiSelect:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    150          
    151            chDbgCheck(spip != NULL, "spiSelect");
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD106             BNE.N    ??spiSelect_0
   \   00000008   0x2297             MOVS     R2,#+151
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable13
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable13_5
   \   00000012   0x.... 0x....      BL       chDbgPanic3
    152          
    153            chSysLock();
   \                     ??spiSelect_0:
   \   00000016   0x2020             MOVS     R0,#+32
   \   00000018   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000001C   0x.... 0x....      BL       dbg_check_lock
    154            chDbgAssert(spip->state == SPI_READY, "spiSelect(), #1", "not ready");
   \   00000020   0x7820             LDRB     R0,[R4, #+0]
   \   00000022   0x2802             CMP      R0,#+2
   \   00000024   0xD003             BEQ.N    ??spiSelect_1
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable13_6
   \   0000002A   0x.... 0x....      BL       chDbgPanic
    155            spiSelectI(spip);
   \                     ??spiSelect_1:
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0x.... 0x....      BL       spi_lld_select
    156            chSysUnlock();
   \   00000034   0x.... 0x....      BL       dbg_check_unlock
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xF380 0x8811      MSR      BASEPRI,R0
    157          }
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
    158          
    159          /**
    160           * @brief   Deasserts the slave select signal.
    161           * @details The previously selected peripheral is unselected.
    162           *
    163           * @param[in] spip      pointer to the @p SPIDriver object
    164           *
    165           * @api
    166           */

   \                                 In section .text, align 2, keep-with-next
    167          void spiUnselect(SPIDriver *spip) {
   \                     spiUnselect:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    168          
    169            chDbgCheck(spip != NULL, "spiUnselect");
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD106             BNE.N    ??spiUnselect_0
   \   00000008   0x22A9             MOVS     R2,#+169
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable13
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable13_7
   \   00000012   0x.... 0x....      BL       chDbgPanic3
    170          
    171            chSysLock();
   \                     ??spiUnselect_0:
   \   00000016   0x2020             MOVS     R0,#+32
   \   00000018   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000001C   0x.... 0x....      BL       dbg_check_lock
    172            chDbgAssert(spip->state == SPI_READY, "spiUnselect(), #1", "not ready");
   \   00000020   0x7820             LDRB     R0,[R4, #+0]
   \   00000022   0x2802             CMP      R0,#+2
   \   00000024   0xD003             BEQ.N    ??spiUnselect_1
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable13_8
   \   0000002A   0x.... 0x....      BL       chDbgPanic
    173            spiUnselectI(spip);
   \                     ??spiUnselect_1:
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0x.... 0x....      BL       spi_lld_unselect
    174            chSysUnlock();
   \   00000034   0x.... 0x....      BL       dbg_check_unlock
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xF380 0x8811      MSR      BASEPRI,R0
    175          }
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
    176          
    177          /**
    178           * @brief   Ignores data on the SPI bus.
    179           * @details This asynchronous function starts the transmission of a series of
    180           *          idle words on the SPI bus and ignores the received data.
    181           * @pre     A slave must have been selected using @p spiSelect() or
    182           *          @p spiSelectI().
    183           * @post    At the end of the operation the configured callback is invoked.
    184           *
    185           * @param[in] spip      pointer to the @p SPIDriver object
    186           * @param[in] n         number of words to be ignored
    187           *
    188           * @api
    189           */

   \                                 In section .text, align 2, keep-with-next
    190          void spiStartIgnore(SPIDriver *spip, size_t n) {
   \                     spiStartIgnore:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    191          
    192            chDbgCheck((spip != NULL) && (n > 0), "spiStartIgnore");
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD001             BEQ.N    ??spiStartIgnore_0
   \   0000000A   0x2D00             CMP      R5,#+0
   \   0000000C   0xD105             BNE.N    ??spiStartIgnore_1
   \                     ??spiStartIgnore_0:
   \   0000000E   0x22C0             MOVS     R2,#+192
   \   00000010   0x....             LDR.N    R1,??DataTable13
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable13_9
   \   00000016   0x.... 0x....      BL       chDbgPanic3
    193          
    194            chSysLock();
   \                     ??spiStartIgnore_1:
   \   0000001A   0x2020             MOVS     R0,#+32
   \   0000001C   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000020   0x.... 0x....      BL       dbg_check_lock
    195            chDbgAssert(spip->state == SPI_READY, "spiStartIgnore(), #1", "not ready");
   \   00000024   0x7820             LDRB     R0,[R4, #+0]
   \   00000026   0x2802             CMP      R0,#+2
   \   00000028   0xD003             BEQ.N    ??spiStartIgnore_2
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable13_10
   \   0000002E   0x.... 0x....      BL       chDbgPanic
    196            spiStartIgnoreI(spip, n);
   \                     ??spiStartIgnore_2:
   \   00000032   0x2003             MOVS     R0,#+3
   \   00000034   0x7020             STRB     R0,[R4, #+0]
   \   00000036   0x0029             MOVS     R1,R5
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0x.... 0x....      BL       spi_lld_ignore
    197            chSysUnlock();
   \   0000003E   0x.... 0x....      BL       dbg_check_unlock
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xF380 0x8811      MSR      BASEPRI,R0
    198          }
   \   00000048   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    199          
    200          /**
    201           * @brief   Exchanges data on the SPI bus.
    202           * @details This asynchronous function starts a simultaneous transmit/receive
    203           *          operation.
    204           * @pre     A slave must have been selected using @p spiSelect() or
    205           *          @p spiSelectI().
    206           * @post    At the end of the operation the configured callback is invoked.
    207           * @note    The buffers are organized as uint8_t arrays for data sizes below
    208           *          or equal to 8 bits else it is organized as uint16_t arrays.
    209           *
    210           * @param[in] spip      pointer to the @p SPIDriver object
    211           * @param[in] n         number of words to be exchanged
    212           * @param[in] txbuf     the pointer to the transmit buffer
    213           * @param[out] rxbuf    the pointer to the receive buffer
    214           *
    215           * @api
    216           */

   \                                 In section .text, align 2, keep-with-next
    217          void spiStartExchange(SPIDriver *spip, size_t n,
    218                                const void *txbuf, void *rxbuf) {
   \                     spiStartExchange:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    219          
    220            chDbgCheck((spip != NULL) && (n > 0) && (rxbuf != NULL) && (txbuf != NULL),
    221                       "spiStartExchange");
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD005             BEQ.N    ??spiStartExchange_0
   \   0000000E   0x2D00             CMP      R5,#+0
   \   00000010   0xD003             BEQ.N    ??spiStartExchange_0
   \   00000012   0x2F00             CMP      R7,#+0
   \   00000014   0xD001             BEQ.N    ??spiStartExchange_0
   \   00000016   0x2E00             CMP      R6,#+0
   \   00000018   0xD104             BNE.N    ??spiStartExchange_1
   \                     ??spiStartExchange_0:
   \   0000001A   0x22DD             MOVS     R2,#+221
   \   0000001C   0x....             LDR.N    R1,??DataTable13
   \   0000001E   0x....             LDR.N    R0,??DataTable13_11
   \   00000020   0x.... 0x....      BL       chDbgPanic3
    222          
    223            chSysLock();
   \                     ??spiStartExchange_1:
   \   00000024   0x2020             MOVS     R0,#+32
   \   00000026   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000002A   0x.... 0x....      BL       dbg_check_lock
    224            chDbgAssert(spip->state == SPI_READY, "spiStartExchange(), #1", "not ready");
   \   0000002E   0x7820             LDRB     R0,[R4, #+0]
   \   00000030   0x2802             CMP      R0,#+2
   \   00000032   0xD002             BEQ.N    ??spiStartExchange_2
   \   00000034   0x....             LDR.N    R0,??DataTable13_12
   \   00000036   0x.... 0x....      BL       chDbgPanic
    225            spiStartExchangeI(spip, n, txbuf, rxbuf);
   \                     ??spiStartExchange_2:
   \   0000003A   0x2003             MOVS     R0,#+3
   \   0000003C   0x7020             STRB     R0,[R4, #+0]
   \   0000003E   0x003B             MOVS     R3,R7
   \   00000040   0x0032             MOVS     R2,R6
   \   00000042   0x0029             MOVS     R1,R5
   \   00000044   0x0020             MOVS     R0,R4
   \   00000046   0x.... 0x....      BL       spi_lld_exchange
    226            chSysUnlock();
   \   0000004A   0x.... 0x....      BL       dbg_check_unlock
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0xF380 0x8811      MSR      BASEPRI,R0
    227          }
   \   00000054   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    228          
    229          /**
    230           * @brief   Sends data over the SPI bus.
    231           * @details This asynchronous function starts a transmit operation.
    232           * @pre     A slave must have been selected using @p spiSelect() or
    233           *          @p spiSelectI().
    234           * @post    At the end of the operation the configured callback is invoked.
    235           * @note    The buffers are organized as uint8_t arrays for data sizes below
    236           *          or equal to 8 bits else it is organized as uint16_t arrays.
    237           *
    238           * @param[in] spip      pointer to the @p SPIDriver object
    239           * @param[in] n         number of words to send
    240           * @param[in] txbuf     the pointer to the transmit buffer
    241           *
    242           * @api
    243           */

   \                                 In section .text, align 2, keep-with-next
    244          void spiStartSend(SPIDriver *spip, size_t n, const void *txbuf) {
   \                     spiStartSend:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    245          
    246            chDbgCheck((spip != NULL) && (n > 0) && (txbuf != NULL),
    247                       "spiStartSend");
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD003             BEQ.N    ??spiStartSend_0
   \   0000000C   0x2D00             CMP      R5,#+0
   \   0000000E   0xD001             BEQ.N    ??spiStartSend_0
   \   00000010   0x2E00             CMP      R6,#+0
   \   00000012   0xD104             BNE.N    ??spiStartSend_1
   \                     ??spiStartSend_0:
   \   00000014   0x22F7             MOVS     R2,#+247
   \   00000016   0x....             LDR.N    R1,??DataTable13
   \   00000018   0x....             LDR.N    R0,??DataTable13_13
   \   0000001A   0x.... 0x....      BL       chDbgPanic3
    248          
    249            chSysLock();
   \                     ??spiStartSend_1:
   \   0000001E   0x2020             MOVS     R0,#+32
   \   00000020   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000024   0x.... 0x....      BL       dbg_check_lock
    250            chDbgAssert(spip->state == SPI_READY, "spiStartSend(), #1", "not ready");
   \   00000028   0x7820             LDRB     R0,[R4, #+0]
   \   0000002A   0x2802             CMP      R0,#+2
   \   0000002C   0xD002             BEQ.N    ??spiStartSend_2
   \   0000002E   0x....             LDR.N    R0,??DataTable13_14
   \   00000030   0x.... 0x....      BL       chDbgPanic
    251            spiStartSendI(spip, n, txbuf);
   \                     ??spiStartSend_2:
   \   00000034   0x2003             MOVS     R0,#+3
   \   00000036   0x7020             STRB     R0,[R4, #+0]
   \   00000038   0x0032             MOVS     R2,R6
   \   0000003A   0x0029             MOVS     R1,R5
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0x.... 0x....      BL       spi_lld_send
    252            chSysUnlock();
   \   00000042   0x.... 0x....      BL       dbg_check_unlock
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0xF380 0x8811      MSR      BASEPRI,R0
    253          }
   \   0000004C   0xBD70             POP      {R4-R6,PC}       ;; return
    254          
    255          /**
    256           * @brief   Receives data from the SPI bus.
    257           * @details This asynchronous function starts a receive operation.
    258           * @pre     A slave must have been selected using @p spiSelect() or
    259           *          @p spiSelectI().
    260           * @post    At the end of the operation the configured callback is invoked.
    261           * @note    The buffers are organized as uint8_t arrays for data sizes below
    262           *          or equal to 8 bits else it is organized as uint16_t arrays.
    263           *
    264           * @param[in] spip      pointer to the @p SPIDriver object
    265           * @param[in] n         number of words to receive
    266           * @param[out] rxbuf    the pointer to the receive buffer
    267           *
    268           * @api
    269           */

   \                                 In section .text, align 2, keep-with-next
    270          void spiStartReceive(SPIDriver *spip, size_t n, void *rxbuf) {
   \                     spiStartReceive:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    271          
    272            chDbgCheck((spip != NULL) && (n > 0) && (rxbuf != NULL),
    273                       "spiStartReceive");
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD003             BEQ.N    ??spiStartReceive_0
   \   0000000C   0x2D00             CMP      R5,#+0
   \   0000000E   0xD001             BEQ.N    ??spiStartReceive_0
   \   00000010   0x2E00             CMP      R6,#+0
   \   00000012   0xD105             BNE.N    ??spiStartReceive_1
   \                     ??spiStartReceive_0:
   \   00000014   0xF240 0x1211      MOVW     R2,#+273
   \   00000018   0x....             LDR.N    R1,??DataTable13
   \   0000001A   0x....             LDR.N    R0,??DataTable13_15
   \   0000001C   0x.... 0x....      BL       chDbgPanic3
    274          
    275            chSysLock();
   \                     ??spiStartReceive_1:
   \   00000020   0x2020             MOVS     R0,#+32
   \   00000022   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000026   0x.... 0x....      BL       dbg_check_lock
    276            chDbgAssert(spip->state == SPI_READY, "spiStartReceive(), #1", "not ready");
   \   0000002A   0x7820             LDRB     R0,[R4, #+0]
   \   0000002C   0x2802             CMP      R0,#+2
   \   0000002E   0xD002             BEQ.N    ??spiStartReceive_2
   \   00000030   0x....             LDR.N    R0,??DataTable13_16
   \   00000032   0x.... 0x....      BL       chDbgPanic
    277            spiStartReceiveI(spip, n, rxbuf);
   \                     ??spiStartReceive_2:
   \   00000036   0x2003             MOVS     R0,#+3
   \   00000038   0x7020             STRB     R0,[R4, #+0]
   \   0000003A   0x0032             MOVS     R2,R6
   \   0000003C   0x0029             MOVS     R1,R5
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x.... 0x....      BL       spi_lld_receive
    278            chSysUnlock();
   \   00000044   0x.... 0x....      BL       dbg_check_unlock
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xF380 0x8811      MSR      BASEPRI,R0
    279          }
   \   0000004E   0xBD70             POP      {R4-R6,PC}       ;; return
    280          
    281          #if SPI_USE_WAIT || defined(__DOXYGEN__)
    282          /**
    283           * @brief   Ignores data on the SPI bus.
    284           * @details This synchronous function performs the transmission of a series of
    285           *          idle words on the SPI bus and ignores the received data.
    286           * @pre     In order to use this function the option @p SPI_USE_WAIT must be
    287           *          enabled.
    288           * @pre     In order to use this function the driver must have been configured
    289           *          without callbacks (@p end_cb = @p NULL).
    290           *
    291           * @param[in] spip      pointer to the @p SPIDriver object
    292           * @param[in] n         number of words to be ignored
    293           *
    294           * @api
    295           */

   \                                 In section .text, align 2, keep-with-next
    296          void spiIgnore(SPIDriver *spip, size_t n) {
   \                     spiIgnore:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    297          
    298            chDbgCheck((spip != NULL) && (n > 0), "spiIgnoreWait");
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD001             BEQ.N    ??spiIgnore_0
   \   0000000A   0x2D00             CMP      R5,#+0
   \   0000000C   0xD105             BNE.N    ??spiIgnore_1
   \                     ??spiIgnore_0:
   \   0000000E   0xF44F 0x7295      MOV      R2,#+298
   \   00000012   0x....             LDR.N    R1,??DataTable13
   \   00000014   0x....             LDR.N    R0,??DataTable13_17
   \   00000016   0x.... 0x....      BL       chDbgPanic3
    299          
    300            chSysLock();
   \                     ??spiIgnore_1:
   \   0000001A   0x2020             MOVS     R0,#+32
   \   0000001C   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000020   0x.... 0x....      BL       dbg_check_lock
    301            chDbgAssert(spip->state == SPI_READY, "spiIgnore(), #1", "not ready");
   \   00000024   0x7820             LDRB     R0,[R4, #+0]
   \   00000026   0x2802             CMP      R0,#+2
   \   00000028   0xD002             BEQ.N    ??spiIgnore_2
   \   0000002A   0x....             LDR.N    R0,??DataTable13_18
   \   0000002C   0x.... 0x....      BL       chDbgPanic
    302            chDbgAssert(spip->config->end_cb == NULL, "spiIgnore(), #2", "has callback");
   \                     ??spiIgnore_2:
   \   00000030   0x6860             LDR      R0,[R4, #+4]
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD002             BEQ.N    ??spiIgnore_3
   \   00000038   0x....             LDR.N    R0,??DataTable13_19
   \   0000003A   0x.... 0x....      BL       chDbgPanic
    303            spiStartIgnoreI(spip, n);
   \                     ??spiIgnore_3:
   \   0000003E   0x2003             MOVS     R0,#+3
   \   00000040   0x7020             STRB     R0,[R4, #+0]
   \   00000042   0x0029             MOVS     R1,R5
   \   00000044   0x0020             MOVS     R0,R4
   \   00000046   0x.... 0x....      BL       spi_lld_ignore
    304            _spi_wait_s(spip);
   \   0000004A   0x68A0             LDR      R0,[R4, #+8]
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD002             BEQ.N    ??spiIgnore_4
   \   00000050   0x....             LDR.N    R0,??DataTable13_20
   \   00000052   0x.... 0x....      BL       chDbgPanic
   \                     ??spiIgnore_4:
   \   00000056   0x....             LDR.N    R0,??DataTable13_21
   \   00000058   0x6980             LDR      R0,[R0, #+24]
   \   0000005A   0x60A0             STR      R0,[R4, #+8]
   \   0000005C   0x2002             MOVS     R0,#+2
   \   0000005E   0x.... 0x....      BL       chSchGoSleepS
    305            chSysUnlock();
   \   00000062   0x.... 0x....      BL       dbg_check_unlock
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0xF380 0x8811      MSR      BASEPRI,R0
    306          }
   \   0000006C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    307          
    308          /**
    309           * @brief   Exchanges data on the SPI bus.
    310           * @details This synchronous function performs a simultaneous transmit/receive
    311           *          operation.
    312           * @pre     In order to use this function the option @p SPI_USE_WAIT must be
    313           *          enabled.
    314           * @pre     In order to use this function the driver must have been configured
    315           *          without callbacks (@p end_cb = @p NULL).
    316           * @note    The buffers are organized as uint8_t arrays for data sizes below
    317           *          or equal to 8 bits else it is organized as uint16_t arrays.
    318           *
    319           * @param[in] spip      pointer to the @p SPIDriver object
    320           * @param[in] n         number of words to be exchanged
    321           * @param[in] txbuf     the pointer to the transmit buffer
    322           * @param[out] rxbuf    the pointer to the receive buffer
    323           *
    324           * @api
    325           */

   \                                 In section .text, align 2, keep-with-next
    326          void spiExchange(SPIDriver *spip, size_t n,
    327                           const void *txbuf, void *rxbuf) {
   \                     spiExchange:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    328          
    329            chDbgCheck((spip != NULL) && (n > 0) && (rxbuf != NULL) && (txbuf != NULL),
    330                       "spiExchange");
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD005             BEQ.N    ??spiExchange_0
   \   0000000E   0x2D00             CMP      R5,#+0
   \   00000010   0xD003             BEQ.N    ??spiExchange_0
   \   00000012   0x2F00             CMP      R7,#+0
   \   00000014   0xD001             BEQ.N    ??spiExchange_0
   \   00000016   0x2E00             CMP      R6,#+0
   \   00000018   0xD105             BNE.N    ??spiExchange_1
   \                     ??spiExchange_0:
   \   0000001A   0xF44F 0x72A5      MOV      R2,#+330
   \   0000001E   0x....             LDR.N    R1,??DataTable13
   \   00000020   0x....             LDR.N    R0,??DataTable13_22
   \   00000022   0x.... 0x....      BL       chDbgPanic3
    331          
    332            chSysLock();
   \                     ??spiExchange_1:
   \   00000026   0x2020             MOVS     R0,#+32
   \   00000028   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000002C   0x.... 0x....      BL       dbg_check_lock
    333            chDbgAssert(spip->state == SPI_READY, "spiExchange(), #1", "not ready");
   \   00000030   0x7820             LDRB     R0,[R4, #+0]
   \   00000032   0x2802             CMP      R0,#+2
   \   00000034   0xD002             BEQ.N    ??spiExchange_2
   \   00000036   0x....             LDR.N    R0,??DataTable13_23
   \   00000038   0x.... 0x....      BL       chDbgPanic
    334            chDbgAssert(spip->config->end_cb == NULL,
    335                        "spiExchange(), #2", "has callback");
   \                     ??spiExchange_2:
   \   0000003C   0x6860             LDR      R0,[R4, #+4]
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD002             BEQ.N    ??spiExchange_3
   \   00000044   0x....             LDR.N    R0,??DataTable13_24
   \   00000046   0x.... 0x....      BL       chDbgPanic
    336            spiStartExchangeI(spip, n, txbuf, rxbuf);
   \                     ??spiExchange_3:
   \   0000004A   0x2003             MOVS     R0,#+3
   \   0000004C   0x7020             STRB     R0,[R4, #+0]
   \   0000004E   0x003B             MOVS     R3,R7
   \   00000050   0x0032             MOVS     R2,R6
   \   00000052   0x0029             MOVS     R1,R5
   \   00000054   0x0020             MOVS     R0,R4
   \   00000056   0x.... 0x....      BL       spi_lld_exchange
    337            _spi_wait_s(spip);
   \   0000005A   0x68A0             LDR      R0,[R4, #+8]
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD002             BEQ.N    ??spiExchange_4
   \   00000060   0x....             LDR.N    R0,??DataTable13_20
   \   00000062   0x.... 0x....      BL       chDbgPanic
   \                     ??spiExchange_4:
   \   00000066   0x....             LDR.N    R0,??DataTable13_21
   \   00000068   0x6980             LDR      R0,[R0, #+24]
   \   0000006A   0x60A0             STR      R0,[R4, #+8]
   \   0000006C   0x2002             MOVS     R0,#+2
   \   0000006E   0x.... 0x....      BL       chSchGoSleepS
    338            chSysUnlock();
   \   00000072   0x.... 0x....      BL       dbg_check_unlock
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0xF380 0x8811      MSR      BASEPRI,R0
    339          }
   \   0000007C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    340          
    341          /**
    342           * @brief   Sends data over the SPI bus.
    343           * @details This synchronous function performs a transmit operation.
    344           * @pre     In order to use this function the option @p SPI_USE_WAIT must be
    345           *          enabled.
    346           * @pre     In order to use this function the driver must have been configured
    347           *          without callbacks (@p end_cb = @p NULL).
    348           * @note    The buffers are organized as uint8_t arrays for data sizes below
    349           *          or equal to 8 bits else it is organized as uint16_t arrays.
    350           *
    351           * @param[in] spip      pointer to the @p SPIDriver object
    352           * @param[in] n         number of words to send
    353           * @param[in] txbuf     the pointer to the transmit buffer
    354           *
    355           * @api
    356           */

   \                                 In section .text, align 2, keep-with-next
    357          void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
   \                     spiSend:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    358          
    359            chDbgCheck((spip != NULL) && (n > 0) && (txbuf != NULL), "spiSend");
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD003             BEQ.N    ??spiSend_0
   \   0000000C   0x2D00             CMP      R5,#+0
   \   0000000E   0xD001             BEQ.N    ??spiSend_0
   \   00000010   0x2E00             CMP      R6,#+0
   \   00000012   0xD105             BNE.N    ??spiSend_1
   \                     ??spiSend_0:
   \   00000014   0xF240 0x1267      MOVW     R2,#+359
   \   00000018   0x....             LDR.N    R1,??DataTable13
   \   0000001A   0x....             LDR.N    R0,??DataTable13_25
   \   0000001C   0x.... 0x....      BL       chDbgPanic3
    360          
    361            chSysLock();
   \                     ??spiSend_1:
   \   00000020   0x2020             MOVS     R0,#+32
   \   00000022   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000026   0x.... 0x....      BL       dbg_check_lock
    362            chDbgAssert(spip->state == SPI_READY, "spiSend(), #1", "not ready");
   \   0000002A   0x7820             LDRB     R0,[R4, #+0]
   \   0000002C   0x2802             CMP      R0,#+2
   \   0000002E   0xD002             BEQ.N    ??spiSend_2
   \   00000030   0x....             LDR.N    R0,??DataTable13_26
   \   00000032   0x.... 0x....      BL       chDbgPanic
    363            chDbgAssert(spip->config->end_cb == NULL, "spiSend(), #2", "has callback");
   \                     ??spiSend_2:
   \   00000036   0x6860             LDR      R0,[R4, #+4]
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD002             BEQ.N    ??spiSend_3
   \   0000003E   0x....             LDR.N    R0,??DataTable13_27
   \   00000040   0x.... 0x....      BL       chDbgPanic
    364            spiStartSendI(spip, n, txbuf);
   \                     ??spiSend_3:
   \   00000044   0x2003             MOVS     R0,#+3
   \   00000046   0x7020             STRB     R0,[R4, #+0]
   \   00000048   0x0032             MOVS     R2,R6
   \   0000004A   0x0029             MOVS     R1,R5
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0x.... 0x....      BL       spi_lld_send
    365            _spi_wait_s(spip);
   \   00000052   0x68A0             LDR      R0,[R4, #+8]
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD002             BEQ.N    ??spiSend_4
   \   00000058   0x....             LDR.N    R0,??DataTable13_20
   \   0000005A   0x.... 0x....      BL       chDbgPanic
   \                     ??spiSend_4:
   \   0000005E   0x....             LDR.N    R0,??DataTable13_21
   \   00000060   0x6980             LDR      R0,[R0, #+24]
   \   00000062   0x60A0             STR      R0,[R4, #+8]
   \   00000064   0x2002             MOVS     R0,#+2
   \   00000066   0x.... 0x....      BL       chSchGoSleepS
    366            chSysUnlock();
   \   0000006A   0x.... 0x....      BL       dbg_check_unlock
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0xF380 0x8811      MSR      BASEPRI,R0
    367          }
   \   00000074   0xBD70             POP      {R4-R6,PC}       ;; return
    368          
    369          /**
    370           * @brief   Receives data from the SPI bus.
    371           * @details This synchronous function performs a receive operation.
    372           * @pre     In order to use this function the option @p SPI_USE_WAIT must be
    373           *          enabled.
    374           * @pre     In order to use this function the driver must have been configured
    375           *          without callbacks (@p end_cb = @p NULL).
    376           * @note    The buffers are organized as uint8_t arrays for data sizes below
    377           *          or equal to 8 bits else it is organized as uint16_t arrays.
    378           *
    379           * @param[in] spip      pointer to the @p SPIDriver object
    380           * @param[in] n         number of words to receive
    381           * @param[out] rxbuf    the pointer to the receive buffer
    382           *
    383           * @api
    384           */

   \                                 In section .text, align 2, keep-with-next
    385          void spiReceive(SPIDriver *spip, size_t n, void *rxbuf) {
   \                     spiReceive:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    386          
    387            chDbgCheck((spip != NULL) && (n > 0) && (rxbuf != NULL),
    388                       "spiReceive");
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD003             BEQ.N    ??spiReceive_0
   \   0000000C   0x2D00             CMP      R5,#+0
   \   0000000E   0xD001             BEQ.N    ??spiReceive_0
   \   00000010   0x2E00             CMP      R6,#+0
   \   00000012   0xD105             BNE.N    ??spiReceive_1
   \                     ??spiReceive_0:
   \   00000014   0xF44F 0x72C2      MOV      R2,#+388
   \   00000018   0x....             LDR.N    R1,??DataTable13
   \   0000001A   0x....             LDR.N    R0,??DataTable13_28
   \   0000001C   0x.... 0x....      BL       chDbgPanic3
    389          
    390            chSysLock();
   \                     ??spiReceive_1:
   \   00000020   0x2020             MOVS     R0,#+32
   \   00000022   0xF380 0x8811      MSR      BASEPRI,R0
   \   00000026   0x.... 0x....      BL       dbg_check_lock
    391            chDbgAssert(spip->state == SPI_READY, "spiReceive(), #1", "not ready");
   \   0000002A   0x7820             LDRB     R0,[R4, #+0]
   \   0000002C   0x2802             CMP      R0,#+2
   \   0000002E   0xD002             BEQ.N    ??spiReceive_2
   \   00000030   0x....             LDR.N    R0,??DataTable13_29
   \   00000032   0x.... 0x....      BL       chDbgPanic
    392            chDbgAssert(spip->config->end_cb == NULL,
    393                        "spiReceive(), #2", "has callback");
   \                     ??spiReceive_2:
   \   00000036   0x6860             LDR      R0,[R4, #+4]
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD002             BEQ.N    ??spiReceive_3
   \   0000003E   0x....             LDR.N    R0,??DataTable13_30
   \   00000040   0x.... 0x....      BL       chDbgPanic
    394            spiStartReceiveI(spip, n, rxbuf);
   \                     ??spiReceive_3:
   \   00000044   0x2003             MOVS     R0,#+3
   \   00000046   0x7020             STRB     R0,[R4, #+0]
   \   00000048   0x0032             MOVS     R2,R6
   \   0000004A   0x0029             MOVS     R1,R5
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0x.... 0x....      BL       spi_lld_receive
    395            _spi_wait_s(spip);
   \   00000052   0x68A0             LDR      R0,[R4, #+8]
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD002             BEQ.N    ??spiReceive_4
   \   00000058   0x....             LDR.N    R0,??DataTable13_20
   \   0000005A   0x.... 0x....      BL       chDbgPanic
   \                     ??spiReceive_4:
   \   0000005E   0x....             LDR.N    R0,??DataTable13_21
   \   00000060   0x6980             LDR      R0,[R0, #+24]
   \   00000062   0x60A0             STR      R0,[R4, #+8]
   \   00000064   0x2002             MOVS     R0,#+2
   \   00000066   0x.... 0x....      BL       chSchGoSleepS
    396            chSysUnlock();
   \   0000006A   0x.... 0x....      BL       dbg_check_unlock
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0xF380 0x8811      MSR      BASEPRI,R0
    397          }
   \   00000074   0xBD70             POP      {R4-R6,PC}       ;; return
    398          #endif /* SPI_USE_WAIT */
    399          
    400          #if SPI_USE_MUTUAL_EXCLUSION || defined(__DOXYGEN__)
    401          /**
    402           * @brief   Gains exclusive access to the SPI bus.
    403           * @details This function tries to gain ownership to the SPI bus, if the bus
    404           *          is already being used then the invoking thread is queued.
    405           * @pre     In order to use this function the option @p SPI_USE_MUTUAL_EXCLUSION
    406           *          must be enabled.
    407           *
    408           * @param[in] spip      pointer to the @p SPIDriver object
    409           *
    410           * @api
    411           */

   \                                 In section .text, align 2, keep-with-next
    412          void spiAcquireBus(SPIDriver *spip) {
   \                     spiAcquireBus:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    413          
    414            chDbgCheck(spip != NULL, "spiAcquireBus");
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD105             BNE.N    ??spiAcquireBus_0
   \   00000008   0xF44F 0x72CF      MOV      R2,#+414
   \   0000000C   0x....             LDR.N    R1,??DataTable13
   \   0000000E   0x....             LDR.N    R0,??DataTable13_31
   \   00000010   0x.... 0x....      BL       chDbgPanic3
    415          
    416          #if CH_USE_MUTEXES
    417            chMtxLock(&spip->mutex);
   \                     ??spiAcquireBus_0:
   \   00000014   0xF114 0x000C      ADDS     R0,R4,#+12
   \   00000018   0x.... 0x....      BL       chMtxLock
    418          #elif CH_USE_SEMAPHORES
    419            chSemWait(&spip->semaphore);
    420          #endif
    421          }
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    422          
    423          /**
    424           * @brief   Releases exclusive access to the SPI bus.
    425           * @pre     In order to use this function the option @p SPI_USE_MUTUAL_EXCLUSION
    426           *          must be enabled.
    427           *
    428           * @param[in] spip      pointer to the @p SPIDriver object
    429           *
    430           * @api
    431           */

   \                                 In section .text, align 2, keep-with-next
    432          void spiReleaseBus(SPIDriver *spip) {
   \                     spiReleaseBus:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    433          
    434            chDbgCheck(spip != NULL, "spiReleaseBus");
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD105             BNE.N    ??spiReleaseBus_0
   \   00000008   0xF44F 0x72D9      MOV      R2,#+434
   \   0000000C   0x....             LDR.N    R1,??DataTable13
   \   0000000E   0x....             LDR.N    R0,??DataTable13_32
   \   00000010   0x.... 0x....      BL       chDbgPanic3
    435          
    436          #if CH_USE_MUTEXES
    437            (void)spip;
    438            chMtxUnlock();
   \                     ??spiReleaseBus_0:
   \   00000014   0x.... 0x....      BL       chMtxUnlock
    439          #elif CH_USE_SEMAPHORES
    440            chSemSignal(&spip->semaphore);
    441          #endif
    442          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x........         DC32     `?<Constant "F:\\\\stuff\\\\rusefi_sourc...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x........         DC32     `?<Constant "\\"spiStart\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x........         DC32     `?<Constant "spiStart(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0x........         DC32     `?<Constant "\\"spiStop\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   0x........         DC32     `?<Constant "spiStop(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \   00000000   0x........         DC32     `?<Constant "\\"spiSelect\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \   00000000   0x........         DC32     `?<Constant "spiSelect(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_7:
   \   00000000   0x........         DC32     `?<Constant "\\"spiUnselect\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_8:
   \   00000000   0x........         DC32     `?<Constant "spiUnselect(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_9:
   \   00000000   0x........         DC32     `?<Constant "\\"spiStartIgnore\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_10:
   \   00000000   0x........         DC32     `?<Constant "spiStartIgnore(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_11:
   \   00000000   0x........         DC32     `?<Constant "\\"spiStartExchange\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_12:
   \   00000000   0x........         DC32     `?<Constant "spiStartExchange(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_13:
   \   00000000   0x........         DC32     `?<Constant "\\"spiStartSend\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_14:
   \   00000000   0x........         DC32     `?<Constant "spiStartSend(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_15:
   \   00000000   0x........         DC32     `?<Constant "\\"spiStartReceive\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_16:
   \   00000000   0x........         DC32     `?<Constant "spiStartReceive(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_17:
   \   00000000   0x........         DC32     `?<Constant "\\"spiIgnoreWait\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_18:
   \   00000000   0x........         DC32     `?<Constant "spiIgnore(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_19:
   \   00000000   0x........         DC32     `?<Constant "spiIgnore(), #2">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_20:
   \   00000000   0x........         DC32     `?<Constant "_spi_wait(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_21:
   \   00000000   0x........         DC32     rlist

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_22:
   \   00000000   0x........         DC32     `?<Constant "\\"spiExchange\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_23:
   \   00000000   0x........         DC32     `?<Constant "spiExchange(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_24:
   \   00000000   0x........         DC32     `?<Constant "spiExchange(), #2">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_25:
   \   00000000   0x........         DC32     `?<Constant "\\"spiSend\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_26:
   \   00000000   0x........         DC32     `?<Constant "spiSend(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_27:
   \   00000000   0x........         DC32     `?<Constant "spiSend(), #2">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_28:
   \   00000000   0x........         DC32     `?<Constant "\\"spiReceive\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_29:
   \   00000000   0x........         DC32     `?<Constant "spiReceive(), #1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_30:
   \   00000000   0x........         DC32     `?<Constant "spiReceive(), #2">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_31:
   \   00000000   0x........         DC32     `?<Constant "\\"spiAcquireBus\\"()">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_32:
   \   00000000   0x........         DC32     `?<Constant "\\"spiReleaseBus\\"()">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"spiStart\\"()">`:
   \   00000000   0x22 0x73          DC8 "\"spiStart\"()"
   \              0x70 0x69    
   \              0x53 0x74    
   \              0x61 0x72    
   \              0x74 0x22    
   \              0x28 0x29    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "F:\\\\stuff\\\\rusefi_sourc...">`:
   \   00000000   0x46 0x3A          DC8 46H, 3AH, 5CH, 73H, 74H, 75H, 66H, 66H
   \              0x5C 0x73    
   \              0x74 0x75    
   \              0x66 0x66    
   \   00000008   0x5C 0x72          DC8 5CH, 72H, 75H, 73H, 65H, 66H, 69H, 5FH
   \              0x75 0x73    
   \              0x65 0x66    
   \              0x69 0x5F    
   \   00000010   0x73 0x6F          DC8 73H, 6FH, 75H, 72H, 63H, 65H, 66H, 6FH
   \              0x75 0x72    
   \              0x63 0x65    
   \              0x66 0x6F    
   \   00000018   0x72 0x67          DC8 72H, 67H, 65H, 5CH, 66H, 69H, 72H, 6DH
   \              0x65 0x5C    
   \              0x66 0x69    
   \              0x72 0x6D    
   \   00000020   0x77 0x61          DC8 77H, 61H, 72H, 65H, 5CH, 63H, 68H, 69H
   \              0x72 0x65    
   \              0x5C 0x63    
   \              0x68 0x69    
   \   00000028   0x62 0x69          DC8 62H, 69H, 6FH, 73H, 5CH, 6FH, 73H, 5CH
   \              0x6F 0x73    
   \              0x5C 0x6F    
   \              0x73 0x5C    
   \   00000030   0x68 0x61          DC8 68H, 61H, 6CH, 5CH, 73H, 72H, 63H, 5CH
   \              0x6C 0x5C    
   \              0x73 0x72    
   \              0x63 0x5C    
   \   00000038   0x73 0x70          DC8 73H, 70H, 69H, 2EH, 63H, 0
   \              0x69 0x2E    
   \              0x63 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "spiStart(), #1">`:
   \   00000000   0x73 0x70          DC8 "spiStart(), #1"
   \              0x69 0x53    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x28 0x29    
   \              0x2C 0x20    
   \              0x23 0x31    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"spiStop\\"()">`:
   \   00000000   0x22 0x73          DC8 "\"spiStop\"()"
   \              0x70 0x69    
   \              0x53 0x74    
   \              0x6F 0x70    
   \              0x22 0x28    
   \              0x29 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "spiStop(), #1">`:
   \   00000000   0x73 0x70          DC8 "spiStop(), #1"
   \              0x69 0x53    
   \              0x74 0x6F    
   \              0x70 0x28    
   \              0x29 0x2C    
   \              0x20 0x23    
   \              0x31 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"spiSelect\\"()">`:
   \   00000000   0x22 0x73          DC8 "\"spiSelect\"()"
   \              0x70 0x69    
   \              0x53 0x65    
   \              0x6C 0x65    
   \              0x63 0x74    
   \              0x22 0x28    
   \              0x29 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "spiSelect(), #1">`:
   \   00000000   0x73 0x70          DC8 "spiSelect(), #1"
   \              0x69 0x53    
   \              0x65 0x6C    
   \              0x65 0x63    
   \              0x74 0x28    
   \              0x29 0x2C    
   \              0x20 0x23    
   \              0x31 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"spiUnselect\\"()">`:
   \   00000000   0x22 0x73          DC8 "\"spiUnselect\"()"
   \              0x70 0x69    
   \              0x55 0x6E    
   \              0x73 0x65    
   \              0x6C 0x65    
   \              0x63 0x74    
   \              0x22 0x28    
   \              0x29 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "spiUnselect(), #1">`:
   \   00000000   0x73 0x70          DC8 "spiUnselect(), #1"
   \              0x69 0x55    
   \              0x6E 0x73    
   \              0x65 0x6C    
   \              0x65 0x63    
   \              0x74 0x28    
   \              0x29 0x2C    
   \              0x20 0x23    
   \              0x31 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"spiStartIgnore\\"()">`:
   \   00000000   0x22 0x73          DC8 "\"spiStartIgnore\"()"
   \              0x70 0x69    
   \              0x53 0x74    
   \              0x61 0x72    
   \              0x74 0x49    
   \              0x67 0x6E    
   \              0x6F 0x72    
   \              0x65 0x22    
   \              0x28 0x29    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "spiStartIgnore(), #1">`:
   \   00000000   0x73 0x70          DC8 "spiStartIgnore(), #1"
   \              0x69 0x53    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x49 0x67    
   \              0x6E 0x6F    
   \              0x72 0x65    
   \              0x28 0x29    
   \              0x2C 0x20    
   \              0x23 0x31    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"spiStartExchange\\"()">`:
   \   00000000   0x22 0x73          DC8 "\"spiStartExchange\"()"
   \              0x70 0x69    
   \              0x53 0x74    
   \              0x61 0x72    
   \              0x74 0x45    
   \              0x78 0x63    
   \              0x68 0x61    
   \              0x6E 0x67    
   \              0x65 0x22    
   \              0x28 0x29    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "spiStartExchange(), #1">`:
   \   00000000   0x73 0x70          DC8 "spiStartExchange(), #1"
   \              0x69 0x53    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x45 0x78    
   \              0x63 0x68    
   \              0x61 0x6E    
   \              0x67 0x65    
   \              0x28 0x29    
   \              0x2C 0x20    
   \              0x23 0x31    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"spiStartSend\\"()">`:
   \   00000000   0x22 0x73          DC8 "\"spiStartSend\"()"
   \              0x70 0x69    
   \              0x53 0x74    
   \              0x61 0x72    
   \              0x74 0x53    
   \              0x65 0x6E    
   \              0x64 0x22    
   \              0x28 0x29    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "spiStartSend(), #1">`:
   \   00000000   0x73 0x70          DC8 "spiStartSend(), #1"
   \              0x69 0x53    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x53 0x65    
   \              0x6E 0x64    
   \              0x28 0x29    
   \              0x2C 0x20    
   \              0x23 0x31    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"spiStartReceive\\"()">`:
   \   00000000   0x22 0x73          DC8 "\"spiStartReceive\"()"
   \              0x70 0x69    
   \              0x53 0x74    
   \              0x61 0x72    
   \              0x74 0x52    
   \              0x65 0x63    
   \              0x65 0x69    
   \              0x76 0x65    
   \              0x22 0x28    
   \              0x29 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "spiStartReceive(), #1">`:
   \   00000000   0x73 0x70          DC8 "spiStartReceive(), #1"
   \              0x69 0x53    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x52 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x28    
   \              0x29 0x2C    
   \              0x20 0x23    
   \              0x31 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"spiIgnoreWait\\"()">`:
   \   00000000   0x22 0x73          DC8 "\"spiIgnoreWait\"()"
   \              0x70 0x69    
   \              0x49 0x67    
   \              0x6E 0x6F    
   \              0x72 0x65    
   \              0x57 0x61    
   \              0x69 0x74    
   \              0x22 0x28    
   \              0x29 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "spiIgnore(), #1">`:
   \   00000000   0x73 0x70          DC8 "spiIgnore(), #1"
   \              0x69 0x49    
   \              0x67 0x6E    
   \              0x6F 0x72    
   \              0x65 0x28    
   \              0x29 0x2C    
   \              0x20 0x23    
   \              0x31 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "spiIgnore(), #2">`:
   \   00000000   0x73 0x70          DC8 "spiIgnore(), #2"
   \              0x69 0x49    
   \              0x67 0x6E    
   \              0x6F 0x72    
   \              0x65 0x28    
   \              0x29 0x2C    
   \              0x20 0x23    
   \              0x32 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "_spi_wait(), #1">`:
   \   00000000   0x5F 0x73          DC8 "_spi_wait(), #1"
   \              0x70 0x69    
   \              0x5F 0x77    
   \              0x61 0x69    
   \              0x74 0x28    
   \              0x29 0x2C    
   \              0x20 0x23    
   \              0x31 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"spiExchange\\"()">`:
   \   00000000   0x22 0x73          DC8 "\"spiExchange\"()"
   \              0x70 0x69    
   \              0x45 0x78    
   \              0x63 0x68    
   \              0x61 0x6E    
   \              0x67 0x65    
   \              0x22 0x28    
   \              0x29 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "spiExchange(), #1">`:
   \   00000000   0x73 0x70          DC8 "spiExchange(), #1"
   \              0x69 0x45    
   \              0x78 0x63    
   \              0x68 0x61    
   \              0x6E 0x67    
   \              0x65 0x28    
   \              0x29 0x2C    
   \              0x20 0x23    
   \              0x31 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "spiExchange(), #2">`:
   \   00000000   0x73 0x70          DC8 "spiExchange(), #2"
   \              0x69 0x45    
   \              0x78 0x63    
   \              0x68 0x61    
   \              0x6E 0x67    
   \              0x65 0x28    
   \              0x29 0x2C    
   \              0x20 0x23    
   \              0x32 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"spiSend\\"()">`:
   \   00000000   0x22 0x73          DC8 "\"spiSend\"()"
   \              0x70 0x69    
   \              0x53 0x65    
   \              0x6E 0x64    
   \              0x22 0x28    
   \              0x29 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "spiSend(), #1">`:
   \   00000000   0x73 0x70          DC8 "spiSend(), #1"
   \              0x69 0x53    
   \              0x65 0x6E    
   \              0x64 0x28    
   \              0x29 0x2C    
   \              0x20 0x23    
   \              0x31 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "spiSend(), #2">`:
   \   00000000   0x73 0x70          DC8 "spiSend(), #2"
   \              0x69 0x53    
   \              0x65 0x6E    
   \              0x64 0x28    
   \              0x29 0x2C    
   \              0x20 0x23    
   \              0x32 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"spiReceive\\"()">`:
   \   00000000   0x22 0x73          DC8 "\"spiReceive\"()"
   \              0x70 0x69    
   \              0x52 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x22    
   \              0x28 0x29    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "spiReceive(), #1">`:
   \   00000000   0x73 0x70          DC8 "spiReceive(), #1"
   \              0x69 0x52    
   \              0x65 0x63    
   \              0x65 0x69    
   \              0x76 0x65    
   \              0x28 0x29    
   \              0x2C 0x20    
   \              0x23 0x31    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "spiReceive(), #2">`:
   \   00000000   0x73 0x70          DC8 "spiReceive(), #2"
   \              0x69 0x52    
   \              0x65 0x63    
   \              0x65 0x69    
   \              0x76 0x65    
   \              0x28 0x29    
   \              0x2C 0x20    
   \              0x23 0x32    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"spiAcquireBus\\"()">`:
   \   00000000   0x22 0x73          DC8 "\"spiAcquireBus\"()"
   \              0x70 0x69    
   \              0x41 0x63    
   \              0x71 0x75    
   \              0x69 0x72    
   \              0x65 0x42    
   \              0x75 0x73    
   \              0x22 0x28    
   \              0x29 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\"spiReleaseBus\\"()">`:
   \   00000000   0x22 0x73          DC8 "\"spiReleaseBus\"()"
   \              0x70 0x69    
   \              0x52 0x65    
   \              0x6C 0x65    
   \              0x61 0x73    
   \              0x65 0x42    
   \              0x75 0x73    
   \              0x22 0x28    
   \              0x29 0x00    
   \   00000012   0x00 0x00          DC8 0, 0
    443          #endif /* SPI_USE_MUTUAL_EXCLUSION */
    444          
    445          #endif /* HAL_USE_SPI */
    446          
    447          /** @} */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   spiAcquireBus
         8   -> chDbgPanic3
         8   -> chMtxLock
      24   spiExchange
        24   -> chDbgPanic
        24   -> chDbgPanic3
        24   -> chSchGoSleepS
        24   -> dbg_check_lock
        24   -> dbg_check_unlock
        24   -> spi_lld_exchange
      16   spiIgnore
        16   -> chDbgPanic
        16   -> chDbgPanic3
        16   -> chSchGoSleepS
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
        16   -> spi_lld_ignore
       8   spiInit
         8   -> spi_lld_init
       8   spiObjectInit
         8   -> chMtxInit
      16   spiReceive
        16   -> chDbgPanic
        16   -> chDbgPanic3
        16   -> chSchGoSleepS
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
        16   -> spi_lld_receive
       8   spiReleaseBus
         8   -> chDbgPanic3
         8   -> chMtxUnlock
       8   spiSelect
         8   -> chDbgPanic
         8   -> chDbgPanic3
         8   -> dbg_check_lock
         8   -> dbg_check_unlock
         8   -> spi_lld_select
      16   spiSend
        16   -> chDbgPanic
        16   -> chDbgPanic3
        16   -> chSchGoSleepS
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
        16   -> spi_lld_send
      16   spiStart
        16   -> chDbgPanic
        16   -> chDbgPanic3
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
        16   -> spi_lld_start
      24   spiStartExchange
        24   -> chDbgPanic
        24   -> chDbgPanic3
        24   -> dbg_check_lock
        24   -> dbg_check_unlock
        24   -> spi_lld_exchange
      16   spiStartIgnore
        16   -> chDbgPanic
        16   -> chDbgPanic3
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
        16   -> spi_lld_ignore
      16   spiStartReceive
        16   -> chDbgPanic
        16   -> chDbgPanic3
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
        16   -> spi_lld_receive
      16   spiStartSend
        16   -> chDbgPanic
        16   -> chDbgPanic3
        16   -> dbg_check_lock
        16   -> dbg_check_unlock
        16   -> spi_lld_send
       8   spiStop
         8   -> chDbgPanic
         8   -> chDbgPanic3
         8   -> dbg_check_lock
         8   -> dbg_check_unlock
         8   -> spi_lld_stop
         8   -> spi_lld_unselect
       8   spiUnselect
         8   -> chDbgPanic
         8   -> chDbgPanic3
         8   -> dbg_check_lock
         8   -> dbg_check_unlock
         8   -> spi_lld_unselect


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      64  ?<Constant "F:\\stuff\\rusefi_sourc...">
      20  ?<Constant "\"spiAcquireBus\"()">
      16  ?<Constant "\"spiExchange\"()">
      20  ?<Constant "\"spiIgnoreWait\"()">
      16  ?<Constant "\"spiReceive\"()">
      20  ?<Constant "\"spiReleaseBus\"()">
      16  ?<Constant "\"spiSelect\"()">
      12  ?<Constant "\"spiSend\"()">
      24  ?<Constant "\"spiStartExchange\"()">
      20  ?<Constant "\"spiStartIgnore\"()">
      20  ?<Constant "\"spiStartReceive\"()">
      20  ?<Constant "\"spiStartSend\"()">
      16  ?<Constant "\"spiStart\"()">
      12  ?<Constant "\"spiStop\"()">
      16  ?<Constant "\"spiUnselect\"()">
      16  ?<Constant "_spi_wait(), #1">
      20  ?<Constant "spiExchange(), #1">
      20  ?<Constant "spiExchange(), #2">
      16  ?<Constant "spiIgnore(), #1">
      16  ?<Constant "spiIgnore(), #2">
      20  ?<Constant "spiReceive(), #1">
      20  ?<Constant "spiReceive(), #2">
      16  ?<Constant "spiSelect(), #1">
      16  ?<Constant "spiSend(), #1">
      16  ?<Constant "spiSend(), #2">
      16  ?<Constant "spiStart(), #1">
      24  ?<Constant "spiStartExchange(), #1">
      24  ?<Constant "spiStartIgnore(), #1">
      24  ?<Constant "spiStartReceive(), #1">
      20  ?<Constant "spiStartSend(), #1">
      16  ?<Constant "spiStop(), #1">
      20  ?<Constant "spiUnselect(), #1">
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_10
       4  ??DataTable13_11
       4  ??DataTable13_12
       4  ??DataTable13_13
       4  ??DataTable13_14
       4  ??DataTable13_15
       4  ??DataTable13_16
       4  ??DataTable13_17
       4  ??DataTable13_18
       4  ??DataTable13_19
       4  ??DataTable13_2
       4  ??DataTable13_20
       4  ??DataTable13_21
       4  ??DataTable13_22
       4  ??DataTable13_23
       4  ??DataTable13_24
       4  ??DataTable13_25
       4  ??DataTable13_26
       4  ??DataTable13_27
       4  ??DataTable13_28
       4  ??DataTable13_29
       4  ??DataTable13_3
       4  ??DataTable13_30
       4  ??DataTable13_31
       4  ??DataTable13_32
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable13_6
       4  ??DataTable13_7
       4  ??DataTable13_8
       4  ??DataTable13_9
      30  spiAcquireBus
     126  spiExchange
     110  spiIgnore
       8  spiInit
      26  spiObjectInit
     118  spiReceive
      26  spiReleaseBus
      64  spiSelect
     118  spiSend
      82  spiStart
      86  spiStartExchange
      74  spiStartIgnore
      80  spiStartReceive
      78  spiStartSend
      80  spiStop
      64  spiUnselect

 
   632 bytes in section .rodata
 1 302 bytes in section .text
 
 1 302 bytes of CODE  memory
   632 bytes of CONST memory

Errors: none
Warnings: none
