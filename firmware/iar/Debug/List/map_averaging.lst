###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:10 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\map_ #
#                       averaging.cpp                                         #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\map_ #
#                       averaging.cpp -lCN F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\Debug\List\ -lA F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\Debug\List\ -o                             #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\   #
#                       --no_cse --no_unroll --no_inline --no_code_motion     #
#                       --no_tbaa --no_clustering --no_scheduling --debug     #
#                       --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp     #
#                       --dlib_config "C:\Program Files (x86)\IAR             #
#                       Systems\Embedded Workbench                            #
#                       6.5\arm\INC\c\DLib_Config_Normal.h"                   #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\m #
#                       ap_averaging.lst                                      #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\ma #
#                       p_averaging.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\map_averaging.cpp
      1          /**
      2           * @file	map_averaging.cpp
      3           *
      4           * @date Dec 11, 2013
      5           * @author Andrey Belomutskiy, (c) 2012-2015
      6           *
      7           * This file is part of rusEfi - see http://rusefi.com
      8           *
      9           * rusEfi is free software; you can redistribute it and/or modify it under the terms of
     10           * the GNU General Public License as published by the Free Software Foundation; either
     11           * version 3 of the License, or (at your option) any later version.
     12           *
     13           * rusEfi is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
     14           * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     15           * GNU General Public License for more details.
     16           *
     17           * You should have received a copy of the GNU General Public License along with this program.
     18           * If not, see <http://www.gnu.org/licenses/>.
     19           */
     20          
     21          #include "main.h"
     22          #include "efilib2.h"
     23          #include "map.h"
     24          
     25          #if EFI_MAP_AVERAGING || defined(__DOXYGEN__)
     26          
     27          #include "map_averaging.h"
     28          #include "trigger_central.h"
     29          #include "adc_inputs.h"
     30          #include "engine_state.h"
     31          #include "engine_configuration.h"
     32          #include "interpolation.h"
     33          #include "signal_executor.h"
     34          #include "engine.h"
     35          #include "engine_math.h"
     36          
     37          #if EFI_ANALOG_CHART
     38          #include <sensor_chart.h>
     39          #endif /* EFI_ANALOG_CHART */
     40          
     41          #define FAST_MAP_CHART_SKIP_FACTOR 16
     42          

   \                                 In section .bss, align 4
     43          static Logging *logger;
   \                     logger:
   \   00000000                      DS8 4

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine:
   \   00000000   0xB580             PUSH     {R7,LR}
     44          static NamedOutputPin mapAveragingPin("map");
   \   00000002   0x....             ADR.N    R1,??DataTable3  ;; "map"
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable8
   \   00000008   0x.... 0x....      BL       _ZN14NamedOutputPinC1EPKc
     45          
     46          /**
     47           * Running counter of measurements per revolution
     48           */
     49          static volatile int perRevolutionCounter = 0;
     50          /**
     51           * Number of measurements in previous shaft revolution
     52           */
     53          static volatile int perRevolution = 0;
     54          
     55          /**
     56           * In this lock-free imlementation 'readIndex' is always pointing
     57           * to the consistent copy of accumulator and counter pair
     58           */
     59          static int readIndex = 0;
     60          static float accumulators[2];
     61          static int counters[2];
     62          
     63          
     64          /**
     65           * Running MAP accumulator
     66           */
     67          static volatile float mapAccumulator = 0;
     68          /**
     69           * Running counter of measurements to consider for averaging
     70           */
     71          static volatile int mapMeasurementsCounter = 0;
     72          
     73          /**
     74           * v_ for Voltage
     75           */
     76          static float v_averagedMapValue;
     77          
     78          EXTERN_ENGINE;
     79          
     80          static scheduling_s startTimer[2];
   \   0000000C   0x2302             MOVS     R3,#+2
   \   0000000E   0x2218             MOVS     R2,#+24
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable8_2
   \   00000018   0x.... 0x....      BL       __aeabi_vec_ctor_nocookie_nodtor
     81          static scheduling_s endTimer[2];
   \   0000001C   0x2302             MOVS     R3,#+2
   \   0000001E   0x2218             MOVS     R2,#+24
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable8_3
   \   00000028   0x.... 0x....      BL       __aeabi_vec_ctor_nocookie_nodtor
   \   0000002C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     mapAveragingPin:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
   \                     perRevolutionCounter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     perRevolution:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     readIndex:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     accumulators:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
   \                     counters:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
   \                     mapAccumulator:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     mapMeasurementsCounter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     v_averagedMapValue:
   \   00000000                      DS8 4

   \                                 In section .bss, align 8
   \                     startTimer:
   \   00000000                      DS8 48

   \                                 In section .bss, align 8
   \                     endTimer:
   \   00000000                      DS8 48
     82          
     83          /**
     84           * that's a performance optimization: let's not bother averaging
     85           * if we are outside of of the window
     86           */

   \                                 In section .bss, align 1
     87          static bool_t isAveraging = false;
   \                     isAveraging:
   \   00000000                      DS8 1
     88          

   \                                 In section .text, align 2, keep-with-next
     89          static void startAveraging(void *arg) {
   \                     _Z14startAveragingPv:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     90          	(void) arg;
     91          	efiAssertVoid(getRemainingStack(chThdSelf()) > 128, "lowstck#9");
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable8_4
   \   00000008   0x6980             LDR      R0,[R0, #+24]
   \   0000000A   0x.... 0x....      BL       getRemainingStack
   \   0000000E   0x2881             CMP      R0,#+129
   \   00000010   0xDA04             BGE.N    ??startAveraging_0
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   00000016   0x.... 0x....      BL       firmwareError
   \   0000001A   0xE01A             B.N      ??startAveraging_1
     92          	bool wasLocked = lockAnyContext();
   \                     ??startAveraging_0:
   \   0000001C   0x.... 0x....      BL       lockAnyContext
   \   00000020   0x0005             MOVS     R5,R0
     93          	;
     94          	// with locking we would have a consistent state
     95          	mapAccumulator = 0;
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x6001             STR      R1,[R0, #+0]
     96          	mapMeasurementsCounter = 0;
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable8_7
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0x6001             STR      R1,[R0, #+0]
     97          	isAveraging = true;
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable8_8
   \   00000036   0x2101             MOVS     R1,#+1
   \   00000038   0x7001             STRB     R1,[R0, #+0]
     98          	if (!wasLocked)
   \   0000003A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003C   0x2D00             CMP      R5,#+0
   \   0000003E   0xD104             BNE.N    ??startAveraging_2
     99          		chSysUnlockFromIsr()
   \   00000040   0x.... 0x....      BL       dbg_check_unlock_from_isr
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0xF380 0x8811      MSR      BASEPRI,R0
    100          	;
    101          	turnPinHigh(&mapAveragingPin);
   \                     ??startAveraging_2:
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable8
   \   0000004E   0x.... 0x....      BL       _Z11turnPinHighP14NamedOutputPin
    102          }
   \                     ??startAveraging_1:
   \   00000052   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    103          
    104          #if EFI_PROD_CODE || defined(__DOXYGEN__)
    105          /**
    106           * This method is invoked from ADC callback.
    107           * @note This method is invoked OFTEN, this method is a potential bottle-next - the implementation should be
    108           * as fast as possible
    109           */

   \                                 In section .text, align 4, keep-with-next
    110          void mapAveragingCallback(adcsample_t adcValue) {
   \                     _Z20mapAveragingCallbackt:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0x0004             MOVS     R4,R0
    111          	if(!isAveraging && boardConfiguration->sensorChartMode != SC_MAP) {
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable8_8
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD106             BNE.N    ??mapAveragingCallback_0
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable8_9
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF8D0 0x0310      LDR      R0,[R0, #+784]
   \   0000001C   0x2802             CMP      R0,#+2
   \   0000001E   0xD17A             BNE.N    ??mapAveragingCallback_1
    112          		return;
    113          	}
    114          
    115          	/* Calculates the average values from the ADC samples.*/
    116          	perRevolutionCounter++;
   \                     ??mapAveragingCallback_0:
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable8_10
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x1C40             ADDS     R0,R0,#+1
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable8_10
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    117          	efiAssertVoid(getRemainingStack(chThdSelf()) > 128, "lowstck#9a");
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable8_4
   \   00000032   0x6980             LDR      R0,[R0, #+24]
   \   00000034   0x.... 0x....      BL       getRemainingStack
   \   00000038   0x2881             CMP      R0,#+129
   \   0000003A   0xDA04             BGE.N    ??mapAveragingCallback_2
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable8_11
   \   00000040   0x.... 0x....      BL       firmwareError
   \   00000044   0xE067             B.N      ??mapAveragingCallback_1
    118          
    119          
    120          #if (EFI_ANALOG_CHART && EFI_ANALOG_SENSORS) || defined(__DOXYGEN__)
    121          	if (boardConfiguration->sensorChartMode == SC_MAP)
   \                     ??mapAveragingCallback_2:
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable8_9
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF8D0 0x0310      LDR      R0,[R0, #+784]
   \   00000050   0x2802             CMP      R0,#+2
   \   00000052   0xD126             BNE.N    ??mapAveragingCallback_3
    122          		if (perRevolutionCounter % FAST_MAP_CHART_SKIP_FACTOR == 0) {
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable8_10
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x2110             MOVS     R1,#+16
   \   0000005C   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000060   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000064   0x2A00             CMP      R2,#+0
   \   00000066   0xD11C             BNE.N    ??mapAveragingCallback_3
    123          			float voltage = adcToVoltsDivided(adcValue);
   \   00000068   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000006A   0xEE00 0x4A10      VMOV     S0,R4
   \   0000006E   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   00000072   0xEDDF 0x....      VLDR.W   S1,??DataTable3_1  ;; 0x3a400c01
   \   00000076   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000007A   0x....             LDR.N    R0,??DataTable8_12
   \   0000007C   0x6800             LDR      R0,[R0, #+0]
   \   0000007E   0xEDD0 0x0A74      VLDR     S1,[R0, #+464]
   \   00000082   0xEE20 0x8A20      VMUL.F32 S16,S0,S1
    124          			float currentPressure = getMapByVoltage(voltage);
   \   00000086   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   0000008A   0x.... 0x....      BL       _Z15getMapByVoltagef
   \   0000008E   0xEEF0 0x8A40      VMOV.F32 S17,S0
    125          			scAddData(getCrankshaftAngleNt(getTimeNowNt() PASS_ENGINE_PARAMETER), currentPressure);
   \   00000092   0x.... 0x....      BL       getTimeNowNt
   \   00000096   0x.... 0x....      BL       _Z20getCrankshaftAngleNtx
   \   0000009A   0xEEF0 0x0A68      VMOV.F32 S1,S17
   \   0000009E   0x.... 0x....      BL       _Z9scAddDataff
    126          		}
    127          #endif /* EFI_ANALOG_CHART */
    128          
    129          	/**
    130          	 * Local copy is now safe, but it's an overkill: we only
    131          	 * have one writing thread anyway
    132          	 */
    133          	int readIndexLocal = readIndex;
   \                     ??mapAveragingCallback_3:
   \   000000A2   0x....             LDR.N    R0,??DataTable8_13
   \   000000A4   0x6805             LDR      R5,[R0, #+0]
    134          	int writeIndex = readIndexLocal ^ 1;
   \   000000A6   0xF095 0x0601      EORS     R6,R5,#0x1
    135          	accumulators[writeIndex] = accumulators[readIndexLocal] + adcValue;
   \   000000AA   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000AC   0xEE00 0x4A10      VMOV     S0,R4
   \   000000B0   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   000000B4   0x....             LDR.N    R0,??DataTable8_14
   \   000000B6   0xEB10 0x0085      ADDS     R0,R0,R5, LSL #+2
   \   000000BA   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000000BE   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   000000C2   0x....             LDR.N    R0,??DataTable8_14
   \   000000C4   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   000000C8   0xED80 0x0A00      VSTR     S0,[R0, #0]
    136          	counters[writeIndex] = counters[readIndexLocal] + 1;
   \   000000CC   0x....             LDR.N    R0,??DataTable8_15
   \   000000CE   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   000000D2   0x1C40             ADDS     R0,R0,#+1
   \   000000D4   0x....             LDR.N    R1,??DataTable8_15
   \   000000D6   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
    137          	// this would commit the new pair of values
    138          	readIndex = writeIndex;
   \   000000DA   0x....             LDR.N    R0,??DataTable8_13
   \   000000DC   0x6006             STR      R6,[R0, #+0]
    139          
    140          	// todo: migrate to the lock-free implementation
    141          	chSysLockFromIsr()
   \   000000DE   0x2020             MOVS     R0,#+32
   \   000000E0   0xF380 0x8811      MSR      BASEPRI,R0
   \   000000E4   0x.... 0x....      BL       dbg_check_lock_from_isr
    142          	;
    143          	// with locking we would have a consistent state
    144          
    145          	mapAccumulator += adcValue;
   \   000000E8   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000EA   0xEE00 0x4A10      VMOV     S0,R4
   \   000000EE   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   000000F2   0x....             LDR.N    R0,??DataTable8_6
   \   000000F4   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000000F8   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   000000FC   0x....             LDR.N    R0,??DataTable8_6
   \   000000FE   0xED80 0x0A00      VSTR     S0,[R0, #0]
    146          	mapMeasurementsCounter++;
   \   00000102   0x....             LDR.N    R0,??DataTable8_7
   \   00000104   0x6800             LDR      R0,[R0, #+0]
   \   00000106   0x1C40             ADDS     R0,R0,#+1
   \   00000108   0x....             LDR.N    R1,??DataTable8_7
   \   0000010A   0x6008             STR      R0,[R1, #+0]
    147          	chSysUnlockFromIsr()
   \   0000010C   0x.... 0x....      BL       dbg_check_unlock_from_isr
   \   00000110   0x2000             MOVS     R0,#+0
   \   00000112   0xF380 0x8811      MSR      BASEPRI,R0
    148          	;
    149          }
   \                     ??mapAveragingCallback_1:
   \   00000116   0xECBD 0x8B02      VPOP     {D8}
   \   0000011A   0xBD70             POP      {R4-R6,PC}       ;; return
    150          #endif
    151          

   \                                 In section .text, align 4, keep-with-next
    152          static void endAveraging(void *arg) {
   \                     _Z12endAveragingPv:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    153          	(void) arg;
    154          	bool wasLocked = lockAnyContext();
   \   00000004   0x.... 0x....      BL       lockAnyContext
   \   00000008   0x0005             MOVS     R5,R0
    155          	isAveraging = false;
   \   0000000A   0x....             LDR.N    R0,??DataTable8_8
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x7001             STRB     R1,[R0, #+0]
    156          	// with locking we would have a consistent state
    157          #if EFI_PROD_CODE || defined(__DOXYGEN__)
    158          	v_averagedMapValue = adcToVoltsDivided(mapAccumulator / mapMeasurementsCounter);
   \   00000010   0x....             LDR.N    R0,??DataTable8_7
   \   00000012   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000016   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000001A   0x....             LDR.N    R0,??DataTable8_6
   \   0000001C   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000020   0xEE80 0x0A80      VDIV.F32 S0,S1,S0
   \   00000024   0xEDDF 0x....      VLDR.W   S1,??DataTable3_1  ;; 0x3a400c01
   \   00000028   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000002C   0x....             LDR.N    R0,??DataTable8_12
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xEDD0 0x0A74      VLDR     S1,[R0, #+464]
   \   00000034   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000038   0x....             LDR.N    R0,??DataTable8_16
   \   0000003A   0xED80 0x0A00      VSTR     S0,[R0, #0]
    159          #endif
    160          	if (!wasLocked)
   \   0000003E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000040   0x2D00             CMP      R5,#+0
   \   00000042   0xD104             BNE.N    ??endAveraging_0
    161          		chSysUnlockFromIsr()
   \   00000044   0x.... 0x....      BL       dbg_check_unlock_from_isr
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xF380 0x8811      MSR      BASEPRI,R0
    162          	;
    163          	turnPinLow(&mapAveragingPin);
   \                     ??endAveraging_0:
   \   0000004E   0x....             LDR.N    R0,??DataTable8
   \   00000050   0x.... 0x....      BL       _Z10turnPinLowP14NamedOutputPin
    164          }
   \   00000054   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    165          
    166          /**
    167           * Shaft Position callback used to schedule start and end of MAP averaging
    168           */

   \                                 In section .text, align 2, keep-with-next
    169          static void mapAveragingCallback(trigger_event_e ckpEventType, uint32_t index DECLARE_ENGINE_PARAMETER_S) {
   \                     _Z20mapAveragingCallback15trigger_event_ej:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0xED2D 0x8B04      VPUSH    {D8-D9}
   \   00000006   0xB082             SUB      SP,SP,#+8
   \   00000008   0x0004             MOVS     R4,R0
   \   0000000A   0x000D             MOVS     R5,R1
    170          	// this callback is invoked on interrupt thread
    171                  UNUSED(ckpEventType);
    172          	engine->m.beforeMapAveragingCb = GET_TIMESTAMP();
   \   0000000C   0xF242 0x30F8      MOVW     R0,#+9208
   \   00000010   0x....             LDR.N    R1,??DataTable8_17
   \   00000012   0x6809             LDR      R1,[R1, #+0]
   \   00000014   0x....             LDR.N    R2,??DataTable8_18  ;; 0xe0001004
   \   00000016   0x6812             LDR      R2,[R2, #+0]
   \   00000018   0x5042             STR      R2,[R0, R1]
    173          	if (index != CONFIG(mapAveragingSchedulingAtIndex))
   \   0000001A   0x....             LDR.N    R0,??DataTable8_19
   \   0000001C   0xF8D0 0x0678      LDR      R0,[R0, #+1656]
   \   00000020   0x4285             CMP      R5,R0
   \   00000022   0xF040 0x80AE      BNE.W    ??mapAveragingCallback_4
    174          		return;
    175          
    176          	int rpm = ENGINE(rpmCalculator.rpmValue);
   \                     ??mapAveragingCallback_5:
   \   00000026   0x....             LDR.N    R0,??DataTable8_20
   \   00000028   0x6806             LDR      R6,[R0, #+0]
    177          	if (!isValidRpm(rpm))
   \   0000002A   0x2E01             CMP      R6,#+1
   \   0000002C   0xDB03             BLT.N    ??mapAveragingCallback_6
   \   0000002E   0xF247 0x5030      MOVW     R0,#+30000
   \   00000032   0x4286             CMP      R6,R0
   \   00000034   0xDB00             BLT.N    ??mapAveragingCallback_7
    178          		return;
   \                     ??mapAveragingCallback_6:
   \   00000036   0xE0A4             B.N      ??mapAveragingCallback_4
    179          
    180          	perRevolution = perRevolutionCounter;
   \                     ??mapAveragingCallback_7:
   \   00000038   0x....             LDR.N    R0,??DataTable8_21
   \   0000003A   0x....             LDR.N    R1,??DataTable8_10
   \   0000003C   0x6809             LDR      R1,[R1, #+0]
   \   0000003E   0x6001             STR      R1,[R0, #+0]
    181          	perRevolutionCounter = 0;
   \   00000040   0x....             LDR.N    R0,??DataTable8_10
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x6001             STR      R1,[R0, #+0]
    182          
    183          	angle_t currentAngle = TRIGGER_SHAPE(eventAngles[index]);
   \   00000046   0x....             LDR.N    R0,??DataTable8_20
   \   00000048   0xEB10 0x0085      ADDS     R0,R0,R5, LSL #+2
   \   0000004C   0xF8D0 0x0E10      LDR      R0,[R0, #+3600]
   \   00000050   0xEE08 0x0A10      VMOV     S16,R0
    184          
    185          	angle_t samplingStart = ENGINE(engineState.mapAveragingStart) - currentAngle;
   \   00000054   0x....             LDR.N    R0,??DataTable8_22
   \   00000056   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000005A   0xEE70 0x8A48      VSUB.F32 S17,S0,S16
    186          	fixAngle(samplingStart);
   \   0000005E   0x....             LDR.N    R0,??DataTable8_19
   \   00000060   0xF8D0 0x01A8      LDR      R0,[R0, #+424]
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD102             BNE.N    ??mapAveragingCallback_8
   \   00000068   0x....             LDR.N    R0,??DataTable8_23
   \   0000006A   0x.... 0x....      BL       firmwareError
   \                     ??mapAveragingCallback_8:
   \   0000006E   0xEEF5 0x8A40      VCMP.F32 S17,#0.0
   \   00000072   0xEEF1 0xFA10      FMSTAT   
   \   00000076   0xD507             BPL.N    ??mapAveragingCallback_9
   \   00000078   0x....             LDR.N    R0,??DataTable8_19
   \   0000007A   0xED90 0x0A6A      VLDR     S0,[R0, #+424]
   \   0000007E   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000082   0xEE70 0x8A28      VADD.F32 S17,S0,S17
   \   00000086   0xE7F2             B.N      ??mapAveragingCallback_8
   \                     ??mapAveragingCallback_9:
   \   00000088   0x....             LDR.N    R0,??DataTable8_19
   \   0000008A   0xED90 0x0A6A      VLDR     S0,[R0, #+424]
   \   0000008E   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000092   0xEEF4 0x8A40      VCMP.F32 S17,S0
   \   00000096   0xEEF1 0xFA10      FMSTAT   
   \   0000009A   0xDB07             BLT.N    ??mapAveragingCallback_10
   \   0000009C   0x....             LDR.N    R0,??DataTable8_19
   \   0000009E   0xED90 0x0A6A      VLDR     S0,[R0, #+424]
   \   000000A2   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000000A6   0xEE78 0x8AC0      VSUB.F32 S17,S17,S0
   \   000000AA   0xE7ED             B.N      ??mapAveragingCallback_9
    187          
    188          	angle_t samplingDuration = ENGINE(engineState.mapAveragingDuration);
   \                     ??mapAveragingCallback_10:
   \   000000AC   0x....             LDR.N    R0,??DataTable8_24
   \   000000AE   0xED90 0x9A00      VLDR     S18,[R0, #0]
    189          	if (samplingDuration <= 0) {
   \   000000B2   0xEEB5 0x9A40      VCMP.F32 S18,#0.0
   \   000000B6   0xEEF1 0xFA10      FMSTAT   
   \   000000BA   0xD803             BHI.N    ??mapAveragingCallback_11
    190          		firmwareError("map sampling angle should be positive");
   \   000000BC   0x....             LDR.N    R0,??DataTable8_25
   \   000000BE   0x.... 0x....      BL       firmwareError
    191          		return;
   \   000000C2   0xE05E             B.N      ??mapAveragingCallback_4
    192          	}
    193          
    194          	angle_t samplingEnd = samplingStart + samplingDuration;
   \                     ??mapAveragingCallback_11:
   \   000000C4   0xEE78 0x9A89      VADD.F32 S19,S17,S18
    195          	fixAngle(samplingEnd);
   \   000000C8   0x....             LDR.N    R0,??DataTable8_19
   \   000000CA   0xF8D0 0x01A8      LDR      R0,[R0, #+424]
   \   000000CE   0x2800             CMP      R0,#+0
   \   000000D0   0xD102             BNE.N    ??mapAveragingCallback_12
   \   000000D2   0x....             LDR.N    R0,??DataTable8_23
   \   000000D4   0x.... 0x....      BL       firmwareError
   \                     ??mapAveragingCallback_12:
   \   000000D8   0xEEF5 0x9A40      VCMP.F32 S19,#0.0
   \   000000DC   0xEEF1 0xFA10      FMSTAT   
   \   000000E0   0xD507             BPL.N    ??mapAveragingCallback_13
   \   000000E2   0x....             LDR.N    R0,??DataTable8_19
   \   000000E4   0xED90 0x0A6A      VLDR     S0,[R0, #+424]
   \   000000E8   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000000EC   0xEE70 0x9A29      VADD.F32 S19,S0,S19
   \   000000F0   0xE7F2             B.N      ??mapAveragingCallback_12
   \                     ??mapAveragingCallback_13:
   \   000000F2   0x....             LDR.N    R0,??DataTable8_19
   \   000000F4   0xED90 0x0A6A      VLDR     S0,[R0, #+424]
   \   000000F8   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000000FC   0xEEF4 0x9A40      VCMP.F32 S19,S0
   \   00000100   0xEEF1 0xFA10      FMSTAT   
   \   00000104   0xDB07             BLT.N    ??mapAveragingCallback_14
   \   00000106   0x....             LDR.N    R0,??DataTable8_19
   \   00000108   0xED90 0x0A6A      VLDR     S0,[R0, #+424]
   \   0000010C   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000110   0xEE79 0x9AC0      VSUB.F32 S19,S19,S0
   \   00000114   0xE7ED             B.N      ??mapAveragingCallback_13
    196          	if (cisnan(samplingEnd)) {
   \                     ??mapAveragingCallback_14:
   \   00000116   0xEEB0 0x0A69      VMOV.F32 S0,S19
   \   0000011A   0x.... 0x....      BL       __iar_FDtest
   \   0000011E   0x2802             CMP      R0,#+2
   \   00000120   0xD02F             BEQ.N    ??mapAveragingCallback_4
    197          		// value is not yet prepared
    198          		return;
    199          	}
    200          
    201          	int structIndex = getRevolutionCounter() % 2;
   \                     ??mapAveragingCallback_15:
   \   00000122   0x.... 0x....      BL       _Z20getRevolutionCounterv
   \   00000126   0x2102             MOVS     R1,#+2
   \   00000128   0xFB90 0xF7F1      SDIV     R7,R0,R1
   \   0000012C   0xFB07 0x0711      MLS      R7,R7,R1,R0
    202          	// todo: schedule this based on closest trigger event, same as ignition works
    203          	scheduleByAngle(rpm, &startTimer[structIndex], samplingStart, startAveraging, NULL, &engine->rpmCalculator);
   \   00000130   0x....             LDR.N    R0,??DataTable8_17
   \   00000132   0x6800             LDR      R0,[R0, #+0]
   \   00000134   0x9000             STR      R0,[SP, #+0]
   \   00000136   0x2300             MOVS     R3,#+0
   \   00000138   0x....             LDR.N    R2,??DataTable8_26
   \   0000013A   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \   0000013E   0x2018             MOVS     R0,#+24
   \   00000140   0x....             LDR.N    R1,??DataTable8_2
   \   00000142   0xFB00 0x1107      MLA      R1,R0,R7,R1
   \   00000146   0x0030             MOVS     R0,R6
   \   00000148   0x.... 0x....      BL       _Z15scheduleByAngleiP12scheduling_sfPFvPvES1_P13RpmCalculator
    204          	scheduleByAngle(rpm, &endTimer[structIndex], samplingEnd, endAveraging, NULL, &engine->rpmCalculator);
   \   0000014C   0x....             LDR.N    R0,??DataTable8_17
   \   0000014E   0x6800             LDR      R0,[R0, #+0]
   \   00000150   0x9000             STR      R0,[SP, #+0]
   \   00000152   0x2300             MOVS     R3,#+0
   \   00000154   0x....             LDR.N    R2,??DataTable8_27
   \   00000156   0xEEB0 0x0A69      VMOV.F32 S0,S19
   \   0000015A   0x2018             MOVS     R0,#+24
   \   0000015C   0x....             LDR.N    R1,??DataTable8_3
   \   0000015E   0xFB00 0x1107      MLA      R1,R0,R7,R1
   \   00000162   0x0030             MOVS     R0,R6
   \   00000164   0x.... 0x....      BL       _Z15scheduleByAngleiP12scheduling_sfPFvPvES1_P13RpmCalculator
    205          	engine->m.mapAveragingCbTime = GET_TIMESTAMP() - engine->m.beforeMapAveragingCb;
   \   00000168   0x....             LDR.N    R0,??DataTable8_18  ;; 0xe0001004
   \   0000016A   0x6800             LDR      R0,[R0, #+0]
   \   0000016C   0xF242 0x31F8      MOVW     R1,#+9208
   \   00000170   0x....             LDR.N    R2,??DataTable8_17
   \   00000172   0x6812             LDR      R2,[R2, #+0]
   \   00000174   0x5889             LDR      R1,[R1, R2]
   \   00000176   0x1A40             SUBS     R0,R0,R1
   \   00000178   0xF242 0x31FC      MOVW     R1,#+9212
   \   0000017C   0x....             LDR.N    R2,??DataTable8_17
   \   0000017E   0x6812             LDR      R2,[R2, #+0]
   \   00000180   0x5088             STR      R0,[R1, R2]
    206          }
   \                     ??mapAveragingCallback_4:
   \   00000182   0xB002             ADD      SP,SP,#+8
   \   00000184   0xECBD 0x8B04      VPOP     {D8-D9}
   \   00000188   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    207          

   \                                 In section .text, align 2, keep-with-next
    208          static void showMapStats(void) {
   \                     _Z12showMapStatsv:
   \   00000000   0xB580             PUSH     {R7,LR}
    209          	scheduleMsg(logger, "per revolution %d", perRevolution);
   \   00000002   0x....             LDR.N    R0,??DataTable8_21
   \   00000004   0x6802             LDR      R2,[R0, #+0]
   \   00000006   0x....             LDR.N    R1,??DataTable8_28
   \   00000008   0x....             LDR.N    R0,??DataTable8_29
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x.... 0x....      BL       scheduleMsg
    210          }
   \   00000010   0xBD01             POP      {R0,PC}          ;; return
    211          

   \                                 In section .text, align 2, keep-with-next
    212          float getMapVoltage(void) {
    213          	return v_averagedMapValue;
   \                     _Z13getMapVoltagev:
   \   00000000   0x....             LDR.N    R0,??DataTable8_16
   \   00000002   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000006   0x4770             BX       LR               ;; return
    214          }
    215          
    216          #if EFI_PROD_CODE || defined(__DOXYGEN__)
    217          
    218          /**
    219           * Because of MAP window averaging, MAP is only available while engine is spinning
    220           * @return Manifold Absolute Pressure, in kPa
    221           */

   \                                 In section .text, align 2, keep-with-next
    222          float getMap(void) {
   \                     _Z6getMapv:
   \   00000000   0xB580             PUSH     {R7,LR}
    223          	if (engineConfiguration->hasFrequencyReportingMapSensor) {
   \   00000002   0x....             LDR.N    R0,??DataTable8_12
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF890 0x05DA      LDRB     R0,[R0, #+1498]
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x0880             LSRS     R0,R0,#+2
   \   0000000E   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD002             BEQ.N    ??getMap_0
    224          		return getRawMap();
   \   00000016   0x.... 0x....      BL       _Z9getRawMapv
   \   0000001A   0xE013             B.N      ??getMap_1
    225          	}
    226          
    227          #if EFI_ANALOG_SENSORS || defined(__DOXYGEN__)
    228          	if (!isValidRpm(engine->rpmCalculator.rpmValue))
   \                     ??getMap_0:
   \   0000001C   0x....             LDR.N    R0,??DataTable8_17
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x2801             CMP      R0,#+1
   \   00000024   0xDB06             BLT.N    ??getMap_2
   \   00000026   0x....             LDR.N    R0,??DataTable8_17
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0xF247 0x5130      MOVW     R1,#+30000
   \   00000030   0x4288             CMP      R0,R1
   \   00000032   0xDB02             BLT.N    ??getMap_3
    229          		return getRawMap(); // maybe return NaN in case of stopped engine?
   \                     ??getMap_2:
   \   00000034   0x.... 0x....      BL       _Z9getRawMapv
   \   00000038   0xE004             B.N      ??getMap_1
    230          	return getMapByVoltage(v_averagedMapValue);
   \                     ??getMap_3:
   \   0000003A   0x....             LDR.N    R0,??DataTable8_16
   \   0000003C   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000040   0x.... 0x....      BL       _Z15getMapByVoltagef
   \                     ??getMap_1:
   \   00000044   0xBD01             POP      {R0,PC}          ;; return
    231          #else
    232          	return 100;
    233          #endif
    234          }
    235          #endif /* EFI_PROD_CODE */
    236          

   \                                 In section .text, align 2, keep-with-next
    237          void initMapAveraging(Logging *sharedLogger, Engine *engine) {
   \                     _Z16initMapAveragingP7LoggingP6Engine:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    238          	logger = sharedLogger;
   \   00000006   0x....             LDR.N    R0,??DataTable8_29
   \   00000008   0x6004             STR      R4,[R0, #+0]
    239          
    240          //	startTimer[0].name = "map start0";
    241          //	startTimer[1].name = "map start1";
    242          //	endTimer[0].name = "map end0";
    243          //	endTimer[1].name = "map end1";
    244          
    245          	addTriggerEventListener(&mapAveragingCallback, "MAP averaging", engine);
   \   0000000A   0x002A             MOVS     R2,R5
   \   0000000C   0x....             LDR.N    R1,??DataTable8_30
   \   0000000E   0x....             LDR.N    R0,??DataTable8_31
   \   00000010   0x.... 0x....      BL       _Z23addTriggerEventListenerPFv15trigger_event_ejEPKcP6Engine
    246          	addConsoleAction("faststat", showMapStats);
   \   00000014   0x....             LDR.N    R1,??DataTable8_32
   \   00000016   0x....             LDR.N    R0,??DataTable8_33
   \   00000018   0x.... 0x....      BL       addConsoleAction
    247          }
   \   0000001C   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x6D 0x61          DC8      "map"
   \              0x70 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x3A400C01         DC32     0x3a400c01

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     mapAveragingPin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     _ZN12scheduling_sC1Ev

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     startTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x........         DC32     endTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     rlist

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x........         DC32     `?<Constant "lowstck#9">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x........         DC32     mapAccumulator

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x........         DC32     mapMeasurementsCounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x........         DC32     isAveraging

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x........         DC32     boardConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   0x........         DC32     perRevolutionCounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   0x........         DC32     `?<Constant "lowstck#9a">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   0x........         DC32     engineConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   0x........         DC32     readIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   0x........         DC32     accumulators

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \   00000000   0x........         DC32     counters

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_16:
   \   00000000   0x........         DC32     v_averagedMapValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_17:
   \   00000000   0x........         DC32     engine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_18:
   \   00000000   0xE0001004         DC32     0xe0001004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_19:
   \   00000000   0x........         DC32     persistentState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_20:
   \   00000000   0x........         DC32     _engine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_21:
   \   00000000   0x........         DC32     perRevolution

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_22:
   \   00000000   0x........         DC32     _engine+0x1EAC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_23:
   \   00000000   0x........         DC32     `?<Constant "zero engineCycle">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_24:
   \   00000000   0x........         DC32     _engine+0x1EB0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_25:
   \   00000000   0x........         DC32     `?<Constant "map sampling angle sh...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_26:
   \   00000000   0x........         DC32     _Z14startAveragingPv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_27:
   \   00000000   0x........         DC32     _Z12endAveragingPv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_28:
   \   00000000   0x........         DC32     `?<Constant "per revolution %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_29:
   \   00000000   0x........         DC32     logger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_30:
   \   00000000   0x........         DC32     `?<Constant "MAP averaging">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_31:
   \   00000000   0x........         DC32     _Z20mapAveragingCallback15trigger_event_ej

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_32:
   \   00000000   0x........         DC32     _Z12showMapStatsv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_33:
   \   00000000   0x........         DC32     `?<Constant "faststat">`

   \                                 In section .init_array, align 4, keep-with-next, root
   \   00000000   0x........         DC32    RELOC_ARM_TARGET1 __sti__routine

   \                                 In section .rodata, align 4
   \                     `?<Constant "lowstck#9">`:
   \   00000000   0x6C 0x6F          DC8 "lowstck#9"
   \              0x77 0x73    
   \              0x74 0x63    
   \              0x6B 0x23    
   \              0x39 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "lowstck#9a">`:
   \   00000000   0x6C 0x6F          DC8 "lowstck#9a"
   \              0x77 0x73    
   \              0x74 0x63    
   \              0x6B 0x23    
   \              0x39 0x61    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "zero engineCycle">`:
   \   00000000   0x7A 0x65          DC8 "zero engineCycle"
   \              0x72 0x6F    
   \              0x20 0x65    
   \              0x6E 0x67    
   \              0x69 0x6E    
   \              0x65 0x43    
   \              0x79 0x63    
   \              0x6C 0x65    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "map sampling angle sh...">`:
   \   00000000   0x6D 0x61          DC8 "map sampling angle should be positive"
   \              0x70 0x20    
   \              0x73 0x61    
   \              0x6D 0x70    
   \              0x6C 0x69    
   \              0x6E 0x67    
   \              0x20 0x61    
   \              0x6E 0x67    
   \              0x6C 0x65    
   \              0x20 0x73    
   \              0x68 0x6F    
   \              0x75 0x6C    
   \              0x64 0x20    
   \              0x62 0x65    
   \              0x20 0x70    
   \              0x6F 0x73    
   \              0x69 0x74    
   \              0x69 0x76    
   \              0x65 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "per revolution %d">`:
   \   00000000   0x70 0x65          DC8 "per revolution %d"
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x76 0x6F    
   \              0x6C 0x75    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x25    
   \              0x64 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MAP averaging">`:
   \   00000000   0x4D 0x41          DC8 "MAP averaging"
   \              0x50 0x20    
   \              0x61 0x76    
   \              0x65 0x72    
   \              0x61 0x67    
   \              0x69 0x6E    
   \              0x67 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "faststat">`:
   \   00000000   0x66 0x61          DC8 "faststat"
   \              0x73 0x74    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x6D 0x61          DC8 "map"
   \              0x70 0x00    
    248          
    249          #else
    250          
    251          #if EFI_PROD_CODE
    252          
    253          float getMap(void) {
    254          #if EFI_ANALOG_SENSORS || defined(__DOXYGEN__)
    255          	return getRawMap();
    256          #else
    257          	return NAN;
    258          #endif /* EFI_ANALOG_SENSORS */
    259          }
    260          #endif /* EFI_PROD_CODE */
    261          
    262          #endif /* EFI_MAP_AVERAGING */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   __sti__routine()
         8   -> NamedOutputPin::NamedOutputPin(char const *)
         8   -> __aeabi_vec_ctor_nocookie_nodtor
      16   endAveraging(void *)
        16   -> dbg_check_unlock_from_isr
        16   -> lockAnyContext
        16   -> turnPinLow(NamedOutputPin *)
       8   getMap()
         8   -> getMapByVoltage(float)
         8   -> getRawMap()
       0   getMapVoltage()
      16   initMapAveraging(Logging *, Engine *)
        16   -> addConsoleAction
        16   -> addTriggerEventListener(ShaftPositionListener, char const *, Engine *)
      48   mapAveragingCallback(trigger_event_e, uint32_t)
        48   -> __iar_FDtest
        48   -> firmwareError
        48   -> getRevolutionCounter()
        48   -> scheduleByAngle(int, scheduling_s *, float, schfunc_t, void *, RpmCalculator *)
      24   mapAveragingCallback(uint16_t)
        24   -> dbg_check_lock_from_isr
        24   -> dbg_check_unlock_from_isr
        24   -> firmwareError
        24   -> getCrankshaftAngleNt(int64_t)
        24   -> getMapByVoltage(float)
        24   -> getRemainingStack
        24   -> getTimeNowNt
        24   -> scAddData(float, float)
       8   showMapStats()
         8   -> scheduleMsg
      16   startAveraging(void *)
        16   -> dbg_check_unlock_from_isr
        16   -> firmwareError
        16   -> getRemainingStack
        16   -> lockAnyContext
        16   -> turnPinHigh(NamedOutputPin *)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "MAP averaging">
      12  ?<Constant "faststat">
      12  ?<Constant "lowstck#9">
      12  ?<Constant "lowstck#9a">
      40  ?<Constant "map sampling angle sh...">
       4  ?<Constant "map">
      20  ?<Constant "per revolution %d">
      20  ?<Constant "zero engineCycle">
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_13
       4  ??DataTable8_14
       4  ??DataTable8_15
       4  ??DataTable8_16
       4  ??DataTable8_17
       4  ??DataTable8_18
       4  ??DataTable8_19
       4  ??DataTable8_2
       4  ??DataTable8_20
       4  ??DataTable8_21
       4  ??DataTable8_22
       4  ??DataTable8_23
       4  ??DataTable8_24
       4  ??DataTable8_25
       4  ??DataTable8_26
       4  ??DataTable8_27
       4  ??DataTable8_28
       4  ??DataTable8_29
       4  ??DataTable8_3
       4  ??DataTable8_30
       4  ??DataTable8_31
       4  ??DataTable8_32
       4  ??DataTable8_33
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
      46  __sti__routine()
       8  accumulators
       8  counters
      86  endAveraging(void *)
      48  endTimer
      70  getMap()
       8  getMapVoltage()
      30  initMapAveraging(Logging *, Engine *)
       1  isAveraging
       4  logger
       4  mapAccumulator
     394  mapAveragingCallback(trigger_event_e, uint32_t)
     284  mapAveragingCallback(uint16_t)
      20  mapAveragingPin
       4  mapMeasurementsCounter
       4  perRevolution
       4  perRevolutionCounter
       4  readIndex
      18  showMapStats()
      84  startAveraging(void *)
      48  startTimer
       4  v_averagedMapValue
       4  -- Other

 
   161 bytes in section .bss
     4 bytes in section .init_array
   136 bytes in section .rodata
 1 164 bytes in section .text
 
 1 168 bytes of CODE  memory
   136 bytes of CONST memory
   161 bytes of DATA  memory

Errors: none
Warnings: 2
