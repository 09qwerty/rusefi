###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:09:08 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\ports #
#                       \common\ARMCMx\nvic.c                                 #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\chibios\os\ports #
#                       \common\ARMCMx\nvic.c -lCN                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\  #
#                       -lA F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Li #
#                       st\ -o F:\stuff\rusefi_sourceforge\firmware\iar\Debug #
#                       \Obj\ --no_cse --no_unroll --no_inline                #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\ -On #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\n #
#                       vic.lst                                               #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\nv #
#                       ic.o                                                  #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\chibios\os\ports\common\ARMCMx\nvic.c
      1          /*
      2              ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
      3                           2011,2012,2013 Giovanni Di Sirio.
      4          
      5              This file is part of ChibiOS/RT.
      6          
      7              ChibiOS/RT is free software; you can redistribute it and/or modify
      8              it under the terms of the GNU General Public License as published by
      9              the Free Software Foundation; either version 3 of the License, or
     10              (at your option) any later version.
     11          
     12              ChibiOS/RT is distributed in the hope that it will be useful,
     13              but WITHOUT ANY WARRANTY; without even the implied warranty of
     14              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     15              GNU General Public License for more details.
     16          
     17              You should have received a copy of the GNU General Public License
     18              along with this program.  If not, see <http://www.gnu.org/licenses/>.
     19          
     20                                                ---
     21          
     22              A special exception to the GPL can be applied should you wish to distribute
     23              a combined work that includes ChibiOS/RT, without being obliged to provide
     24              the source code for any proprietary components. See the file exception.txt
     25              for full details of how and when the exception can be applied.
     26          */
     27          
     28          /**
     29           * @file    common/ARMCMx/nvic.c
     30           * @brief   Cortex-Mx NVIC support code.
     31           *
     32           * @addtogroup COMMON_ARMCMx_NVIC
     33           * @{
     34           */
     35          
     36          #include "ch.h"
     37          #include "nvic.h"
     38          
     39          /**
     40           * @brief   Sets the priority of an interrupt handler and enables it.
     41           * @note    The parameters are not tested for correctness.
     42           *
     43           * @param[in] n         the interrupt number
     44           * @param[in] prio      the interrupt priority mask
     45           */

   \                                 In section .text, align 2, keep-with-next
     46          void nvicEnableVector(uint32_t n, uint32_t prio) {
   \                     nvicEnableVector:
   \   00000000   0xB470             PUSH     {R4-R6}
     47            unsigned sh = (n & 3) << 3;
   \   00000002   0xF010 0x0203      ANDS     R2,R0,#0x3
   \   00000006   0x00D2             LSLS     R2,R2,#+3
     48          
     49            NVIC_IPR(n >> 2) = (NVIC_IPR(n >> 2) & ~(0xFF << sh)) | (prio << sh);
   \   00000008   0x0883             LSRS     R3,R0,#+2
   \   0000000A   0x....             LDR.N    R4,??DataTable2  ;; 0xe000e400
   \   0000000C   0xF854 0x3023      LDR      R3,[R4, R3, LSL #+2]
   \   00000010   0x24FF             MOVS     R4,#+255
   \   00000012   0x4094             LSLS     R4,R4,R2
   \   00000014   0x43A3             BICS     R3,R3,R4
   \   00000016   0xFA11 0xF402      LSLS     R4,R1,R2
   \   0000001A   0x4323             ORRS     R3,R4,R3
   \   0000001C   0x0884             LSRS     R4,R0,#+2
   \   0000001E   0x....             LDR.N    R5,??DataTable2  ;; 0xe000e400
   \   00000020   0xF845 0x3024      STR      R3,[R5, R4, LSL #+2]
     50            NVIC_ICPR(n >> 5) = 1 << (n & 0x1F);
   \   00000024   0x0943             LSRS     R3,R0,#+5
   \   00000026   0x....             LDR.N    R4,??DataTable2_1  ;; 0xe000e280
   \   00000028   0x2501             MOVS     R5,#+1
   \   0000002A   0xF010 0x061F      ANDS     R6,R0,#0x1F
   \   0000002E   0x40B5             LSLS     R5,R5,R6
   \   00000030   0xF844 0x5023      STR      R5,[R4, R3, LSL #+2]
     51            NVIC_ISER(n >> 5) = 1 << (n & 0x1F);
   \   00000034   0x0943             LSRS     R3,R0,#+5
   \   00000036   0x....             LDR.N    R4,??DataTable2_2  ;; 0xe000e100
   \   00000038   0x2501             MOVS     R5,#+1
   \   0000003A   0xF010 0x061F      ANDS     R6,R0,#0x1F
   \   0000003E   0x40B5             LSLS     R5,R5,R6
   \   00000040   0xF844 0x5023      STR      R5,[R4, R3, LSL #+2]
     52          }
   \   00000044   0xBC70             POP      {R4-R6}
   \   00000046   0x4770             BX       LR               ;; return
     53          
     54          /**
     55           * @brief   Disables an interrupt handler.
     56           * @note    The parameters are not tested for correctness.
     57           *
     58           * @param[in] n         the interrupt number
     59           */

   \                                 In section .text, align 2, keep-with-next
     60          void nvicDisableVector(uint32_t n) {
   \                     nvicDisableVector:
   \   00000000   0xB430             PUSH     {R4,R5}
     61            unsigned sh = (n & 3) << 3;
   \   00000002   0xF010 0x0103      ANDS     R1,R0,#0x3
   \   00000006   0x00C9             LSLS     R1,R1,#+3
     62          
     63            NVIC_ICER(n >> 5) = 1 << (n & 0x1F);
   \   00000008   0x0942             LSRS     R2,R0,#+5
   \   0000000A   0x....             LDR.N    R3,??DataTable2_3  ;; 0xe000e180
   \   0000000C   0x2401             MOVS     R4,#+1
   \   0000000E   0xF010 0x051F      ANDS     R5,R0,#0x1F
   \   00000012   0x40AC             LSLS     R4,R4,R5
   \   00000014   0xF843 0x4022      STR      R4,[R3, R2, LSL #+2]
     64            NVIC_IPR(n >> 2) = NVIC_IPR(n >> 2) & ~(0xFF << sh);
   \   00000018   0x0882             LSRS     R2,R0,#+2
   \   0000001A   0x....             LDR.N    R3,??DataTable2  ;; 0xe000e400
   \   0000001C   0xF853 0x2022      LDR      R2,[R3, R2, LSL #+2]
   \   00000020   0x23FF             MOVS     R3,#+255
   \   00000022   0x408B             LSLS     R3,R3,R1
   \   00000024   0x439A             BICS     R2,R2,R3
   \   00000026   0x0883             LSRS     R3,R0,#+2
   \   00000028   0x....             LDR.N    R4,??DataTable2  ;; 0xe000e400
   \   0000002A   0xF844 0x2023      STR      R2,[R4, R3, LSL #+2]
     65          }
   \   0000002E   0xBC30             POP      {R4,R5}
   \   00000030   0x4770             BX       LR               ;; return
     66          
     67          /**
     68           * @brief   Changes the priority of a system handler.
     69           * @note    The parameters are not tested for correctness.
     70           *
     71           * @param[in] handler   the system handler number
     72           * @param[in] prio      the system handler priority mask
     73           */

   \                                 In section .text, align 2, keep-with-next
     74          void nvicSetSystemHandlerPriority(uint32_t handler, uint32_t prio) {
   \                     nvicSetSystemHandlerPriority:
   \   00000000   0xB430             PUSH     {R4,R5}
     75            unsigned sh = (handler & 3) * 8;
   \   00000002   0xF010 0x0203      ANDS     R2,R0,#0x3
   \   00000006   0x00D2             LSLS     R2,R2,#+3
     76          
     77            SCB_SHPR(handler >> 2) = (SCB_SHPR(handler >> 2) &
     78                                     ~(0xFF << sh)) | (prio << sh);
   \   00000008   0x0883             LSRS     R3,R0,#+2
   \   0000000A   0x....             LDR.N    R4,??DataTable2_4  ;; 0xe000ed18
   \   0000000C   0xF854 0x3023      LDR      R3,[R4, R3, LSL #+2]
   \   00000010   0x24FF             MOVS     R4,#+255
   \   00000012   0x4094             LSLS     R4,R4,R2
   \   00000014   0x43A3             BICS     R3,R3,R4
   \   00000016   0xFA11 0xF402      LSLS     R4,R1,R2
   \   0000001A   0x4323             ORRS     R3,R4,R3
   \   0000001C   0x0884             LSRS     R4,R0,#+2
   \   0000001E   0x....             LDR.N    R5,??DataTable2_4  ;; 0xe000ed18
   \   00000020   0xF845 0x3024      STR      R3,[R5, R4, LSL #+2]
     79          }
   \   00000024   0xBC30             POP      {R4,R5}
   \   00000026   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0xE000ED18         DC32     0xe000ed18
     80          
     81          /** @} */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   nvicDisableVector
      12   nvicEnableVector
       8   nvicSetSystemHandlerPriority


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
      50  nvicDisableVector
      72  nvicEnableVector
      40  nvicSetSystemHandlerPriority

 
 182 bytes in section .text
 
 182 bytes of CODE memory

Errors: none
Warnings: none
