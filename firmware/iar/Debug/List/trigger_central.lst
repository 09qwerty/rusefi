###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      30/Jun/2015  23:08:50 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode        =  thumb                                                 #
#    Endian          =  little                                                #
#    Source file     =  F:\stuff\rusefi_sourceforge\firmware\controllers\trig #
#                       ger\trigger_central.cpp                               #
#    Command line    =  F:\stuff\rusefi_sourceforge\firmware\controllers\trig #
#                       ger\trigger_central.cpp -lCN                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\  #
#                       -lA F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Li #
#                       st\ -o F:\stuff\rusefi_sourceforge\firmware\iar\Debug #
#                       \Obj\ --no_cse --no_unroll --no_inline                #
#                       --no_code_motion --no_tbaa --no_clustering            #
#                       --no_scheduling --debug --endian=little               #
#                       --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config       #
#                       "C:\Program Files (x86)\IAR Systems\Embedded          #
#                       Workbench 6.5\arm\INC\c\DLib_Config_Normal.h"         #
#                       --misrac2004=1.2-1.4,2.3,3.4,4.2,6.5-7,8.2-8.3,9.3,   #
#                       12.3,13.6-13,15.5,17.3,19.17,20.7-20.9,20.11 -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\ -I       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\kernel\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\ports\common\ARMCMx\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\common\ARMCMx\CMSIS\include\ -I               #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\ports\IAR\ARMCMx\ -I F:\stuff\rusefi_sourceforge\fi #
#                       rmware\iar\..\chibios\os\ports\IAR\ARMCMx\STM32F4xx\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\chibio #
#                       s\os\hal\include\ -I F:\stuff\rusefi_sourceforge\firm #
#                       ware\iar\..\chibios\os\hal\platforms\STM32\ -I        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\DMAv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\GPIOv2\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\I2Cv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\SPIv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\TIMv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\RTCv2\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\USARTv1\ -I                     #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32\OTGv1\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\hal\platforms\STM32F4xx\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\o #
#                       s\various\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\chibios\os\various\devices_lib\accel\ -I         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\chibios\b #
#                       oards\ST_STM32F4_DISCOVERY\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\co #
#                       ntrollers\algo\ -I F:\stuff\rusefi_sourceforge\firmwa #
#                       re\iar\..\controllers\core\ -I                        #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\system\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\controllers\sensors\ -I                          #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\controlle #
#                       rs\math\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\controllers\trigger\ -I                            #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\config #
#                       \ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\conf #
#                       ig\engines\ -I F:\stuff\rusefi_sourceforge\firmware\i #
#                       ar\..\config\stm32f4ems\ -I                           #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\console\b #
#                       inary\ -I F:\stuff\rusefi_sourceforge\firmware\iar\.. #
#                       \console_util\ -I F:\stuff\rusefi_sourceforge\firmwar #
#                       e\iar\..\development\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\development\test\ -I                  #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\developme #
#                       nt\hw_layer\ -I F:\stuff\rusefi_sourceforge\firmware\ #
#                       iar\..\hw_layer\algo\ -I F:\stuff\rusefi_sourceforge\ #
#                       firmware\iar\..\hw_layer\lcd\ -I                      #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                       stm32f4\ -I F:\stuff\rusefi_sourceforge\firmware\iar\ #
#                       ..\hw_layer\serial_over_usb\ -I                       #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\hw_layer\ #
#                        -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext\  #
#                       -I F:\stuff\rusefi_sourceforge\firmware\iar\..\ext_al #
#                       go\ -I F:\stuff\rusefi_sourceforge\firmware\iar\..\de #
#                       velopment\ -I F:\stuff\rusefi_sourceforge\firmware\ia #
#                       r\..\development\hw_layer\ -I                         #
#                       F:\stuff\rusefi_sourceforge\firmware\iar\..\util\     #
#                       -On --eec++                                           #
#    MISRA C version =  2004                                                  #
#      Enabled       =  1.2-1.4 2.3 3.4 4.2 6.5 7 8.2 8.3 9.3 12.3 13.6 13.7  #
#                       15.5 17.3 19.17 20.7-20.9 20.11                       #
#      Checked       =  1.4 2.3 4.2 6.5 7 8.2 8.3 9.3 12.3 13.7 15.5          #
#                       20.7-20.9 20.11                                       #
#      Not checked   =  1.1-1.3 1.5-2.2 2.4-4.1 5-6.4 8.1 8.4-9.2 10-12.2     #
#                       12.4-13.6 14-15.4 16-20.6 20.10 20.12 21              #
#    List file       =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\List\t #
#                       rigger_central.lst                                    #
#    Object file     =  F:\stuff\rusefi_sourceforge\firmware\iar\Debug\Obj\tr #
#                       igger_central.o                                       #
#                                                                             #
#                                                                             #
###############################################################################

F:\stuff\rusefi_sourceforge\firmware\controllers\trigger\trigger_central.cpp
      1          /*
      2           * @file	trigger_central.cpp
      3           *
      4           * @date Feb 23, 2014
      5           * @author Andrey Belomutskiy, (c) 2012-2015
      6           */
      7          
      8          #include "main.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x002A             MOVS     R2,R5
   \   0000000A   0x0031             MOVS     R1,R6
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memset
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
      9          
     10          #if EFI_SHAFT_POSITION_INPUT || defined(__DOXYGEN__)
     11          
     12          #include "trigger_central.h"
     13          #include "trigger_decoder.h"
     14          #include "main_trigger_callback.h"
     15          #include "engine_configuration.h"
     16          #include "listener_array.h"
     17          #include "data_buffer.h"
     18          #include "histogram.h"
     19          #include "pwm_generator_logic.h"
     20          #include "efilib2.h"
     21          #include "settings.h"
     22          #include "auto_generated_enums.h"
     23          
     24          #include "rpm_calculator.h"
     25          #if EFI_PROD_CODE
     26          #include "rfiutil.h"
     27          #include "pin_repository.h"
     28          #endif
     29          
     30          #if EFI_WAVE_CHART
     31          #include "wave_chart.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine:
   \   00000000   0xB580             PUSH     {R7,LR}
     32          WaveChart waveChart;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   00000006   0x.... 0x....      BL       _ZN9WaveChartC1Ev
     33          #endif /* EFI_WAVE_CHART */
     34          
     35          static histogram_s triggerCallback;
     36          
     37          // we need this initial to have not_running at first invocation
     38          static volatile efitime_t previousShaftEventTimeNt = (efitimems_t) -10 * US2NT(US_PER_SECOND_LL);
     39          
     40          TriggerCentral triggerCentral;
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   0000000E   0x.... 0x....      BL       _ZN14TriggerCentralC1Ev
   \   00000012   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 8
   \                     waveChart:
   \   00000000                      DS8 80

   \                                 In section .bss, align 8
   \                     triggerCallback:
   \   00000000                      DS8 3616

   \                                 In section .data, align 8
   \                     previousShaftEventTimeNt:
   \   00000000   0x9BDD3C00         DC32 2614967296, 167999999
   \              0x0A0379FF   

   \                                 In section .bss, align 8
   \                     triggerCentral:
   \   00000000                      DS8 344
     41          

   \                                 In section .bss, align 4
     42          static Logging *logger;
   \                     logger:
   \   00000000                      DS8 4
     43          

   \                                 In section .text, align 2, keep-with-next
     44          efitime_t getCrankEventCounter() {
   \                     _Z20getCrankEventCounterv:
   \   00000000   0xB580             PUSH     {R7,LR}
     45          	return triggerCentral.triggerState.getTotalEventCounter();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   00000006   0x.... 0x....      BL       _ZN12TriggerState20getTotalEventCounterEv
   \   0000000A   0xBD04             POP      {R2,PC}          ;; return
     46          }
     47          

   \                                 In section .text, align 2, keep-with-next
     48          efitime_t getStartOfRevolutionIndex() {
   \                     _Z25getStartOfRevolutionIndexv:
   \   00000000   0xB580             PUSH     {R7,LR}
     49          	return triggerCentral.triggerState.getStartOfRevolutionIndex();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   00000006   0x.... 0x....      BL       _ZN12TriggerState25getStartOfRevolutionIndexEv
   \   0000000A   0xBD04             POP      {R2,PC}          ;; return
     50          }
     51          

   \                                 In section .text, align 2, keep-with-next
     52          void TriggerCentral::addEventListener(ShaftPositionListener listener, const char *name, Engine *engine) {
   \                     _ZN14TriggerCentral16addEventListenerEPFv15trigger_event_ejEPKcP6Engine:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
     53          	print("registerCkpListener: %s\r\n", name);
   \   0000000A   0x0031             MOVS     R1,R6
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable13_3
   \   00000010   0x.... 0x....      BL       print
     54          	triggerListeneres.registerCallback((VoidInt) listener, engine);
   \   00000014   0x003A             MOVS     R2,R7
   \   00000016   0x0029             MOVS     R1,R5
   \   00000018   0xF114 0x00C0      ADDS     R0,R4,#+192
   \   0000001C   0x.... 0x....      BL       _ZN16IntListenerArray16registerCallbackEPFviEPv
     55          }
   \   00000020   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     56          
     57          /**
     58           * @brief Adds a trigger event listener
     59           *
     60           * Trigger event listener would be invoked on each trigger event. For example, for a 60/2 wheel
     61           * that would be 116 events: 58 SHAFT_PRIMARY_UP and 58 SHAFT_PRIMARY_DOWN events.
     62           */

   \                                 In section .text, align 2, keep-with-next
     63          void addTriggerEventListener(ShaftPositionListener listener, const char *name, Engine *engine) {
   \                     _Z23addTriggerEventListenerPFv15trigger_event_ejEPKcP6Engine:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     64          	triggerCentral.addEventListener(listener, name, engine);
   \   00000008   0x0033             MOVS     R3,R6
   \   0000000A   0x002A             MOVS     R2,R5
   \   0000000C   0x0021             MOVS     R1,R4
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   00000012   0x.... 0x....      BL       _ZN14TriggerCentral16addEventListenerEPFv15trigger_event_ejEPKcP6Engine
     65          }
   \   00000016   0xBD70             POP      {R4-R6,PC}       ;; return
     66          

   \                                 In section .bss, align 4
     67          uint32_t triggerHanlderEntryTime;
   \                     triggerHanlderEntryTime:
   \   00000000                      DS8 4
     68          
     69          #if (EFI_PROD_CODE || EFI_SIMULATOR) || defined(__DOXYGEN__)
     70          EXTERN_ENGINE
     71          ;
     72          

   \                                 In section .bss, align 4
     73          int triggerReentraint = 0;
   \                     triggerReentraint:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     74          int maxTriggerReentraint = 0;
   \                     maxTriggerReentraint:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     75          uint32_t triggerDuration;
   \                     triggerDuration:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     76          uint32_t triggerMaxDuration = 0;
   \                     triggerMaxDuration:
   \   00000000                      DS8 4
     77          
     78          extern bool isInsideTriggerHandler;
     79          

   \                                 In section .text, align 2, keep-with-next
     80          void hwHandleShaftSignal(trigger_event_e signal) {
   \                     _Z19hwHandleShaftSignal15trigger_event_e:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     81          	triggerHanlderEntryTime = GET_TIMESTAMP();
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable13_4
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable13_5  ;; 0xe0001004
   \   0000000C   0x6809             LDR      R1,[R1, #+0]
   \   0000000E   0x6001             STR      R1,[R0, #+0]
     82          	isInsideTriggerHandler = true;
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable13_6
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x7001             STRB     R1,[R0, #+0]
     83          	if (triggerReentraint > maxTriggerReentraint)
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable13_7
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable13_8
   \   00000022   0x6809             LDR      R1,[R1, #+0]
   \   00000024   0x4288             CMP      R0,R1
   \   00000026   0xDA05             BGE.N    ??hwHandleShaftSignal_0
     84          		maxTriggerReentraint = triggerReentraint;
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable13_7
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable13_8
   \   00000030   0x6809             LDR      R1,[R1, #+0]
   \   00000032   0x6001             STR      R1,[R0, #+0]
     85          	triggerReentraint++;
   \                     ??hwHandleShaftSignal_0:
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable13_8
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x1C40             ADDS     R0,R0,#+1
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable13_8
   \   00000040   0x6008             STR      R0,[R1, #+0]
     86          	efiAssertVoid(getRemainingStack(chThdSelf()) > 128, "lowstck#8");
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable13_9
   \   00000046   0x6980             LDR      R0,[R0, #+24]
   \   00000048   0x.... 0x....      BL       getRemainingStack
   \   0000004C   0x2881             CMP      R0,#+129
   \   0000004E   0xDA04             BGE.N    ??hwHandleShaftSignal_1
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable13_10
   \   00000054   0x.... 0x....      BL       firmwareError
   \   00000058   0xE028             B.N      ??hwHandleShaftSignal_2
     87          	triggerCentral.handleShaftSignal(signal PASS_ENGINE_PARAMETER);
   \                     ??hwHandleShaftSignal_1:
   \   0000005A   0x0021             MOVS     R1,R4
   \   0000005C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   00000062   0x.... 0x....      BL       _ZN14TriggerCentral17handleShaftSignalE15trigger_event_e
     88          	triggerReentraint--;
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable13_8
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0x1E40             SUBS     R0,R0,#+1
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable13_8
   \   00000072   0x6008             STR      R0,[R1, #+0]
     89          	triggerDuration = GET_TIMESTAMP() - triggerHanlderEntryTime;
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable13_5  ;; 0xe0001004
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0x.... 0x....      LDR.W    R1,??DataTable13_4
   \   0000007E   0x6809             LDR      R1,[R1, #+0]
   \   00000080   0x1A40             SUBS     R0,R0,R1
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable13_11
   \   00000086   0x6008             STR      R0,[R1, #+0]
     90          	isInsideTriggerHandler = false;
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable13_6
   \   0000008C   0x2100             MOVS     R1,#+0
   \   0000008E   0x7001             STRB     R1,[R0, #+0]
     91          	if (triggerDuration > triggerMaxDuration)
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable13_12
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable13_11
   \   0000009A   0x6809             LDR      R1,[R1, #+0]
   \   0000009C   0x4288             CMP      R0,R1
   \   0000009E   0xD205             BCS.N    ??hwHandleShaftSignal_3
     92          		triggerMaxDuration = triggerDuration;
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable13_12
   \   000000A4   0x.... 0x....      LDR.W    R1,??DataTable13_11
   \   000000A8   0x6809             LDR      R1,[R1, #+0]
   \   000000AA   0x6001             STR      R1,[R0, #+0]
     93          }
   \                     ??hwHandleShaftSignal_3:
   \                     ??hwHandleShaftSignal_2:
   \   000000AC   0xBD10             POP      {R4,PC}          ;; return
     94          #endif /* EFI_PROD_CODE */
     95          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp TriggerCentral::subobject TriggerCentral()
   \                     _ZN14TriggerCentralC2Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN14TriggerCentralC1Ev
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     96          TriggerCentral::TriggerCentral() {
   \                     _ZN14TriggerCentralC1Ev:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN12TriggerStateC1Ev
   \   0000000A   0xF114 0x00C0      ADDS     R0,R4,#+192
   \   0000000E   0x.... 0x....      BL       _ZN16IntListenerArrayC1Ev
     97          	nowNt = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0xE9C4 0x012E      STRD     R0,R1,[R4, #+184]
     98          	memset(hwEventCounters, 0, sizeof(hwEventCounters));
   \   0000001A   0x2218             MOVS     R2,#+24
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0xF514 0x709E      ADDS     R0,R4,#+316
   \   00000022   0x.... 0x....      BL       memset
     99          	clearCallbacks(&triggerListeneres);
   \   00000026   0xF114 0x00C0      ADDS     R0,R4,#+192
   \   0000002A   0x.... 0x....      BL       _Z14clearCallbacksP16IntListenerArray
    100          }
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0xBD10             POP      {R4,PC}          ;; return
    101          

   \                                 In section .text, align 2, keep-with-next
    102          int TriggerCentral::getHwEventCounter(int index) {
    103          	return hwEventCounters[index];
   \                     _ZN14TriggerCentral17getHwEventCounterEi:
   \   00000000   0xEB10 0x0081      ADDS     R0,R0,R1, LSL #+2
   \   00000004   0xF8D0 0x013C      LDR      R0,[R0, #+316]
   \   00000008   0x4770             BX       LR               ;; return
    104          }
    105          

   \                                 In section .text, align 2, keep-with-next
    106          void TriggerCentral::resetCounters() {
   \                     _ZN14TriggerCentral13resetCountersEv:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    107          	memset(hwEventCounters, 0, sizeof(hwEventCounters));
   \   00000004   0x2218             MOVS     R2,#+24
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0xF514 0x709E      ADDS     R0,R4,#+316
   \   0000000C   0x.... 0x....      BL       memset
    108          	triggerState.resetRunningCounters();
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       _ZN12TriggerState20resetRunningCountersEv
    109          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    110          

   \                                 In section .bss, align 4
    111          static char shaft_signal_msg_index[15];
   \                     shaft_signal_msg_index:
   \   00000000                      DS8 16
    112          

   \                                 In section .data, align 4
    113          static bool_t isUpEvent[6] = { false, true, false, true, false, true };
   \                     isUpEvent:
   \   00000000   0x00 0x01          DC8 0, 1, 0, 1, 0, 1, 0, 0
   \              0x00 0x01    
   \              0x00 0x01    
   \              0x00 0x00    

   \                                 In section .data, align 4
    114          static const char *eventId[6] = { CRANK1, CRANK1, CRANK2, CRANK2, CRANK3, CRANK3 };
   \                     eventId:
   \   00000000   0x........         DC32 `?<Constant "t1">`, `?<Constant "t1">`, `?<Constant "t2">`
   \              0x........   
   \              0x........   
   \   0000000C   0x........         DC32 `?<Constant "t2">`, `?<Constant "t3">`, `?<Constant "t3">`
   \              0x........   
   \              0x........   
    115          

   \                                 In section .text, align 2, keep-with-next
    116          static ALWAYS_INLINE void reportEventToWaveChart(trigger_event_e ckpSignalType, int index DECLARE_ENGINE_PARAMETER_S) {
   \                     _Z22reportEventToWaveChart15trigger_event_ei:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    117          	itoa10(&shaft_signal_msg_index[2], index);
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable13_13
   \   0000000C   0x.... 0x....      BL       itoa10
    118          	bool_t isUp = isUpEvent[(int) ckpSignalType];
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable13_14
   \   00000016   0x5C26             LDRB     R6,[R4, R0]
    119          	shaft_signal_msg_index[0] = isUp ? 'u' : 'd';
   \   00000018   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001A   0x2E00             CMP      R6,#+0
   \   0000001C   0xD001             BEQ.N    ??reportEventToWaveChart_0
   \   0000001E   0x2075             MOVS     R0,#+117
   \   00000020   0xE000             B.N      ??reportEventToWaveChart_1
   \                     ??reportEventToWaveChart_0:
   \   00000022   0x2064             MOVS     R0,#+100
   \                     ??reportEventToWaveChart_1:
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable13_15
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    120          
    121          	addWaveChartEvent(eventId[(int )ckpSignalType], (char* ) shaft_signal_msg_index);
   \   0000002A   0x.... 0x....      LDR.W    R2,??DataTable13_15
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable13_16
   \   00000034   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   0000003C   0x.... 0x....      BL       _ZN9WaveChart18addWaveChartEvent3EPKcS1_
    122          	if (engineConfiguration->useOnlyFrontForTrigger) {
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable13_17
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0xF890 0x05E5      LDRB     R0,[R0, #+1509]
   \   0000004A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   0x0980             LSRS     R0,R0,#+6
   \   0000004E   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD013             BEQ.N    ??reportEventToWaveChart_2
    123          		// let's add the opposite event right away
    124          		shaft_signal_msg_index[0] = isUp ? 'd' : 'u';
   \   00000056   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000058   0x2E00             CMP      R6,#+0
   \   0000005A   0xD001             BEQ.N    ??reportEventToWaveChart_3
   \   0000005C   0x2064             MOVS     R0,#+100
   \   0000005E   0xE000             B.N      ??reportEventToWaveChart_4
   \                     ??reportEventToWaveChart_3:
   \   00000060   0x2075             MOVS     R0,#+117
   \                     ??reportEventToWaveChart_4:
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable13_15
   \   00000066   0x7008             STRB     R0,[R1, #+0]
    125          		addWaveChartEvent(eventId[(int )ckpSignalType], (char* ) shaft_signal_msg_index);
   \   00000068   0x.... 0x....      LDR.W    R2,??DataTable13_15
   \   0000006C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable13_16
   \   00000072   0xF850 0x1024      LDR      R1,[R0, R4, LSL #+2]
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   0000007A   0x.... 0x....      BL       _ZN9WaveChart18addWaveChartEvent3EPKcS1_
    126          	}
    127          }
   \                     ??reportEventToWaveChart_2:
   \   0000007E   0xBD70             POP      {R4-R6,PC}       ;; return
    128          

   \                                 In section .text, align 2, keep-with-next
    129          void TriggerCentral::handleShaftSignal(trigger_event_e signal DECLARE_ENGINE_PARAMETER_S) {
   \                     _ZN14TriggerCentral17handleShaftSignalE15trigger_event_e:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    130          	efiAssertVoid(engine!=NULL, "configuration");
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable13_18
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD104             BNE.N    ??handleShaftSignal_0
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable13_19
   \   00000016   0x.... 0x....      BL       firmwareError
   \   0000001A   0xE09B             B.N      ??handleShaftSignal_1
    131          
    132          	nowNt = getTimeNowNt();
   \                     ??handleShaftSignal_0:
   \   0000001C   0x.... 0x....      BL       getTimeNowNt
   \   00000020   0xE9C4 0x012E      STRD     R0,R1,[R4, #+184]
    133          
    134          	efiAssertVoid(engine->engineConfiguration!=NULL, "engineConfiguration");
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable13_18
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x6A40             LDR      R0,[R0, #+36]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD104             BNE.N    ??handleShaftSignal_2
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable13_20
   \   00000034   0x.... 0x....      BL       firmwareError
   \   00000038   0xE08C             B.N      ??handleShaftSignal_1
    135          	efiAssertVoid(engine->engineConfiguration2!=NULL, "engineConfiguration2");
   \                     ??handleShaftSignal_2:
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable13_18
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x6A80             LDR      R0,[R0, #+40]
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD104             BNE.N    ??handleShaftSignal_3
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable13_21
   \   0000004A   0x.... 0x....      BL       firmwareError
   \   0000004E   0xE081             B.N      ??handleShaftSignal_1
    136          
    137          	engine->onTriggerEvent(nowNt);
   \                     ??handleShaftSignal_3:
   \   00000050   0xE9D4 0x232E      LDRD     R2,R3,[R4, #+184]
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable13_18
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x.... 0x....      BL       _ZN6Engine14onTriggerEventEx
    138          
    139          #if EFI_HISTOGRAMS && EFI_PROD_CODE
    140          	int beforeCallback = hal_lld_get_counter_value();
    141          #endif
    142          	int eventIndex = (int) signal;
   \   0000005E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000060   0x002E             MOVS     R6,R5
    143          	efiAssertVoid(eventIndex >= 0 && eventIndex < HW_EVENT_TYPES, "signal type");
   \   00000062   0x2E00             CMP      R6,#+0
   \   00000064   0xD401             BMI.N    ??handleShaftSignal_4
   \   00000066   0x2E06             CMP      R6,#+6
   \   00000068   0xDB04             BLT.N    ??handleShaftSignal_5
   \                     ??handleShaftSignal_4:
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable13_22
   \   0000006E   0x.... 0x....      BL       firmwareError
   \   00000072   0xE06F             B.N      ??handleShaftSignal_1
    144          	hwEventCounters[eventIndex]++;
   \                     ??handleShaftSignal_5:
   \   00000074   0xEB14 0x0086      ADDS     R0,R4,R6, LSL #+2
   \   00000078   0xF8D0 0x013C      LDR      R0,[R0, #+316]
   \   0000007C   0x1C40             ADDS     R0,R0,#+1
   \   0000007E   0xEB14 0x0186      ADDS     R1,R4,R6, LSL #+2
   \   00000082   0xF8C1 0x013C      STR      R0,[R1, #+316]
    145          
    146          	if (nowNt - previousShaftEventTimeNt > US2NT(US_PER_SECOND_LL)) {
   \   00000086   0xE9D4 0x012E      LDRD     R0,R1,[R4, #+184]
   \   0000008A   0x.... 0x....      LDR.W    R2,??DataTable13_23
   \   0000008E   0xE9D2 0x8900      LDRD     R8,R9,[R2, #+0]
   \   00000092   0xEBB0 0x0008      SUBS     R0,R0,R8
   \   00000096   0xEB71 0x0109      SBCS     R1,R1,R9
   \   0000009A   0x.... 0x....      LDR.W    R2,??DataTable13_24  ;; 0xa037a01
   \   0000009E   0x2300             MOVS     R3,#+0
   \   000000A0   0x4299             CMP      R1,R3
   \   000000A2   0xDB04             BLT.N    ??handleShaftSignal_6
   \   000000A4   0xDC01             BGT.N    ??handleShaftSignal_7
   \   000000A6   0x4290             CMP      R0,R2
   \   000000A8   0xD301             BCC.N    ??handleShaftSignal_6
    147          		/**
    148          		 * We are here if there is a time gap between now and previous shaft event - that means the engine is not runnig.
    149          		 * That means we have lost synchronization since the engine is not running :)
    150          		 */
    151          		triggerState.shaft_is_synchronized = false;
   \                     ??handleShaftSignal_7:
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0x7120             STRB     R0,[R4, #+4]
    152          	}
    153          	previousShaftEventTimeNt = nowNt;
   \                     ??handleShaftSignal_6:
   \   000000AE   0xE9D4 0x012E      LDRD     R0,R1,[R4, #+184]
   \   000000B2   0x.... 0x....      LDR.W    R2,??DataTable13_23
   \   000000B6   0xE9C2 0x0100      STRD     R0,R1,[R2, #+0]
    154          
    155          	/**
    156          	 * This invocation changes the state of triggerState
    157          	 */
    158          	triggerState.decodeTriggerEvent(signal, nowNt PASS_ENGINE_PARAMETER);
   \   000000BA   0xE9D4 0x232E      LDRD     R2,R3,[R4, #+184]
   \   000000BE   0x0029             MOVS     R1,R5
   \   000000C0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000C2   0x0020             MOVS     R0,R4
   \   000000C4   0x.... 0x....      BL       _ZN12TriggerState18decodeTriggerEventE15trigger_event_ex
    159          
    160          	if (!triggerState.shaft_is_synchronized) {
   \   000000C8   0x7920             LDRB     R0,[R4, #+4]
   \   000000CA   0x2800             CMP      R0,#+0
   \   000000CC   0xD042             BEQ.N    ??handleShaftSignal_1
    161          		// we should not propagate event if we do not know where we are
    162          		return;
    163          	}
    164          
    165          	/**
    166          	 * If we only have a crank position sensor with four stroke, here we are extending crank revolutions with a 360 degree
    167          	 * cycle into a four stroke, 720 degrees cycle.
    168          	 */
    169          	int triggerIndexForListeners;
    170          	if (engineConfiguration->operationMode != FOUR_STROKE_CRANK_SENSOR) {
   \                     ??handleShaftSignal_8:
   \   000000CE   0x.... 0x....      LDR.W    R0,??DataTable13_17
   \   000000D2   0x6800             LDR      R0,[R0, #+0]
   \   000000D4   0xF8D0 0x01F4      LDR      R0,[R0, #+500]
   \   000000D8   0x2801             CMP      R0,#+1
   \   000000DA   0xD004             BEQ.N    ??handleShaftSignal_9
    171          		// That's easy - trigger cycle matches engine cycle
    172          		triggerIndexForListeners = triggerState.getCurrentIndex();
   \   000000DC   0x0020             MOVS     R0,R4
   \   000000DE   0x.... 0x....      BL       _ZN12TriggerState15getCurrentIndexEv
   \   000000E2   0x0007             MOVS     R7,R0
   \   000000E4   0xE012             B.N      ??handleShaftSignal_10
    173          	} else {
    174          		bool isEven = triggerState.getTotalRevolutionCounter() & 1;
   \                     ??handleShaftSignal_9:
   \   000000E6   0x0020             MOVS     R0,R4
   \   000000E8   0x.... 0x....      BL       _ZN12TriggerState25getTotalRevolutionCounterEv
   \   000000EC   0xF010 0x0801      ANDS     R8,R0,#0x1
    175          
    176          		triggerIndexForListeners = triggerState.getCurrentIndex() + (isEven ? 0 : TRIGGER_SHAPE(size));
   \   000000F0   0x0020             MOVS     R0,R4
   \   000000F2   0x.... 0x....      BL       _ZN12TriggerState15getCurrentIndexEv
   \   000000F6   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000FA   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000FE   0xD001             BEQ.N    ??handleShaftSignal_11
   \   00000100   0x2100             MOVS     R1,#+0
   \   00000102   0xE002             B.N      ??handleShaftSignal_12
   \                     ??handleShaftSignal_11:
   \   00000104   0x.... 0x....      LDR.W    R1,??DataTable13_25
   \   00000108   0x6809             LDR      R1,[R1, #+0]
   \                     ??handleShaftSignal_12:
   \   0000010A   0x180F             ADDS     R7,R1,R0
    177          	}
    178          	reportEventToWaveChart(signal, triggerIndexForListeners PASS_ENGINE_PARAMETER);
   \                     ??handleShaftSignal_10:
   \   0000010C   0x0039             MOVS     R1,R7
   \   0000010E   0x0028             MOVS     R0,R5
   \   00000110   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000112   0x.... 0x....      BL       _Z22reportEventToWaveChart15trigger_event_ei
    179          
    180          	if (triggerState.current_index >= TRIGGER_SHAPE(size)) {
   \   00000116   0x6CE0             LDR      R0,[R4, #+76]
   \   00000118   0x.... 0x....      LDR.W    R1,??DataTable13_25
   \   0000011C   0x6809             LDR      R1,[R1, #+0]
   \   0000011E   0x4288             CMP      R0,R1
   \   00000120   0xD307             BCC.N    ??handleShaftSignal_13
    181          		warning(OBD_PCM_Processor_Fault, "unexpected eventIndex=%d", triggerState.current_index);
   \   00000122   0x6CE2             LDR      R2,[R4, #+76]
   \   00000124   0x.... 0x....      LDR.W    R1,??DataTable13_26
   \   00000128   0xF240 0x205E      MOVW     R0,#+606
   \   0000012C   0x.... 0x....      BL       warning
   \   00000130   0xE010             B.N      ??handleShaftSignal_14
    182          	} else {
    183          
    184          		/**
    185          		 * Here we invoke all the listeners - the main engine control logic is inside these listeners
    186          		 */
    187          		for (int i = 0; i < triggerListeneres.currentListenersCount; i++) {
   \                     ??handleShaftSignal_13:
   \   00000132   0xF05F 0x0800      MOVS     R8,#+0
   \                     ??handleShaftSignal_15:
   \   00000136   0xF8D4 0x00C0      LDR      R0,[R4, #+192]
   \   0000013A   0x4580             CMP      R8,R0
   \   0000013C   0xDA0A             BGE.N    ??handleShaftSignal_14
    188          			ShaftPositionListener listener = (ShaftPositionListener) triggerListeneres.callbacks[i];
   \   0000013E   0xEB14 0x0088      ADDS     R0,R4,R8, LSL #+2
   \   00000142   0xF8D0 0x90C4      LDR      R9,[R0, #+196]
    189          			(listener)(signal, triggerIndexForListeners PASS_ENGINE_PARAMETER);
   \   00000146   0x0039             MOVS     R1,R7
   \   00000148   0x0028             MOVS     R0,R5
   \   0000014A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000014C   0x47C8             BLX      R9
    190          		}
   \   0000014E   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000152   0xE7F0             B.N      ??handleShaftSignal_15
    191          
    192          	}
    193          #if EFI_HISTOGRAMS && EFI_PROD_CODE
    194          	int afterCallback = hal_lld_get_counter_value();
    195          	int diff = afterCallback - beforeCallback;
    196          	// this counter is only 32 bits so it overflows every minute, let's ignore the value in case of the overflow for simplicity
    197          	if (diff > 0) {
    198          		hsAdd(&triggerCallback, diff);
    199          	}
    200          #endif /* EFI_HISTOGRAMS */
    201          }
   \                     ??handleShaftSignal_14:
   \                     ??handleShaftSignal_1:
   \   00000154   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    202          

   \                                 In section .text, align 2, keep-with-next
    203          void printAllCallbacksHistogram(void) {
   \                     _Z26printAllCallbacksHistogramv:
   \   00000000   0xB580             PUSH     {R7,LR}
    204          #if EFI_PROD_CODE
    205          	printHistogram(logger, &triggerCallback);
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable13_27
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable13_28
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x.... 0x....      BL       _Z14printHistogramP7LoggingP11histogram_s
    206          #endif
    207          }
   \   00000010   0xBD01             POP      {R0,PC}          ;; return
    208          
    209          EXTERN_ENGINE
    210          ;
    211          

   \                                 In section .text, align 2, keep-with-next
    212          static void triggerShapeInfo(void) {
   \                     _Z16triggerShapeInfov:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    213          #if (EFI_PROD_CODE || EFI_SIMULATOR) || defined(__DOXYGEN__)
    214          	TriggerShape *s = &engine->triggerShape;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable13_18
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF510 0x7421      ADDS     R4,R0,#+644
    215          	scheduleMsg(logger, "useRise=%s", boolToString(s->useRiseEdge));
   \   0000000E   0xF894 0x0B64      LDRB     R0,[R4, #+2916]
   \   00000012   0x.... 0x....      BL       _Z12boolToStringb
   \   00000016   0x0002             MOVS     R2,R0
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable13_29
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable13_28
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x.... 0x....      BL       scheduleMsg
    216          	scheduleMsg(logger, "gap from %f to %f", s->syncRatioFrom, s->syncRatioTo);
   \   00000026   0xF8D4 0x0B5C      LDR      R0,[R4, #+2908]
   \   0000002A   0x.... 0x....      BL       __aeabi_f2d
   \   0000002E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000032   0xF8D4 0x0B58      LDR      R0,[R4, #+2904]
   \   00000036   0x.... 0x....      BL       __aeabi_f2d
   \   0000003A   0x0002             MOVS     R2,R0
   \   0000003C   0x000B             MOVS     R3,R1
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable13_30
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable13_28
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0x.... 0x....      BL       scheduleMsg
    217          
    218          	for (int i = 0; i < s->getSize(); i++) {
   \   0000004C   0x2500             MOVS     R5,#+0
   \                     ??triggerShapeInfo_0:
   \   0000004E   0x0020             MOVS     R0,R4
   \   00000050   0x.... 0x....      BL       _ZNK12TriggerShape7getSizeEv
   \   00000054   0x4285             CMP      R5,R0
   \   00000056   0xDA11             BGE.N    ??triggerShapeInfo_1
    219          		scheduleMsg(logger, "event %d %f", i, s->eventAngles[i]);
   \   00000058   0xEB14 0x0085      ADDS     R0,R4,R5, LSL #+2
   \   0000005C   0xF8D0 0x0B8C      LDR      R0,[R0, #+2956]
   \   00000060   0x.... 0x....      BL       __aeabi_f2d
   \   00000064   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000068   0x002A             MOVS     R2,R5
   \   0000006A   0x.... 0x....      LDR.W    R1,??DataTable13_31
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable13_28
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0x.... 0x....      BL       scheduleMsg
    220          	}
   \   00000078   0x1C6D             ADDS     R5,R5,#+1
   \   0000007A   0xE7E8             B.N      ??triggerShapeInfo_0
    221          #endif
    222          }
   \                     ??triggerShapeInfo_1:
   \   0000007C   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    223          
    224          #if EFI_UNIT_TEST || defined(__DOXYGEN__)
    225          #include <stdio.h>
    226          #include <stdlib.h>
    227          
    228          
    229          /**
    230           * This is used to generate trigger info which is later used by TODO to generate images for documentation
    231           */
    232          void printAllTriggers() {
    233          
    234          	FILE * fp = fopen ("triggers.txt", "w+");
    235          
    236          	for (int triggerId = 1; triggerId < TT_UNUSED; triggerId++) {
    237          		trigger_type_e tt = (trigger_type_e) triggerId;
    238          
    239          		printf("Exporting %s\r\n", getTrigger_type_e(tt));
    240          
    241          		persistent_config_s pc;
    242          		Engine e(&pc);
    243          		Engine *engine = &e;
    244          		persistent_config_s *config = &pc;
    245          		engine_configuration_s *engineConfiguration = &pc.engineConfiguration;
    246          		board_configuration_s *boardConfiguration = &engineConfiguration->bc;
    247          
    248          		engineConfiguration->engineCycle = 720;
    249          		engineConfiguration->trigger.type = tt;
    250          		engineConfiguration->operationMode = FOUR_STROKE_CAM_SENSOR;
    251          
    252          		TriggerShape *s = &engine->triggerShape;
    253          		s->initializeTriggerShape(NULL PASS_ENGINE_PARAMETER);
    254          
    255          		fprintf(fp, "TRIGGERTYPE %d %d %s\r\n", triggerId, s->getSize(), getTrigger_type_e(tt));
    256          		for (int i = 0; i < s->getSize(); i++) {
    257          
    258          			int triggerDefinitionCoordinate = (s->getTriggerShapeSynchPointIndex() + i) % s->getLength();
    259          
    260          
    261          			fprintf(fp, "event %d %d %f\r\n", i, s->events[triggerDefinitionCoordinate], s->eventAngles[i]);
    262          		}
    263          
    264          	}
    265          	fclose(fp);
    266          	printf("All triggers exported\r\n");
    267          }
    268          
    269          #endif
    270          
    271          
    272          #if EFI_PROD_CODE || defined(__DOXYGEN__)
    273          extern PwmConfig triggerSignal;
    274          #endif /* #if EFI_PROD_CODE */
    275          
    276          extern uint32_t maxLockTime;
    277          extern uint32_t maxEventQueueTime;
    278          extern uint32_t hipLastExecutionCount;
    279          extern uint32_t hwSetTimerTime;
    280          
    281          extern int maxHowFarOff;
    282          extern uint32_t *cyccnt;
    283          

   \                                 In section .text, align 2, keep-with-next
    284          void triggerInfo(void) {
   \                     _Z11triggerInfov:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    285          #if (EFI_PROD_CODE || EFI_SIMULATOR) || defined(__DOXYGEN__)
    286          
    287          	TriggerShape *ts = &engine->triggerShape;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable13_18
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF510 0x7421      ADDS     R4,R0,#+644
    288          
    289          	scheduleMsg(logger, "Template %s (%d) trigger %s (%d) useRiseEdge=%s onlyFront=%s",
    290          			getConfigurationName(engineConfiguration->engineType), engineConfiguration->engineType,
    291          			getTrigger_type_e(engineConfiguration->trigger.type), engineConfiguration->trigger.type,
    292          			boolToString(TRIGGER_SHAPE(useRiseEdge)), boolToString(engineConfiguration->useOnlyFrontForTrigger));
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable13_17
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF890 0x05E5      LDRB     R0,[R0, #+1509]
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x0980             LSRS     R0,R0,#+6
   \   0000001C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000020   0x.... 0x....      BL       _Z12boolToStringb
   \   00000024   0x0005             MOVS     R5,R0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable13_32
   \   0000002A   0xF890 0x0DE8      LDRB     R0,[R0, #+3560]
   \   0000002E   0x.... 0x....      BL       _Z12boolToStringb
   \   00000032   0x0007             MOVS     R7,R0
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable13_17
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xF8D0 0x0218      LDR      R0,[R0, #+536]
   \   0000003E   0x.... 0x....      BL       _Z17getTrigger_type_e14trigger_type_e
   \   00000042   0x0006             MOVS     R6,R0
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable13_17
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0x.... 0x....      BL       _Z20getConfigurationName13engine_type_e
   \   00000050   0x9503             STR      R5,[SP, #+12]
   \   00000052   0x9702             STR      R7,[SP, #+8]
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable13_17
   \   00000058   0x6809             LDR      R1,[R1, #+0]
   \   0000005A   0xF8D1 0x1218      LDR      R1,[R1, #+536]
   \   0000005E   0x9101             STR      R1,[SP, #+4]
   \   00000060   0x9600             STR      R6,[SP, #+0]
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable13_17
   \   00000066   0x6809             LDR      R1,[R1, #+0]
   \   00000068   0x680B             LDR      R3,[R1, #+0]
   \   0000006A   0x0002             MOVS     R2,R0
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable13_33
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable13_28
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x.... 0x....      BL       scheduleMsg
    293          
    294          	if (engineConfiguration->trigger.type == TT_TOOTHED_WHEEL) {
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable13_17
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0xF8D0 0x0218      LDR      R0,[R0, #+536]
   \   00000084   0x2800             CMP      R0,#+0
   \   00000086   0xD110             BNE.N    ??triggerInfo_0
    295          		scheduleMsg(logger, "total %d/skipped %d", engineConfiguration->trigger.customTotalToothCount,
    296          				engineConfiguration->trigger.customSkippedToothCount);
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable13_17
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0xF8D0 0x3224      LDR      R3,[R0, #+548]
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable13_17
   \   00000096   0x6800             LDR      R0,[R0, #+0]
   \   00000098   0xF8D0 0x2220      LDR      R2,[R0, #+544]
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable13_34
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable13_28
   \   000000A4   0x6800             LDR      R0,[R0, #+0]
   \   000000A6   0x.... 0x....      BL       scheduleMsg
    297          	}
    298          
    299          	scheduleMsg(logger, "trigger#1 event counters up=%d/down=%d", triggerCentral.getHwEventCounter(0),
    300          			triggerCentral.getHwEventCounter(1));
   \                     ??triggerInfo_0:
   \   000000AA   0x2101             MOVS     R1,#+1
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   000000B0   0x.... 0x....      BL       _ZN14TriggerCentral17getHwEventCounterEi
   \   000000B4   0x0005             MOVS     R5,R0
   \   000000B6   0x2100             MOVS     R1,#+0
   \   000000B8   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   000000BC   0x.... 0x....      BL       _ZN14TriggerCentral17getHwEventCounterEi
   \   000000C0   0x0002             MOVS     R2,R0
   \   000000C2   0x002B             MOVS     R3,R5
   \   000000C4   0x.... 0x....      LDR.W    R1,??DataTable13_35
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable13_28
   \   000000CC   0x6800             LDR      R0,[R0, #+0]
   \   000000CE   0x.... 0x....      BL       scheduleMsg
    301          
    302          	if (engine->triggerShape.needSecondTriggerInput) {
   \   000000D2   0x.... 0x....      LDR.W    R0,??DataTable13_18
   \   000000D6   0x6800             LDR      R0,[R0, #+0]
   \   000000D8   0xF890 0x0285      LDRB     R0,[R0, #+645]
   \   000000DC   0x2800             CMP      R0,#+0
   \   000000DE   0xD013             BEQ.N    ??triggerInfo_1
    303          		scheduleMsg(logger, "trigger#2 event counters up=%d/down=%d", triggerCentral.getHwEventCounter(2),
    304          				triggerCentral.getHwEventCounter(3));
   \   000000E0   0x2103             MOVS     R1,#+3
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   000000E6   0x.... 0x....      BL       _ZN14TriggerCentral17getHwEventCounterEi
   \   000000EA   0x0005             MOVS     R5,R0
   \   000000EC   0x2102             MOVS     R1,#+2
   \   000000EE   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   000000F2   0x.... 0x....      BL       _ZN14TriggerCentral17getHwEventCounterEi
   \   000000F6   0x002B             MOVS     R3,R5
   \   000000F8   0x0002             MOVS     R2,R0
   \   000000FA   0x.... 0x....      LDR.W    R1,??DataTable13_36
   \   000000FE   0x.... 0x....      LDR.W    R0,??DataTable13_28
   \   00000102   0x6800             LDR      R0,[R0, #+0]
   \   00000104   0x.... 0x....      BL       scheduleMsg
    305          	}
    306          	scheduleMsg(logger, "expected cycle events %d/%d/%d", ts->expectedEventCount[0],
    307          			engine->triggerShape.expectedEventCount[1], ts->expectedEventCount[2]);
   \                     ??triggerInfo_1:
   \   00000108   0xF8D4 0x0B70      LDR      R0,[R4, #+2928]
   \   0000010C   0x9000             STR      R0,[SP, #+0]
   \   0000010E   0x.... 0x....      LDR.W    R0,??DataTable13_18
   \   00000112   0x6800             LDR      R0,[R0, #+0]
   \   00000114   0xF8D0 0x3DF0      LDR      R3,[R0, #+3568]
   \   00000118   0xF8D4 0x2B68      LDR      R2,[R4, #+2920]
   \   0000011C   0x.... 0x....      LDR.W    R1,??DataTable13_37
   \   00000120   0x.... 0x....      LDR.W    R0,??DataTable13_28
   \   00000124   0x6800             LDR      R0,[R0, #+0]
   \   00000126   0x.... 0x....      BL       scheduleMsg
    308          
    309          	scheduleMsg(logger, "trigger type=%d/need2ndChannel=%s", engineConfiguration->trigger.type,
    310          			boolToString(engine->triggerShape.needSecondTriggerInput));
   \   0000012A   0x.... 0x....      LDR.W    R0,??DataTable13_18
   \   0000012E   0x6800             LDR      R0,[R0, #+0]
   \   00000130   0xF890 0x0285      LDRB     R0,[R0, #+645]
   \   00000134   0x.... 0x....      BL       _Z12boolToStringb
   \   00000138   0x0003             MOVS     R3,R0
   \   0000013A   0x....             LDR.N    R0,??DataTable13_17
   \   0000013C   0x6800             LDR      R0,[R0, #+0]
   \   0000013E   0xF8D0 0x2218      LDR      R2,[R0, #+536]
   \   00000142   0x.... 0x....      LDR.W    R1,??DataTable13_38
   \   00000146   0x.... 0x....      LDR.W    R0,??DataTable13_28
   \   0000014A   0x6800             LDR      R0,[R0, #+0]
   \   0000014C   0x.... 0x....      BL       scheduleMsg
    311          	scheduleMsg(logger, "expected duty #0=%f/#1=%f", ts->dutyCycle[0], ts->dutyCycle[1]);
   \   00000150   0x6920             LDR      R0,[R4, #+16]
   \   00000152   0x.... 0x....      BL       __aeabi_f2d
   \   00000156   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000015A   0x68E0             LDR      R0,[R4, #+12]
   \   0000015C   0x.... 0x....      BL       __aeabi_f2d
   \   00000160   0x0002             MOVS     R2,R0
   \   00000162   0x000B             MOVS     R3,R1
   \   00000164   0x.... 0x....      LDR.W    R1,??DataTable13_39
   \   00000168   0x....             LDR.N    R0,??DataTable13_28
   \   0000016A   0x6800             LDR      R0,[R0, #+0]
   \   0000016C   0x.... 0x....      BL       scheduleMsg
    312          
    313          	scheduleMsg(logger, "synchronizationNeeded=%s/isError=%s/total errors=%d ord_err=%d/total revolutions=%d/self=%s",
    314          			boolToString(ts->isSynchronizationNeeded),
    315          			boolToString(isTriggerDecoderError()), triggerCentral.triggerState.totalTriggerErrorCounter,
    316          			triggerCentral.triggerState.orderingErrorCounter, triggerCentral.triggerState.getTotalRevolutionCounter(),
    317          			boolToString(engineConfiguration->directSelfStimulation));
   \   00000170   0x....             LDR.N    R0,??DataTable13_17
   \   00000172   0x6800             LDR      R0,[R0, #+0]
   \   00000174   0xF890 0x0050      LDRB     R0,[R0, #+80]
   \   00000178   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000017C   0x.... 0x....      BL       _Z12boolToStringb
   \   00000180   0x0006             MOVS     R6,R0
   \   00000182   0x....             LDR.N    R0,??DataTable13_2
   \   00000184   0x.... 0x....      BL       _ZN12TriggerState25getTotalRevolutionCounterEv
   \   00000188   0x0007             MOVS     R7,R0
   \   0000018A   0x.... 0x....      BL       _Z21isTriggerDecoderErrorv
   \   0000018E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000190   0x.... 0x....      BL       _Z12boolToStringb
   \   00000194   0x0005             MOVS     R5,R0
   \   00000196   0x7820             LDRB     R0,[R4, #+0]
   \   00000198   0x.... 0x....      BL       _Z12boolToStringb
   \   0000019C   0x9603             STR      R6,[SP, #+12]
   \   0000019E   0x9702             STR      R7,[SP, #+8]
   \   000001A0   0x....             LDR.N    R1,??DataTable13_2
   \   000001A2   0x6C49             LDR      R1,[R1, #+68]
   \   000001A4   0x9101             STR      R1,[SP, #+4]
   \   000001A6   0x....             LDR.N    R1,??DataTable13_2
   \   000001A8   0x6BC9             LDR      R1,[R1, #+60]
   \   000001AA   0x9100             STR      R1,[SP, #+0]
   \   000001AC   0x002B             MOVS     R3,R5
   \   000001AE   0x0002             MOVS     R2,R0
   \   000001B0   0x....             LDR.N    R1,??DataTable13_40
   \   000001B2   0x....             LDR.N    R0,??DataTable13_28
   \   000001B4   0x6800             LDR      R0,[R0, #+0]
   \   000001B6   0x.... 0x....      BL       scheduleMsg
    318          
    319          	if (ts->isSynchronizationNeeded) {
   \   000001BA   0x7820             LDRB     R0,[R4, #+0]
   \   000001BC   0x2800             CMP      R0,#+0
   \   000001BE   0xD010             BEQ.N    ??triggerInfo_2
    320          		scheduleMsg(logger, "gap from %f to %f", ts->syncRatioFrom, ts->syncRatioTo);
   \   000001C0   0xF8D4 0x0B5C      LDR      R0,[R4, #+2908]
   \   000001C4   0x.... 0x....      BL       __aeabi_f2d
   \   000001C8   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000001CC   0xF8D4 0x0B58      LDR      R0,[R4, #+2904]
   \   000001D0   0x.... 0x....      BL       __aeabi_f2d
   \   000001D4   0x0002             MOVS     R2,R0
   \   000001D6   0x000B             MOVS     R3,R1
   \   000001D8   0x....             LDR.N    R1,??DataTable13_30
   \   000001DA   0x....             LDR.N    R0,??DataTable13_28
   \   000001DC   0x6800             LDR      R0,[R0, #+0]
   \   000001DE   0x.... 0x....      BL       scheduleMsg
    321          	}
    322          
    323          #endif
    324          
    325          #if EFI_PROD_CODE || defined(__DOXYGEN__)
    326          
    327          	scheduleMsg(logger, "primary trigger input: %s", hwPortname(boardConfiguration->triggerInputPins[0]));
   \                     ??triggerInfo_2:
   \   000001E2   0x....             LDR.N    R0,??DataTable13_41
   \   000001E4   0x6800             LDR      R0,[R0, #+0]
   \   000001E6   0xF8D0 0x0128      LDR      R0,[R0, #+296]
   \   000001EA   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   000001EE   0x0002             MOVS     R2,R0
   \   000001F0   0x....             LDR.N    R1,??DataTable13_42
   \   000001F2   0x....             LDR.N    R0,??DataTable13_28
   \   000001F4   0x6800             LDR      R0,[R0, #+0]
   \   000001F6   0x.... 0x....      BL       scheduleMsg
    328          	scheduleMsg(logger, "primary trigger simulator: %s %s freq=%d",
    329          			hwPortname(boardConfiguration->triggerSimulatorPins[0]),
    330          			getPin_output_mode_e(boardConfiguration->triggerSimulatorPinModes[0]),
    331          			boardConfiguration->triggerSimulatorFrequency);
   \   000001FA   0x....             LDR.N    R0,??DataTable13_41
   \   000001FC   0x6800             LDR      R0,[R0, #+0]
   \   000001FE   0xF8D0 0x016C      LDR      R0,[R0, #+364]
   \   00000202   0x.... 0x....      BL       _Z20getPin_output_mode_e17pin_output_mode_e
   \   00000206   0x0005             MOVS     R5,R0
   \   00000208   0x....             LDR.N    R0,??DataTable13_41
   \   0000020A   0x6800             LDR      R0,[R0, #+0]
   \   0000020C   0xF8D0 0x0160      LDR      R0,[R0, #+352]
   \   00000210   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   00000214   0x....             LDR.N    R1,??DataTable13_41
   \   00000216   0x6809             LDR      R1,[R1, #+0]
   \   00000218   0xF8D1 0x10D0      LDR      R1,[R1, #+208]
   \   0000021C   0x9100             STR      R1,[SP, #+0]
   \   0000021E   0x002B             MOVS     R3,R5
   \   00000220   0x0002             MOVS     R2,R0
   \   00000222   0x....             LDR.N    R1,??DataTable13_43
   \   00000224   0x....             LDR.N    R0,??DataTable13_28
   \   00000226   0x6800             LDR      R0,[R0, #+0]
   \   00000228   0x.... 0x....      BL       scheduleMsg
    332          
    333          	if (engine->triggerShape.needSecondTriggerInput) {
   \   0000022C   0x....             LDR.N    R0,??DataTable13_18
   \   0000022E   0x6800             LDR      R0,[R0, #+0]
   \   00000230   0xF890 0x0285      LDRB     R0,[R0, #+645]
   \   00000234   0x2800             CMP      R0,#+0
   \   00000236   0xD022             BEQ.N    ??triggerInfo_3
    334          		scheduleMsg(logger, "secondary trigger input: %s", hwPortname(boardConfiguration->triggerInputPins[1]));
   \   00000238   0x....             LDR.N    R0,??DataTable13_41
   \   0000023A   0x6800             LDR      R0,[R0, #+0]
   \   0000023C   0xF8D0 0x012C      LDR      R0,[R0, #+300]
   \   00000240   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   00000244   0x0002             MOVS     R2,R0
   \   00000246   0x....             LDR.N    R1,??DataTable13_44
   \   00000248   0x....             LDR.N    R0,??DataTable13_28
   \   0000024A   0x6800             LDR      R0,[R0, #+0]
   \   0000024C   0x.... 0x....      BL       scheduleMsg
    335          #if EFI_EMULATE_POSITION_SENSORS || defined(__DOXYGEN__)
    336          		scheduleMsg(logger, "secondary trigger simulator: %s %s phase=%d",
    337          				hwPortname(boardConfiguration->triggerSimulatorPins[1]),
    338          				getPin_output_mode_e(boardConfiguration->triggerSimulatorPinModes[1]), triggerSignal.safe.phaseIndex);
   \   00000250   0x....             LDR.N    R0,??DataTable13_41
   \   00000252   0x6800             LDR      R0,[R0, #+0]
   \   00000254   0xF8D0 0x0170      LDR      R0,[R0, #+368]
   \   00000258   0x.... 0x....      BL       _Z20getPin_output_mode_e17pin_output_mode_e
   \   0000025C   0x0005             MOVS     R5,R0
   \   0000025E   0x....             LDR.N    R0,??DataTable13_41
   \   00000260   0x6800             LDR      R0,[R0, #+0]
   \   00000262   0xF8D0 0x0164      LDR      R0,[R0, #+356]
   \   00000266   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   0000026A   0x....             LDR.N    R1,??DataTable13_45
   \   0000026C   0x6C89             LDR      R1,[R1, #+72]
   \   0000026E   0x9100             STR      R1,[SP, #+0]
   \   00000270   0x002B             MOVS     R3,R5
   \   00000272   0x0002             MOVS     R2,R0
   \   00000274   0x....             LDR.N    R1,??DataTable13_46
   \   00000276   0x....             LDR.N    R0,??DataTable13_28
   \   00000278   0x6800             LDR      R0,[R0, #+0]
   \   0000027A   0x.... 0x....      BL       scheduleMsg
    339          #endif /* EFI_EMULATE_POSITION_SENSORS */
    340          	}
    341          //	scheduleMsg(logger, "3rd trigger simulator: %s %s", hwPortname(boardConfiguration->triggerSimulatorPins[2]),
    342          //			getPin_output_mode_e(boardConfiguration->triggerSimulatorPinModes[2]));
    343          
    344          	scheduleMsg(logger, "trigger error extra LED: %s %s", hwPortname(boardConfiguration->triggerErrorPin),
    345          			getPin_output_mode_e(boardConfiguration->triggerErrorPinMode));
   \                     ??triggerInfo_3:
   \   0000027E   0x....             LDR.N    R0,??DataTable13_41
   \   00000280   0x6800             LDR      R0,[R0, #+0]
   \   00000282   0xF8D0 0x025C      LDR      R0,[R0, #+604]
   \   00000286   0x.... 0x....      BL       _Z20getPin_output_mode_e17pin_output_mode_e
   \   0000028A   0x0005             MOVS     R5,R0
   \   0000028C   0x....             LDR.N    R0,??DataTable13_41
   \   0000028E   0x6800             LDR      R0,[R0, #+0]
   \   00000290   0xF8D0 0x0258      LDR      R0,[R0, #+600]
   \   00000294   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   00000298   0x002B             MOVS     R3,R5
   \   0000029A   0x0002             MOVS     R2,R0
   \   0000029C   0x....             LDR.N    R1,??DataTable13_47
   \   0000029E   0x....             LDR.N    R0,??DataTable13_28
   \   000002A0   0x6800             LDR      R0,[R0, #+0]
   \   000002A2   0x.... 0x....      BL       scheduleMsg
    346          	scheduleMsg(logger, "primary logic input: %s", hwPortname(boardConfiguration->logicAnalyzerPins[0]));
   \   000002A6   0x....             LDR.N    R0,??DataTable13_41
   \   000002A8   0x6800             LDR      R0,[R0, #+0]
   \   000002AA   0xF8D0 0x0184      LDR      R0,[R0, #+388]
   \   000002AE   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   000002B2   0x0002             MOVS     R2,R0
   \   000002B4   0x....             LDR.N    R1,??DataTable13_48
   \   000002B6   0x....             LDR.N    R0,??DataTable13_28
   \   000002B8   0x6800             LDR      R0,[R0, #+0]
   \   000002BA   0x.... 0x....      BL       scheduleMsg
    347          	scheduleMsg(logger, "secondary logic input: %s", hwPortname(boardConfiguration->logicAnalyzerPins[1]));
   \   000002BE   0x....             LDR.N    R0,??DataTable13_41
   \   000002C0   0x6800             LDR      R0,[R0, #+0]
   \   000002C2   0xF8D0 0x0188      LDR      R0,[R0, #+392]
   \   000002C6   0x.... 0x....      BL       _Z10hwPortname11brain_pin_e
   \   000002CA   0x0002             MOVS     R2,R0
   \   000002CC   0x....             LDR.N    R1,??DataTable13_49
   \   000002CE   0x....             LDR.N    R0,??DataTable13_28
   \   000002D0   0x6800             LDR      R0,[R0, #+0]
   \   000002D2   0x.... 0x....      BL       scheduleMsg
    348          
    349          	scheduleMsg(logger, "zeroTestTime=%d maxHowFarOff=%d", engine->m.zeroTestTime, maxHowFarOff);
   \   000002D6   0x....             LDR.N    R0,??DataTable13_50
   \   000002D8   0x6803             LDR      R3,[R0, #+0]
   \   000002DA   0xF242 0x30E4      MOVW     R0,#+9188
   \   000002DE   0x....             LDR.N    R1,??DataTable13_18
   \   000002E0   0x6809             LDR      R1,[R1, #+0]
   \   000002E2   0x5842             LDR      R2,[R0, R1]
   \   000002E4   0x....             LDR.N    R1,??DataTable13_51
   \   000002E6   0x....             LDR.N    R0,??DataTable13_28
   \   000002E8   0x6800             LDR      R0,[R0, #+0]
   \   000002EA   0x.... 0x....      BL       scheduleMsg
    350          	maxHowFarOff = 0;
   \   000002EE   0x....             LDR.N    R0,??DataTable13_50
   \   000002F0   0x2100             MOVS     R1,#+0
   \   000002F2   0x6001             STR      R1,[R0, #+0]
    351          
    352          	scheduleMsg(logger, "advanceLookupTime=%d now=%d fuelCalcTime=%d",
    353          			engine->m.advanceLookupTime, *cyccnt,
    354          			engine->m.fuelCalcTime);
   \   000002F4   0xF242 0x30F4      MOVW     R0,#+9204
   \   000002F8   0x....             LDR.N    R1,??DataTable13_18
   \   000002FA   0x6809             LDR      R1,[R1, #+0]
   \   000002FC   0x5840             LDR      R0,[R0, R1]
   \   000002FE   0x9000             STR      R0,[SP, #+0]
   \   00000300   0x....             LDR.N    R0,??DataTable13_52
   \   00000302   0x6800             LDR      R0,[R0, #+0]
   \   00000304   0x6803             LDR      R3,[R0, #+0]
   \   00000306   0xF242 0x30EC      MOVW     R0,#+9196
   \   0000030A   0x....             LDR.N    R1,??DataTable13_18
   \   0000030C   0x6809             LDR      R1,[R1, #+0]
   \   0000030E   0x5842             LDR      R2,[R0, R1]
   \   00000310   0x....             LDR.N    R1,??DataTable13_53
   \   00000312   0x....             LDR.N    R0,??DataTable13_28
   \   00000314   0x6800             LDR      R0,[R0, #+0]
   \   00000316   0x.... 0x....      BL       scheduleMsg
    355          
    356          	scheduleMsg(logger,
    357          			"ignitionMathTime=%d ignitionSchTime=%d injectonSchTime=%d",
    358          			engine->m.ignitionMathTime, engine->m.ignitionSchTime,
    359          			engine->m.injectonSchTime);
   \   0000031A   0xF242 0x30DC      MOVW     R0,#+9180
   \   0000031E   0x....             LDR.N    R1,??DataTable13_18
   \   00000320   0x6809             LDR      R1,[R1, #+0]
   \   00000322   0x5840             LDR      R0,[R0, R1]
   \   00000324   0x9000             STR      R0,[SP, #+0]
   \   00000326   0xF242 0x30D4      MOVW     R0,#+9172
   \   0000032A   0x....             LDR.N    R1,??DataTable13_18
   \   0000032C   0x6809             LDR      R1,[R1, #+0]
   \   0000032E   0x5843             LDR      R3,[R0, R1]
   \   00000330   0xF242 0x30CC      MOVW     R0,#+9164
   \   00000334   0x....             LDR.N    R1,??DataTable13_18
   \   00000336   0x6809             LDR      R1,[R1, #+0]
   \   00000338   0x5842             LDR      R2,[R0, R1]
   \   0000033A   0x....             LDR.N    R1,??DataTable13_54
   \   0000033C   0x....             LDR.N    R0,??DataTable13_28
   \   0000033E   0x6800             LDR      R0,[R0, #+0]
   \   00000340   0x.... 0x....      BL       scheduleMsg
    360          
    361          	scheduleMsg(logger, "mapTime=%d/hipTime=%d/rpmTime=%d/mainTriggerCallbackTime=%d",
    362          			engine->m.mapAveragingCbTime,
    363          			engine->m.hipCbTime,
    364          			engine->m.rpmCbTime,
    365          			engine->m.mainTriggerCallbackTime);
   \   00000344   0xF242 0x30C4      MOVW     R0,#+9156
   \   00000348   0x....             LDR.N    R1,??DataTable13_18
   \   0000034A   0x6809             LDR      R1,[R1, #+0]
   \   0000034C   0x5840             LDR      R0,[R0, R1]
   \   0000034E   0x9001             STR      R0,[SP, #+4]
   \   00000350   0xF242 0x400C      MOVW     R0,#+9228
   \   00000354   0x....             LDR.N    R1,??DataTable13_18
   \   00000356   0x6809             LDR      R1,[R1, #+0]
   \   00000358   0x5840             LDR      R0,[R0, R1]
   \   0000035A   0x9000             STR      R0,[SP, #+0]
   \   0000035C   0xF242 0x4004      MOVW     R0,#+9220
   \   00000360   0x....             LDR.N    R1,??DataTable13_18
   \   00000362   0x6809             LDR      R1,[R1, #+0]
   \   00000364   0x5843             LDR      R3,[R0, R1]
   \   00000366   0xF242 0x30FC      MOVW     R0,#+9212
   \   0000036A   0x....             LDR.N    R1,??DataTable13_18
   \   0000036C   0x6809             LDR      R1,[R1, #+0]
   \   0000036E   0x5842             LDR      R2,[R0, R1]
   \   00000370   0x....             LDR.N    R1,??DataTable13_55
   \   00000372   0x....             LDR.N    R0,??DataTable13_28
   \   00000374   0x6800             LDR      R0,[R0, #+0]
   \   00000376   0x.... 0x....      BL       scheduleMsg
    366          
    367          	scheduleMsg(logger, "maxLockTime=%d / maxTriggerReentraint=%d", maxLockTime, maxTriggerReentraint);
   \   0000037A   0x....             LDR.N    R0,??DataTable13_7
   \   0000037C   0x6803             LDR      R3,[R0, #+0]
   \   0000037E   0x....             LDR.N    R0,??DataTable13_56
   \   00000380   0x6802             LDR      R2,[R0, #+0]
   \   00000382   0x....             LDR.N    R1,??DataTable13_57
   \   00000384   0x....             LDR.N    R0,??DataTable13_28
   \   00000386   0x6800             LDR      R0,[R0, #+0]
   \   00000388   0x.... 0x....      BL       scheduleMsg
    368          	maxLockTime = 0;
   \   0000038C   0x....             LDR.N    R0,??DataTable13_56
   \   0000038E   0x2100             MOVS     R1,#+0
   \   00000390   0x6001             STR      R1,[R0, #+0]
    369          	scheduleMsg(logger, "maxEventQueueTime=%d", maxEventQueueTime);
   \   00000392   0x....             LDR.N    R0,??DataTable13_58
   \   00000394   0x6802             LDR      R2,[R0, #+0]
   \   00000396   0x....             LDR.N    R1,??DataTable13_59
   \   00000398   0x....             LDR.N    R0,??DataTable13_28
   \   0000039A   0x6800             LDR      R0,[R0, #+0]
   \   0000039C   0x.... 0x....      BL       scheduleMsg
    370          
    371          	scheduleMsg(logger, "hipLastExecutionCount=%d", hipLastExecutionCount);
   \   000003A0   0x....             LDR.N    R0,??DataTable13_60
   \   000003A2   0x6802             LDR      R2,[R0, #+0]
   \   000003A4   0x....             LDR.N    R1,??DataTable13_61
   \   000003A6   0x....             LDR.N    R0,??DataTable13_28
   \   000003A8   0x6800             LDR      R0,[R0, #+0]
   \   000003AA   0x.... 0x....      BL       scheduleMsg
    372          	scheduleMsg(logger, "hwSetTimerTime %d", hwSetTimerTime);
   \   000003AE   0x....             LDR.N    R0,??DataTable13_62
   \   000003B0   0x6802             LDR      R2,[R0, #+0]
   \   000003B2   0x....             LDR.N    R1,??DataTable13_63
   \   000003B4   0x....             LDR.N    R0,??DataTable13_28
   \   000003B6   0x6800             LDR      R0,[R0, #+0]
   \   000003B8   0x.... 0x....      BL       scheduleMsg
    373          
    374          	scheduleMsg(logger, "totalTriggerHandlerMaxTime=%d", triggerMaxDuration);
   \   000003BC   0x....             LDR.N    R0,??DataTable13_12
   \   000003BE   0x6802             LDR      R2,[R0, #+0]
   \   000003C0   0x....             LDR.N    R1,??DataTable13_64
   \   000003C2   0x....             LDR.N    R0,??DataTable13_28
   \   000003C4   0x6800             LDR      R0,[R0, #+0]
   \   000003C6   0x.... 0x....      BL       scheduleMsg
    375          	triggerMaxDuration = 0;
   \   000003CA   0x....             LDR.N    R0,??DataTable13_12
   \   000003CC   0x2100             MOVS     R1,#+0
   \   000003CE   0x6001             STR      R1,[R0, #+0]
    376          
    377          #endif /* EFI_PROD_CODE */
    378          }
   \   000003D0   0xB005             ADD      SP,SP,#+20
   \   000003D2   0xBDF0             POP      {R4-R7,PC}       ;; return
    379          

   \                                 In section .text, align 2, keep-with-next
    380          float getTriggerDutyCycle(int index) {
   \                     _Z19getTriggerDutyCyclei:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    381          	return triggerCentral.triggerState.getTriggerDutyCycle(index);
   \   00000004   0x0021             MOVS     R1,R4
   \   00000006   0x....             LDR.N    R0,??DataTable13_2
   \   00000008   0x.... 0x....      BL       _ZN12TriggerState19getTriggerDutyCycleEi
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return
    382          }
    383          

   \                                 In section .text, align 2, keep-with-next
    384          static void resetRunningTriggerCounters() {
   \                     _Z27resetRunningTriggerCountersv:
   \   00000000   0xB580             PUSH     {R7,LR}
    385          	triggerCentral.resetCounters();
   \   00000002   0x....             LDR.N    R0,??DataTable13_2
   \   00000004   0x.... 0x....      BL       _ZN14TriggerCentral13resetCountersEv
    386          #if EFI_PROD_CODE
    387          	triggerInfo();
   \   00000008   0x.... 0x....      BL       _Z11triggerInfov
    388          #endif
    389          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    390          

   \                                 In section .text, align 2, keep-with-next
    391          void initTriggerCentral(Logging *sharedLogger, Engine *engine) {
   \                     _Z18initTriggerCentralP7LoggingP6Engine:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    392          	logger = sharedLogger;
   \   00000006   0x....             LDR.N    R0,??DataTable13_28
   \   00000008   0x6004             STR      R4,[R0, #+0]
    393          	strcpy((char*) shaft_signal_msg_index, "x_");
   \   0000000A   0x....             ADR.N    R1,??DataTable13  ;; 0x78, 0x5F, 0x00, 0x00
   \   0000000C   0x....             LDR.N    R0,??DataTable13_15
   \   0000000E   0x.... 0x....      BL       strcpy
    394          
    395          #if EFI_WAVE_CHART
    396          	initWaveChart(&waveChart);
   \   00000012   0x....             LDR.N    R0,??DataTable13_1
   \   00000014   0x.... 0x....      BL       _Z13initWaveChartP9WaveChart
    397          #endif /* EFI_WAVE_CHART */
    398          
    399          #if EFI_PROD_CODE || EFI_SIMULATOR
    400          	addConsoleAction("triggerinfo", triggerInfo);
   \   00000018   0x....             LDR.N    R1,??DataTable13_65
   \   0000001A   0x....             LDR.N    R0,??DataTable13_66
   \   0000001C   0x.... 0x....      BL       addConsoleAction
    401          	addConsoleAction("trigger_shape_info", triggerShapeInfo);
   \   00000020   0x....             LDR.N    R1,??DataTable13_67
   \   00000022   0x....             LDR.N    R0,??DataTable13_68
   \   00000024   0x.... 0x....      BL       addConsoleAction
    402          	addConsoleAction("reset_trigger", resetRunningTriggerCounters);
   \   00000028   0x....             LDR.N    R1,??DataTable13_69
   \   0000002A   0x....             LDR.N    R0,??DataTable13_70
   \   0000002C   0x.... 0x....      BL       addConsoleAction
    403          #endif
    404          
    405          #if EFI_HISTOGRAMS
    406          	initHistogram(&triggerCallback, "all callbacks");
    407          #endif /* EFI_HISTOGRAMS */
    408          }
   \   00000030   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x78 0x5F          DC8      0x78, 0x5F, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x........         DC32     waveChart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x........         DC32     triggerCentral

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0x........         DC32     `?<Constant "registerCkpListener: ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   0x........         DC32     triggerHanlderEntryTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \   00000000   0xE0001004         DC32     0xe0001004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \   00000000   0x........         DC32     isInsideTriggerHandler

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_7:
   \   00000000   0x........         DC32     maxTriggerReentraint

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_8:
   \   00000000   0x........         DC32     triggerReentraint

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_9:
   \   00000000   0x........         DC32     rlist

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_10:
   \   00000000   0x........         DC32     `?<Constant "lowstck#8">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_11:
   \   00000000   0x........         DC32     triggerDuration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_12:
   \   00000000   0x........         DC32     triggerMaxDuration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_13:
   \   00000000   0x........         DC32     shaft_signal_msg_index+0x2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_14:
   \   00000000   0x........         DC32     isUpEvent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_15:
   \   00000000   0x........         DC32     shaft_signal_msg_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_16:
   \   00000000   0x........         DC32     eventId

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_17:
   \   00000000   0x........         DC32     engineConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_18:
   \   00000000   0x........         DC32     engine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_19:
   \   00000000   0x........         DC32     `?<Constant "configuration">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_20:
   \   00000000   0x........         DC32     `?<Constant "engineConfiguration">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_21:
   \   00000000   0x........         DC32     `?<Constant "engineConfiguration2">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_22:
   \   00000000   0x........         DC32     `?<Constant "signal type">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_23:
   \   00000000   0x........         DC32     previousShaftEventTimeNt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_24:
   \   00000000   0x0A037A01         DC32     0xa037a01

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_25:
   \   00000000   0x........         DC32     _engine+0x16F0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_26:
   \   00000000   0x........         DC32     `?<Constant "unexpected eventIndex=%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_27:
   \   00000000   0x........         DC32     triggerCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_28:
   \   00000000   0x........         DC32     logger

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_29:
   \   00000000   0x........         DC32     `?<Constant "useRise=%s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_30:
   \   00000000   0x........         DC32     `?<Constant "gap from %f to %f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_31:
   \   00000000   0x........         DC32     `?<Constant "event %d %f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_32:
   \   00000000   0x........         DC32     _engine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_33:
   \   00000000   0x........         DC32     `?<Constant "Template %s (%d) trig...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_34:
   \   00000000   0x........         DC32     `?<Constant "total %d/skipped %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_35:
   \   00000000   0x........         DC32     `?<Constant "trigger#1 event count...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_36:
   \   00000000   0x........         DC32     `?<Constant "trigger#2 event count...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_37:
   \   00000000   0x........         DC32     `?<Constant "expected cycle events...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_38:
   \   00000000   0x........         DC32     `?<Constant "trigger type=%d/need2...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_39:
   \   00000000   0x........         DC32     `?<Constant "expected duty #0=%f/#...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_40:
   \   00000000   0x........         DC32     `?<Constant "synchronizationNeeded...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_41:
   \   00000000   0x........         DC32     boardConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_42:
   \   00000000   0x........         DC32     `?<Constant "primary trigger input...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_43:
   \   00000000   0x........         DC32     `?<Constant "primary trigger simul...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_44:
   \   00000000   0x........         DC32     `?<Constant "secondary trigger inp...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_45:
   \   00000000   0x........         DC32     triggerSignal

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_46:
   \   00000000   0x........         DC32     `?<Constant "secondary trigger sim...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_47:
   \   00000000   0x........         DC32     `?<Constant "trigger error extra L...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_48:
   \   00000000   0x........         DC32     `?<Constant "primary logic input: %s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_49:
   \   00000000   0x........         DC32     `?<Constant "secondary logic input...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_50:
   \   00000000   0x........         DC32     maxHowFarOff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_51:
   \   00000000   0x........         DC32     `?<Constant "zeroTestTime=%d maxHo...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_52:
   \   00000000   0x........         DC32     cyccnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_53:
   \   00000000   0x........         DC32     `?<Constant "advanceLookupTime=%d ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_54:
   \   00000000   0x........         DC32     `?<Constant "ignitionMathTime=%d i...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_55:
   \   00000000   0x........         DC32     `?<Constant "mapTime=%d/hipTime=%d...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_56:
   \   00000000   0x........         DC32     maxLockTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_57:
   \   00000000   0x........         DC32     `?<Constant "maxLockTime=%d / maxT...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_58:
   \   00000000   0x........         DC32     maxEventQueueTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_59:
   \   00000000   0x........         DC32     `?<Constant "maxEventQueueTime=%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_60:
   \   00000000   0x........         DC32     hipLastExecutionCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_61:
   \   00000000   0x........         DC32     `?<Constant "hipLastExecutionCount=%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_62:
   \   00000000   0x........         DC32     hwSetTimerTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_63:
   \   00000000   0x........         DC32     `?<Constant "hwSetTimerTime %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_64:
   \   00000000   0x........         DC32     `?<Constant "totalTriggerHandlerMa...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_65:
   \   00000000   0x........         DC32     _Z11triggerInfov

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_66:
   \   00000000   0x........         DC32     `?<Constant "triggerinfo">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_67:
   \   00000000   0x........         DC32     _Z16triggerShapeInfov

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_68:
   \   00000000   0x........         DC32     `?<Constant "trigger_shape_info">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_69:
   \   00000000   0x........         DC32     _Z27resetRunningTriggerCountersv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_70:
   \   00000000   0x........         DC32     `?<Constant "reset_trigger">`

   \                                 In section .init_array, align 4, keep-with-next, root
   \   00000000   0x........         DC32    RELOC_ARM_TARGET1 __sti__routine

   \                                 In section .rodata, align 4
   \                     `?<Constant "t1">`:
   \   00000000   0x74 0x31          DC8 "t1"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "t2">`:
   \   00000000   0x74 0x32          DC8 "t2"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "t3">`:
   \   00000000   0x74 0x33          DC8 "t3"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "lowstck#8">`:
   \   00000000   0x6C 0x6F          DC8 "lowstck#8"
   \              0x77 0x73    
   \              0x74 0x63    
   \              0x6B 0x23    
   \              0x38 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "useRise=%s">`:
   \   00000000   0x75 0x73          DC8 "useRise=%s"
   \              0x65 0x52    
   \              0x69 0x73    
   \              0x65 0x3D    
   \              0x25 0x73    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "gap from %f to %f">`:
   \   00000000   0x67 0x61          DC8 "gap from %f to %f"
   \              0x70 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x20 0x25    
   \              0x66 0x20    
   \              0x74 0x6F    
   \              0x20 0x25    
   \              0x66 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "event %d %f">`:
   \   00000000   0x65 0x76          DC8 "event %d %f"
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x25 0x64    
   \              0x20 0x25    
   \              0x66 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Template %s (%d) trig...">`:
   \   00000000   0x54 0x65          DC8 54H, 65H, 6DH, 70H, 6CH, 61H, 74H, 65H
   \              0x6D 0x70    
   \              0x6C 0x61    
   \              0x74 0x65    
   \   00000008   0x20 0x25          DC8 20H, 25H, 73H, 20H, 28H, 25H, 64H, 29H
   \              0x73 0x20    
   \              0x28 0x25    
   \              0x64 0x29    
   \   00000010   0x20 0x74          DC8 20H, 74H, 72H, 69H, 67H, 67H, 65H, 72H
   \              0x72 0x69    
   \              0x67 0x67    
   \              0x65 0x72    
   \   00000018   0x20 0x25          DC8 20H, 25H, 73H, 20H, 28H, 25H, 64H, 29H
   \              0x73 0x20    
   \              0x28 0x25    
   \              0x64 0x29    
   \   00000020   0x20 0x75          DC8 20H, 75H, 73H, 65H, 52H, 69H, 73H, 65H
   \              0x73 0x65    
   \              0x52 0x69    
   \              0x73 0x65    
   \   00000028   0x45 0x64          DC8 45H, 64H, 67H, 65H, 3DH, 25H, 73H, 20H
   \              0x67 0x65    
   \              0x3D 0x25    
   \              0x73 0x20    
   \   00000030   0x6F 0x6E          DC8 6FH, 6EH, 6CH, 79H, 46H, 72H, 6FH, 6EH
   \              0x6C 0x79    
   \              0x46 0x72    
   \              0x6F 0x6E    
   \   00000038   0x74 0x3D          DC8 74H, 3DH, 25H, 73H, 0
   \              0x25 0x73    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "total %d/skipped %d">`:
   \   00000000   0x74 0x6F          DC8 "total %d/skipped %d"
   \              0x74 0x61    
   \              0x6C 0x20    
   \              0x25 0x64    
   \              0x2F 0x73    
   \              0x6B 0x69    
   \              0x70 0x70    
   \              0x65 0x64    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "trigger#1 event count...">`:
   \   00000000   0x74 0x72          DC8 "trigger#1 event counters up=%d/down=%d"
   \              0x69 0x67    
   \              0x67 0x65    
   \              0x72 0x23    
   \              0x31 0x20    
   \              0x65 0x76    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x75 0x6E    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x20 0x75    
   \              0x70 0x3D    
   \              0x25 0x64    
   \              0x2F 0x64    
   \              0x6F 0x77    
   \              0x6E 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "trigger#2 event count...">`:
   \   00000000   0x74 0x72          DC8 "trigger#2 event counters up=%d/down=%d"
   \              0x69 0x67    
   \              0x67 0x65    
   \              0x72 0x23    
   \              0x32 0x20    
   \              0x65 0x76    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x75 0x6E    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x20 0x75    
   \              0x70 0x3D    
   \              0x25 0x64    
   \              0x2F 0x64    
   \              0x6F 0x77    
   \              0x6E 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "expected cycle events...">`:
   \   00000000   0x65 0x78          DC8 "expected cycle events %d/%d/%d"
   \              0x70 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x63    
   \              0x79 0x63    
   \              0x6C 0x65    
   \              0x20 0x65    
   \              0x76 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x25 0x64    
   \              0x2F 0x25    
   \              0x64 0x2F    
   \              0x25 0x64    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "trigger type=%d/need2...">`:
   \   00000000   0x74 0x72          DC8 "trigger type=%d/need2ndChannel=%s"
   \              0x69 0x67    
   \              0x67 0x65    
   \              0x72 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x3D 0x25    
   \              0x64 0x2F    
   \              0x6E 0x65    
   \              0x65 0x64    
   \              0x32 0x6E    
   \              0x64 0x43    
   \              0x68 0x61    
   \              0x6E 0x6E    
   \              0x65 0x6C    
   \              0x3D 0x25    
   \              0x73 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "expected duty #0=%f/#...">`:
   \   00000000   0x65 0x78          DC8 "expected duty #0=%f/#1=%f"
   \              0x70 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x64    
   \              0x75 0x74    
   \              0x79 0x20    
   \              0x23 0x30    
   \              0x3D 0x25    
   \              0x66 0x2F    
   \              0x23 0x31    
   \              0x3D 0x25    
   \              0x66 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "synchronizationNeeded...">`:
   \   00000000   0x73 0x79          DC8 73H, 79H, 6EH, 63H, 68H, 72H, 6FH, 6EH
   \              0x6E 0x63    
   \              0x68 0x72    
   \              0x6F 0x6E    
   \   00000008   0x69 0x7A          DC8 69H, 7AH, 61H, 74H, 69H, 6FH, 6EH, 4EH
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x4E    
   \   00000010   0x65 0x65          DC8 65H, 65H, 64H, 65H, 64H, 3DH, 25H, 73H
   \              0x64 0x65    
   \              0x64 0x3D    
   \              0x25 0x73    
   \   00000018   0x2F 0x69          DC8 2FH, 69H, 73H, 45H, 72H, 72H, 6FH, 72H
   \              0x73 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \   00000020   0x3D 0x25          DC8 3DH, 25H, 73H, 2FH, 74H, 6FH, 74H, 61H
   \              0x73 0x2F    
   \              0x74 0x6F    
   \              0x74 0x61    
   \   00000028   0x6C 0x20          DC8 6CH, 20H, 65H, 72H, 72H, 6FH, 72H, 73H
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x73    
   \   00000030   0x3D 0x25          DC8 3DH, 25H, 64H, 20H, 6FH, 72H, 64H, 5FH
   \              0x64 0x20    
   \              0x6F 0x72    
   \              0x64 0x5F    
   \   00000038   0x65 0x72          DC8 65H, 72H, 72H, 3DH, 25H, 64H, 2FH, 74H
   \              0x72 0x3D    
   \              0x25 0x64    
   \              0x2F 0x74    
   \   00000040   0x6F 0x74          DC8 6FH, 74H, 61H, 6CH, 20H, 72H, 65H, 76H
   \              0x61 0x6C    
   \              0x20 0x72    
   \              0x65 0x76    
   \   00000048   0x6F 0x6C          DC8 6FH, 6CH, 75H, 74H, 69H, 6FH, 6EH, 73H
   \              0x75 0x74    
   \              0x69 0x6F    
   \              0x6E 0x73    
   \   00000050   0x3D 0x25          DC8 3DH, 25H, 64H, 2FH, 73H, 65H, 6CH, 66H
   \              0x64 0x2F    
   \              0x73 0x65    
   \              0x6C 0x66    
   \   00000058   0x3D 0x25          DC8 3DH, 25H, 73H, 0
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "primary trigger input...">`:
   \   00000000   0x70 0x72          DC8 "primary trigger input: %s"
   \              0x69 0x6D    
   \              0x61 0x72    
   \              0x79 0x20    
   \              0x74 0x72    
   \              0x69 0x67    
   \              0x67 0x65    
   \              0x72 0x20    
   \              0x69 0x6E    
   \              0x70 0x75    
   \              0x74 0x3A    
   \              0x20 0x25    
   \              0x73 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "primary trigger simul...">`:
   \   00000000   0x70 0x72          DC8 "primary trigger simulator: %s %s freq=%d"
   \              0x69 0x6D    
   \              0x61 0x72    
   \              0x79 0x20    
   \              0x74 0x72    
   \              0x69 0x67    
   \              0x67 0x65    
   \              0x72 0x20    
   \              0x73 0x69    
   \              0x6D 0x75    
   \              0x6C 0x61    
   \              0x74 0x6F    
   \              0x72 0x3A    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x25 0x73    
   \              0x20 0x66    
   \              0x72 0x65    
   \              0x71 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "secondary trigger inp...">`:
   \   00000000   0x73 0x65          DC8 "secondary trigger input: %s"
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x61 0x72    
   \              0x79 0x20    
   \              0x74 0x72    
   \              0x69 0x67    
   \              0x67 0x65    
   \              0x72 0x20    
   \              0x69 0x6E    
   \              0x70 0x75    
   \              0x74 0x3A    
   \              0x20 0x25    
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "secondary trigger sim...">`:
   \   00000000   0x73 0x65          DC8 "secondary trigger simulator: %s %s phase=%d"
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x61 0x72    
   \              0x79 0x20    
   \              0x74 0x72    
   \              0x69 0x67    
   \              0x67 0x65    
   \              0x72 0x20    
   \              0x73 0x69    
   \              0x6D 0x75    
   \              0x6C 0x61    
   \              0x74 0x6F    
   \              0x72 0x3A    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x25 0x73    
   \              0x20 0x70    
   \              0x68 0x61    
   \              0x73 0x65    
   \              0x3D 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "trigger error extra L...">`:
   \   00000000   0x74 0x72          DC8 "trigger error extra LED: %s %s"
   \              0x69 0x67    
   \              0x67 0x65    
   \              0x72 0x20    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x65 0x78    
   \              0x74 0x72    
   \              0x61 0x20    
   \              0x4C 0x45    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x25 0x73    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "primary logic input: %s">`:
   \   00000000   0x70 0x72          DC8 "primary logic input: %s"
   \              0x69 0x6D    
   \              0x61 0x72    
   \              0x79 0x20    
   \              0x6C 0x6F    
   \              0x67 0x69    
   \              0x63 0x20    
   \              0x69 0x6E    
   \              0x70 0x75    
   \              0x74 0x3A    
   \              0x20 0x25    
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "secondary logic input...">`:
   \   00000000   0x73 0x65          DC8 "secondary logic input: %s"
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x61 0x72    
   \              0x79 0x20    
   \              0x6C 0x6F    
   \              0x67 0x69    
   \              0x63 0x20    
   \              0x69 0x6E    
   \              0x70 0x75    
   \              0x74 0x3A    
   \              0x20 0x25    
   \              0x73 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "zeroTestTime=%d maxHo...">`:
   \   00000000   0x7A 0x65          DC8 "zeroTestTime=%d maxHowFarOff=%d"
   \              0x72 0x6F    
   \              0x54 0x65    
   \              0x73 0x74    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x3D 0x25    
   \              0x64 0x20    
   \              0x6D 0x61    
   \              0x78 0x48    
   \              0x6F 0x77    
   \              0x46 0x61    
   \              0x72 0x4F    
   \              0x66 0x66    
   \              0x3D 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "advanceLookupTime=%d ...">`:
   \   00000000   0x61 0x64          DC8 "advanceLookupTime=%d now=%d fuelCalcTime=%d"
   \              0x76 0x61    
   \              0x6E 0x63    
   \              0x65 0x4C    
   \              0x6F 0x6F    
   \              0x6B 0x75    
   \              0x70 0x54    
   \              0x69 0x6D    
   \              0x65 0x3D    
   \              0x25 0x64    
   \              0x20 0x6E    
   \              0x6F 0x77    
   \              0x3D 0x25    
   \              0x64 0x20    
   \              0x66 0x75    
   \              0x65 0x6C    
   \              0x43 0x61    
   \              0x6C 0x63    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x3D 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "ignitionMathTime=%d i...">`:
   \   00000000   0x69 0x67          DC8 69H, 67H, 6EH, 69H, 74H, 69H, 6FH, 6EH
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \   00000008   0x4D 0x61          DC8 4DH, 61H, 74H, 68H, 54H, 69H, 6DH, 65H
   \              0x74 0x68    
   \              0x54 0x69    
   \              0x6D 0x65    
   \   00000010   0x3D 0x25          DC8 3DH, 25H, 64H, 20H, 69H, 67H, 6EH, 69H
   \              0x64 0x20    
   \              0x69 0x67    
   \              0x6E 0x69    
   \   00000018   0x74 0x69          DC8 74H, 69H, 6FH, 6EH, 53H, 63H, 68H, 54H
   \              0x6F 0x6E    
   \              0x53 0x63    
   \              0x68 0x54    
   \   00000020   0x69 0x6D          DC8 69H, 6DH, 65H, 3DH, 25H, 64H, 20H, 69H
   \              0x65 0x3D    
   \              0x25 0x64    
   \              0x20 0x69    
   \   00000028   0x6E 0x6A          DC8 6EH, 6AH, 65H, 63H, 74H, 6FH, 6EH, 53H
   \              0x65 0x63    
   \              0x74 0x6F    
   \              0x6E 0x53    
   \   00000030   0x63 0x68          DC8 63H, 68H, 54H, 69H, 6DH, 65H, 3DH, 25H
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x3D 0x25    
   \   00000038   0x64 0x00          DC8 64H, 0
   \   0000003A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "mapTime=%d/hipTime=%d...">`:
   \   00000000   0x6D 0x61          DC8 6DH, 61H, 70H, 54H, 69H, 6DH, 65H, 3DH
   \              0x70 0x54    
   \              0x69 0x6D    
   \              0x65 0x3D    
   \   00000008   0x25 0x64          DC8 25H, 64H, 2FH, 68H, 69H, 70H, 54H, 69H
   \              0x2F 0x68    
   \              0x69 0x70    
   \              0x54 0x69    
   \   00000010   0x6D 0x65          DC8 6DH, 65H, 3DH, 25H, 64H, 2FH, 72H, 70H
   \              0x3D 0x25    
   \              0x64 0x2F    
   \              0x72 0x70    
   \   00000018   0x6D 0x54          DC8 6DH, 54H, 69H, 6DH, 65H, 3DH, 25H, 64H
   \              0x69 0x6D    
   \              0x65 0x3D    
   \              0x25 0x64    
   \   00000020   0x2F 0x6D          DC8 2FH, 6DH, 61H, 69H, 6EH, 54H, 72H, 69H
   \              0x61 0x69    
   \              0x6E 0x54    
   \              0x72 0x69    
   \   00000028   0x67 0x67          DC8 67H, 67H, 65H, 72H, 43H, 61H, 6CH, 6CH
   \              0x65 0x72    
   \              0x43 0x61    
   \              0x6C 0x6C    
   \   00000030   0x62 0x61          DC8 62H, 61H, 63H, 6BH, 54H, 69H, 6DH, 65H
   \              0x63 0x6B    
   \              0x54 0x69    
   \              0x6D 0x65    
   \   00000038   0x3D 0x25          DC8 3DH, 25H, 64H, 0
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "maxLockTime=%d / maxT...">`:
   \   00000000   0x6D 0x61          DC8 "maxLockTime=%d / maxTriggerReentraint=%d"
   \              0x78 0x4C    
   \              0x6F 0x63    
   \              0x6B 0x54    
   \              0x69 0x6D    
   \              0x65 0x3D    
   \              0x25 0x64    
   \              0x20 0x2F    
   \              0x20 0x6D    
   \              0x61 0x78    
   \              0x54 0x72    
   \              0x69 0x67    
   \              0x67 0x65    
   \              0x72 0x52    
   \              0x65 0x65    
   \              0x6E 0x74    
   \              0x72 0x61    
   \              0x69 0x6E    
   \              0x74 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "maxEventQueueTime=%d">`:
   \   00000000   0x6D 0x61          DC8 "maxEventQueueTime=%d"
   \              0x78 0x45    
   \              0x76 0x65    
   \              0x6E 0x74    
   \              0x51 0x75    
   \              0x65 0x75    
   \              0x65 0x54    
   \              0x69 0x6D    
   \              0x65 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "hipLastExecutionCount=%d">`:
   \   00000000   0x68 0x69          DC8 "hipLastExecutionCount=%d"
   \              0x70 0x4C    
   \              0x61 0x73    
   \              0x74 0x45    
   \              0x78 0x65    
   \              0x63 0x75    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x43 0x6F    
   \              0x75 0x6E    
   \              0x74 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "hwSetTimerTime %d">`:
   \   00000000   0x68 0x77          DC8 "hwSetTimerTime %d"
   \              0x53 0x65    
   \              0x74 0x54    
   \              0x69 0x6D    
   \              0x65 0x72    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x20 0x25    
   \              0x64 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "totalTriggerHandlerMa...">`:
   \   00000000   0x74 0x6F          DC8 "totalTriggerHandlerMaxTime=%d"
   \              0x74 0x61    
   \              0x6C 0x54    
   \              0x72 0x69    
   \              0x67 0x67    
   \              0x65 0x72    
   \              0x48 0x61    
   \              0x6E 0x64    
   \              0x6C 0x65    
   \              0x72 0x4D    
   \              0x61 0x78    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   0x78 0x5F          DC8 "x_"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "triggerinfo">`:
   \   00000000   0x74 0x72          DC8 "triggerinfo"
   \              0x69 0x67    
   \              0x67 0x65    
   \              0x72 0x69    
   \              0x6E 0x66    
   \              0x6F 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "trigger_shape_info">`:
   \   00000000   0x74 0x72          DC8 "trigger_shape_info"
   \              0x69 0x67    
   \              0x67 0x65    
   \              0x72 0x5F    
   \              0x73 0x68    
   \              0x61 0x70    
   \              0x65 0x5F    
   \              0x69 0x6E    
   \              0x66 0x6F    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "reset_trigger">`:
   \   00000000   0x72 0x65          DC8 "reset_trigger"
   \              0x73 0x65    
   \              0x74 0x5F    
   \              0x74 0x72    
   \              0x69 0x67    
   \              0x67 0x65    
   \              0x72 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "registerCkpListener: ...">`:
   \   00000000   0x72 0x65          DC8 "registerCkpListener: %s\015\012"
   \              0x67 0x69    
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x43 0x6B    
   \              0x70 0x4C    
   \              0x69 0x73    
   \              0x74 0x65    
   \              0x6E 0x65    
   \              0x72 0x3A    
   \              0x20 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "configuration">`:
   \   00000000   0x63 0x6F          DC8 "configuration"
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x75 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "engineConfiguration">`:
   \   00000000   0x65 0x6E          DC8 "engineConfiguration"
   \              0x67 0x69    
   \              0x6E 0x65    
   \              0x43 0x6F    
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x75 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "engineConfiguration2">`:
   \   00000000   0x65 0x6E          DC8 "engineConfiguration2"
   \              0x67 0x69    
   \              0x6E 0x65    
   \              0x43 0x6F    
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x75 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x32    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "signal type">`:
   \   00000000   0x73 0x69          DC8 "signal type"
   \              0x67 0x6E    
   \              0x61 0x6C    
   \              0x20 0x74    
   \              0x79 0x70    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "unexpected eventIndex=%d">`:
   \   00000000   0x75 0x6E          DC8 "unexpected eventIndex=%d"
   \              0x65 0x78    
   \              0x70 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x65    
   \              0x76 0x65    
   \              0x6E 0x74    
   \              0x49 0x6E    
   \              0x64 0x65    
   \              0x78 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    409          
    410          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   TriggerCentral::TriggerCentral()
         8   -> IntListenerArray::IntListenerArray()
         8   -> TriggerState::TriggerState()
         8   -> clearCallbacks(IntListenerArray *)
         8   -> memset
      24   TriggerCentral::addEventListener(ShaftPositionListener, char const *, Engine *)
        24   -> IntListenerArray::registerCallback(VoidInt, void *)
        24   -> print
       0   TriggerCentral::getHwEventCounter(int)
      32   TriggerCentral::handleShaftSignal(trigger_event_e)
        32   -- Indirect call
        32   -> Engine::onTriggerEvent(int64_t)
        32   -> TriggerState::decodeTriggerEvent(trigger_event_e, int64_t)
        32   -> TriggerState::getCurrentIndex()
        32   -> TriggerState::getTotalRevolutionCounter()
        32   -> firmwareError
        32   -> getTimeNowNt
        32   -> reportEventToWaveChart(trigger_event_e, int)
        32   -> warning
       8   TriggerCentral::resetCounters()
         8   -> TriggerState::resetRunningCounters()
         8   -> memset
       8   TriggerCentral::subobject TriggerCentral()
         8   -> TriggerCentral::TriggerCentral()
       8   __sti__routine()
         8   -> TriggerCentral::TriggerCentral()
         8   -> WaveChart::WaveChart()
      16   addTriggerEventListener(ShaftPositionListener, char const *, Engine *)
        16   -> TriggerCentral::addEventListener(ShaftPositionListener, char const *, Engine *)
       8   getCrankEventCounter()
         8   -> TriggerState::getTotalEventCounter()
       8   getStartOfRevolutionIndex()
         8   -> TriggerState::getStartOfRevolutionIndex()
       8   getTriggerDutyCycle(int)
         8   -> TriggerState::getTriggerDutyCycle(int)
       8   hwHandleShaftSignal(trigger_event_e)
         8   -> TriggerCentral::handleShaftSignal(trigger_event_e)
         8   -> firmwareError
         8   -> getRemainingStack
      16   initTriggerCentral(Logging *, Engine *)
        16   -> addConsoleAction
        16   -> initWaveChart(WaveChart *)
        16   -> strcpy
      16   memset
        16   -> __aeabi_memset
       8   printAllCallbacksHistogram()
         8   -> printHistogram(Logging *, histogram_s *)
      16   reportEventToWaveChart(trigger_event_e, int)
        16   -> WaveChart::addWaveChartEvent3(char const *, char const *)
        16   -> itoa10
       8   resetRunningTriggerCounters()
         8   -> TriggerCentral::resetCounters()
         8   -> triggerInfo()
      40   triggerInfo()
        40   -> TriggerCentral::getHwEventCounter(int)
        40   -> TriggerState::getTotalRevolutionCounter()
        40   -> __aeabi_f2d
        40   -> boolToString(bool)
        40   -> getConfigurationName(engine_type_e)
        40   -> getPin_output_mode_e(pin_output_mode_e)
        40   -> getTrigger_type_e(trigger_type_e)
        40   -> hwPortname(brain_pin_e)
        40   -> isTriggerDecoderError()
        40   -> scheduleMsg
      24   triggerShapeInfo()
        24   -> TriggerShape::getSize() const
        24   -> __aeabi_f2d
        24   -> boolToString(bool)
        24   -> scheduleMsg


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      64  ?<Constant "Template %s (%d) trig...">
      44  ?<Constant "advanceLookupTime=%d ...">
      16  ?<Constant "configuration">
      20  ?<Constant "engineConfiguration">
      24  ?<Constant "engineConfiguration2">
      12  ?<Constant "event %d %f">
      32  ?<Constant "expected cycle events...">
      28  ?<Constant "expected duty #0=%f/#...">
      20  ?<Constant "gap from %f to %f">
      28  ?<Constant "hipLastExecutionCount=%d">
      20  ?<Constant "hwSetTimerTime %d">
      60  ?<Constant "ignitionMathTime=%d i...">
      12  ?<Constant "lowstck#8">
      60  ?<Constant "mapTime=%d/hipTime=%d...">
      24  ?<Constant "maxEventQueueTime=%d">
      44  ?<Constant "maxLockTime=%d / maxT...">
      24  ?<Constant "primary logic input: %s">
      28  ?<Constant "primary trigger input...">
      44  ?<Constant "primary trigger simul...">
      28  ?<Constant "registerCkpListener: ...">
      16  ?<Constant "reset_trigger">
      28  ?<Constant "secondary logic input...">
      28  ?<Constant "secondary trigger inp...">
      44  ?<Constant "secondary trigger sim...">
      12  ?<Constant "signal type">
      92  ?<Constant "synchronizationNeeded...">
       4  ?<Constant "t1">
       4  ?<Constant "t2">
       4  ?<Constant "t3">
      20  ?<Constant "total %d/skipped %d">
      32  ?<Constant "totalTriggerHandlerMa...">
      32  ?<Constant "trigger error extra L...">
      36  ?<Constant "trigger type=%d/need2...">
      40  ?<Constant "trigger#1 event count...">
      40  ?<Constant "trigger#2 event count...">
      20  ?<Constant "trigger_shape_info">
      12  ?<Constant "triggerinfo">
      28  ?<Constant "unexpected eventIndex=%d">
      12  ?<Constant "useRise=%s">
       4  ?<Constant "x_">
      32  ?<Constant "zeroTestTime=%d maxHo...">
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_10
       4  ??DataTable13_11
       4  ??DataTable13_12
       4  ??DataTable13_13
       4  ??DataTable13_14
       4  ??DataTable13_15
       4  ??DataTable13_16
       4  ??DataTable13_17
       4  ??DataTable13_18
       4  ??DataTable13_19
       4  ??DataTable13_2
       4  ??DataTable13_20
       4  ??DataTable13_21
       4  ??DataTable13_22
       4  ??DataTable13_23
       4  ??DataTable13_24
       4  ??DataTable13_25
       4  ??DataTable13_26
       4  ??DataTable13_27
       4  ??DataTable13_28
       4  ??DataTable13_29
       4  ??DataTable13_3
       4  ??DataTable13_30
       4  ??DataTable13_31
       4  ??DataTable13_32
       4  ??DataTable13_33
       4  ??DataTable13_34
       4  ??DataTable13_35
       4  ??DataTable13_36
       4  ??DataTable13_37
       4  ??DataTable13_38
       4  ??DataTable13_39
       4  ??DataTable13_4
       4  ??DataTable13_40
       4  ??DataTable13_41
       4  ??DataTable13_42
       4  ??DataTable13_43
       4  ??DataTable13_44
       4  ??DataTable13_45
       4  ??DataTable13_46
       4  ??DataTable13_47
       4  ??DataTable13_48
       4  ??DataTable13_49
       4  ??DataTable13_5
       4  ??DataTable13_50
       4  ??DataTable13_51
       4  ??DataTable13_52
       4  ??DataTable13_53
       4  ??DataTable13_54
       4  ??DataTable13_55
       4  ??DataTable13_56
       4  ??DataTable13_57
       4  ??DataTable13_58
       4  ??DataTable13_59
       4  ??DataTable13_6
       4  ??DataTable13_60
       4  ??DataTable13_61
       4  ??DataTable13_62
       4  ??DataTable13_63
       4  ??DataTable13_64
       4  ??DataTable13_65
       4  ??DataTable13_66
       4  ??DataTable13_67
       4  ??DataTable13_68
       4  ??DataTable13_69
       4  ??DataTable13_7
       4  ??DataTable13_70
       4  ??DataTable13_8
       4  ??DataTable13_9
      50  TriggerCentral::TriggerCentral()
      34  TriggerCentral::addEventListener(ShaftPositionListener, char const *, Engine *)
      10  TriggerCentral::getHwEventCounter(int)
     344  TriggerCentral::handleShaftSignal(trigger_event_e)
      24  TriggerCentral::resetCounters()
      12  TriggerCentral::subobject TriggerCentral()
      20  __sti__routine()
      24  addTriggerEventListener(ShaftPositionListener, char const *, Engine *)
      24  eventId
      12  getCrankEventCounter()
      12  getStartOfRevolutionIndex()
      14  getTriggerDutyCycle(int)
     174  hwHandleShaftSignal(trigger_event_e)
      50  initTriggerCentral(Logging *, Engine *)
       8  isUpEvent
       4  logger
       4  maxTriggerReentraint
      22  memset
       8  previousShaftEventTimeNt
      18  printAllCallbacksHistogram()
     128  reportEventToWaveChart(trigger_event_e, int)
      14  resetRunningTriggerCounters()
      16  shaft_signal_msg_index
    3616  triggerCallback
     344  triggerCentral
       4  triggerDuration
       4  triggerHanlderEntryTime
     980  triggerInfo()
       4  triggerMaxDuration
       4  triggerReentraint
     126  triggerShapeInfo()
      80  waveChart
       4  -- Other

 
 4 080 bytes in section .bss
    40 bytes in section .data
     4 bytes in section .init_array
 1 172 bytes in section .rodata
 2 352 bytes in section .text
 
 2 334 bytes of CODE  memory (+ 22 bytes shared)
 1 172 bytes of CONST memory
 4 120 bytes of DATA  memory

Errors: none
Warnings: 1
